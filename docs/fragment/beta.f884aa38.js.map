{"version":3,"sources":["../src/options.js","../src/constants.js","../src/create-element.js","../src/component.js","../src/render.js","../src/create-context.js","../src/util.js","../src/diff/children.js","../src/diff/props.js","../src/diff/index.js","../src/clone-element.js","../src/diff/catch-error.js","../src/index.js","../../../node_modules/material-colors/dist/colors.es2015.js","../../../node_modules/@dipl/dom-vis/src/colors.ts","../../../node_modules/@dipl/dom-vis/src/components/Theming.tsx","../../../node_modules/@dipl/dom-vis/src/components/InputLabel.tsx","../../../node_modules/@dipl/dom-vis/src/hooks/useEvent.ts","../../../node_modules/@dipl/dom-vis/src/hooks/useHover.ts","../../../node_modules/@dipl/dom-vis/src/hooks/useFocus.ts","../../../node_modules/@dipl/dom-vis/src/components/InputField.tsx","../../../node_modules/@dipl/dom-vis/src/components/SelectField.tsx","../../../node_modules/@dipl/dom-vis/src/components/InputButton.tsx","../../../node_modules/@dipl/dom-vis/src/components/Fieldset.tsx","../../../node_modules/@dipl/lib-core/index.ts","../../../node_modules/@dipl/dom-vis/src/components/InputDivider.tsx","../../../node_modules/@dipl/dom-vis/src/components/InputCheckbox.tsx","../../../node_modules/@dipl/dom-vis/src/input.tsx","../../../node_modules/@dipl/utils-adsr/index.ts","../../../node_modules/@dipl/utils-binary-search/index.ts","../../../node_modules/@dipl/dom-play/src/synth.ts","../../../node_modules/@dipl/utils-cached/index.ts","../../../node_modules/@dipl/utils-pitch/index.ts","../../../node_modules/audio-loader/lib/base64.js","../../../node_modules/is-buffer/index.js","../../../node_modules/audio-loader/lib/load.js","../../../node_modules/audio-context/index.js","../../../node_modules/audio-loader/lib/browser.js","../../../node_modules/@dipl/dom-play/src/loader.ts","../../../node_modules/@dipl/dom-play/src/sampler.ts","../../../node_modules/@dipl/utils-timeline/index.ts","../../../node_modules/@dipl/utils-peeking-iterator/index.ts","../../../node_modules/@dipl/utils-scheduler/index.ts","../../../node_modules/@dipl/dom-play/src/player.ts","../../../node_modules/@dipl/dom-play/src/render.ts","../../../node_modules/@dipl/dom-play/index.ts","../../../node_modules/@dipl/dom-vis/src/components/Shape.tsx","../../../node_modules/@dipl/dom-vis/src/components/Fill.tsx","../../../node_modules/@dipl/dom-vis/src/components/LineView.tsx","../../../node_modules/@dipl/dom-vis/src/components/NoteView.tsx","../../../node_modules/@dipl/dom-vis/src/components/Label.ts","../../../node_modules/@dipl/utils-linear/index.ts","../../../node_modules/@dipl/dom-vis/src/hooks/usePointer.ts","../../../node_modules/@dipl/dom-vis/src/hooks/useCrosshair.ts","../../../node_modules/@dipl/utils-modulo/index.ts","../../../node_modules/@dipl/dom-vis/src/components/Crosshair.tsx","../../../node_modules/@dipl/dom-vis/src/components/IconButton.tsx","../../../node_modules/react-icons/lib/esm/iconsManifest.js","../src/PureComponent.js","../src/memo.js","../src/forwardRef.js","../src/Children.js","../src/suspense.js","../src/suspense-list.js","../src/portals.js","../../../node_modules/react-icons/lib/esm/iconContext.js","../../../node_modules/react-icons/lib/esm/iconBase.js","../../../node_modules/react-icons/lib/esm/index.js","../../../node_modules/react-icons/md/index.esm.js","../../../node_modules/audio-encoder/src/encodeWav.js","../../../node_modules/lamejs/src/js/common.js","../../../node_modules/lamejs/src/js/NewMDCT.js","../../../node_modules/lamejs/src/js/III_psy_xmin.js","../../../node_modules/lamejs/src/js/III_psy_ratio.js","../../../node_modules/lamejs/src/js/Encoder.js","../../../node_modules/lamejs/src/js/FFT.js","../../../node_modules/lamejs/src/js/PsyModel.js","../../../node_modules/lamejs/src/js/MPEGMode.js","../../../node_modules/lamejs/src/js/LameGlobalFlags.js","../../../node_modules/lamejs/src/js/L3Side.js","../../../node_modules/lamejs/src/js/GrInfo.js","../../../node_modules/lamejs/src/js/IIISideInfo.js","../../../node_modules/lamejs/src/js/ScaleFac.js","../../../node_modules/lamejs/src/js/NsPsy.js","../../../node_modules/lamejs/src/js/VBRSeekInfo.js","../../../node_modules/lamejs/src/js/LameInternalFlags.js","../../../node_modules/lamejs/src/js/ATH.js","../../../node_modules/lamejs/src/js/GainAnalysis.js","../../../node_modules/lamejs/src/js/ReplayGain.js","../../../node_modules/lamejs/src/js/MeanBits.js","../../../node_modules/lamejs/src/js/CBRNewIterationLoop.js","../../../node_modules/lamejs/src/js/Tables.js","../../../node_modules/lamejs/src/js/QuantizePVT.js","../../../node_modules/lamejs/src/js/Takehiro.js","../../../node_modules/lamejs/src/js/BitStream.js","../../../node_modules/lamejs/src/js/Lame.js","../../../node_modules/lamejs/src/js/Presets.js","../../../node_modules/lamejs/src/js/VBRQuantize.js","../../../node_modules/lamejs/src/js/CalcNoiseResult.js","../../../node_modules/lamejs/src/js/CalcNoiseData.js","../../../node_modules/lamejs/src/js/Quantize.js","../../../node_modules/lamejs/src/js/Reservoir.js","../../../node_modules/lamejs/src/js/Version.js","../../../node_modules/lamejs/src/js/VBRTag.js","../../../node_modules/lamejs/src/js/index.js","../../../node_modules/audio-encoder/src/encodeMp3.js","../../../node_modules/audio-encoder/src/index.js","../../../node_modules/@dipl/dom-vis/src/components/AudioDownloader.tsx","../../../node_modules/@dipl/dom-vis/src/components/Downloader.tsx","../../../node_modules/@dipl/dom-vis/src/hooks/useFrame.ts","../../../node_modules/@dipl/dom-vis/src/utils.ts","../../../node_modules/@dipl/dom-vis/src/components/Cursor.tsx","../../../node_modules/@dipl/dom-vis/src/components/Player.tsx","../../../node_modules/react-icons/cg/index.esm.js","../../../node_modules/@dipl/dom-vis/src/components/ThemeToggle.tsx","../../../node_modules/@dipl/dom-vis/src/components/Layout.tsx","../../../node_modules/@dipl/dom-vis/src/hooks/usePlayer.ts","../../../node_modules/@dipl/dom-vis/src/components/Vis.tsx","../../../node_modules/@dipl/dom-vis/src/vis.tsx","../../../node_modules/@dipl/dom-vis/index.ts","../../../node_modules/@dipl/utils-osc/index.ts","../../../node_modules/@dipl/lib-math/index.ts","../../../node_modules/@dipl/utils-diatonic/index.ts","../../../node_modules/@dipl/lib-constants/src/gleitz-fonts.ts","../../../node_modules/@dipl/lib-constants/src/instrument-names.ts","../../../node_modules/@dipl/lib-constants/src/percussion-names.ts","../../../node_modules/@dipl/lib-constants/src/accidental.ts","../../../node_modules/@dipl/lib-constants/src/interval.ts","../../../node_modules/@dipl/lib-constants/src/chord.ts","../../../node_modules/@dipl/lib-constants/src/chroma.ts","../../../node_modules/@dipl/lib-constants/src/gleitz-pack.ts","../../../node_modules/@dipl/lib-constants/src/harmony.ts","../../../node_modules/@dipl/lib-constants/src/instrument.ts","../../../node_modules/@dipl/lib-constants/src/instrument-family.ts","../../../node_modules/@dipl/lib-constants/src/meter.ts","../../../node_modules/@dipl/lib-constants/src/mode.ts","../../../node_modules/@dipl/lib-constants/src/octave.ts","../../../node_modules/@dipl/lib-constants/src/ordinal.ts","../../../node_modules/@dipl/lib-constants/src/percussion.ts","../../../node_modules/@dipl/lib-constants/src/pitch.ts","../../../node_modules/@dipl/lib-constants/src/roman.ts","../../../node_modules/@dipl/lib-constants/src/tempo.ts","../../../node_modules/@dipl/lib-constants/index.ts","../../../node_modules/@dipl/lib-music/index.ts","../../../node_modules/seed-random/index.js","../../../node_modules/@dipl/utils-weighted/index.ts","../../../node_modules/@dipl/lib-rng/index.ts","../../../node_modules/@dipl/demo-alpha/src/drums.ts","grammar.ts","index.ts"],"names":["options","isValidElement","rerenderQueue","defer","prevDebounce","IS_HYDRATE","i","EMPTY_OBJ","EMPTY_ARR","IS_NON_DIMENSIONAL","assign","obj","props","removeNode","node","parentNode","removeChild","createElement","type","children","key","ref","normalizedProps","arguments","length","push","defaultProps","createVNode","original","vnode","undefined","constructor","createRef","current","Fragment","Component","context","getDomSibling","childIndex","indexOf","sibling","updateParentDomPointers","child","base","enqueueRender","c","process","debounceRendering","queue","sort","a","b","some","component","commitQueue","oldVNode","oldDom","parentDom","diff","ownerSVGElement","commitRoot","diffChildren","renderResult","newParentVNode","oldParentVNode","globalContext","isSvg","excessDomChildren","isHydrating","j","childVNode","newDom","firstChildDom","refs","oldChildren","oldChildrenLength","Array","isArray","reorderChildren","placeChild","value","unmount","applyRef","tmp","toChildArray","out","nextDom","sibDom","outer","appendChild","nextSibling","insertBefore","diffProps","dom","newProps","oldProps","hydrate","setProperty","setStyle","style","test","name","oldValue","useCapture","nameLower","proxy","cssText","replace","toLowerCase","slice","_listeners","eventProxyCapture","eventProxy","addEventListener","removeEventListener","removeAttributeNS","setAttributeNS","removeAttribute","setAttribute","e","event","newVNode","isNew","oldState","snapshot","clearProcessingException","provider","componentContext","newType","contextType","prototype","render","doRender","sub","state","getDerivedStateFromProps","componentWillMount","componentDidMount","componentWillReceiveProps","shouldComponentUpdate","componentWillUpdate","componentDidUpdate","getChildContext","getSnapshotBeforeUpdate","diffElementNodes","diffed","root","cb","call","oldHtml","newHtml","nodeType","localName","document","createTextNode","createElementNS","is","data","childNodes","dangerouslySetInnerHTML","attributes","innerHTML","checked","parentVNode","skipRemove","r","componentWillUnmount","this","replaceNode","cloneElement","createContext","defaultValue","contextId","Consumer","contextValue","Provider","subs","ctx","_props","old","splice","error","ctor","handled","wasHydrating","getDerivedStateFromError","setState","componentDidCatch","update","callback","s","forceUpdate","Promise","then","bind","resolve","setTimeout","f","currentIndex","currentComponent","prevRaf","currentHook","afterPaintEffects","oldBeforeDiff","oldBeforeRender","oldAfterDiff","oldCommit","oldBeforeUnmount","getHookState","index","hooks","useState","initialState","useReducer","invokeOrReturn","reducer","init","hookState","_reducer","action","nextValue","useEffect","args","argsChanged","useLayoutEffect","useRef","initialValue","useMemo","useImperativeHandle","createHandle","concat","factory","useCallback","useContext","useDebugValue","formatter","useErrorBoundary","errState","err","flushAfterPaintEffects","forEach","invokeCleanup","invokeEffect","requestAnimationFrame","raf","done","clearTimeout","timeout","HAS_RAF","cancelAnimationFrame","filter","hook","comp","oldArgs","newArgs","arg","red","pink","purple","deepPurple","indigo","blue","lightBlue","cyan","teal","green","lightGreen","lime","yellow","amber","orange","deepOrange","brown","grey","blueGrey","darkText","lightText","darkIcons","lightIcons","white","black","IconsManifest","shallowDiffers","PureComponent","p","memo","comparer","shouldUpdate","nextProps","updateRef","Memoed","displayName","isReactComponent","isPureReactComponent","oldDiffHook","REACT_FORWARD_SYMBOL","Symbol","for","forwardRef","fn","Forwarded","clone","$$typeof","mapFn","map","Children","count","only","normalized","toArray","oldCatchError","detachedClone","effect","removeOriginal","Suspense","_suspenders","suspended","lazy","loader","prom","Lazy","exports","default","SuspenseList","_next","_map","promise","suspendingVNode","suspendingComponent","resolved","onResolved","onSuspensionComplete","pop","fallback","list","delete","revealOrder","size","ContextProvider","Portal","_this","container","_container","_temp","before","createPortal","delegated","get","unsuspend","wrappedUnsuspend","Map","reverse","set","REACT_ELEMENT_TYPE","CAMEL_PROPS","onChangeInputType","parent","textContent","preactRender","preactHydrate","Object","defineProperty","configurable","v","writable","oldEventHook","empty","isPropagationStopped","cancelBubble","isDefaultPrevented","defaultPrevented","persist","nativeEvent","classNameDescriptor","class","oldVNodeHook","multiple","selected","className","enumerable","__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED","ReactCurrentDispatcher","readContext","version","createFactory","element","preactCloneElement","apply","unmountComponentAtNode","findDOMNode","unstable_batchedUpdates","StrictMode","DefaultContext","color","attr","IconContext","React","__assign","t","n","hasOwnProperty","__rest","getOwnPropertySymbols","propertyIsEnumerable","Tree2Element","tree","tag","GenIcon","IconBase","elem","conf","title","svgProps","computedSize","stroke","fill","strokeWidth","height","width","xmlns","Md3DRotation","MdAccessibility","MdAccessible","MdAccountBalance","MdAccountBalanceWallet","MdAccountBox","MdAccountCircle","MdAddShoppingCart","MdAlarm","MdAlarmAdd","MdAlarmOff","MdAlarmOn","MdAllOut","MdAndroid","MdAnnouncement","MdAspectRatio","MdAssessment","MdAssignment","MdAssignmentInd","MdAssignmentLate","MdAssignmentReturn","MdAssignmentReturned","MdAssignmentTurnedIn","MdAutorenew","MdBackup","MdBook","MdBookmark","MdBookmarkBorder","MdBugReport","MdBuild","MdCached","MdCameraEnhance","MdCardGiftcard","MdCardMembership","MdCardTravel","MdChangeHistory","MdCheckCircle","MdChromeReaderMode","MdClass","MdCode","MdCompareArrows","MdCopyright","MdCreditCard","MdDashboard","MdDateRange","MdDelete","MdDeleteForever","MdDescription","MdDns","MdDone","MdDoneAll","MdDonutLarge","MdDonutSmall","MdEject","MdEuroSymbol","MdEvent","MdEventSeat","MdExitToApp","MdExplore","MdExtension","MdFace","MdFavorite","MdFavoriteBorder","MdFeedback","MdFindInPage","MdFindReplace","MdFingerprint","MdFlightLand","MdFlightTakeoff","MdFlipToBack","MdFlipToFront","MdGTranslate","MdGavel","MdGetApp","MdGif","MdGrade","MdGroupWork","MdHelp","MdHelpOutline","MdHighlightOff","MdHistory","MdHome","MdHourglassEmpty","MdHourglassFull","MdHttp","MdHttps","MdImportantDevices","MdInfo","MdInfoOutline","MdInput","MdInvertColors","MdLabel","MdLabelOutline","MdLanguage","MdLaunch","MdLightbulbOutline","MdLineStyle","MdLineWeight","MdList","MdLock","MdLockOpen","MdLockOutline","MdLoyalty","MdMarkunreadMailbox","MdMotorcycle","MdNoteAdd","MdOfflinePin","MdOpacity","MdOpenInBrowser","MdOpenInNew","MdOpenWith","MdPageview","MdPanTool","MdPayment","MdPermCameraMic","MdPermContactCalendar","MdPermDataSetting","MdPermDeviceInformation","MdPermIdentity","MdPermMedia","MdPermPhoneMsg","MdPermScanWifi","MdPets","MdPictureInPicture","MdPictureInPictureAlt","MdPlayForWork","MdPolymer","MdPowerSettingsNew","MdPregnantWoman","MdPrint","MdQueryBuilder","MdQuestionAnswer","MdReceipt","MdRecordVoiceOver","MdRedeem","MdRemoveShoppingCart","MdReorder","MdReportProblem","MdRestore","MdRestorePage","MdRoom","MdRoundedCorner","MdRowing","MdSchedule","MdSearch","MdSettings","MdSettingsApplications","MdSettingsBackupRestore","MdSettingsBluetooth","MdSettingsBrightness","MdSettingsCell","MdSettingsEthernet","MdSettingsInputAntenna","MdSettingsInputComponent","MdSettingsInputComposite","MdSettingsInputHdmi","MdSettingsInputSvideo","MdSettingsOverscan","MdSettingsPhone","MdSettingsPower","MdSettingsRemote","MdSettingsVoice","MdShop","MdShopTwo","MdShoppingBasket","MdShoppingCart","MdSpeakerNotes","MdSpeakerNotesOff","MdSpellcheck","MdStars","MdStore","MdSubject","MdSupervisorAccount","MdSwapHoriz","MdSwapVert","MdSwapVerticalCircle","MdSystemUpdateAlt","MdTab","MdTabUnselected","MdTheaters","MdThumbDown","MdThumbUp","MdThumbsUpDown","MdTimeline","MdToc","MdToday","MdToll","MdTouchApp","MdTrackChanges","MdTranslate","MdTrendingDown","MdTrendingFlat","MdTrendingUp","MdTurnedIn","MdTurnedInNot","MdUpdate","MdVerifiedUser","MdViewAgenda","MdViewArray","MdViewCarousel","MdViewColumn","MdViewDay","MdViewHeadline","MdViewList","MdViewModule","MdViewQuilt","MdViewStream","MdViewWeek","MdVisibility","MdVisibilityOff","MdWatchLater","MdWork","MdYoutubeSearchedFor","MdZoomIn","MdZoomOut","MdAddAlert","MdError","MdErrorOutline","MdWarning","MdAddToQueue","MdAirplay","MdAlbum","MdArtTrack","MdAvTimer","MdBrandingWatermark","MdCallToAction","MdClosedCaption","MdEqualizer","MdExplicit","MdFastForward","MdFastRewind","MdFeaturedPlayList","MdFeaturedVideo","MdFiberDvr","MdFiberManualRecord","MdFiberNew","MdFiberPin","MdFiberSmartRecord","MdForward10","MdForward30","MdForward5","MdGames","MdHd","MdHearing","MdHighQuality","MdLibraryAdd","MdLibraryBooks","MdLibraryMusic","MdLoop","MdMic","MdMicNone","MdMicOff","MdMovie","MdMusicVideo","MdNewReleases","MdNotInterested","MdNote","MdPause","MdPauseCircleFilled","MdPauseCircleOutline","MdPlayArrow","MdPlayCircleFilled","MdPlayCircleOutline","MdPlaylistAdd","MdPlaylistAddCheck","MdPlaylistPlay","MdQueue","MdQueueMusic","MdQueuePlayNext","MdRadio","MdRecentActors","MdRemoveFromQueue","MdRepeat","MdRepeatOne","MdReplay10","MdReplay","MdReplay30","MdReplay5","MdShuffle","MdSkipNext","MdSkipPrevious","MdSlowMotionVideo","MdSnooze","MdSortByAlpha","MdStop","MdSubscriptions","MdSubtitles","MdSurroundSound","MdVideoCall","MdVideoLabel","MdVideoLibrary","MdVideocam","MdVideocamOff","MdVolumeDown","MdVolumeMute","MdVolumeOff","MdVolumeUp","MdWeb","MdWebAsset","MdBusiness","MdCall","MdCallEnd","MdCallMade","MdCallMerge","MdCallMissed","MdCallMissedOutgoing","MdCallReceived","MdCallSplit","MdChat","MdChatBubble","MdChatBubbleOutline","MdClearAll","MdComment","MdContactMail","MdContactPhone","MdContacts","MdDialerSip","MdDialpad","MdEmail","MdForum","MdImportContacts","MdImportExport","MdInvertColorsOff","MdLiveHelp","MdLocationOff","MdLocationOn","MdMailOutline","MdMessage","MdNoSim","MdPhone","MdPhonelinkErase","MdPhonelinkLock","MdPhonelinkRing","MdPhonelinkSetup","MdPortableWifiOff","MdPresentToAll","MdRingVolume","MdRssFeed","MdScreenShare","MdSpeakerPhone","MdStayCurrentLandscape","MdStayCurrentPortrait","MdStayPrimaryLandscape","MdStayPrimaryPortrait","MdStopScreenShare","MdSwapCalls","MdTextsms","MdVoicemail","MdVpnKey","MdAdd","MdAddBox","MdAddCircle","MdAddCircleOutline","MdArchive","MdBackspace","MdBlock","MdClear","MdContentCopy","MdContentCut","MdContentPaste","MdCreate","MdDeleteSweep","MdDrafts","MdFilterList","MdFlag","MdFontDownload","MdForward","MdGesture","MdInbox","MdLink","MdLowPriority","MdMail","MdMarkunread","MdMoveToInbox","MdNextWeek","MdRedo","MdRemove","MdRemoveCircle","MdRemoveCircleOutline","MdReply","MdReplyAll","MdReport","MdSave","MdSelectAll","MdSend","MdSort","MdTextFormat","MdUnarchive","MdUndo","MdWeekend","MdAccessAlarm","MdAccessAlarms","MdAccessTime","MdAddAlarm","MdAirplanemodeActive","MdAirplanemodeInactive","MdBattery20","MdBattery30","MdBattery50","MdBattery60","MdBattery80","MdBattery90","MdBatteryAlert","MdBatteryCharging20","MdBatteryCharging30","MdBatteryCharging50","MdBatteryCharging60","MdBatteryCharging80","MdBatteryCharging90","MdBatteryChargingFull","MdBatteryFull","MdBatteryStd","MdBatteryUnknown","MdBluetooth","MdBluetoothConnected","MdBluetoothDisabled","MdBluetoothSearching","MdBrightnessAuto","MdBrightnessHigh","MdBrightnessLow","MdBrightnessMedium","MdDataUsage","MdDeveloperMode","MdDevices","MdDvr","MdGpsFixed","MdGpsNotFixed","MdGpsOff","MdGraphicEq","MdLocationDisabled","MdLocationSearching","MdNetworkCell","MdNetworkWifi","MdNfc","MdScreenLockLandscape","MdScreenLockPortrait","MdScreenLockRotation","MdScreenRotation","MdSdStorage","MdSettingsSystemDaydream","MdSignalCellular0Bar","MdSignalCellular1Bar","MdSignalCellular2Bar","MdSignalCellular3Bar","MdSignalCellular4Bar","MdSignalCellularConnectedNoInternet0Bar","MdSignalCellularConnectedNoInternet1Bar","MdSignalCellularConnectedNoInternet2Bar","MdSignalCellularConnectedNoInternet3Bar","MdSignalCellularConnectedNoInternet4Bar","MdSignalCellularNoSim","MdSignalCellularNull","MdSignalCellularOff","MdSignalWifi0Bar","MdSignalWifi1Bar","MdSignalWifi1BarLock","MdSignalWifi2Bar","MdSignalWifi2BarLock","MdSignalWifi3Bar","MdSignalWifi3BarLock","MdSignalWifi4Bar","MdSignalWifi4BarLock","MdSignalWifiOff","MdStorage","MdUsb","MdWallpaper","MdWidgets","MdWifiLock","MdWifiTethering","MdAttachFile","MdAttachMoney","MdBorderAll","MdBorderBottom","MdBorderClear","MdBorderColor","MdBorderHorizontal","MdBorderInner","MdBorderLeft","MdBorderOuter","MdBorderRight","MdBorderStyle","MdBorderTop","MdBorderVertical","MdBubbleChart","MdDragHandle","MdFormatAlignCenter","MdFormatAlignJustify","MdFormatAlignLeft","MdFormatAlignRight","MdFormatBold","MdFormatClear","MdFormatColorFill","MdFormatColorReset","MdFormatColorText","MdFormatIndentDecrease","MdFormatIndentIncrease","MdFormatItalic","MdFormatLineSpacing","MdFormatListBulleted","MdFormatListNumbered","MdFormatPaint","MdFormatQuote","MdFormatShapes","MdFormatSize","MdFormatStrikethrough","MdFormatTextdirectionLToR","MdFormatTextdirectionRToL","MdFormatUnderlined","MdFunctions","MdHighlight","MdInsertChart","MdInsertComment","MdInsertDriveFile","MdInsertEmoticon","MdInsertInvitation","MdInsertLink","MdInsertPhoto","MdLinearScale","MdMergeType","MdModeComment","MdModeEdit","MdMonetizationOn","MdMoneyOff","MdMultilineChart","MdPieChart","MdPieChartOutlined","MdPublish","MdShortText","MdShowChart","MdSpaceBar","MdStrikethroughS","MdTextFields","MdTitle","MdVerticalAlignBottom","MdVerticalAlignCenter","MdVerticalAlignTop","MdWrapText","MdAttachment","MdCloud","MdCloudCircle","MdCloudDone","MdCloudDownload","MdCloudOff","MdCloudQueue","MdCloudUpload","MdCreateNewFolder","MdFileDownload","MdFileUpload","MdFolder","MdFolderOpen","MdFolderShared","MdCast","MdCastConnected","MdComputer","MdDesktopMac","MdDesktopWindows","MdDeveloperBoard","MdDeviceHub","MdDevicesOther","MdDock","MdGamepad","MdHeadset","MdHeadsetMic","MdKeyboard","MdKeyboardArrowDown","MdKeyboardArrowLeft","MdKeyboardArrowRight","MdKeyboardArrowUp","MdKeyboardBackspace","MdKeyboardCapslock","MdKeyboardHide","MdKeyboardReturn","MdKeyboardTab","MdKeyboardVoice","MdLaptop","MdLaptopChromebook","MdLaptopMac","MdLaptopWindows","MdMemory","MdMouse","MdPhoneAndroid","MdPhoneIphone","MdPhonelink","MdPhonelinkOff","MdPowerInput","MdRouter","MdScanner","MdSecurity","MdSimCard","MdSmartphone","MdSpeaker","MdSpeakerGroup","MdTablet","MdTabletAndroid","MdTabletMac","MdToys","MdTv","MdVideogameAsset","MdWatch","MdAddAPhoto","MdAddToPhotos","MdAdjust","MdAssistant","MdAssistantPhoto","MdAudiotrack","MdBlurCircular","MdBlurLinear","MdBlurOff","MdBlurOn","MdBrightness1","MdBrightness2","MdBrightness3","MdBrightness4","MdBrightness5","MdBrightness6","MdBrightness7","MdBrokenImage","MdBrush","MdBurstMode","MdCamera","MdCameraAlt","MdCameraFront","MdCameraRear","MdCameraRoll","MdCenterFocusStrong","MdCenterFocusWeak","MdCollections","MdCollectionsBookmark","MdColorLens","MdColorize","MdCompare","MdControlPoint","MdControlPointDuplicate","MdCrop169","MdCrop","MdCrop32","MdCrop54","MdCrop75","MdCropDin","MdCropFree","MdCropLandscape","MdCropOriginal","MdCropPortrait","MdCropRotate","MdCropSquare","MdDehaze","MdDetails","MdEdit","MdExposure","MdExposureNeg1","MdExposureNeg2","MdExposurePlus1","MdExposurePlus2","MdExposureZero","MdFilter1","MdFilter2","MdFilter","MdFilter3","MdFilter4","MdFilter5","MdFilter6","MdFilter7","MdFilter8","MdFilter9","MdFilter9Plus","MdFilterBAndW","MdFilterCenterFocus","MdFilterDrama","MdFilterFrames","MdFilterHdr","MdFilterNone","MdFilterTiltShift","MdFilterVintage","MdFlare","MdFlashAuto","MdFlashOff","MdFlashOn","MdFlip","MdGradient","MdGrain","MdGridOff","MdGridOn","MdHdrOff","MdHdrOn","MdHdrStrong","MdHdrWeak","MdHealing","MdImage","MdImageAspectRatio","MdIso","MdLandscape","MdLeakAdd","MdLeakRemove","MdLens","MdLinkedCamera","MdLooks","MdLooks3","MdLooks4","MdLooks5","MdLooks6","MdLooksOne","MdLooksTwo","MdLoupe","MdMonochromePhotos","MdMovieCreation","MdMovieFilter","MdMusicNote","MdNature","MdNaturePeople","MdNavigateBefore","MdNavigateNext","MdPalette","MdPanorama","MdPanoramaFishEye","MdPanoramaHorizontal","MdPanoramaVertical","MdPanoramaWideAngle","MdPhoto","MdPhotoAlbum","MdPhotoCamera","MdPhotoFilter","MdPhotoLibrary","MdPhotoSizeSelectActual","MdPhotoSizeSelectLarge","MdPhotoSizeSelectSmall","MdPictureAsPdf","MdPortrait","MdRemoveRedEye","MdRotate90DegreesCcw","MdRotateLeft","MdRotateRight","MdSlideshow","MdStraighten","MdStyle","MdSwitchCamera","MdSwitchVideo","MdTagFaces","MdTexture","MdTimelapse","MdTimer10","MdTimer","MdTimer3","MdTimerOff","MdTonality","MdTransform","MdTune","MdViewComfy","MdViewCompact","MdVignette","MdWbAuto","MdWbCloudy","MdWbIncandescent","MdWbIridescent","MdWbSunny","MdAddLocation","MdBeenhere","MdDirections","MdDirectionsBike","MdDirectionsBoat","MdDirectionsBus","MdDirectionsCar","MdDirectionsRailway","MdDirectionsRun","MdDirectionsSubway","MdDirectionsTransit","MdDirectionsWalk","MdEditLocation","MdEvStation","MdFlight","MdHotel","MdLayers","MdLayersClear","MdLocalActivity","MdLocalAirport","MdLocalAtm","MdLocalBar","MdLocalCafe","MdLocalCarWash","MdLocalConvenienceStore","MdLocalDining","MdLocalDrink","MdLocalFlorist","MdLocalGasStation","MdLocalGroceryStore","MdLocalHospital","MdLocalHotel","MdLocalLaundryService","MdLocalLibrary","MdLocalMall","MdLocalMovies","MdLocalOffer","MdLocalParking","MdLocalPharmacy","MdLocalPhone","MdLocalPizza","MdLocalPlay","MdLocalPostOffice","MdLocalPrintshop","MdLocalSee","MdLocalShipping","MdLocalTaxi","MdMap","MdMyLocation","MdNavigation","MdNearMe","MdPersonPin","MdPersonPinCircle","MdPinDrop","MdPlace","MdRateReview","MdRestaurant","MdRestaurantMenu","MdSatellite","MdStoreMallDirectory","MdStreetview","MdSubway","MdTerrain","MdTraffic","MdTrain","MdTram","MdTransferWithinAStation","MdZoomOutMap","MdApps","MdArrowBack","MdArrowDownward","MdArrowDropDown","MdArrowDropDownCircle","MdArrowDropUp","MdArrowForward","MdArrowUpward","MdCancel","MdCheck","MdChevronLeft","MdChevronRight","MdClose","MdExpandLess","MdExpandMore","MdFirstPage","MdFullscreen","MdFullscreenExit","MdLastPage","MdMenu","MdMoreHoriz","MdMoreVert","MdRefresh","MdSubdirectoryArrowLeft","MdSubdirectoryArrowRight","MdUnfoldLess","MdUnfoldMore","MdAdb","MdAirlineSeatFlat","MdAirlineSeatFlatAngled","MdAirlineSeatIndividualSuite","MdAirlineSeatLegroomExtra","MdAirlineSeatLegroomNormal","MdAirlineSeatLegroomReduced","MdAirlineSeatReclineExtra","MdAirlineSeatReclineNormal","MdBluetoothAudio","MdConfirmationNumber","MdDiscFull","MdDoNotDisturb","MdDoNotDisturbAlt","MdDoNotDisturbOff","MdDoNotDisturbOn","MdDriveEta","MdEnhancedEncryption","MdEventAvailable","MdEventBusy","MdEventNote","MdFolderSpecial","MdLiveTv","MdMms","MdMore","MdNetworkCheck","MdNetworkLocked","MdNoEncryption","MdOndemandVideo","MdPersonalVideo","MdPhoneBluetoothSpeaker","MdPhoneForwarded","MdPhoneInTalk","MdPhoneLocked","MdPhoneMissed","MdPhonePaused","MdPower","MdPriorityHigh","MdRvHookup","MdSdCard","MdSimCardAlert","MdSms","MdSmsFailed","MdSync","MdSyncDisabled","MdSyncProblem","MdSystemUpdate","MdTapAndPlay","MdTimeToLeave","MdVibration","MdVoiceChat","MdVpnLock","MdWc","MdWifi","MdAcUnit","MdAirportShuttle","MdAllInclusive","MdBeachAccess","MdBusinessCenter","MdCasino","MdChildCare","MdChildFriendly","MdFitnessCenter","MdFreeBreakfast","MdGolfCourse","MdHotTub","MdKitchen","MdPool","MdRoomService","MdSmokeFree","MdSmokingRooms","MdSpa","MdCake","MdDomain","MdGroup","MdGroupAdd","MdLocationCity","MdMood","MdMoodBad","MdNotifications","MdNotificationsActive","MdNotificationsNone","MdNotificationsOff","MdNotificationsPaused","MdPages","MdPartyMode","MdPeople","MdPeopleOutline","MdPerson","MdPersonAdd","MdPersonOutline","MdPlusOne","MdPoll","MdPublic","MdSchool","MdSentimentDissatisfied","MdSentimentNeutral","MdSentimentSatisfied","MdSentimentVeryDissatisfied","MdSentimentVerySatisfied","MdShare","MdWhatshot","MdCheckBox","MdCheckBoxOutlineBlank","MdIndeterminateCheckBox","MdRadioButtonChecked","MdRadioButtonUnchecked","MdStar","MdStarBorder","MdStarHalf","CgAbstract","CgAddR","CgAdd","CgAdidas","CgAirplane","CgAlarm","CgAlbum","CgAlignBottom","CgAlignCenter","CgAlignLeft","CgAlignMiddle","CgAlignRight","CgAlignTop","CgAnchor","CgAppleWatch","CgArrangeBack","CgArrangeFront","CgArrowAlignH","CgArrowAlignV","CgArrowBottomLeftO","CgArrowBottomLeftR","CgArrowBottomLeft","CgArrowBottomRightO","CgArrowBottomRightR","CgArrowBottomRight","CgArrowDownO","CgArrowDownR","CgArrowDown","CgArrowLeftO","CgArrowLeftR","CgArrowLeft","CgArrowLongDownC","CgArrowLongDownE","CgArrowLongDownL","CgArrowLongDownR","CgArrowLongDown","CgArrowLongLeftC","CgArrowLongLeftE","CgArrowLongLeftL","CgArrowLongLeftR","CgArrowLongLeft","CgArrowLongRightC","CgArrowLongRightE","CgArrowLongRightL","CgArrowLongRightR","CgArrowLongRight","CgArrowLongUpC","CgArrowLongUpE","CgArrowLongUpL","CgArrowLongUpR","CgArrowLongUp","CgArrowRightO","CgArrowRightR","CgArrowRight","CgArrowTopLeftO","CgArrowTopLeftR","CgArrowTopLeft","CgArrowTopRightO","CgArrowTopRightR","CgArrowTopRight","CgArrowUpO","CgArrowUpR","CgArrowUp","CgArrowsBreakeH","CgArrowsBreakeV","CgArrowsExchangeAltV","CgArrowsExchangeAlt","CgArrowsExchangeV","CgArrowsExchange","CgArrowsExpandDownLeft","CgArrowsExpandDownRight","CgArrowsExpandLeftAlt","CgArrowsExpandLeft","CgArrowsExpandRightAlt","CgArrowsExpandRight","CgArrowsExpandUpLeft","CgArrowsExpandUpRight","CgArrowsHAlt","CgArrowsH","CgArrowsMergeAltH","CgArrowsMergeAltV","CgArrowsScrollH","CgArrowsScrollV","CgArrowsShrinkH","CgArrowsShrinkV","CgArrowsVAlt","CgArrowsV","CgAssign","CgAsterisk","CgAtlasian","CgAttachment","CgAttribution","CgAwards","CgBackspace","CgBandAid","CgBatteryEmpty","CgBatteryFull","CgBattery","CgBee","CgBell","CgBitbucket","CgBlock","CgBmw","CgBoard","CgBolt","CgBookmark","CgBorderAll","CgBorderBottom","CgBorderLeft","CgBorderRight","CgBorderStyleDashed","CgBorderStyleDotted","CgBorderStyleSolid","CgBorderTop","CgBot","CgBowl","CgBox","CgBoy","CgBrackets","CgBriefcase","CgBrowse","CgBrowser","CgBrush","CgBulb","CgCPlusPlus","CgCalculator","CgCalendarDates","CgCalendarDue","CgCalendarNext","CgCalendarToday","CgCalendarTwo","CgCalendar","CgCalibrate","CgCamera","CgCap","CgCaptions","CgCardClubs","CgCardDiamonds","CgCardHearts","CgCardSpades","CgCarousel","CgCast","CgChanel","CgChart","CgCheckO","CgCheckR","CgCheck","CgChevronDoubleDownO","CgChevronDoubleDownR","CgChevronDoubleDown","CgChevronDoubleLeftO","CgChevronDoubleLeftR","CgChevronDoubleLeft","CgChevronDoubleRightO","CgChevronDoubleRightR","CgChevronDoubleRight","CgChevronDoubleUpO","CgChevronDoubleUpR","CgChevronDoubleUp","CgChevronDownO","CgChevronDownR","CgChevronDown","CgChevronLeftO","CgChevronLeftR","CgChevronLeft","CgChevronRightO","CgChevronRightR","CgChevronRight","CgChevronUpO","CgChevronUpR","CgChevronUp","CgCircleci","CgClapperBoard","CgClipboard","CgCloseO","CgCloseR","CgClose","CgCloud","CgCodeClimate","CgCodeSlash","CgCode","CgCoffee","CgCollage","CgColorBucket","CgColorPicker","CgComedyCentral","CgComment","CgCommunity","CgComponents","CgCompressLeft","CgCompressRight","CgCompressV","CgCompress","CgController","CgCopy","CgCopyright","CgCornerDoubleDownLeft","CgCornerDoubleDownRight","CgCornerDoubleLeftDown","CgCornerDoubleLeftUp","CgCornerDoubleRightDown","CgCornerDoubleRightUp","CgCornerDoubleUpLeft","CgCornerDoubleUpRight","CgCornerDownLeft","CgCornerDownRight","CgCornerLeftDown","CgCornerLeftUp","CgCornerRightDown","CgCornerRightUp","CgCornerUpLeft","CgCornerUpRight","CgCreditCard","CgCrop","CgCross","CgCrowdfire","CgCrown","CgDanger","CgDarkMode","CgData","CgDatabase","CgDebug","CgDesignmodo","CgDesktop","CgDetailsLess","CgDetailsMore","CgDialpad","CgDice1","CgDice2","CgDice3","CgDice4","CgDice5","CgDice6","CgDigitalocean","CgDisc","CgDisplayFlex","CgDisplayFullwidth","CgDisplayGrid","CgDisplaySpacing","CgDistributeHorizontal","CgDistributeVertical","CgDockBottom","CgDockLeft","CgDockRight","CgDockWindow","CgDolby","CgDollar","CgDribbble","CgDrive","CgDropInvert","CgDropOpacity","CgDrop","CgDuplicate","CgEditBlackPoint","CgEditContrast","CgEditExposure","CgEditFade","CgEditFlipH","CgEditFlipV","CgEditHighlight","CgEditMarkup","CgEditMask","CgEditNoise","CgEditShadows","CgEditStraight","CgEditUnmask","CgEject","CgEnter","CgErase","CgEreader","CgEricsson","CgEthernet","CgEuro","CgEventbrite","CgExpand","CgExport","CgExtensionAdd","CgExtensionAlt","CgExtensionRemove","CgExtension","CgExternal","CgEyeAlt","CgEye","CgFacebook","CgFeed","CgFigma","CgFileAdd","CgFileDocument","CgFileRemove","CgFile","CgFilm","CgFilters","CgFlagAlt","CgFlag","CgFolderAdd","CgFolderRemove","CgFolder","CgFontHeight","CgFontSpacing","CgFormatBold","CgFormatCenter","CgFormatColor","CgFormatHeading","CgFormatIndentDecrease","CgFormatIndentIncrease","CgFormatItalic","CgFormatJustify","CgFormatLeft","CgFormatLineHeight","CgFormatRight","CgFormatSeparator","CgFormatSlash","CgFormatStrike","CgFormatText","CgFormatUnderline","CgFormatUppercase","CgFramer","CgGames","CgGenderFemale","CgGenderMale","CgGhostCharacter","CgGhost","CgGift","CgGirl","CgGitBranch","CgGitCommit","CgGitFork","CgGitPull","CgGitter","CgGlassAlt","CgGlass","CgGlobeAlt","CgGlobe","CgGoogleTasks","CgGoogle","CgGym","CgHashtag","CgHeadset","CgHeart","CgHello","CgHomeAlt","CgHomeScreen","CgHome","CgIcecream","CgIfDesign","CgImage","CgImport","CgInbox","CgIndieHackers","CgInfinity","CgInfo","CgInpicture","CgInsertAfterO","CgInsertAfterR","CgInsertAfter","CgInsertBeforeO","CgInsertBeforeR","CgInsertBefore","CgInsights","CgInstagram","CgInternal","CgKey","CgKeyboard","CgKeyhole","CgLaptop","CgLastpass","CgLayoutGridSmall","CgLayoutGrid","CgLayoutList","CgLayoutPin","CgLinear","CgLink","CgListTree","CgList","CgLivePhoto","CgLoadbarAlt","CgLoadbarDoc","CgLoadbarSound","CgLoadbar","CgLockUnlock","CgLock","CgLogIn","CgLogOff","CgLogOut","CgLoupe","CgMagnet","CgMailForward","CgMailOpen","CgMailReply","CgMail","CgMathDivide","CgMathEqual","CgMathMinus","CgMathPercent","CgMathPlus","CgMaximizeAlt","CgMaximize","CgMaze","CgMediaLive","CgMediaPodcast","CgMenuBoxed","CgMenuCake","CgMenuCheese","CgMenuGridO","CgMenuGridR","CgMenuHotdog","CgMenuLeftAlt","CgMenuLeft","CgMenuMotion","CgMenuOreos","CgMenuRightAlt","CgMenuRight","CgMenuRound","CgMenu","CgMergeHorizontal","CgMergeVertical","CgMic","CgMicrobit","CgMicrosoft","CgMiniPlayer","CgMinimizeAlt","CgMinimize","CgModem","CgMonday","CgMoon","CgMoreAlt","CgMoreO","CgMoreR","CgMoreVerticalAlt","CgMoreVerticalO","CgMoreVerticalR","CgMoreVertical","CgMore","CgMouse","CgMoveDown","CgMoveLeft","CgMoveRight","CgMoveTask","CgMoveUp","CgMusicNote","CgMusicSpeaker","CgMusic","CgNametag","CgNotes","CgNotifications","CgNpm","CgOculus","CgOpenCollective","CgOptions","CgOrganisation","CgOverflow","CgPacman","CgPassword","CgPathBack","CgPathCrop","CgPathDivide","CgPathExclude","CgPathFront","CgPathIntersect","CgPathOutline","CgPathTrim","CgPathUnite","CgPatreon","CgPaypal","CgPen","CgPentagonBottomLeft","CgPentagonBottomRight","CgPentagonDown","CgPentagonLeft","CgPentagonRight","CgPentagonTopLeft","CgPentagonTopRight","CgPentagonUp","CgPerformance","CgPexels","CgPhone","CgPhotoscan","CgPiano","CgPill","CgPinAlt","CgPinBottom","CgPinTop","CgPin","CgPlayBackwards","CgPlayButtonO","CgPlayButtonR","CgPlayButton","CgPlayForwards","CgPlayListAdd","CgPlayListCheck","CgPlayListRemove","CgPlayListSearch","CgPlayList","CgPlayPauseO","CgPlayPauseR","CgPlayPause","CgPlayStopO","CgPlayStopR","CgPlayStop","CgPlayTrackNextO","CgPlayTrackNextR","CgPlayTrackNext","CgPlayTrackPrevO","CgPlayTrackPrevR","CgPlayTrackPrev","CgPlug","CgPocket","CgPokemon","CgPolaroid","CgPoll","CgPresentation","CgPrinter","CgProductHunt","CgProfile","CgPullClear","CgPushChevronDownO","CgPushChevronDownR","CgPushChevronDown","CgPushChevronLeftO","CgPushChevronLeftR","CgPushChevronLeft","CgPushChevronRightO","CgPushChevronRightR","CgPushChevronRight","CgPushChevronUpO","CgPushChevronUpR","CgPushChevronUp","CgPushDown","CgPushLeft","CgPushRight","CgPushUp","CgQr","CgQuoteO","CgQuote","CgRadioCheck","CgRadioChecked","CgRatio","CgRead","CgReadme","CgRecord","CgRedo","CgRemote","CgRemoveR","CgRemove","CgRename","CgReorder","CgRepeat","CgRing","CgRowFirst","CgRowLast","CgRuler","CgSandClock","CgScan","CgScreenMirror","CgScreenShot","CgScreenWide","CgScreen","CgScrollH","CgScrollV","CgSearchFound","CgSearchLoading","CgSearch","CgSelectO","CgSelectR","CgSelect","CgServer","CgServerless","CgShapeCircle","CgShapeHalfCircle","CgShapeHexagon","CgShapeRhombus","CgShapeSquare","CgShapeTriangle","CgShapeZigzag","CgShare","CgShield","CgShoppingBag","CgShoppingCart","CgShortcut","CgShutterstock","CgSidebarOpen","CgSidebarRight","CgSidebar","CgSignal","CgSize","CgSketch","CgSlack","CgSleep","CgSmartHomeBoiler","CgSmartHomeCooker","CgSmartHomeHeat","CgSmartHomeLight","CgSmartHomeRefrigerator","CgSmartHomeWashMachine","CgSmartphoneChip","CgSmartphoneRam","CgSmartphoneShake","CgSmartphone","CgSmileMouthOpen","CgSmileNeutral","CgSmileNoMouth","CgSmileNone","CgSmileSad","CgSmileUpside","CgSmile","CgSoftwareDownload","CgSoftwareUpload","CgSortAz","CgSortZa","CgSpaceBetweenV","CgSpaceBetween","CgSpectrum","CgSpinnerAlt","CgSpinnerTwoAlt","CgSpinnerTwo","CgSpinner","CgSquare","CgStack","CgStark","CgStopwatch","CgStories","CgStudio","CgStyle","CgSun","CgSupport","CgSwapVertical","CgSwap","CgSweden","CgSwiss","CgSync","CgTab","CgTag","CgTally","CgTapDouble","CgTapSingle","CgTemplate","CgTennis","CgTerminal","CgTerrain","CgThermometer","CgThermostat","CgTikcode","CgTime","CgTimelapse","CgTimer","CgToday","CgToggleOff","CgToggleOn","CgToggleSquareOff","CgToggleSquare","CgToolbarBottom","CgToolbarLeft","CgToolbarRight","CgToolbarTop","CgToolbox","CgTouchpad","CgTrack","CgTranscript","CgTrashEmpty","CgTrash","CgTree","CgTrees","CgTrello","CgTrendingDown","CgTrending","CgTrophy","CgTv","CgTwilio","CgTwitter","CgUiKit","CgUmbrella","CgUnavailable","CgUnblock","CgUndo","CgUnfold","CgUnsplash","CgUsbC","CgUsb","CgUserAdd","CgUserList","CgUserRemove","CgUser","CgUserlane","CgViewCols","CgViewComfortable","CgViewDay","CgViewGrid","CgViewList","CgViewMonth","CgViewSplit","CgVinyl","CgVoicemailO","CgVoicemailR","CgVoicemail","CgVolume","CgWebcam","CgWebsite","CgWindows","CgWorkAlt","CgYinyang","CgYoutube","CgZeit","CgZoomIn","CgZoomOut"],"mappings":"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EAAA,QAAA,eACA,EAAA,EAAA,OACA,EAAA,EAAA,QACA,EAAA,EAAA,MACA,EAAA,EAAA,WACA,EAAA,EAAA,KACA,EAAA,EAAA,OACA,EAAA,EAAA,YACA,EAAA,EAAA,SACA,EAAA,EAAA,WACA,EAAA,EAAA,UACA,EAAA,EAAA,YACA,EAAA,EAAA,QACA,EAAA,EAAA,UACA,EAAA,EAAA,OAEA,EAAA,QAAA,gBAGA,SAAA,IAEA,IAAA,EAAA,EACA,kBACA,mBACA,mBACA,kBACA,mBACA,mBACA,kBACA,mBACA,mBACA,kBACA,kBACA,kBACA,kBACA,mBACA,mBACA,kBACA,kBAAA,mBAEA,mBACA,mBACA,kBACA,iBACA,mBACA,mBACA,mBACA,mBACA,mBACA,mBACA,iBACA,kBACA,mBACA,mBACA,mBACA,kBACA,kBAAA,mBAEA,mBACA,mBACA,mBACA,kBACA,kBACA,kBACA,mBACA,kBACA,kBACA,mBACA,kBACA,mBACA,mBACA,oBACA,oBACA,kBACA,kBAAA,mBAEA,mBACA,mBACA,mBACA,kBACA,mBACA,mBACA,kBACA,mBACA,mBACA,kBACA,kBACA,mBACA,mBACA,oBACA,oBACA,kBACA,kBAAA,mBAEA,kBACA,kBACA,kBACA,kBACA,mBACA,mBACA,kBACA,mBACA,mBACA,kBACA,kBACA,mBACA,kBACA,oBACA,mBACA,mBACA,kBAAA,mBAEA,mBACA,kBACA,kBACA,kBACA,mBACA,mBACA,mBACA,mBACA,kBACA,mBACA,kBACA,mBACA,mBACA,oBACA,oBACA,kBACA,kBAAA,mBAEA,mBACA,kBACA,kBACA,kBACA,kBACA,mBACA,mBACA,mBACA,kBACA,mBACA,mBACA,mBACA,kBACA,kBACA,mBACA,iBACA,kBAAA,mBAEA,mBACA,mBACA,kBACA,mBACA,mBACA,kBACA,mBACA,mBACA,mBACA,mBACA,kBACA,oBACA,mBACA,oBACA,oBACA,mBACA,mBACA,mBAEA,mBACA,mBACA,oBACA,mBACA,mBACA,kBACA,kBACA,mBACA,mBACA,kBACA,kBACA,mBACA,oBACA,mBACA,mBACA,mBACA,kBAAA,mBAEA,kBACA,iBACA,oBACA,kBACA,mBACA,mBACA,kBACA,mBACA,kBACA,kBACA,mBACA,oBACA,oBACA,oBACA,iBACA,mBACA,kBAAA,kBAEA,kBACA,kBACA,oBACA,kBACA,kBACA,mBACA,kBACA,mBACA,oBACA,iBACA,kBACA,mBACA,oBACA,oBACA,mBACA,kBACA,kBAAA,kBAEA,kBACA,kBACA,oBACA,kBACA,mBACA,mBACA,kBACA,mBACA,oBACA,mBACA,mBACA,oBACA,oBACA,oBACA,oBACA,kBACA,iBAAA,mBAEA,kBACA,kBACA,kBACA,mBACA,mBACA,mBACA,mBACA,mBACA,oBACA,mBACA,mBACA,oBACA,oBACA,mBACA,mBACA,kBACA,kBAAA,mBAEA,kBACA,iBACA,mBACA,mBACA,mBACA,kBACA,kBACA,mBACA,oBACA,mBACA,mBACA,mBACA,oBACA,oBACA,mBACA,kBACA,mBAAA,mBAEA,iBACA,kBACA,oBACA,kBACA,mBACA,mBACA,mBACA,mBACA,mBACA,mBACA,kBACA,kBACA,oBACA,oBACA,oBACA,kBACA,mBAAA,kBAEA,WAAA,EAAA,MAAA,GAAA,QACA,WAAA,EAAA,MAAA,GAAA,QACA,WAAA,EAAA,MAAA,GAAA,QACA,WAAA,EAAA,MAAA,GAAA,QACA,UAAA,EAAA,MAAA,GAAA,QACA,UAAA,EAAA,MAAA,GAAA,QACA,UAAA,EAAA,MAAA,GAAA,QACA,SAAA,EAAA,MAAA,GAAA,QAEA,mBAAA,mBACA,kBAAA,SAAA,QACA,mBAAA,SAAA,SACA,SAAA,SAMA,EAAA,CACA,CACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,qBACA,sBACA,sBAEA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,uBAEA,uBACA,uBACA,uBACA,uBACA,uBACA,uBACA,uBACA,uBACA,uBAEA,uBACA,uBACA,uBACA,uBACA,uBACA,uBACA,uBACA,sBACA,uBAEA,CACA,sBACA,sBACA,sBACA,sBACA,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AAA,EACA,EAAA,GAAA,EACA,EAAA,EAAA,GAAA,EACA,EAAA,GAAA,EACA,EAAA,EAAA,IAAA,EACA,EAAA,IAAA,EACA,EAAA,EAAA,IAAA,EACA,EAAA,IAAA,EACA,EAAA,EAAA,GAAA,EACA,EAAA,GAAA,EACA,EAAA,EAAA,GAAA,EACA,EAAA,GAAA,EACA,EAAA,EAAA,IAAA,EACA,EAAA,IAAA,EACA,EAAA,EAAA,IAAA,EACA,EAAA,IAAA,EACA,EAAA,EAAA,IAAA,EACA,EAAA,IAAA,EACA,EAAA,EAAA,IAAA,EACA,EAAA,IAAA,EACA,EAAA,EAAA,IAAA,EACA,EAAA,IAAA,EACA,EAAA,EAAA,IAAA,EACA,EAAA,IAAA,EAEA,EAAA,EAAA,GACA,EAAA,IAAA,EAAA,IACA,EAAA,KAAA,EACA,EAAA,EAAA,GACA,EAAA,IAAA,EAAA,IACA,EAAA,KAAA,EACA,EAAA,EAAA,IACA,EAAA,KAAA,EAAA,IACA,EAAA,KAAA,EACA,EAAA,EAAA,IACA,EAAA,KAAA,EAAA,IACA,EAAA,KAAA,EACA,EAAA,EAAA,GACA,EAAA,IAAA,EAAA,IACA,EAAA,KAAA,EACA,EAAA,EAAA,GACA,EAAA,IAAA,EAAA,IACA,EAAA,KAAA,EACA,EAAA,EAAA,IACA,EAAA,KAAA,EAAA,GACA,EAAA,IAAA,EACA,EAAA,EAAA,IACA,EAAA,KAAA,EAAA,GACA,EAAA,IAAA,EACA,EAAA,EAAA,GACA,EAAA,IAAA,EAAA,IACA,EAAA,KAAA,EACA,EAAA,EAAA,GACA,EAAA,IAAA,EAAA,IACA,EAAA,KAAA,EACA,EAAA,EAAA,IACA,EAAA,KAAA,EAAA,IACA,EAAA,KAAA,EACA,EAAA,EAAA,IACA,EAAA,KAAA,EAAA,IACA,EAAA,KAAA,EACA,EAAA,EAAA,IACA,EAAA,KAAA,EAAA,IACA,EAAA,KAAA,EACA,EAAA,EAAA,IACA,EAAA,KAAA,EAAA,IACA,EAAA,KAAA,EACA,EAAA,EAAA,IACA,EAAA,KAAA,EAAA,GACA,EAAA,IAAA,EACA,EAAA,EAAA,IACA,EAAA,KAAA,EAAA,GACA,EAAA,I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,EAAA,EAAA,EAAA,EAAA,EAAA,GACA,CAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAGA,IAAA,EAAA,CAAA,EAAA,EAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IACA,IAAA,KACA,CAAA,EAAA,EAAA,EAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IAAA,IAAA,IAAA,KACA,CAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GACA,CAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAGA,IAAA,EAAA,CAAA,EAAA,EAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IACA,IAAA,KACA,CAAA,EAAA,EAAA,EAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IAAA,IAAA,IAAA,KACA,CAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GACA,CAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAGA,IAAA,EAAA,CAAA,EAAA,EAAA,EAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IACA,KACA,CAAA,EAAA,EAAA,EAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IAAA,IAAA,KACA,CAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GACA,CAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAGA,IAAA,EAAA,CAAA,EAAA,EAAA,EAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IACA,KACA,CAAA,EAAA,EAAA,EAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IAAA,IAAA,KACA,CAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GACA,CAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAGA,IAAA,EAAA,CAAA,EAAA,EAAA,EAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IACA,KACA,CAAA,EAAA,EAAA,EAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IAAA,IAAA,IAAA,KACA,CAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GACA,CAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAGA,IAAA,EAAA,CAAA,EAAA,EAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IACA,IAAA,KACA,CAAA,EAAA,EAAA,EAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IACA,IAAA,IAAA,KACA,CAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GACA,CAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAGA,IAAA,EAAA,CAAA,EAAA,EAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IACA,IAAA,KACA,CAAA,EAAA,EAAA,EAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IACA,IAAA,IAAA,KACA,CAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GACA,CAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAGA,IAAA,EAAA,CAAA,EAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IACA,IAAA,IAAA,KACA,CAAA,EAAA,EAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IAAA,IAAA,IACA,IAAA,IAAA,KACA,CAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GACA,CAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,KAIA,IAAA,EAAA,EAAA,EAAA,EAAA,GACA,EAAA,EAAA,GACA,EAAA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AAA,GACrB,OAAO,EAAQ,GAAS,GAAK,EAAkB,EAAR,IAP9B,QAAA,UAAS,EAWf,IAAM,EAAW,SAAC,GACvB,IAAM,EAAU,EAAY,GACzB,OAAO,SAAC,EAAa,EAAG,GACvB,GAAU,IAAN,EACF,OAAA,EAAW,EAAC,CAAE,IAGhB,GAAU,IAAN,EACF,OAAA,EAAW,EAAC,CAAE,EAAG,EAAI,KAGvB,MAAM,IAAI,MAAM,0CACf,IAEL,OAAO,SAAC,GACA,IAAA,EAAmB,EAAA,UAAU,EAAG,IAA/B,EAAO,EAAA,GAAE,EAAK,EAAA,GACrB,OAAO,EAAQ,GAAS,EAAI,IAhBnB,QAAA,SAAQ;;oECrBrB,QAAA,QAAe,CACb,aACA,uBACA,wBACA,uBACA,kBACA,mBACA,mBACA,cACA,WACA,UACA,eACA,YACA,aACA,UACA,YACA,gBACA,WACA,gBACA,mBACA,aACA,eACA,aACA,YACA,YACA,kBACA,wBACA,wBACA,uBACA,wBACA,wBACA,oBACA,oBACA,mBACA,gBACA,uBACA,qBACA,gBACA,cACA,cACA,eACA,eACA,SACA,QACA,QACA,aACA,kBACA,oBACA,kBACA,UACA,oBACA,oBACA,kBACA,kBACA,aACA,aACA,cACA,gBACA,UACA,WACA,OACA,gBACA,cACA,gBACA,gBACA,gBACA,cACA,WACA,YACA,eACA,OACA,eACA,UACA,WACA,UACA,QACA,WACA,YACA,eACA,aACA,UACA,UACA,gBACA,kBACA,kBACA,eACA,iBACA,eACA,gBACA,oBACA,gBACA,aACA,kBACA,cACA,cACA,iBACA,aACA,cACA,YACA,kBACA,eACA,kBACA,kBACA,eACA,cACA,aACA,QACA,QACA,WACA,OACA,UACA,UACA,SACA,SACA,cACA,QACA,cACA,YACA,aACA,cACA,aACA,iBACA,oBACA,eACA,WACA,aACA,iBACA,aACA,WACA;;oECjIF,QAAA,QAAe,CACb,aACA,uBACA,wBACA,uBACA,mBACA,mBACA,mBACA,cACA,QACA,UACA,eACA,YACA,aACA,UACA,YACA,gBACA,WACA,gBACA,mBACA,aACA,eACA,aACA,YACA,YACA,kBACA,0BACA,0BACA,yBACA,0BACA,0BACA,oBACA,oBACA,mBACA,gBACA,yBACA,uBACA,gBACA,cACA,cACA,eACA,eACA,SACA,QACA,QACA,aACA,kBACA,oBACA,kBACA,UACA,oBACA,oBACA,iBACA,iBACA,aACA,aACA,cACA,gBACA,UACA,WACA,OACA,gBACA,cACA,gBACA,eACA,eACA,cACA,WACA,YACA,eACA,OACA,eACA,UACA,WACA,UACA,QACA,WACA,YACA,eACA,aACA,UACA,UACA,kBACA,oBACA,oBACA,iBACA,mBACA,iBACA,kBACA,uBACA,kBACA,eACA,oBACA,gBACA,gBACA,mBACA,eACA,gBACA,cACA,oBACA,iBACA,oBACA,oBACA,iBACA,gBACA,gBACA,QACA,QACA,WACA,OACA,UACA,WACA,SACA,SACA,cACA,QACA,cACA,YACA,aACA,cACA,aACA,iBACA,oBACA,eACA,WACA,aACA,iBACA,aACA,WACA;;2RCjIF,QAAA,QAAA,EACK,IAAI,MAAM,IAAI,KAAK,GACnB,IAAI,SAAC,EAAG,GAAM,MAAA,mCAAmC,EAAC,MAAI,CACzD,SACA,OACA,eACA,eACA,SACA,eACA,kBACA,iBACA,qBACA,cACA,aACA,iBACA,YACA,iBACA,gBACA,gBACA,iBACA,eACA,UACA,cACA,cACA,aACA,iBACA,WACA,gBACA,iBACA,YACA,aACA,gBACA,UACA,iBACA,YACA,gBACA,WACA,YACA,gBACA,gBACA,YACA,eACA,cACA,aACA,YACA,SACA,UACA,gBACA,eACA,cACA,aACA,SACA,gBACA,iBACA,aACA,aACA,gBACA,gBACA,SACA,cACA,WACA,YACA,aACA;;4KC9DA,QAAA,IAAM,EACN,QAAA,GAAK,EACL,QAAA,MAAQ,EACR,QAAA,IAAM,EACN,QAAA,QAAU,EACV,QAAA,EAAI,EACJ,QAAA,MAAQ,EACR,QAAA,GAAK;;wWCPL,QAAA,GAAK,EACL,QAAA,GAAK,EACL,QAAA,GAAK,EACL,QAAA,GAAK,EA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AA,GAAK,EAAE,EAAG,EAAG,GAAI,QAAA,IAAM,EAAE,EAAG,EAAG,GAAI,QAAA,IAAM,EAAE,EAAG,EAAG,GACjD,QAAA,GAAK,EAAE,EAAG,EAAG,GAAI,QAAA,IAAM,EAAE,EAAG,EAAG,GAAI,QAAA,IAAM,EAAE,EAAG,EAAG,GACjD,QAAA,GAAK,EAAE,EAAG,EAAG,GAAI,QAAA,IAAM,EAAE,EAAG,EAAG,GAAI,QAAA,IAAM,EAAE,EAAG,EAAG,GACjD,QAAA,GAAK,EAAE,EAAG,EAAG,GAAI,QAAA,IAAM,EAAE,EAAG,EAAG,GAAI,QAAA,IAAM,EAAE,EAAG,EAAG,GACjD,QAAA,GAAK,EAAE,EAAG,EAAG,GAAI,QAAA,IAAM,EAAE,EAAG,EAAG,GAAI,QAAA,IAAM,EAAE,EAAG,EAAG,GACjD,QAAA,GAAK,EAAE,EAAG,EAAG,GAAI,QAAA,IAAM,EAAE,EAAG,EAAG,GAAI,QAAA,IAAM,EAAE,EAAG,EAAG,GAEjD,QAAA,GAAK,EAAE,EAAG,EAAG,GAAI,QAAA,IAAM,EAAE,EAAG,EAAG,GAAI,QAAA,IAAM,EAAE,EAAG,EAAG,GACjD,QAAA,GAAK,EAAE,EAAG,EAAG,GAAI,QAAA,IAAM,EAAE,EAAG,EAAG,GAAI,QAAA,IAAM,EAAE,EAAG,EAAG,GACjD,QAAA,GAAK,EAAE,EAAG,EAAG,GAAI,QAAA,IAAM,EAAE,EAAG,EAAG,GAAI,QAAA,IAAM,EAAE,EAAG,EAAG,GACjD,QAAA,GAAK,EAAE,EAAG,EAAG,GAAI,QAAA,IAAM,EAAE,EAAG,EAAG,GAAI,QAAA,IAAM,EAAE,EAAG,EAAG,GACjD,QAAA,GAAK,EAAE,EAAG,EAAG,GAAI,QAAA,IAAM,EAAE,EAAG,EAAG,GAAI,QAAA,IAAM,EAAE,EAAG,EAAG,GACjD,QAAA,GAAK,EAAE,EAAG,EAAG,GAAI,QAAA,IAAM,EAAE,EAAG,EAAG,GAAI,QAAA,IAAM,EAAE,EAAG,EAAG,GACjD,QAAA,GAAK,EAAE,EAAG,EAAG,GAAI,QAAA,IAAM,EAAE,EAAG,EAAG,GAAI,QAAA,IAAM,EAAE,EAAG,EAAG,GACjD,QAAA,GAAK,EAAE,EAAG,EAAG,GAAI,QAAA,IAAM,EAAE,EAAG,EAAG,GAAI,QAAA,IAAM,EAAE,EAAG,EAAG,GAEjD,QAAA,GAAK,EAAE,EAAG,EAAG,GAAI,QAAA,IAAM,EAAE,EAAG,EAAG,GAAI,QAAA,IAAM,EAAE,EAAG,EAAG,GACjD,QAAA,GAAK,EAAE,EAAG,EAAG,GAAI,QAAA,IAAM,EAAE,EAAG,EAAG,GAAI,QAAA,IAAM,EAAE,EAAG,EAAG,GACjD,QAAA,GAAK,EAAE,EAAG,EAAG,GAAI,QAAA,IAAM,EAAE,EAAG,EAAG,GAAI,QAAA,IAAM,EAAE,EAAG,EAAG,GACjD,QAAA,GAAK,EAAE,EAAG,EAAG,GAAI,QAAA,IAAM,EAAE,EAAG,EAAG,GAAI,QAAA,IAAM,EAAE,EAAG,EAAG,GACjD,QAAA,GAAK,EAAE,EAAG,EAAG,GAAI,QAAA,IAAM,EAAE,EAAG,EAAG,GAAI,QAAA,IAAM,EAAE,EAAG,EAAG,GACjD,QAAA,GAAK,EAAE,EAAG,EAAG,GAAI,QAAA,IAAM,EAAE,EAAG,EAAG,GAAI,QAAA,IAAM,EAAE,EAAG,EAAG,GACjD,QAAA,GAAK,EAAE,EAAG,EAAG,GAAI,QAAA,IAAM,EAAE,EAAG,EAAG,GAAI,QAAA,IAAM,EAAE,EAAG,EAAG,GACjD,QAAA,GAAK,EAAE,EAAG,EAAG,GAAI,QAAA,IAAM,EAAE,EAAG,EAAG,GAE/B,QAAA,GAAK,EAAE,EAAG,EAAG,GAAI,QAAA,IAAM,EAAE,EAAG,EAAG,GAAI,QAAA,IAAM,EAAE,EAAG,EAAG,GACjD,QAAA,GAAK,EAAE,EAAG,EAAG,GAAI,QAAA,IAAM,EAAE,EAAG,EAAG,GAAI,QAAA,IAAM,EAAE,EAAG,EAAG,GACjD,QAAA,GAAK,EAAE,EAAG,EAAG,GAAI,QAAA,IAAM,EAAE,EAAG,EAAG,GAAI,QAAA,IAAM,EAAE,EAAG,EAAG,GACjD,QAAA,GAAK,EAAE,EAAG,EAAG,GAAI,QAAA,IAAM,EAAE,EAAG,EAAG,GAAI,QAAA,IAAM,EAAE,EAAG,EAAG,GACjD,QAAA,GAAK,EAAE,EAAG,EAAG,GAAI,QAAA,IAAM,EAAE,EAAG,EAAG,GAAI,QAAA,IAAM,EAAE,EAAG,EAAG,GACjD,QAAA,GAAK,EAAE,EAAG,EAAG,GAAI,QAAA,IAAM,EAAE,EAAG,EAAG,GAAI,QAAA,IAAM,EAAE,EAAG,EAAG,GACjD,QAAA,GAAK,EAAE,EAAG,EAAG,GAAI,QAAA,IAAM,EAAE,EAAG,EAAG,GAAI,QAAA,IAAM,EAAE,EAAG,EAAG,GAEjD,QAAA,GAAK,EAAE,EAAG,EAAG,GAAI,QAAA,IAAM,EAAE,EAAG,EAAG,GAAI,QAAA,IAAM,EAAE,EAAG,EAAG,GACjD,QAAA,GAAK,EAAE,EAAG,EAAG,GAAI,QAAA,IAAM,EAAE,EAAG,EAAG,GAAI,QAAA,IAAM,EAAE,EAAG,EAAG,GACjD,QAAA,GAAK,EAAE,EAAG,EAAG,GAAI,QAAA,IAAM,EAAE,EAAG,EAAG,GAAI,QAAA,IAAM,EAAE,EAAG,EAAG,GACjD,QAAA,GAAK,EAAE,EAAG,EAAG,GAAI,QAAA,IAAM,EAAE,EAAG,EAAG,GAAI,QAAA,IAAM,EAAE,EAAG,EAAG,GACjD,QAAA,GAAK,EAAE,EAAG,EAAG,GAAI,QAAA,IAAM,EAAE,EAAG,EAAG,GAAI,QAAA,IAAM,EAAE,EAAG,EAAG,GACjD,QAAA,GAAK,EAAE,EAAG,EAAG,GAAI,QAAA,IAAM,EAAE,EAAG,EAAG,GAAI,QAAA,IAAM,EAAE,EAAG,EAAG,GACjD,QAAA,GAAK,EAAE,EAAG,EAAG,GAAI,QAAA,IAAM,EAAE,EAAG,EAAG,GAAI,QAAA,IAAM,EAAE,EAAG,EAAG,GAEjD,QAAA,GAAK,EAAE,EAAG,EAAG,GAAI,QAAA,IAAM,EAAE,EAAG,EAAG,GAAI,QAAA,IAAM,EAAE,EAAG,EAAG,GACjD,QAAA,GAAK,EAAE,EAAG,EAAG,GAAI,QAAA,IAAM,EAAE,EAAG,EAAG,GAAI,QAAA,IAAM,EAAE,EAAG,EAAG,GACjD,QAAA,GAAK,EAAE,EAAG,EAAG,GAAI,QAAA,IAAM,EAAE,EAAG,EAAG,GAAI,QAAA,IAAM,EAAE,EAAG,EAAG,GACjD,QAAA,GAAK,EAAE,EAAG,EAAG,GAAI,QAAA,IAAM,EAAE,EAAG,EAAG,GAAI,QAAA,IAAM,EAAE,EAAG,EAAG,GACjD,QAAA,GAAK,EAAE,EAAG,EAAG,GAAI,QAAA,IAAM,EAAE,EAAG,EAAG,GAAI,QAAA,IAAM,EAAE,EAAG,EAAG,GACjD,QAAA,GAAK,EAAE,EAAG,EAAG,GAAI,QAAA,IAAM,EAAE,EAAG,EAAG,GAAI,QAAA,IAAM,EAAE,EAAG,EAAG,GACjD,QAAA,GAAK,EAAE,EAAG,EAAG,GAAI,QAAA,IAAM,EAAE,EAAG,EAAG,GAAI,QAAA,IAAM,EAAE,EAAG,EAAG,GAEjD,QAAA,GAAK,EAAE,EAAG,EAAG,GAAI,QAAA,IAAM,EAAE,EAAG,EAAG,GAAI,QAAA,IAAM,EAAE,EAAG,EAAG,GACjD,QAAA,GAAK,EAAE,EAAG,EAAG,GAAI,QAAA,IAAM,EAAE,EAAG,EAAG,GAAI,QAAA,IAAM,EAAE,EAAG,EAAG,GACjD,QAAA,GAAK,EAAE,EAAG,EAAG,GAAI,QAAA,IAAM,EAAE,EAAG,EAAG,GAAI,QAAA,IAAM,EAAE,EAAG,EAAG,GACjD,QAAA,GAAK,EAAE,EAAG,EAAG,GAAI,QAAA,IAAM,EAAE,EAAG,EAAG,GAAI,QAAA,IAAM,EAAE,EAAG,EAAG,GACjD,QAAA,GAAK,EAAE,EAAG,EAAG,GAAI,QAAA,IAAM,EAAE,EAAG,EAAG,GAAI,QAAA,IAAM,EAAE,EAAG,EAAG,GACjD,QAAA,GAAK,EAAE,EAAG,EAAG,GAAI,QAAA,IAAM,EAAE,EAAG,EAAG,GAAI,QAAA,IAAM,EAAE,EAAG,EAAG,GACjD,QAAA,GAAK,EAAE,EAAG,EAAG,GAAI,QAAA,IAAM,EAAE,EAAG,EAAG,GAAI,QAAA,IAAM,EAAE,EAAG,EAAG;;uWClEnD,IAAM,EAAI,SAAC,GAAc,OAAA,EAAI,GAI3B,QAAA,EAAI,EAAE,GACN,QAAA,GAAK,EAAE,GACP,QAAA,IAAM,EAAE,GACR,QAAA,GAAK,EAAE,GACP,QAAA,EAAI,EAAE,GACN,QAAA,GAAK,EAAE,GACP,QAAA,IAAM,EAAE,GACR,QAAA,KAAO,EAAE,GACT,QAAA,GAAK,EAAE,GACP,QAAA,EAAI,EAAE,IACN,QAAA,GAAK,EAAE,IACP,QAAA,IAAM,EAAE,IACR,QAAA,KAAO,EAAE,IACT,QAAA,IAAM,EAAE,IACR,QAAA,GAAK,EAAE,IACP,QAAA,IAAM,EAAE,IACR,QAAA,KAAO,EAAE,IACT,QAAA,MAAQ,EAAE,IACV,QAAA,IAAM,EAAE,IACR,QAAA,GAAK,EAAE,IACP,QAAA,IAAM,EAAE,IACR,QAAA,KAAO,EAAE,IACT,QAAA,MAAQ,EAAE,IACV,QAAA,KAAO,EAAE;;obC3BX,IAAM,EAAI,SAAC,EAAW,GAAc,OAAC,EAAI,GAAK,GAK5C,QAAA,YAAc,EAAE,GAAI,IACpB,QAAA,MAAQ,EAAE,GAAI,IACd,QAAA,MAAQ,EAAE,GAAI,IACd,QAAA,MAAQ,EAAE,GAAI,IACd,QAAA,UAAY,EAAE,GAAI,IAClB,QAAA,OAAS,EAAE,GAAI,IACf,QAAA,UAAY,EAAE,GAAI,IAClB,QAAA,QAAU,EAAE,GAAI,KAChB,QAAA,UAAY,EAAE,GAAI,KAClB,QAAA,eAAiB,EAAE,GAAI,IACvB,QAAA,gBAAkB,EAAE,GAAI,KACxB,QAAA,SAAW,EAAE,IAAK,KAClB,QAAA,WAAa,EAAE,IAAK,KACpB,QAAA,gBAAkB,EAAE,IAAK,KACzB,QAAA,QAAU,EAAE,IAAK,KACjB,QAAA,OAAS,EAAE,IAAK,KAChB,QAAA,YAAc,EAAE,IAAK,KACrB,QAAA,aAAe,EAAE,IAAK,KACtB,QAAA,OAAS,EAAE,IAAK,KAChB,QAAA,YAAc,EAAE,IAAK;;+nCCzBvB,IAAA,EAAA,EAAA,QAAA,uBACA,EAAA,EAAA,QAAA,2BACA,EAAA,EAAA,QAAA,2BAEA,EAAA,QAAA,oBAAA,SACA,EAAA,QAAA,eAAA,SACA,EAAA,QAAA,gBAAA,SACA,EAAA,QAAA,qBAAA,SACA,EAAA,QAAA,iBAAA,SACA,EAAA,QAAA,oBAAA,SACA,EAAA,QAAA,2BAAA,SACA,EAAA,QAAA,kBAAA,SACA,EAAA,QAAA,eAAA,SACA,EAAA,QAAA,cAAA,SACA,EAAA,QAAA,gBAAA,SACA,EAAA,QAAA,iBAAA,SACA,EAAA,QAAA,oBAAA,SACA,EAAA,QAAA,eAAA,SACA,EAAA,QAAA,eAAA,SACA,EAAA,QAAA,eAAA,SAEA,QAAA,WAAA,EAAA,QAAA,qBACA,QAAA,MAAA,EAAA,QAAA,gBACA,QAAA,OAAA,EAAA,QAAA,iBACA,QAAA,WAAA,EAAA,QAAA,sBACA,QAAA,QAAA,EAAA,QAAA,kBACA,QAAA,WAAA,EAAA,QAAA,qBACA,QAAA,iBAAA,EAAA,QAAA,4BACA,QAAA,SAAA,EAAA,QAAA,mBACA,QAAA,MAAA,EAAA,QAAA,gBACA,QAAA,KAAA,EAAA,QAAA,eACA,QAAA,OAAA,EAAA,QAAA,iBACA,QAAA,QAAA,EAAA,QAAA,kBACA,QAAA,WAAA,EAAA,QAAA,qBACA,QAAA,MAAA,EAAA,QAAA,gBACA,QAAA,MAAA,EAAA,QAAA,gBACA,QAAA,MAAA,EAAA,QAAA,gBAEa,QAAA,YAAc,EAAA,QACd,QAAA,gBAAkB,EAAA,QAClB,QAAA,gBAAkB,EAAA;;qxCCxC/B,IAAA,EAAA,QAAA,kBAcA,EAAA,EAAA,QAAA,oBACA,EAAA,QAAA,kBACA,EAAA,QAAA,wBACA,EAAA,QAAA,qBACA,EAAA,QAAA,uBA6DA,SAAgB,EAA2B,GACzC,OAAO,EAAA,IAAI,EAAI,SAAA,GAAM,OAAA,SAAA,GACnB,IAAM,EAAM,KAAK,IAAG,MAAR,KAAY,EAAG,IAAI,SAAA,GAAM,OAAA,EAAG,QAClC,EAAS,EAAE,KAAO,EACxB,OAAO,EAAG,IAAI,SAAA,GAAM,OAAA,EAAA,EAAA,GAAK,GAAE,CAAE,KAAM,EAAG,KAAO,SAIjD,SAAgB,EAAiC,GAC/C,OAAO,EAAA,IAAI,EAAG,SAAA,GAAK,OAAA,SAAA,GACX,IAAA,EAAW,CAAC,EAAE,KAAM,EAAE,KAAO,EAAE,MAAM,KAAK,SAAC,EAAG,GAAM,OAAA,EAAI,IAAvD,EAAE,EAAA,GAAE,EAAE,EAAA,GACP,EAAW,CAAC,EAAE,KAAM,EAAE,KAAO,EAAE,MAAM,KAAK,SAAC,EAAG,GAAM,OAAA,EAAI,IAAvD,EAAE,EAAA,GACT,QADa,EAAA,IACE,GAAM,GAAM,MAI/B,SAAgB,EAA4B,GAK1C,OAAO,EAAA,IACL,EAAA,IAAI,GACJ,SAAC,OAAC,EAAI,EAAA,KAAE,EAAA,EAAA,KAAA,OAAI,IAAA,EAAG,EAAC,EAAE,EAAA,EAAA,MAAA,OAAK,IAAA,GAAQ,EAAM,OAAA,SAAA,GACnC,IAAM,EAA0B,CAAC,EAAE,KAAM,EAAE,KAAO,EAAE,MACpD,GAAa,IAAT,EAAY,MAAO,GAEvB,IACM,GADQ,EAAQ,KAAK,KAAO,KAAK,OACnB,EAAE,KAAO,GACvB,EAAW,EAAO,EAAE,KAAO,EAAQ,EAErC,EAAS,EAAM,GACnB,OAAO,MAAM,GAAO,KAAK,GAAG,IAAI,WAC9B,IAAM,EAAuB,EAAA,IAAI,EAAA,IAAI,CAAC,KAAM,EAAQ,KAAM,IAAY,GAEtE,OADA,GAAU,EACH,OAMf,SAAgB,QAA2B,IAAA,EAAA,GAAA,EAAA,EAAA,EAAA,UAAA,OAAA,IAAA,EAAA,GAAA,UAAA,GACzC,SAAS,EAAK,GACZ,OAAO,EAAK,OAAO,SAAC,EAAG,GAAM,OAAA,EAAI,GAAG,GAGtC,OAAO,EAAA,IAAI,EAAA,IAAG,WAAA,EAAI,GAAQ,SAAA,GAAS,OAAA,SAAA,GACjC,IAAM,EAAQ,EAAM,IAAI,SAAC,OAAC,EAAI,EAAA,KAAY,MAAA,CACxC,KAAM,GAAQ,EACd,KAFkC,EAAA,OAEX,MAAR,EAAe,EAAI,MAG9B,EAAe,EAAI,EAAM,IAAI,SAAC,GAAW,OAAN,EAAA,QACnC,EAAe,EAAI,EAAM,IAAI,SAAC,GAAW,OAAN,EAAA,QACnC,EAAY,KAAK,IAAI,EAAG,EAAE,KAAO,GACjC,EAAoB,IAAT,EAAc,EAAY,EAAQ,EAC7C,EAAQ,EAAM,IAAI,SAAC,GAAiB,OAAZ,EAAA,KAAM,EAAA,KAAoB,IAEpD,EAAS,EAAE,KACf,OAAO,EAAM,IAAI,SAAC,EAAU,GAC1B,IAAM,EAAwB,EAAM,GAAd,GAAX,EAAA,KAAM,EAAA,KAAS,EAAA,EAApB,CAAA,OAAA,UACA,EAAM,EAAA,EAAA,EAAA,GACP,GACA,GAAI,CACP,KAAM,EACN,KAAM,IAGR,OADA,GAAU,EACH,OAKb,SAAgB,EAA2B,GACzC,OAAO,EAAA,KAAwB,CAC7B,KAAM,SAAA,GAAK,OAAA,EAAE,KAAO,EAAA,IAAI,EAAQ,MAIpC,SAAgB,EAA0B,GACxC,IAAM,EAAQ,SAAC,EAAW,EAAW,GAAc,OACjD,KAAK,IAAI,EAAG,KAAK,IAAI,EAAG,KAE1B,OAAO,EAAA,IAAI,EAAA,IAAI,GAAK,SAAA,GAAM,OAAA,SAAA,GACxB,OAAO,EAAG,IAAI,SAAA,GACZ,IAAM,EAAO,EAAM,EAAG,KAAM,EAAE,KAAM,EAAE,KAAO,EAAE,MAEzC,EADO,EAAM,EAAG,KAAO,EAAG,KAAM,EAAE,KAAM,EAAE,KAAO,EAAE,MACrC,EACpB,OAAO,EAAA,EAAA,GAAK,GAAE,CAAE,KAAI,EAAE,KAAI,MACzB,OAAO,SAAA,GAAM,OAAA,EAAG,KAAO,OAI9B,SAAgB,EAAQ,GAQtB,OAAO,EAAA,IAAI,EAAA,IAAI,GAAQ,EAAA,SAGzB,SAAgB,EAAsB,GACpC,OAAO,EAAA,KAAK,CAAC,KAAM,EAAA,KAAK,SAAA,GAAK,OAAA,EAAE,MAAM,KAGvC,SAAgB,EAAa,GAC3B,OAAO,EAAA,IAAI,EAAA,IAAI,GAAQ,SAAA,GAAS,OAAA,SAAA,GAE5B,IAAA,EAME,EAAK,IANP,OAAG,IAAA,EAAG,EAAC,EACP,EAKE,EAAK,OALP,OAAM,IAAA,EAAG,EAAC,EACV,EAIE,EAAK,KAJP,OAAI,IAAA,EAAG,EAAC,EACR,EAGE,EAAK,OAHP,OAAM,IAAA,EAAG,EAAC,EACV,EAEE,EAAK,QAFP,OAAO,IAAA,EAAG,EAAC,EACX,EACE,EAAK,MAEH,EAAiB,EAAS,EAEhC,OAHwB,EAAqB,IAAd,EAAI,SAF5B,IAAA,EAAG,EAAC,GAIO,EAAA,UAAU,EACH,CAAU,MAIvC,SAAgB,EAAU,GAMxB,OAAO,EAAA,IACL,EAAA,IAAI,GACJ,SAAC,OAAC,EAAK,EAAA,MAAE,EAAG,EAAA,IAAE,EAAG,EAAA,IAAE,EAAM,EAAA,OAEvB,GADW,MAAP,IAAa,EAAM,GACnB,EAAM,EAAK,MAAM,IAAI,MAAM,oCAC/B,KAAO,EAAQ,KACT,EAAQ,EAAS,IACrB,GAAS,EAEX,KAAO,EAAQ,KACT,EAAQ,EAAS,IACrB,GAAS,EAEX,OAAO,IAKb,SAAgB,EAAY,EAAuB,EAAqB,GACtE,OAAO,EAAM,CACX,OAAQ,GACR,MAAK,EACL,IAAG,EACH,IAAG,IA1JP,QAAA,MAAA,EAQA,QAAA,SAAA,EAQA,QAAA,OAAA,EAyBA,QAAA,MAAA,EAgCA,QAAA,UAAA,EAMA,QAAA,KAAA,EAcA,QAAA,IAAA,EAWA,QAAA,KAAA,EAIA,QAAA,SAAA,EAiBA,QAAA,MAAA,EAwBA,QAAA,QAAA,EASa,QAAA,MAAQ,EAAA,MAAM,EAAA,oBAEd,QAAA,KAAO,EAAA,MAAM,EAAA,oBAEb,QAAA,OAAS,EAAA,OAAO,SAAC,EAAkB,GAE9C,MAAU,wEAAO,EAAI,IAAI,EAAA,YAAY,GAAK,YAG/B,QAAA,eAAyB,CACpC,IAAK,KAAK,OACV,MAAO,GACP,MAAO,EACP,MAAO,EACP,KAAM,QAAA,OAAO,aAAc,EAAA,mBAArB,CAAyC,GAC/C,KAAM,GACN,OAAQ,EACR,KAAM,EACN,MAAO,EACP,KAAM,EACN,KAAM,EACN,OAAQ,EACR,QAAS,EACT,KAAM,EACN,IAAK,EACL,MAAO,EACP,OAAQ,EACR,OAAQ,EACR,MAAO,EACP,QAAS,EACT,QAAS,EACT,MAAO,IACP,MAAO,EACP,SAAU,GAGZ,IAAM,EAAQ,SAAK,GACjB,OAAO,SAAK,GAAsB,OAAA,SAC/B,GAAS,OAAA,EAAA,IAAI,EAAG,GAAK,EAAA,IAAI,EAAG,MAQ/B,EAAO,SAAC,GAAa,OAAA,QAAA,OAAS,EAAE,OAChC,EAAU,SAAC,GAAqB,OAAA,EAAE,MAAQ,QAAA,KAAK,IAC/C,EAAQ,SAAC,GAAc,OAAA,EAAE,SAAW,QAAA,KAAK,IACzC,EAAO,SAAC,GAAc,OAAA,QAAA,MAAM,GAAK,GACjC,EAAU,SAAC,GAAc,OAAA,QAAA,MAAM,GAAK,GACpC,EAAS,SAAC,GAAc,OAAA,QAAA,MAAM,GAAK,GACnC,EAAY,SAAC,GAAc,OAAA,QAAA,MAAM,GAAK,IATtC,QAAA,OAAS,EACT,QAAA,OAAS,GAAK,QAAA,OACd,QAAA,KAAO,GAAK,QAAA,OACZ,QAAA,KAAI,EACJ,QAAA,QAAO,EACP,QAAA,MAAK,EACL,QAAA,KAAI,EACJ,QAAA,QAAO,EACP,QAAA,OAAM,EACN,QAAA,UAAS,EAGT,QAAA,QAAU,EAAM,QAAA,QAChB,QAAA,QAAU,EAAM,QAAA,QAChB,QAAA,MAAQ,EAAM,QAAA,MACd,QAAA,MAAQ,EAAM,QAAA,MACd,QAAA,SAAW,EAAM,QAAA,SACjB,QAAA,OAAS,EAAM,QAAA,OACf,QAAA,OAAS,EAAM,QAAA,MACf,QAAA,SAAW,EAAM,QAAA,SACjB,QAAA,QAAU,EAAM,QAAA,QAChB,QAAA,WAAa,EAAM,QAAA,WACnB,QAAA,IAAM,EAAM,SAAC,GAAY,OAAA,EAAE,OAC3B,QAAA,QAAU,EAAM,SAAC,GAAY,OAAA,EAAE,KAAO;;;AClIxC,IAAA,EAAA,UAAA,GA3KA,EAAA,IACA,EAAA,EACA,EAAA,GACA,EAAA,GACA,OAAA,IAAA,EAAA,OAAA,EAKA,EAAA,KAAA,IAAA,EAAA,GACA,EAAA,KAAA,IAAA,EAAA,GACA,EAAA,EAAA,EACA,EAAA,EAAA,EAGA,EAAA,KAAA,OAiEA,SAAA,EAAA,GACA,IAAA,EAAA,EAAA,EAAA,OACA,EAAA,KAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAMA,IAHA,IAAA,EAAA,CAAA,MAGA,EAAA,GACA,EAAA,GAAA,IAEA,IAAA,EAAA,EAAA,EAAA,EAAA,IACA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,KACA,EAAA,GAAA,GAIA,EAAA,EAAA,SAAA,GAIA,IAFA,IAAA,EAAA,EAAA,EACA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EACA,KACA,EAAA,EAAA,EAAA,EAAA,EAAA,GACA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,KAAA,EAAA,GAAA,IAGA,OADA,EAAA,EAAA,EAAA,EAAA,EAAA,EACA,IAGA,GAOA,SAAA,EAAA,EAAA,GACA,IAAA,EAAA,EAAA,GAAA,UAAA,GAAA,GACA,GAAA,GAAA,KAAA,EACA,IAAA,KAAA,EACA,IAAA,EAAA,KAAA,EAAA,EAAA,GAAA,EAAA,IAAA,MAAA,IAGA,OAAA,EAAA,OAAA,EAAA,KAAA,EAAA,EAAA,EAAA,KAQA,SAAA,EAAA,EAAA,GAEA,IADA,IAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EACA,EAAA,EAAA,QACA,EAAA,EAAA,GACA,GAAA,GAAA,GAAA,EAAA,EAAA,IAAA,EAAA,WAAA,KAEA,OAAA,EAAA,GAQA,SAAA,EAAA,GACA,IAEA,OADA,EAAA,OAAA,gBAAA,EAAA,IAAA,WAAA,IACA,EAAA,GACA,MAAA,GACA,MAAA,EAAA,IAAA,KAAA,EAAA,EAAA,WAAA,EAAA,UAAA,QACA,EAAA,OAAA,EAAA,KAQA,SAAA,EAAA,GACA,OAAA,OAAA,aAAA,MAAA,EAAA,GA3IA,OAAA,QAAA,SAAA,EAAA,GACA,GAAA,IAAA,IAAA,EAAA,OAIA,OAHA,EAAA,QAAA,EACA,KAAA,OAAA,OAAA,QAAA,EAAA,GACA,EAAA,QAAA,EACA,KAAA,OAEA,IACA,EAAA,GAQA,GALA,EAAA,EAJA,GAAA,EAAA,UAAA,EAKA,CAAA,EAAA,EAAA,IACA,KAAA,UAAA,EAAA,IAAA,GAAA,GAGA,IAAA,EAAA,IAUA,OAPA,EAAA,EAAA,EAAA,GAAA,GAOA,WAIA,IAHA,IAAA,EAAA,EAAA,EAAA,GACA,EAAA,EACA,EAAA,EACA,EAAA,GACA,GAAA,EAAA,GAAA,EACA,GAAA,EACA,EAAA,EAAA,EAAA,GAEA,KAAA,GAAA,GACA,GAAA,EACA,GAAA,EACA,KAAA,EAEA,OAAA,EAAA,GAAA,IAIA,OAAA,QAAA,YAAA,WACA,KAAA,OAAA,GAwGA,EAAA,KAAA,SAAA;;2RC5KA,IAAM,EAAO,SAAI,GAAkB,OAAA,EAAM,EAAM,OAAS,IAIxD,SAAwB,EACtB,EACA,GAIA,IAAM,EAAa,EAChB,IAAI,SAAA,GACH,IAAM,EAAS,EAAU,GACzB,GAAI,EAAS,EAAG,MAAM,IAAI,MAAM,+BAChC,GAAI,MAAM,GAAS,MAAM,IAAI,MAAM,2BACnC,GAAI,IAAW,EAAA,EAAU,MAAM,IAAI,MAAM,+BACzC,MAAO,CAAC,MAAK,EAAE,OAAM,KAEtB,OAAO,SAAC,GAAa,OAAN,EAAA,OAAe,IAGjC,IAAK,EAAW,OAAQ,OAAO,KAG/B,IAAM,EAAO,EACV,OAAO,SAAC,EAAG,OAAC,EAAM,EAAA,OAAM,OAAA,EAAI,EAAC,CAAE,EAAK,GAAK,KAAS,CAAC,IAGtD,OAAO,SAAC,GACN,GAAI,EAAO,EAAG,MAAM,IAAI,MAAM,sCAC9B,GAAI,GAAQ,EAAG,MAAM,IAAI,MAAM,qCAC/B,IAAM,EAAI,EAAK,GAAQ,EACjB,EAAI,EAAK,MAAM,GAAG,UAAU,SAAA,GAAK,OAAA,EAAI,IAC3C,OAAO,EAAW,GAAG,OA7BzB,QAAA,QAAA;;8RCJA,IAAA,EAAA,EAAA,QAAA,gBACA,EAAA,QAAA,kBACA,EAAA,QAAA,kBACA,EAAA,EAAA,QAAA,yBAMA,SAAgB,QAA0B,IAAA,EAAA,GAAA,EAAA,EAAA,EAAA,UAAA,OAAA,IAAA,EAAA,GAAA,UAAA,GACxC,OAAO,SAAA,GACL,IAAM,EAAK,EAAG,IAAI,SAAA,GAAK,OAAA,EAAA,IAAI,EAAG,KACxB,EAAa,EAAA,QAAS,EAAI,WAAM,OAAA,IACtC,IAAK,EACH,MAAM,IAAI,MAAM,yBAElB,OAAO,EAAW,EAAA,IAAI,EAAM,KAIhC,SAAgB,QAAwB,IAAA,EAAA,GAAA,EAAA,EAAA,EAAA,UAAA,OAAA,IAAA,EAAA,GAAA,UAAA,GACtC,OAAO,SAAA,GACL,IAAM,EAAK,EAAG,IAAI,SAAA,GAAK,OAAA,EAAA,IAAI,EAAG,KACxB,EAAa,EAAA,QAAS,EAAI,SAAA,GAAK,OAAA,EAAE,SACvC,OAAkB,MAAd,EACK,EAAA,KAAK,iCAEP,EAAW,EAAA,IAAI,EAAM,KAIhC,SAAgB,EAAmB,GACjC,OAAO,EAAA,IAAI,EAAG,GAGhB,SAAgB,EAAqB,GACnC,OAAO,EAAE,MAGX,SAAgB,QAAQ,IAAA,EAAA,GAAA,EAAA,EAAA,EAAA,UAAA,OAAA,IAAA,EAAA,GAAA,UAAA,GAGtB,OAAO,SAAA,GACL,IAAM,EAAI,EAAA,IAAI,EAAA,IAAG,WAAA,EAAI,GAAQ,GAC7B,OAAO,EAAA,QAAW,EAAE,KAAK,OAI7B,SAAgB,QAAqB,IAAA,EAAA,GAAA,EAAA,EAAA,EAAA,UAAA,OAAA,IAAA,EAAA,GAAA,UAAA,GACnC,OAAO,EAAA,IAAI,SAAA,GAAK,MAAA,CACd,IAAK,EAAG,WAAA,EAAI,EAAP,CAAc,MAIvB,SAAgB,EAAwB,EAAqB,GAC3D,OAAO,EAAA,OAAO,SAAC,GAAS,OAAA,EAAE,OAAO,EAAK,GAGxC,SAAgB,EAA2B,EAAqB,GAC9D,OAAO,EAAA,MAAM,EAAQ,EAAK,IAG5B,SAAgB,EAAuB,EAA0B,GAC/D,YADqC,IAAA,IAAA,EAAA,QAA0B,IAAA,IAAA,EAAA,GACxD,SAAA,GACL,IAAM,EAAI,EAAA,IAAI,EAAM,GACd,EAAI,EAAA,IAAI,EAAM,GACd,EAAI,KAAK,MAAM,EAAI,KAAK,IAAI,EAAI,IAAM,KAAK,IAAI,EAAI,KAAK,GAAK,GACnE,OAAO,EAAA,IAAI,EAAI,GAAK,EAAI,EAAA,IAAI,EAAM,IA1DtC,QAAA,OAAA,EAWA,QAAA,KAAA,EAWA,QAAA,GAAA,EAIA,QAAA,KAAA,EAIA,QAAA,IAAA,EASA,QAAA,KAAA,EAMA,QAAA,QAAA,EAIA,QAAA,WAAA,EAIA,QAAA,OAAA;;kJC9Da,QAAA,KAAO,yIAGpB,IAAM,EAAS,CACb,eAAgB,EAChB,cAAe,EACf,cAAe,EACf,cAAe,EACf,WAAY,EACZ,WAAY,EACZ,UAAW,EACX,gBAAiB,EACjB,WAAY,EACZ,aAAc,EACd,eAAgB,GAChB,SAAU,GACV,WAAY,GACZ,YAAa,GACb,WAAY,GACZ,cAAe,GACf,cAAe,GACf,kBAAmB,GACnB,aAAc,GACd,cAAe,GACf,aAAc,GACd,aAAc,GACd,cAAe,GACf,cAAe,GACf,cAAe,GACf,cAAe,GACf,cAAe,GACf,mBAAoB,GACpB,cAAe,GACf,cAAe,GACf,cAAe,GACf,eAAgB,GAChB,gBAAiB,GACjB,YAAa,GACb,WAAY,GACZ,WAAY,GACZ,WAAY,GACZ,YAAa,GACb,YAAa,GACb,aAAc,GACd,aAAc,GACd,aAAc,GACd,aAAc,GACd,aAAc,GACd,aAAc,GACd,cAAe,GACf,cAAe,GACf,kBAAmB,GACnB,mBAAoB,GACpB,mBAAoB,GACpB,WAAY,GACZ,UAAW,GACX,WAAY,GACZ,UAAW,GACX,UAAW,GACX,WAAY,GACZ,WAAY,GACZ,aAAc,GACd,WAAY,GACZ,YAAa,GACb,YAAa,GACb,UAAW,GACX,UAAW,GACX,UAAW,GACX,WAAY,IAIR,EAAY,CAChB,EAAO,eACP,EAAO,cACP,EAAO,cACP,EAAO,SACP,EAAO,WACP,EAAO,UACP,EAAO,aACP,EAAO,eACP,EAAO,YACP,EAAO,gBACP,EAAO,cACP,EAAO,cACP,EAAO,cACP,EAAO,cACP,EAAO,YACP,EAAO,WACP,EAAO,WACP,EAAO,WACP,EAAO,mBACP,EAAO,aACP,EAAO,aACP,EAAO,aACP,EAAO,aACP,EAAO,mBACP,EAAO,mBACP,EAAO,WACP,EAAO,WACP,EAAO,WACP,EAAO,WACP,EAAO,YAII,QAAA,QAAU,OAAO,OAAO,GAClC,OAAO,SAAA,GAAK,OAAA,EAAU,QAAQ,GAAK,IAEzB,QAAA,KAAO,CAClB,EAAO,SACP,EAAO,WACP,EAAO,aACP,EAAO,aACP,EAAO,aAGI,QAAA,OAAS,CACpB,EAAO,cACP,EAAO,cACP,EAAO,eACP,EAAO,cACP,EAAO,eAGI,QAAA,MAAQ,CACnB,EAAO,cACP,EAAO,cACP,EAAO,cACP,EAAO,aACP,EAAO;;ACgJT,aAAA,IAAA,EAAA,MAAA,KAAA,kBAAA,OAAA,OAAA,SAAA,EAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,GAAA,OAAA,eAAA,EAAA,EAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,OAAA,SAAA,EAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,GAAA,EAAA,GAAA,EAAA,KAAA,EAAA,MAAA,KAAA,qBAAA,OAAA,OAAA,SAAA,EAAA,GAAA,OAAA,eAAA,EAAA,UAAA,CAAA,YAAA,EAAA,MAAA,KAAA,SAAA,EAAA,GAAA,EAAA,QAAA,IAAA,EAAA,MAAA,KAAA,cAAA,SAAA,GAAA,GAAA,GAAA,EAAA,WAAA,OAAA,EAAA,IAAA,EAAA,GAAA,GAAA,MAAA,EAAA,IAAA,IAAA,KAAA,EAAA,YAAA,GAAA,OAAA,UAAA,eAAA,KAAA,EAAA,IAAA,EAAA,EAAA,EAAA,GAAA,OAAA,EAAA,EAAA,GAAA,GAAA,EAAA,MAAA,KAAA,QAAA,SAAA,EAAA,GAAA,IAAA,EAAA,mBAAA,QAAA,EAAA,OAAA,UAAA,IAAA,EAAA,OAAA,EAAA,IAAA,EAAA,EAAA,EAAA,EAAA,KAAA,GAAA,EAAA,GAAA,IAAA,WAAA,IAAA,GAAA,KAAA,MAAA,EAAA,EAAA,QAAA,MAAA,EAAA,KAAA,EAAA,OAAA,MAAA,GAAA,EAAA,CAAA,MAAA,GAAA,QAAA,IAAA,IAAA,EAAA,OAAA,EAAA,EAAA,SAAA,EAAA,KAAA,GAAA,QAAA,GAAA,EAAA,MAAA,EAAA,OAAA,OAAA,GAAA,EAAA,MAAA,KAAA,UAAA,WAAA,IAAA,IAAA,EAAA,GAAA,EAAA,EAAA,EAAA,UAAA,OAAA,IAAA,EAAA,EAAA,OAAA,EAAA,UAAA,KAAA,OAAA,GAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,MAAA,QAAA,KAAA,QAAA,aAAA,EAlRA,IAAA,EAAA,QAAA,mBAiBA,EAAA,QAAA,kBAoBA,EAAA,QAAA,iBACA,EAAA,QAAA,kBACA,EAAA,QAAA,uBAiBA,EAAA,EAAA,QAAA,+BAgBA,SAAS,EAAuB,GACvB,OAAA,EAAA,KAAK,EAAA,OACV,EAAA,MAAS,EAAA,KAAK,CAAC,KAAI,IAAI,EAAA,MACvB,EAAA,MAAS,EAAA,KAAM,EAAA,KAAK,CAAC,KAAI,OAI7B,SAAS,EAAuB,GACvB,OAAA,EAAA,KAAK,EAAA,QAAQ,EAAA,OAAU,CAC5B,KAAI,EACJ,OAAO,IACL,SAAA,GAAK,OAAA,EAAA,IAAI,CAAC,MAAO,OAGvB,SAAS,IACA,OAAA,EAAA,KAAK,CAAC,OAAQ,EAAA,OAAO,EAAA,EAAG,EAAA,IAAK,EAAA,EAAG,EAAA,QAGzC,SAAS,IACA,OAAA,EAAA,KAAK,CAAC,OAAQ,EAAA,OAAO,EAAA,GAAI,EAAA,GAAI,EAAA,GAAI,EAAA,OAG1C,SAAS,EAAsB,EAAmB,GACzC,OAAA,EAAA,KAAK,EAAA,GAAG,GAAI,GAGrB,SAAS,IACA,OAAA,EAAA,KACL,EAAI,EAAA,OAAkB,EAAA,KAAM,EAAA,UAC5B,EAAA,KAAK,SAAA,GAAK,OAAA,EAAE,MAAQ,GAAG,KACvB,EAAA,KAAK,CAAC,OAAQ,EAAA,OAAO,EAAG,KACxB,EAAA,KAAK,CAAC,KAAM,EAAA,YAIhB,SAAS,IACA,OAAA,EAAA,KACL,EAAA,KAAK,CAAC,OAAQ,EAAA,OAAO,EAAG,KACxB,EAAG,GAAK,EAAI,EAAA,OAAkB,EAAA,KAAM,EAAA,QAAS,EAAA,UAC7C,EAAA,MAAM,SAAA,GAAK,OAAA,EAAE,OAAS,GAAG,SAAA,GAAK,OAAA,EAAA,IAAI,CAAC,OAAY,EAAJ,MAC3C,EAAG,GAAK,EAAI,EAAA,OAAkB,EAAA,KAAM,EAAA,QAAS,EAAA,UAC7C,EAAA,KAAK,CAAC,KAAM,EAAA,YAIhB,SAAS,IACA,OAAA,EAAA,KACL,EAAG,GAAK,EAAI,EAAA,OAAkB,EAAA,KAAM,EAAA,QAAS,EAAA,UAC7C,EAAG,GAAK,EAAI,EAAA,OAAkB,EAAA,KAAM,EAAA,QAAS,EAAA,UAC7C,IACA,EAAG,GAAK,EAAI,EAAA,OAAkB,EAAA,KAAM,EAAA,QAAS,EAAA,UAC7C,EAAG,GAAK,KACR,EAAG,IAAM,KACT,EAAA,KAAK,CAAC,KAAM,EAAA,YAIhB,SAAS,IACA,OAAA,EAAA,KACL,EAAI,EAAA,OAAkB,EAAA,QAAS,EAAA,KAAM,EAAA,QAAS,EAAA,SAC9C,EAAA,KAAK,CAAC,KAAM,SAAA,GAAK,OAAA,EAAE,KAAO,EAAE,KAAO,EAAA,IAAI,EAAA,MAAO,MAC9C,SAAA,GAAK,OAAA,EAAA,KAAK,EAAE,MAAQ,GAAM,EAAG,EAAA,KAAK,CAAC,KAAM,EAAE,KAAO,MAClD,SAAA,GAAK,OAAA,EAAA,KAAK,EAAA,IAAI,EAAE,KAAM,EAAA,SAAU,EAAA,UAAa,EAAA,OAAO,EAAG,EAAA,IAAI,SAI/D,SAAS,IACA,OAAA,EAAA,KAAK,SAAC,GAAU,MAAA,CACrB,KAAM,IACN,IAAK,IACL,KAAM,IACN,KAAM,KACN,EAAE,QAGN,SAAS,EAAwB,EAAmB,GAC3C,OAAA,EAAA,IAAI,EAAA,KAAM,SAAA,GAAQ,OAAA,EAAA,KACvB,EACA,EAAA,IAAI,EAAG,SAAA,GAAK,OAAA,EAAA,KAAQ,EAAI,EAAO,EAAA,KAAO,QAI1C,SAAS,EAA4B,GAC5B,OAAA,EAAA,SACL,SAAA,GAAK,OAAA,EAAE,OACP,EAAK,SAAA,GAAK,OAAA,EAAE,UAAU,EAAA,MAAM,EAAA,MAAM,KAClC,GAIJ,SAAS,IACA,OAAA,EAAA,KACL,EAAA,KAAK,SAAA,GAAK,OAAA,EAAE,QACZ,EAAO,EAAA,KAAK,EAAA,GAAG,SAAA,GAAK,OAAA,EAAE,YAAY,EAAA,KAAQ,EAAA,KAAM,SAAA,GAAK,OAAA,EAAE,WAI3D,SAAS,IACA,OAAA,EAAA,KACL,SAAA,GAAK,OAAA,EAAA,KAAK,CAAC,MAAO,EAAA,OAAM,WAAA,EAAA,EAAI,EAAE,YAC9B,SAAA,GAAK,OAAA,EAAA,KAAoB,IAAZ,EAAE,MAAa,KAC5B,SAAA,GAAK,OAAA,EAAA,KAAK,EAAE,MAAO,EAAE,MAAO,EAAE,SAIlC,SAAS,IACA,OAAA,EAAA,KACL,EAAA,KAAK,CAAC,KAAM,EAAA,OAAO,EAAA,MAAO,EAAA,SAC1B,EAAA,IAAI,CAAC,MAAO,IACZ,EAAA,IAAI,CAAC,EAAA,EAAG,EAAA,GAAI,EAAA,EAAG,EAAA,IAAK,SAAA,GAAW,OAAA,EAAA,IAAI,CAAC,QAAO,MAC3C,EAAA,KAAK,SAAA,GAAK,OAAA,EAAE,UAAY,EAAA,GAAG,EAAA,IAAI,CAAC,MAAO,MAI3C,SAAS,EAAiC,GACjC,OAAA,EAAA,KACL,EAAA,KAAK,CAAC,OAAQ,IACd,EACA,SAAA,GAAK,OAAA,EAAY,EAAA,OAAM,WAAA,EAAA,EAAI,EAAE,YAIjC,SAAS,EAA+B,GAC/B,OAAA,EAAA,IAAI,EAAG,SAAC,GAAC,IAAA,EAAO,EAAA,QAAE,EAAG,EAAA,IAAE,EAAI,EAAA,KAAE,EAAK,EAAA,MAAM,OAAA,EAAA,IAC7C,CAAC,QAAO,EAAE,IAAG,EAAE,KAAI,EAAE,MAAK,MAI9B,SAAS,IACA,OAAA,EACL,EAAA,MAAM,EAAA,OAAoB,SAAA,GAAK,OAAA,EAAE,QAAQ,EAAA,UAAW,EAAA,SAIxD,SAAS,IACD,IAAA,EAAO,SAAC,GAAc,OAAA,EAAA,OAAO,EAAA,WAAY,IACxC,OAAA,EAAA,KACL,EAAA,KAAK,CACH,KAAM,MACN,KAAM,EAAK,EAAA,oBACX,OAAQ,CAAC,EAAG,GACZ,MAAO,EACP,MAAO,EAAA,OAET,EAAA,KAAK,CACH,KAAM,OACN,KAAM,EAAK,EAAA,QACX,OAAQ,CAAC,EAAG,EAAG,GACf,MAAO,EACP,MAAO,IAET,EAAA,KAAK,CACH,KAAM,OACN,KAAM,EAAK,EAAA,SACX,OAAQ,CAAC,EAAG,EAAG,GACf,MAAO,EACP,MAAO,IAET,EAAA,KAAK,CACH,KAAM,OACN,KAAM,EAAK,EAAA,YACX,OAAQ,CAAC,EAAG,GACZ,MAAO,EACP,MAAO,EAAA,OAET,EAAA,KACE,EAAA,MAAM,SAAA,GAAK,OAAA,EAAE,QACb,EAAA,KAAQ,EAAA,MACR,EAAA,KAAK,CACH,KAAM,OACN,KAAM,EAAM,KACZ,KAAM,EAAA,OAAM,WAAA,EAAA,EAAI,EAAM,KAAS,EAAM,OAAW,EAAM,SACtD,OAAQ,CAAC,EAAG,GACZ,KAAM,GACN,MAAO,EACP,MAAO,EAAA,SAMf,SAAgB,IACP,OAAA,EAAA,KAAK,CACV,MAAO,EAAA,MAAM,EAAA,QAAQ,EAAG,MACxB,IAAK,EAAA,MAAM,EAAA,QAAQ,EAAG,KACtB,MAAO,EAAA,MAAM,EAAA,QAAQ,GAAI,MACzB,MAAO,EAAA,OAAO,EAAG,EAAG,EAAG,GACvB,SAAU,EAAA,OAAO,EAAG,GACpB,SAAU,EAAA,KAAK,EAAA,MAAM,EAAA,QAAQ,GAAI,KAAM,KACvC,UAAW,EAAA,KAAK,EAAA,MAAM,EAAA,QAAQ,EAAG,KAAM,KACvC,MAAO,EAAA,OAAO,EAAG,EAAG,KAIxB,SAAgB,EAA0B,GACjC,OAAA,EAAA,KACL,SAAA,GAAK,OAAA,EAAA,KAAK,EAAE,QACZ,EAAA,KAAK,CAAC,KAAM,EAAA,SAAS,EAAA,IAAI,EAAG,SAAA,GAAK,OAAA,EAAE,WACnC,GAIJ,SAAgB,IACP,OAAA,EAAK,EAAA,KACV,EAAA,KAAK,CAAC,OAAQ,EAAY,KAC1B,EACA,EACA,EACA,EACA,IA5BJ,QAAA,QAAA,EAaA,QAAA,KAAA,EAQA,QAAA,MAAA;;AC5NA,aAAA,IAAA,EAAA,MAAA,KAAA,UAAA,WAAA,OAAA,EAAA,OAAA,QAAA,SAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,UAAA,OAAA,EAAA,EAAA,IAAA,IAAA,IAAA,KAAA,EAAA,UAAA,GAAA,OAAA,UAAA,eAAA,KAAA,EAAA,KAAA,EAAA,GAAA,EAAA,IAAA,OAAA,IAAA,MAAA,KAAA,YAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAtDA,IAAA,EAAA,QAAA,UACA,EAAA,QAAA,iBASA,EAAA,QAAA,mBACA,EAAA,QAAA,kBACA,EAAA,QAAA,aAEM,EAAM,EAAA,EAAA,GACP,EAAA,gBAAc,CACjB,MAAO,KAAK,MAAsB,IAAhB,KAAK,UACvB,MAAO,EACP,SAAU,GACV,UAAW,GACX,MAAO,EACP,MAAO,EACP,OAAQ,CAAC,GACT,MAAO,EACP,KAAM,OACN,OAAQ,GACR,MAAO,EACP,QAAS,KAGL,EAAQ,EAAA,OACZ,EAAA,SAAS,WAAY,EAAA,OACnB,EAAA,QAAQ,CAAC,OAAQ,EAAA,YACjB,EAAA,QAAQ,EAAA,MAAO,QAAS,EAAA,OAAO,EAAG,IAAO,IACzC,EAAA,QAAQ,EAAA,MAAO,MAAO,EAAA,OAAO,EAAG,KAChC,EAAA,QAAQ,EAAA,MAAO,QAAS,EAAA,OAAO,GAAI,MACnC,EAAA,QAAQ,EAAA,MAAO,QAAS,EAAA,OAAO,EAAG,IAClC,EAAA,QAAQ,EAAA,MAAO,WAAY,EAAA,OAAO,EAAG,IACrC,EAAA,QAAQ,EAAA,MAAO,WAAY,EAAA,OAAO,EAAG,EAAG,MACxC,EAAA,QAAQ,EAAA,MAAO,YAAa,EAAA,OAAO,EAAG,EAAG,MACzC,EAAA,QAAQ,EAAA,MAAO,QAAS,EAAA,OAAO,EAAG,IAClC,EAAA,QAAQ,EAAA,MAAO,QAAS,EAAA,OAAO,EAAG,OAItC,SAAS,EAA2B,GAC3B,OAAA,EAAA,KACL,EAAA,KACE,EAAA,OAAU,CAAC,KAAM,EAAA,UACjB,EAAA,IAAI,EAAO,SAAA,GAAK,OAAA,EAAA,IAAI,CAAC,KAAM,EAAE,WAKnC,EAAA,OACE,EAAA,IAAI,CACF,MAAK,EACL,MAAO,EACP,MAAO,EAAA,MACP,MAAO,IAET,SAAS","file":"beta.f884aa38.js","sourceRoot":"../../packages/demo/beta","sourcesContent":["import { _catchError } from './diff/catch-error';\n\n/**\n * The `option` object can potentially contain callback functions\n * that are called during various stages of our renderer. This is the\n * foundation on which all our addons like `preact/debug`, `preact/compat`,\n * and `preact/hooks` are based on. See the `Options` type in `internal.d.ts`\n * for a full list of available option hooks (most editors/IDEs allow you to\n * ctrl+click or cmd+click on mac the type definition below).\n * @type {import('./internal').Options}\n */\nconst options = {\n\t_catchError,\n\t_vnodeId: 0\n};\n\nexport default options;\n","export const EMPTY_OBJ = {};\nexport const EMPTY_ARR = [];\nexport const IS_NON_DIMENSIONAL = /acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i;\n","import options from './options';\n\n/**\n * Create an virtual node (used for JSX)\n * @param {import('./internal').VNode[\"type\"]} type The node name or Component\n * constructor for this virtual node\n * @param {object | null | undefined} [props] The properties of the virtual node\n * @param {Array<import('.').ComponentChildren>} [children] The children of the virtual node\n * @returns {import('./internal').VNode}\n */\nexport function createElement(type, props, children) {\n\tlet normalizedProps = {},\n\t\tkey,\n\t\tref,\n\t\ti;\n\tfor (i in props) {\n\t\tif (i == 'key') key = props[i];\n\t\telse if (i == 'ref') ref = props[i];\n\t\telse normalizedProps[i] = props[i];\n\t}\n\n\tif (arguments.length > 3) {\n\t\tchildren = [children];\n\t\t// https://github.com/preactjs/preact/issues/1916\n\t\tfor (i = 3; i < arguments.length; i++) {\n\t\t\tchildren.push(arguments[i]);\n\t\t}\n\t}\n\tif (children != null) {\n\t\tnormalizedProps.children = children;\n\t}\n\n\t// If a Component VNode, check for and apply defaultProps\n\t// Note: type may be undefined in development, must never error here.\n\tif (typeof type == 'function' && type.defaultProps != null) {\n\t\tfor (i in type.defaultProps) {\n\t\t\tif (normalizedProps[i] === undefined) {\n\t\t\t\tnormalizedProps[i] = type.defaultProps[i];\n\t\t\t}\n\t\t}\n\t}\n\n\treturn createVNode(type, normalizedProps, key, ref, null);\n}\n\n/**\n * Create a VNode (used internally by Preact)\n * @param {import('./internal').VNode[\"type\"]} type The node name or Component\n * Constructor for this virtual node\n * @param {object | string | number | null} props The properties of this virtual node.\n * If this virtual node represents a text node, this is the text of the node (string or number).\n * @param {string | number | null} key The key for this virtual node, used when\n * diffing it against its children\n * @param {import('./internal').VNode[\"ref\"]} ref The ref property that will\n * receive a reference to its created child\n * @returns {import('./internal').VNode}\n */\nexport function createVNode(type, props, key, ref, original) {\n\t// V8 seems to be better at detecting type shapes if the object is allocated from the same call site\n\t// Do not inline into createElement and coerceToVNode!\n\tconst vnode = {\n\t\ttype,\n\t\tprops,\n\t\tkey,\n\t\tref,\n\t\t_children: null,\n\t\t_parent: null,\n\t\t_depth: 0,\n\t\t_dom: null,\n\t\t// _nextDom must be initialized to undefined b/c it will eventually\n\t\t// be set to dom.nextSibling which can return `null` and it is important\n\t\t// to be able to distinguish between an uninitialized _nextDom and\n\t\t// a _nextDom that has been set to `null`\n\t\t_nextDom: undefined,\n\t\t_component: null,\n\t\t_hydrating: null,\n\t\tconstructor: undefined,\n\t\t_original: original == null ? ++options._vnodeId : original\n\t};\n\n\tif (options.vnode != null) options.vnode(vnode);\n\n\treturn vnode;\n}\n\nexport function createRef() {\n\treturn { current: null };\n}\n\nexport function Fragment(props) {\n\treturn props.children;\n}\n\n/**\n * Check if a the argument is a valid Preact VNode.\n * @param {*} vnode\n * @returns {vnode is import('./internal').VNode}\n */\nexport const isValidElement = vnode =>\n\tvnode != null && vnode.constructor === undefined;\n","import { assign } from './util';\nimport { diff, commitRoot } from './diff/index';\nimport options from './options';\nimport { Fragment } from './create-element';\n\n/**\n * Base Component class. Provides `setState()` and `forceUpdate()`, which\n * trigger rendering\n * @param {object} props The initial component props\n * @param {object} context The initial context from parent components'\n * getChildContext\n */\nexport function Component(props, context) {\n\tthis.props = props;\n\tthis.context = context;\n}\n\n/**\n * Update component state and schedule a re-render.\n * @this {import('./internal').Component}\n * @param {object | ((s: object, p: object) => object)} update A hash of state\n * properties to update with new values or a function that given the current\n * state and props returns a new partial state\n * @param {() => void} [callback] A function to be called once component state is\n * updated\n */\nComponent.prototype.setState = function(update, callback) {\n\t// only clone state when copying to nextState the first time.\n\tlet s;\n\tif (this._nextState != null && this._nextState !== this.state) {\n\t\ts = this._nextState;\n\t} else {\n\t\ts = this._nextState = assign({}, this.state);\n\t}\n\n\tif (typeof update == 'function') {\n\t\t// Some libraries like `immer` mark the current state as readonly,\n\t\t// preventing us from mutating it, so we need to clone it. See #2716\n\t\tupdate = update(assign({}, s), this.props);\n\t}\n\n\tif (update) {\n\t\tassign(s, update);\n\t}\n\n\t// Skip update if updater function returned null\n\tif (update == null) return;\n\n\tif (this._vnode) {\n\t\tif (callback) this._renderCallbacks.push(callback);\n\t\tenqueueRender(this);\n\t}\n};\n\n/**\n * Immediately perform a synchronous re-render of the component\n * @this {import('./internal').Component}\n * @param {() => void} [callback] A function to be called after component is\n * re-rendered\n */\nComponent.prototype.forceUpdate = function(callback) {\n\tif (this._vnode) {\n\t\t// Set render mode so that we can differentiate where the render request\n\t\t// is coming from. We need this because forceUpdate should never call\n\t\t// shouldComponentUpdate\n\t\tthis._force = true;\n\t\tif (callback) this._renderCallbacks.push(callback);\n\t\tenqueueRender(this);\n\t}\n};\n\n/**\n * Accepts `props` and `state`, and returns a new Virtual DOM tree to build.\n * Virtual DOM is generally constructed via [JSX](http://jasonformat.com/wtf-is-jsx).\n * @param {object} props Props (eg: JSX attributes) received from parent\n * element/component\n * @param {object} state The component's current state\n * @param {object} context Context object, as returned by the nearest\n * ancestor's `getChildContext()`\n * @returns {import('./index').ComponentChildren | void}\n */\nComponent.prototype.render = Fragment;\n\n/**\n * @param {import('./internal').VNode} vnode\n * @param {number | null} [childIndex]\n */\nexport function getDomSibling(vnode, childIndex) {\n\tif (childIndex == null) {\n\t\t// Use childIndex==null as a signal to resume the search from the vnode's sibling\n\t\treturn vnode._parent\n\t\t\t? getDomSibling(vnode._parent, vnode._parent._children.indexOf(vnode) + 1)\n\t\t\t: null;\n\t}\n\n\tlet sibling;\n\tfor (; childIndex < vnode._children.length; childIndex++) {\n\t\tsibling = vnode._children[childIndex];\n\n\t\tif (sibling != null && sibling._dom != null) {\n\t\t\t// Since updateParentDomPointers keeps _dom pointer correct,\n\t\t\t// we can rely on _dom to tell us if this subtree contains a\n\t\t\t// rendered DOM node, and what the first rendered DOM node is\n\t\t\treturn sibling._dom;\n\t\t}\n\t}\n\n\t// If we get here, we have not found a DOM node in this vnode's children.\n\t// We must resume from this vnode's sibling (in it's parent _children array)\n\t// Only climb up and search the parent if we aren't searching through a DOM\n\t// VNode (meaning we reached the DOM parent of the original vnode that began\n\t// the search)\n\treturn typeof vnode.type == 'function' ? getDomSibling(vnode) : null;\n}\n\n/**\n * Trigger in-place re-rendering of a component.\n * @param {import('./internal').Component} component The component to rerender\n */\nfunction renderComponent(component) {\n\tlet vnode = component._vnode,\n\t\toldDom = vnode._dom,\n\t\tparentDom = component._parentDom;\n\n\tif (parentDom) {\n\t\tlet commitQueue = [];\n\t\tconst oldVNode = assign({}, vnode);\n\t\toldVNode._original = vnode._original + 1;\n\n\t\tdiff(\n\t\t\tparentDom,\n\t\t\tvnode,\n\t\t\toldVNode,\n\t\t\tcomponent._globalContext,\n\t\t\tparentDom.ownerSVGElement !== undefined,\n\t\t\tvnode._hydrating != null ? [oldDom] : null,\n\t\t\tcommitQueue,\n\t\t\toldDom == null ? getDomSibling(vnode) : oldDom,\n\t\t\tvnode._hydrating\n\t\t);\n\t\tcommitRoot(commitQueue, vnode);\n\n\t\tif (vnode._dom != oldDom) {\n\t\t\tupdateParentDomPointers(vnode);\n\t\t}\n\t}\n}\n\n/**\n * @param {import('./internal').VNode} vnode\n */\nfunction updateParentDomPointers(vnode) {\n\tif ((vnode = vnode._parent) != null && vnode._component != null) {\n\t\tvnode._dom = vnode._component.base = null;\n\t\tfor (let i = 0; i < vnode._children.length; i++) {\n\t\t\tlet child = vnode._children[i];\n\t\t\tif (child != null && child._dom != null) {\n\t\t\t\tvnode._dom = vnode._component.base = child._dom;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn updateParentDomPointers(vnode);\n\t}\n}\n\n/**\n * The render queue\n * @type {Array<import('./internal').Component>}\n */\nlet rerenderQueue = [];\n\n/**\n * Asynchronously schedule a callback\n * @type {(cb: () => void) => void}\n */\n/* istanbul ignore next */\n// Note the following line isn't tree-shaken by rollup cuz of rollup/rollup#2566\nconst defer =\n\ttypeof Promise == 'function'\n\t\t? Promise.prototype.then.bind(Promise.resolve())\n\t\t: setTimeout;\n\n/*\n * The value of `Component.debounce` must asynchronously invoke the passed in callback. It is\n * important that contributors to Preact can consistently reason about what calls to `setState`, etc.\n * do, and when their effects will be applied. See the links below for some further reading on designing\n * asynchronous APIs.\n * * [Designing APIs for Asynchrony](https://blog.izs.me/2013/08/designing-apis-for-asynchrony)\n * * [Callbacks synchronous and asynchronous](https://blog.ometer.com/2011/07/24/callbacks-synchronous-and-asynchronous/)\n */\n\nlet prevDebounce;\n\n/**\n * Enqueue a rerender of a component\n * @param {import('./internal').Component} c The component to rerender\n */\nexport function enqueueRender(c) {\n\tif (\n\t\t(!c._dirty &&\n\t\t\t(c._dirty = true) &&\n\t\t\trerenderQueue.push(c) &&\n\t\t\t!process._rerenderCount++) ||\n\t\tprevDebounce !== options.debounceRendering\n\t) {\n\t\tprevDebounce = options.debounceRendering;\n\t\t(prevDebounce || defer)(process);\n\t}\n}\n\n/** Flush the render queue by rerendering all queued components */\nfunction process() {\n\tlet queue;\n\twhile ((process._rerenderCount = rerenderQueue.length)) {\n\t\tqueue = rerenderQueue.sort((a, b) => a._vnode._depth - b._vnode._depth);\n\t\trerenderQueue = [];\n\t\t// Don't update `renderCount` yet. Keep its value non-zero to prevent unnecessary\n\t\t// process() calls from getting scheduled while `queue` is still being consumed.\n\t\tqueue.some(c => {\n\t\t\tif (c._dirty) renderComponent(c);\n\t\t});\n\t}\n}\nprocess._rerenderCount = 0;\n","import { EMPTY_OBJ, EMPTY_ARR } from './constants';\nimport { commitRoot, diff } from './diff/index';\nimport { createElement, Fragment } from './create-element';\nimport options from './options';\n\nconst IS_HYDRATE = EMPTY_OBJ;\n\n/**\n * Render a Preact virtual node into a DOM element\n * @param {import('./internal').ComponentChild} vnode The virtual node to render\n * @param {import('./internal').PreactElement} parentDom The DOM element to\n * render into\n * @param {import('./internal').PreactElement | object} [replaceNode] Optional: Attempt to re-use an\n * existing DOM tree rooted at `replaceNode`\n */\nexport function render(vnode, parentDom, replaceNode) {\n\tif (options._root) options._root(vnode, parentDom);\n\n\t// We abuse the `replaceNode` parameter in `hydrate()` to signal if we\n\t// are in hydration mode or not by passing `IS_HYDRATE` instead of a\n\t// DOM element.\n\tlet isHydrating = replaceNode === IS_HYDRATE;\n\n\t// To be able to support calling `render()` multiple times on the same\n\t// DOM node, we need to obtain a reference to the previous tree. We do\n\t// this by assigning a new `_children` property to DOM nodes which points\n\t// to the last rendered tree. By default this property is not present, which\n\t// means that we are mounting a new tree for the first time.\n\tlet oldVNode = isHydrating\n\t\t? null\n\t\t: (replaceNode && replaceNode._children) || parentDom._children;\n\tvnode = createElement(Fragment, null, [vnode]);\n\n\t// List of effects that need to be called after diffing.\n\tlet commitQueue = [];\n\tdiff(\n\t\tparentDom,\n\t\t// Determine the new vnode tree and store it on the DOM element on\n\t\t// our custom `_children` property.\n\t\t((isHydrating ? parentDom : replaceNode || parentDom)._children = vnode),\n\t\toldVNode || EMPTY_OBJ,\n\t\tEMPTY_OBJ,\n\t\tparentDom.ownerSVGElement !== undefined,\n\t\treplaceNode && !isHydrating\n\t\t\t? [replaceNode]\n\t\t\t: oldVNode\n\t\t\t? null\n\t\t\t: parentDom.childNodes.length\n\t\t\t? EMPTY_ARR.slice.call(parentDom.childNodes)\n\t\t\t: null,\n\t\tcommitQueue,\n\t\treplaceNode || EMPTY_OBJ,\n\t\tisHydrating\n\t);\n\n\t// Flush all queued effects\n\tcommitRoot(commitQueue, vnode);\n}\n\n/**\n * Update an existing DOM element with data from a Preact virtual node\n * @param {import('./internal').ComponentChild} vnode The virtual node to render\n * @param {import('./internal').PreactElement} parentDom The DOM element to\n * update\n */\nexport function hydrate(vnode, parentDom) {\n\trender(vnode, parentDom, IS_HYDRATE);\n}\n","import { enqueueRender } from './component';\n\nexport let i = 0;\n\nexport function createContext(defaultValue, contextId) {\n\tcontextId = '__cC' + i++;\n\n\tconst context = {\n\t\t_id: contextId,\n\t\t_defaultValue: defaultValue,\n\t\t/** @type {import('./internal').FunctionComponent} */\n\t\tConsumer(props, contextValue) {\n\t\t\t// return props.children(\n\t\t\t// \tcontext[contextId] ? context[contextId].props.value : defaultValue\n\t\t\t// );\n\t\t\treturn props.children(contextValue);\n\t\t},\n\t\t/** @type {import('./internal').FunctionComponent} */\n\t\tProvider(props) {\n\t\t\tif (!this.getChildContext) {\n\t\t\t\tlet subs = [];\n\t\t\t\tlet ctx = {};\n\t\t\t\tctx[contextId] = this;\n\n\t\t\t\tthis.getChildContext = () => ctx;\n\n\t\t\t\tthis.shouldComponentUpdate = function(_props) {\n\t\t\t\t\tif (this.props.value !== _props.value) {\n\t\t\t\t\t\t// I think the forced value propagation here was only needed when `options.debounceRendering` was being bypassed:\n\t\t\t\t\t\t// https://github.com/preactjs/preact/commit/4d339fb803bea09e9f198abf38ca1bf8ea4b7771#diff-54682ce380935a717e41b8bfc54737f6R358\n\t\t\t\t\t\t// In those cases though, even with the value corrected, we're double-rendering all nodes.\n\t\t\t\t\t\t// It might be better to just tell folks not to use force-sync mode.\n\t\t\t\t\t\t// Currently, using `useContext()` in a class component will overwrite its `this.context` value.\n\t\t\t\t\t\t// subs.some(c => {\n\t\t\t\t\t\t// \tc.context = _props.value;\n\t\t\t\t\t\t// \tenqueueRender(c);\n\t\t\t\t\t\t// });\n\n\t\t\t\t\t\t// subs.some(c => {\n\t\t\t\t\t\t// \tc.context[contextId] = _props.value;\n\t\t\t\t\t\t// \tenqueueRender(c);\n\t\t\t\t\t\t// });\n\t\t\t\t\t\tsubs.some(enqueueRender);\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\tthis.sub = c => {\n\t\t\t\t\tsubs.push(c);\n\t\t\t\t\tlet old = c.componentWillUnmount;\n\t\t\t\t\tc.componentWillUnmount = () => {\n\t\t\t\t\t\tsubs.splice(subs.indexOf(c), 1);\n\t\t\t\t\t\tif (old) old.call(c);\n\t\t\t\t\t};\n\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn props.children;\n\t\t}\n\t};\n\n\t// Devtools needs access to the context object when it\n\t// encounters a Provider. This is necessary to support\n\t// setting `displayName` on the context object instead\n\t// of on the component itself. See:\n\t// https://reactjs.org/docs/context.html#contextdisplayname\n\n\treturn (context.Provider._contextRef = context.Consumer.contextType = context);\n}\n","/**\n * Assign properties from `props` to `obj`\n * @template O, P The obj and props types\n * @param {O} obj The object to copy properties to\n * @param {P} props The object to copy properties from\n * @returns {O & P}\n */\nexport function assign(obj, props) {\n\t// @ts-ignore We change the type of `obj` to be `O & P`\n\tfor (let i in props) obj[i] = props[i];\n\treturn /** @type {O & P} */ (obj);\n}\n\n/**\n * Remove a child node from its parent if attached. This is a workaround for\n * IE11 which doesn't support `Element.prototype.remove()`. Using this function\n * is smaller than including a dedicated polyfill.\n * @param {Node} node The node to remove\n */\nexport function removeNode(node) {\n\tlet parentNode = node.parentNode;\n\tif (parentNode) parentNode.removeChild(node);\n}\n","import { diff, unmount, applyRef } from './index';\nimport { createVNode, Fragment } from '../create-element';\nimport { EMPTY_OBJ, EMPTY_ARR } from '../constants';\nimport { removeNode } from '../util';\nimport { getDomSibling } from '../component';\n\n/**\n * Diff the children of a virtual node\n * @param {import('../internal').PreactElement} parentDom The DOM element whose\n * children are being diffed\n * @param {import('../internal').ComponentChildren[]} renderResult\n * @param {import('../internal').VNode} newParentVNode The new virtual\n * node whose children should be diff'ed against oldParentVNode\n * @param {import('../internal').VNode} oldParentVNode The old virtual\n * node whose children should be diff'ed against newParentVNode\n * @param {object} globalContext The current context object - modified by getChildContext\n * @param {boolean} isSvg Whether or not this DOM node is an SVG node\n * @param {Array<import('../internal').PreactElement>} excessDomChildren\n * @param {Array<import('../internal').Component>} commitQueue List of components\n * which have callbacks to invoke in commitRoot\n * @param {import('../internal').PreactElement} oldDom The current attached DOM\n * element any new dom elements should be placed around. Likely `null` on first\n * render (except when hydrating). Can be a sibling DOM element when diffing\n * Fragments that have siblings. In most cases, it starts out as `oldChildren[0]._dom`.\n * @param {boolean} isHydrating Whether or not we are in hydration\n */\nexport function diffChildren(\n\tparentDom,\n\trenderResult,\n\tnewParentVNode,\n\toldParentVNode,\n\tglobalContext,\n\tisSvg,\n\texcessDomChildren,\n\tcommitQueue,\n\toldDom,\n\tisHydrating\n) {\n\tlet i, j, oldVNode, childVNode, newDom, firstChildDom, refs;\n\n\t// This is a compression of oldParentVNode!=null && oldParentVNode != EMPTY_OBJ && oldParentVNode._children || EMPTY_ARR\n\t// as EMPTY_OBJ._children should be `undefined`.\n\tlet oldChildren = (oldParentVNode && oldParentVNode._children) || EMPTY_ARR;\n\n\tlet oldChildrenLength = oldChildren.length;\n\n\t// Only in very specific places should this logic be invoked (top level `render` and `diffElementNodes`).\n\t// I'm using `EMPTY_OBJ` to signal when `diffChildren` is invoked in these situations. I can't use `null`\n\t// for this purpose, because `null` is a valid value for `oldDom` which can mean to skip to this logic\n\t// (e.g. if mounting a new tree in which the old DOM should be ignored (usually for Fragments).\n\tif (oldDom == EMPTY_OBJ) {\n\t\tif (excessDomChildren != null) {\n\t\t\toldDom = excessDomChildren[0];\n\t\t} else if (oldChildrenLength) {\n\t\t\toldDom = getDomSibling(oldParentVNode, 0);\n\t\t} else {\n\t\t\toldDom = null;\n\t\t}\n\t}\n\n\tnewParentVNode._children = [];\n\tfor (i = 0; i < renderResult.length; i++) {\n\t\tchildVNode = renderResult[i];\n\n\t\tif (childVNode == null || typeof childVNode == 'boolean') {\n\t\t\tchildVNode = newParentVNode._children[i] = null;\n\t\t}\n\t\t// If this newVNode is being reused (e.g. <div>{reuse}{reuse}</div>) in the same diff,\n\t\t// or we are rendering a component (e.g. setState) copy the oldVNodes so it can have\n\t\t// it's own DOM & etc. pointers\n\t\telse if (typeof childVNode == 'string' || typeof childVNode == 'number') {\n\t\t\tchildVNode = newParentVNode._children[i] = createVNode(\n\t\t\t\tnull,\n\t\t\t\tchildVNode,\n\t\t\t\tnull,\n\t\t\t\tnull,\n\t\t\t\tchildVNode\n\t\t\t);\n\t\t} else if (Array.isArray(childVNode)) {\n\t\t\tchildVNode = newParentVNode._children[i] = createVNode(\n\t\t\t\tFragment,\n\t\t\t\t{ children: childVNode },\n\t\t\t\tnull,\n\t\t\t\tnull,\n\t\t\t\tnull\n\t\t\t);\n\t\t} else if (childVNode._depth > 0) {\n\t\t\t// VNode is already in use, clone it. This can happen in the following\n\t\t\t// scenario:\n\t\t\t//   const reuse = <div />\n\t\t\t//   <div>{reuse}<span />{reuse}</div>\n\t\t\tchildVNode = newParentVNode._children[i] = createVNode(\n\t\t\t\tchildVNode.type,\n\t\t\t\tchildVNode.props,\n\t\t\t\tchildVNode.key,\n\t\t\t\tnull,\n\t\t\t\tchildVNode._original\n\t\t\t);\n\t\t} else {\n\t\t\tchildVNode = newParentVNode._children[i] = childVNode;\n\t\t}\n\n\t\t// Terser removes the `continue` here and wraps the loop body\n\t\t// in a `if (childVNode) { ... } condition\n\t\tif (childVNode == null) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tchildVNode._parent = newParentVNode;\n\t\tchildVNode._depth = newParentVNode._depth + 1;\n\n\t\t// Check if we find a corresponding element in oldChildren.\n\t\t// If found, delete the array item by setting to `undefined`.\n\t\t// We use `undefined`, as `null` is reserved for empty placeholders\n\t\t// (holes).\n\t\toldVNode = oldChildren[i];\n\n\t\tif (\n\t\t\toldVNode === null ||\n\t\t\t(oldVNode &&\n\t\t\t\tchildVNode.key == oldVNode.key &&\n\t\t\t\tchildVNode.type === oldVNode.type)\n\t\t) {\n\t\t\toldChildren[i] = undefined;\n\t\t} else {\n\t\t\t// Either oldVNode === undefined or oldChildrenLength > 0,\n\t\t\t// so after this loop oldVNode == null or oldVNode is a valid value.\n\t\t\tfor (j = 0; j < oldChildrenLength; j++) {\n\t\t\t\toldVNode = oldChildren[j];\n\t\t\t\t// If childVNode is unkeyed, we only match similarly unkeyed nodes, otherwise we match by key.\n\t\t\t\t// We always match by type (in either case).\n\t\t\t\tif (\n\t\t\t\t\toldVNode &&\n\t\t\t\t\tchildVNode.key == oldVNode.key &&\n\t\t\t\t\tchildVNode.type === oldVNode.type\n\t\t\t\t) {\n\t\t\t\t\toldChildren[j] = undefined;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\toldVNode = null;\n\t\t\t}\n\t\t}\n\n\t\toldVNode = oldVNode || EMPTY_OBJ;\n\n\t\t// Morph the old element into the new one, but don't append it to the dom yet\n\t\tdiff(\n\t\t\tparentDom,\n\t\t\tchildVNode,\n\t\t\toldVNode,\n\t\t\tglobalContext,\n\t\t\tisSvg,\n\t\t\texcessDomChildren,\n\t\t\tcommitQueue,\n\t\t\toldDom,\n\t\t\tisHydrating\n\t\t);\n\n\t\tnewDom = childVNode._dom;\n\n\t\tif ((j = childVNode.ref) && oldVNode.ref != j) {\n\t\t\tif (!refs) refs = [];\n\t\t\tif (oldVNode.ref) refs.push(oldVNode.ref, null, childVNode);\n\t\t\trefs.push(j, childVNode._component || newDom, childVNode);\n\t\t}\n\n\t\tif (newDom != null) {\n\t\t\tif (firstChildDom == null) {\n\t\t\t\tfirstChildDom = newDom;\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\ttypeof childVNode.type == 'function' &&\n\t\t\t\tchildVNode._children != null && // Can be null if childVNode suspended\n\t\t\t\tchildVNode._children === oldVNode._children\n\t\t\t) {\n\t\t\t\tchildVNode._nextDom = oldDom = reorderChildren(\n\t\t\t\t\tchildVNode,\n\t\t\t\t\toldDom,\n\t\t\t\t\tparentDom\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\toldDom = placeChild(\n\t\t\t\t\tparentDom,\n\t\t\t\t\tchildVNode,\n\t\t\t\t\toldVNode,\n\t\t\t\t\toldChildren,\n\t\t\t\t\texcessDomChildren,\n\t\t\t\t\tnewDom,\n\t\t\t\t\toldDom\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// Browsers will infer an option's `value` from `textContent` when\n\t\t\t// no value is present. This essentially bypasses our code to set it\n\t\t\t// later in `diff()`. It works fine in all browsers except for IE11\n\t\t\t// where it breaks setting `select.value`. There it will be always set\n\t\t\t// to an empty string. Re-applying an options value will fix that, so\n\t\t\t// there are probably some internal data structures that aren't\n\t\t\t// updated properly.\n\t\t\t//\n\t\t\t// To fix it we make sure to reset the inferred value, so that our own\n\t\t\t// value check in `diff()` won't be skipped.\n\t\t\tif (!isHydrating && newParentVNode.type === 'option') {\n\t\t\t\t// @ts-ignore We have validated that the type of parentDOM is 'option'\n\t\t\t\t// in the above check\n\t\t\t\tparentDom.value = '';\n\t\t\t} else if (typeof newParentVNode.type == 'function') {\n\t\t\t\t// Because the newParentVNode is Fragment-like, we need to set it's\n\t\t\t\t// _nextDom property to the nextSibling of its last child DOM node.\n\t\t\t\t//\n\t\t\t\t// `oldDom` contains the correct value here because if the last child\n\t\t\t\t// is a Fragment-like, then oldDom has already been set to that child's _nextDom.\n\t\t\t\t// If the last child is a DOM VNode, then oldDom will be set to that DOM\n\t\t\t\t// node's nextSibling.\n\t\t\t\tnewParentVNode._nextDom = oldDom;\n\t\t\t}\n\t\t} else if (\n\t\t\toldDom &&\n\t\t\toldVNode._dom == oldDom &&\n\t\t\toldDom.parentNode != parentDom\n\t\t) {\n\t\t\t// The above condition is to handle null placeholders. See test in placeholder.test.js:\n\t\t\t// `efficiently replace null placeholders in parent rerenders`\n\t\t\toldDom = getDomSibling(oldVNode);\n\t\t}\n\t}\n\n\tnewParentVNode._dom = firstChildDom;\n\n\t// Remove children that are not part of any vnode.\n\tif (excessDomChildren != null && typeof newParentVNode.type != 'function') {\n\t\tfor (i = excessDomChildren.length; i--; ) {\n\t\t\tif (excessDomChildren[i] != null) removeNode(excessDomChildren[i]);\n\t\t}\n\t}\n\n\t// Remove remaining oldChildren if there are any.\n\tfor (i = oldChildrenLength; i--; ) {\n\t\tif (oldChildren[i] != null) {\n\t\t\tif (\n\t\t\t\ttypeof newParentVNode.type == 'function' &&\n\t\t\t\toldChildren[i]._dom != null &&\n\t\t\t\toldChildren[i]._dom == newParentVNode._nextDom\n\t\t\t) {\n\t\t\t\t// If the newParentVNode.__nextDom points to a dom node that is about to\n\t\t\t\t// be unmounted, then get the next sibling of that vnode and set\n\t\t\t\t// _nextDom to it\n\t\t\t\tnewParentVNode._nextDom = getDomSibling(oldParentVNode, i + 1);\n\t\t\t}\n\n\t\t\tunmount(oldChildren[i], oldChildren[i]);\n\t\t}\n\t}\n\n\t// Set refs only after unmount\n\tif (refs) {\n\t\tfor (i = 0; i < refs.length; i++) {\n\t\t\tapplyRef(refs[i], refs[++i], refs[++i]);\n\t\t}\n\t}\n}\n\nfunction reorderChildren(childVNode, oldDom, parentDom) {\n\tfor (let tmp = 0; tmp < childVNode._children.length; tmp++) {\n\t\tlet vnode = childVNode._children[tmp];\n\t\tif (vnode) {\n\t\t\t// We typically enter this code path on sCU bailout, where we copy\n\t\t\t// oldVNode._children to newVNode._children. If that is the case, we need\n\t\t\t// to update the old children's _parent pointer to point to the newVNode\n\t\t\t// (childVNode here).\n\t\t\tvnode._parent = childVNode;\n\n\t\t\tif (typeof vnode.type == 'function') {\n\t\t\t\toldDom = reorderChildren(vnode, oldDom, parentDom);\n\t\t\t} else {\n\t\t\t\toldDom = placeChild(\n\t\t\t\t\tparentDom,\n\t\t\t\t\tvnode,\n\t\t\t\t\tvnode,\n\t\t\t\t\tchildVNode._children,\n\t\t\t\t\tnull,\n\t\t\t\t\tvnode._dom,\n\t\t\t\t\toldDom\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn oldDom;\n}\n\n/**\n * Flatten and loop through the children of a virtual node\n * @param {import('../index').ComponentChildren} children The unflattened\n * children of a virtual node\n * @returns {import('../internal').VNode[]}\n */\nexport function toChildArray(children, out) {\n\tout = out || [];\n\tif (children == null || typeof children == 'boolean') {\n\t} else if (Array.isArray(children)) {\n\t\tchildren.some(child => {\n\t\t\ttoChildArray(child, out);\n\t\t});\n\t} else {\n\t\tout.push(children);\n\t}\n\treturn out;\n}\n\nfunction placeChild(\n\tparentDom,\n\tchildVNode,\n\toldVNode,\n\toldChildren,\n\texcessDomChildren,\n\tnewDom,\n\toldDom\n) {\n\tlet nextDom;\n\tif (childVNode._nextDom !== undefined) {\n\t\t// Only Fragments or components that return Fragment like VNodes will\n\t\t// have a non-undefined _nextDom. Continue the diff from the sibling\n\t\t// of last DOM child of this child VNode\n\t\tnextDom = childVNode._nextDom;\n\n\t\t// Eagerly cleanup _nextDom. We don't need to persist the value because\n\t\t// it is only used by `diffChildren` to determine where to resume the diff after\n\t\t// diffing Components and Fragments. Once we store it the nextDOM local var, we\n\t\t// can clean up the property\n\t\tchildVNode._nextDom = undefined;\n\t} else if (\n\t\texcessDomChildren == oldVNode ||\n\t\tnewDom != oldDom ||\n\t\tnewDom.parentNode == null\n\t) {\n\t\t// NOTE: excessDomChildren==oldVNode above:\n\t\t// This is a compression of excessDomChildren==null && oldVNode==null!\n\t\t// The values only have the same type when `null`.\n\n\t\touter: if (oldDom == null || oldDom.parentNode !== parentDom) {\n\t\t\tparentDom.appendChild(newDom);\n\t\t\tnextDom = null;\n\t\t} else {\n\t\t\t// `j<oldChildrenLength; j+=2` is an alternative to `j++<oldChildrenLength/2`\n\t\t\tfor (\n\t\t\t\tlet sibDom = oldDom, j = 0;\n\t\t\t\t(sibDom = sibDom.nextSibling) && j < oldChildren.length;\n\t\t\t\tj += 2\n\t\t\t) {\n\t\t\t\tif (sibDom == newDom) {\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t}\n\t\t\tparentDom.insertBefore(newDom, oldDom);\n\t\t\tnextDom = oldDom;\n\t\t}\n\t}\n\n\t// If we have pre-calculated the nextDOM node, use it. Else calculate it now\n\t// Strictly check for `undefined` here cuz `null` is a valid value of `nextDom`.\n\t// See more detail in create-element.js:createVNode\n\tif (nextDom !== undefined) {\n\t\toldDom = nextDom;\n\t} else {\n\t\toldDom = newDom.nextSibling;\n\t}\n\n\treturn oldDom;\n}\n","import { IS_NON_DIMENSIONAL } from '../constants';\nimport options from '../options';\n\n/**\n * Diff the old and new properties of a VNode and apply changes to the DOM node\n * @param {import('../internal').PreactElement} dom The DOM node to apply\n * changes to\n * @param {object} newProps The new props\n * @param {object} oldProps The old props\n * @param {boolean} isSvg Whether or not this node is an SVG node\n * @param {boolean} hydrate Whether or not we are in hydration mode\n */\nexport function diffProps(dom, newProps, oldProps, isSvg, hydrate) {\n\tlet i;\n\n\tfor (i in oldProps) {\n\t\tif (i !== 'children' && i !== 'key' && !(i in newProps)) {\n\t\t\tsetProperty(dom, i, null, oldProps[i], isSvg);\n\t\t}\n\t}\n\n\tfor (i in newProps) {\n\t\tif (\n\t\t\t(!hydrate || typeof newProps[i] == 'function') &&\n\t\t\ti !== 'children' &&\n\t\t\ti !== 'key' &&\n\t\t\ti !== 'value' &&\n\t\t\ti !== 'checked' &&\n\t\t\toldProps[i] !== newProps[i]\n\t\t) {\n\t\t\tsetProperty(dom, i, newProps[i], oldProps[i], isSvg);\n\t\t}\n\t}\n}\n\nfunction setStyle(style, key, value) {\n\tif (key[0] === '-') {\n\t\tstyle.setProperty(key, value);\n\t} else if (value == null) {\n\t\tstyle[key] = '';\n\t} else if (typeof value != 'number' || IS_NON_DIMENSIONAL.test(key)) {\n\t\tstyle[key] = value;\n\t} else {\n\t\tstyle[key] = value + 'px';\n\t}\n}\n\n/**\n * Set a property value on a DOM node\n * @param {import('../internal').PreactElement} dom The DOM node to modify\n * @param {string} name The name of the property to set\n * @param {*} value The value to set the property to\n * @param {*} oldValue The old value the property had\n * @param {boolean} isSvg Whether or not this DOM node is an SVG node or not\n */\nexport function setProperty(dom, name, value, oldValue, isSvg) {\n\tlet useCapture, nameLower, proxy;\n\n\tif (isSvg && name == 'className') name = 'class';\n\n\t// if (isSvg) {\n\t// \tif (name === 'className') name = 'class';\n\t// } else if (name === 'class') name += 'Name';\n\n\tif (name === 'style') {\n\t\tif (typeof value == 'string') {\n\t\t\tdom.style.cssText = value;\n\t\t} else {\n\t\t\tif (typeof oldValue == 'string') {\n\t\t\t\tdom.style.cssText = oldValue = '';\n\t\t\t}\n\n\t\t\tif (oldValue) {\n\t\t\t\tfor (name in oldValue) {\n\t\t\t\t\tif (!(value && name in value)) {\n\t\t\t\t\t\tsetStyle(dom.style, name, '');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (value) {\n\t\t\t\tfor (name in value) {\n\t\t\t\t\tif (!oldValue || value[name] !== oldValue[name]) {\n\t\t\t\t\t\tsetStyle(dom.style, name, value[name]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t// Benchmark for comparison: https://esbench.com/bench/574c954bdb965b9a00965ac6\n\telse if (name[0] === 'o' && name[1] === 'n') {\n\t\tuseCapture = name !== (name = name.replace(/Capture$/, ''));\n\t\tnameLower = name.toLowerCase();\n\t\tif (nameLower in dom) name = nameLower;\n\t\tname = name.slice(2);\n\n\t\tif (!dom._listeners) dom._listeners = {};\n\t\tdom._listeners[name + useCapture] = value;\n\n\t\tproxy = useCapture ? eventProxyCapture : eventProxy;\n\t\tif (value) {\n\t\t\tif (!oldValue) dom.addEventListener(name, proxy, useCapture);\n\t\t} else {\n\t\t\tdom.removeEventListener(name, proxy, useCapture);\n\t\t}\n\t} else if (\n\t\tname !== 'list' &&\n\t\tname !== 'tagName' &&\n\t\t// HTMLButtonElement.form and HTMLInputElement.form are read-only but can be set using\n\t\t// setAttribute\n\t\tname !== 'form' &&\n\t\tname !== 'type' &&\n\t\tname !== 'size' &&\n\t\tname !== 'download' &&\n\t\tname !== 'href' &&\n\t\t!isSvg &&\n\t\tname in dom\n\t) {\n\t\tdom[name] = value == null ? '' : value;\n\t} else if (typeof value != 'function' && name !== 'dangerouslySetInnerHTML') {\n\t\tif (name !== (name = name.replace(/xlink:?/, ''))) {\n\t\t\tif (value == null || value === false) {\n\t\t\t\tdom.removeAttributeNS(\n\t\t\t\t\t'http://www.w3.org/1999/xlink',\n\t\t\t\t\tname.toLowerCase()\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tdom.setAttributeNS(\n\t\t\t\t\t'http://www.w3.org/1999/xlink',\n\t\t\t\t\tname.toLowerCase(),\n\t\t\t\t\tvalue\n\t\t\t\t);\n\t\t\t}\n\t\t} else if (\n\t\t\tvalue == null ||\n\t\t\t(value === false &&\n\t\t\t\t// ARIA-attributes have a different notion of boolean values.\n\t\t\t\t// The value `false` is different from the attribute not\n\t\t\t\t// existing on the DOM, so we can't remove it. For non-boolean\n\t\t\t\t// ARIA-attributes we could treat false as a removal, but the\n\t\t\t\t// amount of exceptions would cost us too many bytes. On top of\n\t\t\t\t// that other VDOM frameworks also always stringify `false`.\n\t\t\t\t!/^ar/.test(name))\n\t\t) {\n\t\t\tdom.removeAttribute(name);\n\t\t} else {\n\t\t\tdom.setAttribute(name, value);\n\t\t}\n\t}\n}\n\n/**\n * Proxy an event to hooked event handlers\n * @param {Event} e The event object from the browser\n * @private\n */\nfunction eventProxy(e) {\n\tthis._listeners[e.type + false](options.event ? options.event(e) : e);\n}\n\nfunction eventProxyCapture(e) {\n\tthis._listeners[e.type + true](options.event ? options.event(e) : e);\n}\n","import { EMPTY_OBJ, EMPTY_ARR } from '../constants';\nimport { Component } from '../component';\nimport { Fragment } from '../create-element';\nimport { diffChildren } from './children';\nimport { diffProps, setProperty } from './props';\nimport { assign, removeNode } from '../util';\nimport options from '../options';\n\n/**\n * Diff two virtual nodes and apply proper changes to the DOM\n * @param {import('../internal').PreactElement} parentDom The parent of the DOM element\n * @param {import('../internal').VNode} newVNode The new virtual node\n * @param {import('../internal').VNode} oldVNode The old virtual node\n * @param {object} globalContext The current context object. Modified by getChildContext\n * @param {boolean} isSvg Whether or not this element is an SVG node\n * @param {Array<import('../internal').PreactElement>} excessDomChildren\n * @param {Array<import('../internal').Component>} commitQueue List of components\n * which have callbacks to invoke in commitRoot\n * @param {import('../internal').PreactElement} oldDom The current attached DOM\n * element any new dom elements should be placed around. Likely `null` on first\n * render (except when hydrating). Can be a sibling DOM element when diffing\n * Fragments that have siblings. In most cases, it starts out as `oldChildren[0]._dom`.\n * @param {boolean} [isHydrating] Whether or not we are in hydration\n */\nexport function diff(\n\tparentDom,\n\tnewVNode,\n\toldVNode,\n\tglobalContext,\n\tisSvg,\n\texcessDomChildren,\n\tcommitQueue,\n\toldDom,\n\tisHydrating\n) {\n\tlet tmp,\n\t\tnewType = newVNode.type;\n\n\t// When passing through createElement it assigns the object\n\t// constructor as undefined. This to prevent JSON-injection.\n\tif (newVNode.constructor !== undefined) return null;\n\n\t// If the previous diff bailed out, resume creating/hydrating.\n\tif (oldVNode._hydrating != null) {\n\t\tisHydrating = oldVNode._hydrating;\n\t\toldDom = newVNode._dom = oldVNode._dom;\n\t\t// if we resume, we want the tree to be \"unlocked\"\n\t\tnewVNode._hydrating = null;\n\t\texcessDomChildren = [oldDom];\n\t}\n\n\tif ((tmp = options._diff)) tmp(newVNode);\n\n\ttry {\n\t\touter: if (typeof newType == 'function') {\n\t\t\tlet c, isNew, oldProps, oldState, snapshot, clearProcessingException;\n\t\t\tlet newProps = newVNode.props;\n\n\t\t\t// Necessary for createContext api. Setting this property will pass\n\t\t\t// the context value as `this.context` just for this component.\n\t\t\ttmp = newType.contextType;\n\t\t\tlet provider = tmp && globalContext[tmp._id];\n\t\t\tlet componentContext = tmp\n\t\t\t\t? provider\n\t\t\t\t\t? provider.props.value\n\t\t\t\t\t: tmp._defaultValue\n\t\t\t\t: globalContext;\n\n\t\t\t// Get component and set it to `c`\n\t\t\tif (oldVNode._component) {\n\t\t\t\tc = newVNode._component = oldVNode._component;\n\t\t\t\tclearProcessingException = c._processingException = c._pendingError;\n\t\t\t} else {\n\t\t\t\t// Instantiate the new component\n\t\t\t\tif ('prototype' in newType && newType.prototype.render) {\n\t\t\t\t\t// @ts-ignore The check above verifies that newType is suppose to be constructed\n\t\t\t\t\tnewVNode._component = c = new newType(newProps, componentContext); // eslint-disable-line new-cap\n\t\t\t\t} else {\n\t\t\t\t\t// @ts-ignore Trust me, Component implements the interface we want\n\t\t\t\t\tnewVNode._component = c = new Component(newProps, componentContext);\n\t\t\t\t\tc.constructor = newType;\n\t\t\t\t\tc.render = doRender;\n\t\t\t\t}\n\t\t\t\tif (provider) provider.sub(c);\n\n\t\t\t\tc.props = newProps;\n\t\t\t\tif (!c.state) c.state = {};\n\t\t\t\tc.context = componentContext;\n\t\t\t\tc._globalContext = globalContext;\n\t\t\t\tisNew = c._dirty = true;\n\t\t\t\tc._renderCallbacks = [];\n\t\t\t}\n\n\t\t\t// Invoke getDerivedStateFromProps\n\t\t\tif (c._nextState == null) {\n\t\t\t\tc._nextState = c.state;\n\t\t\t}\n\t\t\tif (newType.getDerivedStateFromProps != null) {\n\t\t\t\tif (c._nextState == c.state) {\n\t\t\t\t\tc._nextState = assign({}, c._nextState);\n\t\t\t\t}\n\n\t\t\t\tassign(\n\t\t\t\t\tc._nextState,\n\t\t\t\t\tnewType.getDerivedStateFromProps(newProps, c._nextState)\n\t\t\t\t);\n\t\t\t}\n\n\t\t\toldProps = c.props;\n\t\t\toldState = c.state;\n\n\t\t\t// Invoke pre-render lifecycle methods\n\t\t\tif (isNew) {\n\t\t\t\tif (\n\t\t\t\t\tnewType.getDerivedStateFromProps == null &&\n\t\t\t\t\tc.componentWillMount != null\n\t\t\t\t) {\n\t\t\t\t\tc.componentWillMount();\n\t\t\t\t}\n\n\t\t\t\tif (c.componentDidMount != null) {\n\t\t\t\t\tc._renderCallbacks.push(c.componentDidMount);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (\n\t\t\t\t\tnewType.getDerivedStateFromProps == null &&\n\t\t\t\t\tnewProps !== oldProps &&\n\t\t\t\t\tc.componentWillReceiveProps != null\n\t\t\t\t) {\n\t\t\t\t\tc.componentWillReceiveProps(newProps, componentContext);\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\t(!c._force &&\n\t\t\t\t\t\tc.shouldComponentUpdate != null &&\n\t\t\t\t\t\tc.shouldComponentUpdate(\n\t\t\t\t\t\t\tnewProps,\n\t\t\t\t\t\t\tc._nextState,\n\t\t\t\t\t\t\tcomponentContext\n\t\t\t\t\t\t) === false) ||\n\t\t\t\t\tnewVNode._original === oldVNode._original\n\t\t\t\t) {\n\t\t\t\t\tc.props = newProps;\n\t\t\t\t\tc.state = c._nextState;\n\t\t\t\t\t// More info about this here: https://gist.github.com/JoviDeCroock/bec5f2ce93544d2e6070ef8e0036e4e8\n\t\t\t\t\tif (newVNode._original !== oldVNode._original) c._dirty = false;\n\t\t\t\t\tc._vnode = newVNode;\n\t\t\t\t\tnewVNode._dom = oldVNode._dom;\n\t\t\t\t\tnewVNode._children = oldVNode._children;\n\t\t\t\t\tif (c._renderCallbacks.length) {\n\t\t\t\t\t\tcommitQueue.push(c);\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\n\t\t\t\tif (c.componentWillUpdate != null) {\n\t\t\t\t\tc.componentWillUpdate(newProps, c._nextState, componentContext);\n\t\t\t\t}\n\n\t\t\t\tif (c.componentDidUpdate != null) {\n\t\t\t\t\tc._renderCallbacks.push(() => {\n\t\t\t\t\t\tc.componentDidUpdate(oldProps, oldState, snapshot);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tc.context = componentContext;\n\t\t\tc.props = newProps;\n\t\t\tc.state = c._nextState;\n\n\t\t\tif ((tmp = options._render)) tmp(newVNode);\n\n\t\t\tc._dirty = false;\n\t\t\tc._vnode = newVNode;\n\t\t\tc._parentDom = parentDom;\n\n\t\t\ttmp = c.render(c.props, c.state, c.context);\n\n\t\t\t// Handle setState called in render, see #2553\n\t\t\tc.state = c._nextState;\n\n\t\t\tif (c.getChildContext != null) {\n\t\t\t\tglobalContext = assign(assign({}, globalContext), c.getChildContext());\n\t\t\t}\n\n\t\t\tif (!isNew && c.getSnapshotBeforeUpdate != null) {\n\t\t\t\tsnapshot = c.getSnapshotBeforeUpdate(oldProps, oldState);\n\t\t\t}\n\n\t\t\tlet isTopLevelFragment =\n\t\t\t\ttmp != null && tmp.type === Fragment && tmp.key == null;\n\t\t\tlet renderResult = isTopLevelFragment ? tmp.props.children : tmp;\n\n\t\t\tdiffChildren(\n\t\t\t\tparentDom,\n\t\t\t\tArray.isArray(renderResult) ? renderResult : [renderResult],\n\t\t\t\tnewVNode,\n\t\t\t\toldVNode,\n\t\t\t\tglobalContext,\n\t\t\t\tisSvg,\n\t\t\t\texcessDomChildren,\n\t\t\t\tcommitQueue,\n\t\t\t\toldDom,\n\t\t\t\tisHydrating\n\t\t\t);\n\n\t\t\tc.base = newVNode._dom;\n\n\t\t\t// We successfully rendered this VNode, unset any stored hydration/bailout state:\n\t\t\tnewVNode._hydrating = null;\n\n\t\t\tif (c._renderCallbacks.length) {\n\t\t\t\tcommitQueue.push(c);\n\t\t\t}\n\n\t\t\tif (clearProcessingException) {\n\t\t\t\tc._pendingError = c._processingException = null;\n\t\t\t}\n\n\t\t\tc._force = false;\n\t\t} else if (\n\t\t\texcessDomChildren == null &&\n\t\t\tnewVNode._original === oldVNode._original\n\t\t) {\n\t\t\tnewVNode._children = oldVNode._children;\n\t\t\tnewVNode._dom = oldVNode._dom;\n\t\t} else {\n\t\t\tnewVNode._dom = diffElementNodes(\n\t\t\t\toldVNode._dom,\n\t\t\t\tnewVNode,\n\t\t\t\toldVNode,\n\t\t\t\tglobalContext,\n\t\t\t\tisSvg,\n\t\t\t\texcessDomChildren,\n\t\t\t\tcommitQueue,\n\t\t\t\tisHydrating\n\t\t\t);\n\t\t}\n\n\t\tif ((tmp = options.diffed)) tmp(newVNode);\n\t} catch (e) {\n\t\tnewVNode._original = null;\n\t\t// if hydrating or creating initial tree, bailout preserves DOM:\n\t\tif (isHydrating || excessDomChildren != null) {\n\t\t\tnewVNode._dom = oldDom;\n\t\t\tnewVNode._hydrating = !!isHydrating;\n\t\t\texcessDomChildren[excessDomChildren.indexOf(oldDom)] = null;\n\t\t\t// ^ could possibly be simplified to:\n\t\t\t// excessDomChildren.length = 0;\n\t\t}\n\t\toptions._catchError(e, newVNode, oldVNode);\n\t}\n}\n\n/**\n * @param {Array<import('../internal').Component>} commitQueue List of components\n * which have callbacks to invoke in commitRoot\n * @param {import('../internal').VNode} root\n */\nexport function commitRoot(commitQueue, root) {\n\tif (options._commit) options._commit(root, commitQueue);\n\n\tcommitQueue.some(c => {\n\t\ttry {\n\t\t\t// @ts-ignore Reuse the commitQueue variable here so the type changes\n\t\t\tcommitQueue = c._renderCallbacks;\n\t\t\tc._renderCallbacks = [];\n\t\t\tcommitQueue.some(cb => {\n\t\t\t\t// @ts-ignore See above ts-ignore on commitQueue\n\t\t\t\tcb.call(c);\n\t\t\t});\n\t\t} catch (e) {\n\t\t\toptions._catchError(e, c._vnode);\n\t\t}\n\t});\n}\n\n/**\n * Diff two virtual nodes representing DOM element\n * @param {import('../internal').PreactElement} dom The DOM element representing\n * the virtual nodes being diffed\n * @param {import('../internal').VNode} newVNode The new virtual node\n * @param {import('../internal').VNode} oldVNode The old virtual node\n * @param {object} globalContext The current context object\n * @param {boolean} isSvg Whether or not this DOM node is an SVG node\n * @param {*} excessDomChildren\n * @param {Array<import('../internal').Component>} commitQueue List of components\n * which have callbacks to invoke in commitRoot\n * @param {boolean} isHydrating Whether or not we are in hydration\n * @returns {import('../internal').PreactElement}\n */\nfunction diffElementNodes(\n\tdom,\n\tnewVNode,\n\toldVNode,\n\tglobalContext,\n\tisSvg,\n\texcessDomChildren,\n\tcommitQueue,\n\tisHydrating\n) {\n\tlet i;\n\tlet oldProps = oldVNode.props;\n\tlet newProps = newVNode.props;\n\n\t// Tracks entering and exiting SVG namespace when descending through the tree.\n\tisSvg = newVNode.type === 'svg' || isSvg;\n\n\tif (excessDomChildren != null) {\n\t\tfor (i = 0; i < excessDomChildren.length; i++) {\n\t\t\tconst child = excessDomChildren[i];\n\n\t\t\t// if newVNode matches an element in excessDomChildren or the `dom`\n\t\t\t// argument matches an element in excessDomChildren, remove it from\n\t\t\t// excessDomChildren so it isn't later removed in diffChildren\n\t\t\tif (\n\t\t\t\tchild != null &&\n\t\t\t\t((newVNode.type === null\n\t\t\t\t\t? child.nodeType === 3\n\t\t\t\t\t: child.localName === newVNode.type) ||\n\t\t\t\t\tdom == child)\n\t\t\t) {\n\t\t\t\tdom = child;\n\t\t\t\texcessDomChildren[i] = null;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tif (dom == null) {\n\t\tif (newVNode.type === null) {\n\t\t\t// @ts-ignore createTextNode returns Text, we expect PreactElement\n\t\t\treturn document.createTextNode(newProps);\n\t\t}\n\n\t\tif (isSvg) {\n\t\t\tdom = document.createElementNS(\n\t\t\t\t'http://www.w3.org/2000/svg',\n\t\t\t\t// @ts-ignore We know `newVNode.type` is a string\n\t\t\t\tnewVNode.type\n\t\t\t);\n\t\t} else {\n\t\t\tdom = document.createElement(\n\t\t\t\t// @ts-ignore We know `newVNode.type` is a string\n\t\t\t\tnewVNode.type,\n\t\t\t\tnewProps.is && { is: newProps.is }\n\t\t\t);\n\t\t}\n\n\t\t// we created a new parent, so none of the previously attached children can be reused:\n\t\texcessDomChildren = null;\n\t\t// we are creating a new node, so we can assume this is a new subtree (in case we are hydrating), this deopts the hydrate\n\t\tisHydrating = false;\n\t}\n\n\tif (newVNode.type === null) {\n\t\t// During hydration, we still have to split merged text from SSR'd HTML.\n\t\tif (oldProps !== newProps && (!isHydrating || dom.data !== newProps)) {\n\t\t\tdom.data = newProps;\n\t\t}\n\t} else {\n\t\tif (excessDomChildren != null) {\n\t\t\texcessDomChildren = EMPTY_ARR.slice.call(dom.childNodes);\n\t\t}\n\n\t\toldProps = oldVNode.props || EMPTY_OBJ;\n\n\t\tlet oldHtml = oldProps.dangerouslySetInnerHTML;\n\t\tlet newHtml = newProps.dangerouslySetInnerHTML;\n\n\t\t// During hydration, props are not diffed at all (including dangerouslySetInnerHTML)\n\t\t// @TODO we should warn in debug mode when props don't match here.\n\t\tif (!isHydrating) {\n\t\t\t// But, if we are in a situation where we are using existing DOM (e.g. replaceNode)\n\t\t\t// we should read the existing DOM attributes to diff them\n\t\t\tif (excessDomChildren != null) {\n\t\t\t\toldProps = {};\n\t\t\t\tfor (let i = 0; i < dom.attributes.length; i++) {\n\t\t\t\t\toldProps[dom.attributes[i].name] = dom.attributes[i].value;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (newHtml || oldHtml) {\n\t\t\t\t// Avoid re-applying the same '__html' if it did not changed between re-render\n\t\t\t\tif (\n\t\t\t\t\t!newHtml ||\n\t\t\t\t\t((!oldHtml || newHtml.__html != oldHtml.__html) &&\n\t\t\t\t\t\tnewHtml.__html !== dom.innerHTML)\n\t\t\t\t) {\n\t\t\t\t\tdom.innerHTML = (newHtml && newHtml.__html) || '';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tdiffProps(dom, newProps, oldProps, isSvg, isHydrating);\n\n\t\t// If the new vnode didn't have dangerouslySetInnerHTML, diff its children\n\t\tif (newHtml) {\n\t\t\tnewVNode._children = [];\n\t\t} else {\n\t\t\ti = newVNode.props.children;\n\t\t\tdiffChildren(\n\t\t\t\tdom,\n\t\t\t\tArray.isArray(i) ? i : [i],\n\t\t\t\tnewVNode,\n\t\t\t\toldVNode,\n\t\t\t\tglobalContext,\n\t\t\t\tnewVNode.type === 'foreignObject' ? false : isSvg,\n\t\t\t\texcessDomChildren,\n\t\t\t\tcommitQueue,\n\t\t\t\tEMPTY_OBJ,\n\t\t\t\tisHydrating\n\t\t\t);\n\t\t}\n\n\t\t// (as above, don't diff props during hydration)\n\t\tif (!isHydrating) {\n\t\t\tif (\n\t\t\t\t'value' in newProps &&\n\t\t\t\t(i = newProps.value) !== undefined &&\n\t\t\t\t// #2756 For the <progress>-element the initial value is 0,\n\t\t\t\t// despite the attribute not being present. When the attribute\n\t\t\t\t// is missing the progress bar is treated as indeterminate.\n\t\t\t\t// To fix that we'll always update it when it is 0 for progress elements\n\t\t\t\t(i !== dom.value || (newVNode.type === 'progress' && !i))\n\t\t\t) {\n\t\t\t\tsetProperty(dom, 'value', i, oldProps.value, false);\n\t\t\t}\n\t\t\tif (\n\t\t\t\t'checked' in newProps &&\n\t\t\t\t(i = newProps.checked) !== undefined &&\n\t\t\t\ti !== dom.checked\n\t\t\t) {\n\t\t\t\tsetProperty(dom, 'checked', i, oldProps.checked, false);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn dom;\n}\n\n/**\n * Invoke or update a ref, depending on whether it is a function or object ref.\n * @param {object|function} ref\n * @param {any} value\n * @param {import('../internal').VNode} vnode\n */\nexport function applyRef(ref, value, vnode) {\n\ttry {\n\t\tif (typeof ref == 'function') ref(value);\n\t\telse ref.current = value;\n\t} catch (e) {\n\t\toptions._catchError(e, vnode);\n\t}\n}\n\n/**\n * Unmount a virtual node from the tree and apply DOM changes\n * @param {import('../internal').VNode} vnode The virtual node to unmount\n * @param {import('../internal').VNode} parentVNode The parent of the VNode that\n * initiated the unmount\n * @param {boolean} [skipRemove] Flag that indicates that a parent node of the\n * current element is already detached from the DOM.\n */\nexport function unmount(vnode, parentVNode, skipRemove) {\n\tlet r;\n\tif (options.unmount) options.unmount(vnode);\n\n\tif ((r = vnode.ref)) {\n\t\tif (!r.current || r.current === vnode._dom) applyRef(r, null, parentVNode);\n\t}\n\n\tlet dom;\n\tif (!skipRemove && typeof vnode.type != 'function') {\n\t\tskipRemove = (dom = vnode._dom) != null;\n\t}\n\n\t// Must be set to `undefined` to properly clean up `_nextDom`\n\t// for which `null` is a valid value. See comment in `create-element.js`\n\tvnode._dom = vnode._nextDom = undefined;\n\n\tif ((r = vnode._component) != null) {\n\t\tif (r.componentWillUnmount) {\n\t\t\ttry {\n\t\t\t\tr.componentWillUnmount();\n\t\t\t} catch (e) {\n\t\t\t\toptions._catchError(e, parentVNode);\n\t\t\t}\n\t\t}\n\n\t\tr.base = r._parentDom = null;\n\t}\n\n\tif ((r = vnode._children)) {\n\t\tfor (let i = 0; i < r.length; i++) {\n\t\t\tif (r[i]) unmount(r[i], parentVNode, skipRemove);\n\t\t}\n\t}\n\n\tif (dom != null) removeNode(dom);\n}\n\n/** The `.render()` method for a PFC backing instance. */\nfunction doRender(props, state, context) {\n\treturn this.constructor(props, context);\n}\n","import { assign } from './util';\nimport { createVNode } from './create-element';\n\n/**\n * Clones the given VNode, optionally adding attributes/props and replacing its children.\n * @param {import('./internal').VNode} vnode The virtual DOM element to clone\n * @param {object} props Attributes/props to add when cloning\n * @param {Array<import('./internal').ComponentChildren>} rest Any additional arguments will be used as replacement children.\n * @returns {import('./internal').VNode}\n */\nexport function cloneElement(vnode, props, children) {\n\tlet normalizedProps = assign({}, vnode.props),\n\t\tkey,\n\t\tref,\n\t\ti;\n\tfor (i in props) {\n\t\tif (i == 'key') key = props[i];\n\t\telse if (i == 'ref') ref = props[i];\n\t\telse normalizedProps[i] = props[i];\n\t}\n\n\tif (arguments.length > 3) {\n\t\tchildren = [children];\n\t\tfor (i = 3; i < arguments.length; i++) {\n\t\t\tchildren.push(arguments[i]);\n\t\t}\n\t}\n\tif (children != null) {\n\t\tnormalizedProps.children = children;\n\t}\n\n\treturn createVNode(\n\t\tvnode.type,\n\t\tnormalizedProps,\n\t\tkey || vnode.key,\n\t\tref || vnode.ref,\n\t\tnull\n\t);\n}\n","// import { enqueueRender } from '../component';\n\n/**\n * Find the closest error boundary to a thrown error and call it\n * @param {object} error The thrown value\n * @param {import('../internal').VNode} vnode The vnode that threw\n * the error that was caught (except for unmounting when this parameter\n * is the highest parent that was being unmounted)\n */\nexport function _catchError(error, vnode) {\n\t/** @type {import('../internal').Component} */\n\tlet component, ctor, handled;\n\n\tconst wasHydrating = vnode._hydrating;\n\n\tfor (; (vnode = vnode._parent); ) {\n\t\tif ((component = vnode._component) && !component._processingException) {\n\t\t\ttry {\n\t\t\t\tctor = component.constructor;\n\n\t\t\t\tif (ctor && ctor.getDerivedStateFromError != null) {\n\t\t\t\t\tcomponent.setState(ctor.getDerivedStateFromError(error));\n\t\t\t\t\thandled = component._dirty;\n\t\t\t\t}\n\n\t\t\t\tif (component.componentDidCatch != null) {\n\t\t\t\t\tcomponent.componentDidCatch(error);\n\t\t\t\t\thandled = component._dirty;\n\t\t\t\t}\n\n\t\t\t\t// This is an error boundary. Mark it as having bailed out, and whether it was mid-hydration.\n\t\t\t\tif (handled) {\n\t\t\t\t\tvnode._hydrating = wasHydrating;\n\t\t\t\t\treturn (component._pendingError = component);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\terror = e;\n\t\t\t}\n\t\t}\n\t}\n\n\tthrow error;\n}\n","import { options } from 'preact';\n\n/** @type {number} */\nlet currentIndex;\n\n/** @type {import('./internal').Component} */\nlet currentComponent;\n/**\n * Keep track of the previous component so that we can set\n * `currentComponent` to `null` and throw when a hook is invoked\n * outside of render\n * @type {import('./internal').Component}\n */\nlet previousComponent;\n\n/** @type {number} */\nlet currentHook = 0;\n\n/** @type {Array<import('./internal').Component>} */\nlet afterPaintEffects = [];\n\nlet oldBeforeDiff = options._diff;\nlet oldBeforeRender = options._render;\nlet oldAfterDiff = options.diffed;\nlet oldCommit = options._commit;\nlet oldBeforeUnmount = options.unmount;\n\nconst RAF_TIMEOUT = 100;\nlet prevRaf;\n\noptions._diff = vnode => {\n\tcurrentComponent = null;\n\tif (oldBeforeDiff) oldBeforeDiff(vnode);\n};\n\noptions._render = vnode => {\n\tif (oldBeforeRender) oldBeforeRender(vnode);\n\n\tcurrentComponent = vnode._component;\n\tcurrentIndex = 0;\n\n\tconst hooks = currentComponent.__hooks;\n\tif (hooks) {\n\t\thooks._pendingEffects.forEach(invokeCleanup);\n\t\thooks._pendingEffects.forEach(invokeEffect);\n\t\thooks._pendingEffects = [];\n\t}\n};\n\noptions.diffed = vnode => {\n\tif (oldAfterDiff) oldAfterDiff(vnode);\n\n\tconst c = vnode._component;\n\tif (c && c.__hooks && c.__hooks._pendingEffects.length) {\n\t\tafterPaint(afterPaintEffects.push(c));\n\t}\n\tcurrentComponent = previousComponent;\n};\n\noptions._commit = (vnode, commitQueue) => {\n\tcommitQueue.some(component => {\n\t\ttry {\n\t\t\tcomponent._renderCallbacks.forEach(invokeCleanup);\n\t\t\tcomponent._renderCallbacks = component._renderCallbacks.filter(cb =>\n\t\t\t\tcb._value ? invokeEffect(cb) : true\n\t\t\t);\n\t\t} catch (e) {\n\t\t\tcommitQueue.some(c => {\n\t\t\t\tif (c._renderCallbacks) c._renderCallbacks = [];\n\t\t\t});\n\t\t\tcommitQueue = [];\n\t\t\toptions._catchError(e, component._vnode);\n\t\t}\n\t});\n\n\tif (oldCommit) oldCommit(vnode, commitQueue);\n};\n\noptions.unmount = vnode => {\n\tif (oldBeforeUnmount) oldBeforeUnmount(vnode);\n\n\tconst c = vnode._component;\n\tif (c && c.__hooks) {\n\t\ttry {\n\t\t\tc.__hooks._list.forEach(invokeCleanup);\n\t\t} catch (e) {\n\t\t\toptions._catchError(e, c._vnode);\n\t\t}\n\t}\n};\n\n/**\n * Get a hook's state from the currentComponent\n * @param {number} index The index of the hook to get\n * @param {number} type The index of the hook to get\n * @returns {any}\n */\nfunction getHookState(index, type) {\n\tif (options._hook) {\n\t\toptions._hook(currentComponent, index, currentHook || type);\n\t}\n\tcurrentHook = 0;\n\n\t// Largely inspired by:\n\t// * https://github.com/michael-klein/funcy.js/blob/f6be73468e6ec46b0ff5aa3cc4c9baf72a29025a/src/hooks/core_hooks.mjs\n\t// * https://github.com/michael-klein/funcy.js/blob/650beaa58c43c33a74820a3c98b3c7079cf2e333/src/renderer.mjs\n\t// Other implementations to look at:\n\t// * https://codesandbox.io/s/mnox05qp8\n\tconst hooks =\n\t\tcurrentComponent.__hooks ||\n\t\t(currentComponent.__hooks = {\n\t\t\t_list: [],\n\t\t\t_pendingEffects: []\n\t\t});\n\n\tif (index >= hooks._list.length) {\n\t\thooks._list.push({});\n\t}\n\treturn hooks._list[index];\n}\n\n/**\n * @param {import('./index').StateUpdater<any>} [initialState]\n */\nexport function useState(initialState) {\n\tcurrentHook = 1;\n\treturn useReducer(invokeOrReturn, initialState);\n}\n\n/**\n * @param {import('./index').Reducer<any, any>} reducer\n * @param {import('./index').StateUpdater<any>} initialState\n * @param {(initialState: any) => void} [init]\n * @returns {[ any, (state: any) => void ]}\n */\nexport function useReducer(reducer, initialState, init) {\n\t/** @type {import('./internal').ReducerHookState} */\n\tconst hookState = getHookState(currentIndex++, 2);\n\thookState._reducer = reducer;\n\tif (!hookState._component) {\n\t\thookState._value = [\n\t\t\t!init ? invokeOrReturn(undefined, initialState) : init(initialState),\n\n\t\t\taction => {\n\t\t\t\tconst nextValue = hookState._reducer(hookState._value[0], action);\n\t\t\t\tif (hookState._value[0] !== nextValue) {\n\t\t\t\t\thookState._value = [nextValue, hookState._value[1]];\n\t\t\t\t\thookState._component.setState({});\n\t\t\t\t}\n\t\t\t}\n\t\t];\n\n\t\thookState._component = currentComponent;\n\t}\n\n\treturn hookState._value;\n}\n\n/**\n * @param {import('./internal').Effect} callback\n * @param {any[]} args\n */\nexport function useEffect(callback, args) {\n\t/** @type {import('./internal').EffectHookState} */\n\tconst state = getHookState(currentIndex++, 3);\n\tif (!options._skipEffects && argsChanged(state._args, args)) {\n\t\tstate._value = callback;\n\t\tstate._args = args;\n\n\t\tcurrentComponent.__hooks._pendingEffects.push(state);\n\t}\n}\n\n/**\n * @param {import('./internal').Effect} callback\n * @param {any[]} args\n */\nexport function useLayoutEffect(callback, args) {\n\t/** @type {import('./internal').EffectHookState} */\n\tconst state = getHookState(currentIndex++, 4);\n\tif (!options._skipEffects && argsChanged(state._args, args)) {\n\t\tstate._value = callback;\n\t\tstate._args = args;\n\n\t\tcurrentComponent._renderCallbacks.push(state);\n\t}\n}\n\nexport function useRef(initialValue) {\n\tcurrentHook = 5;\n\treturn useMemo(() => ({ current: initialValue }), []);\n}\n\n/**\n * @param {object} ref\n * @param {() => object} createHandle\n * @param {any[]} args\n */\nexport function useImperativeHandle(ref, createHandle, args) {\n\tcurrentHook = 6;\n\tuseLayoutEffect(\n\t\t() => {\n\t\t\tif (typeof ref == 'function') ref(createHandle());\n\t\t\telse if (ref) ref.current = createHandle();\n\t\t},\n\t\targs == null ? args : args.concat(ref)\n\t);\n}\n\n/**\n * @param {() => any} factory\n * @param {any[]} args\n */\nexport function useMemo(factory, args) {\n\t/** @type {import('./internal').MemoHookState} */\n\tconst state = getHookState(currentIndex++, 7);\n\tif (argsChanged(state._args, args)) {\n\t\tstate._value = factory();\n\t\tstate._args = args;\n\t\tstate._factory = factory;\n\t}\n\n\treturn state._value;\n}\n\n/**\n * @param {() => void} callback\n * @param {any[]} args\n */\nexport function useCallback(callback, args) {\n\tcurrentHook = 8;\n\treturn useMemo(() => callback, args);\n}\n\n/**\n * @param {import('./internal').PreactContext} context\n */\nexport function useContext(context) {\n\tconst provider = currentComponent.context[context._id];\n\t// We could skip this call here, but than we'd not call\n\t// `options._hook`. We need to do that in order to make\n\t// the devtools aware of this hook.\n\t/** @type {import('./internal').ContextHookState} */\n\tconst state = getHookState(currentIndex++, 9);\n\t// The devtools needs access to the context object to\n\t// be able to pull of the default value when no provider\n\t// is present in the tree.\n\tstate._context = context;\n\tif (!provider) return context._defaultValue;\n\t// This is probably not safe to convert to \"!\"\n\tif (state._value == null) {\n\t\tstate._value = true;\n\t\tprovider.sub(currentComponent);\n\t}\n\treturn provider.props.value;\n}\n\n/**\n * Display a custom label for a custom hook for the devtools panel\n * @type {<T>(value: T, cb?: (value: T) => string | number) => void}\n */\nexport function useDebugValue(value, formatter) {\n\tif (options.useDebugValue) {\n\t\toptions.useDebugValue(formatter ? formatter(value) : value);\n\t}\n}\n\n/**\n * @param {(error: any) => void} cb\n */\nexport function useErrorBoundary(cb) {\n\t/** @type {import('./internal').ErrorBoundaryHookState} */\n\tconst state = getHookState(currentIndex++, 10);\n\tconst errState = useState();\n\tstate._value = cb;\n\tif (!currentComponent.componentDidCatch) {\n\t\tcurrentComponent.componentDidCatch = err => {\n\t\t\tif (state._value) state._value(err);\n\t\t\terrState[1](err);\n\t\t};\n\t}\n\treturn [\n\t\terrState[0],\n\t\t() => {\n\t\t\terrState[1](undefined);\n\t\t}\n\t];\n}\n\n/**\n * After paint effects consumer.\n */\nfunction flushAfterPaintEffects() {\n\tafterPaintEffects.forEach(component => {\n\t\tif (component._parentDom) {\n\t\t\ttry {\n\t\t\t\tcomponent.__hooks._pendingEffects.forEach(invokeCleanup);\n\t\t\t\tcomponent.__hooks._pendingEffects.forEach(invokeEffect);\n\t\t\t\tcomponent.__hooks._pendingEffects = [];\n\t\t\t} catch (e) {\n\t\t\t\tcomponent.__hooks._pendingEffects = [];\n\t\t\t\toptions._catchError(e, component._vnode);\n\t\t\t}\n\t\t}\n\t});\n\tafterPaintEffects = [];\n}\n\nlet HAS_RAF = typeof requestAnimationFrame == 'function';\n\n/**\n * Schedule a callback to be invoked after the browser has a chance to paint a new frame.\n * Do this by combining requestAnimationFrame (rAF) + setTimeout to invoke a callback after\n * the next browser frame.\n *\n * Also, schedule a timeout in parallel to the the rAF to ensure the callback is invoked\n * even if RAF doesn't fire (for example if the browser tab is not visible)\n *\n * @param {() => void} callback\n */\nfunction afterNextFrame(callback) {\n\tconst done = () => {\n\t\tclearTimeout(timeout);\n\t\tif (HAS_RAF) cancelAnimationFrame(raf);\n\t\tsetTimeout(callback);\n\t};\n\tconst timeout = setTimeout(done, RAF_TIMEOUT);\n\n\tlet raf;\n\tif (HAS_RAF) {\n\t\traf = requestAnimationFrame(done);\n\t}\n}\n\n// Note: if someone used options.debounceRendering = requestAnimationFrame,\n// then effects will ALWAYS run on the NEXT frame instead of the current one, incurring a ~16ms delay.\n// Perhaps this is not such a big deal.\n/**\n * Schedule afterPaintEffects flush after the browser paints\n * @param {number} newQueueLength\n */\nfunction afterPaint(newQueueLength) {\n\tif (newQueueLength === 1 || prevRaf !== options.requestAnimationFrame) {\n\t\tprevRaf = options.requestAnimationFrame;\n\t\t(prevRaf || afterNextFrame)(flushAfterPaintEffects);\n\t}\n}\n\n/**\n * @param {import('./internal').EffectHookState} hook\n */\nfunction invokeCleanup(hook) {\n\t// A hook cleanup can introduce a call to render which creates a new root, this will call options.vnode\n\t// and move the currentComponent away.\n\tconst comp = currentComponent;\n\tif (typeof hook._cleanup == 'function') hook._cleanup();\n\tcurrentComponent = comp;\n}\n\n/**\n * Invoke a Hook's effect\n * @param {import('./internal').EffectHookState} hook\n */\nfunction invokeEffect(hook) {\n\t// A hook call can introduce a call to render which creates a new root, this will call options.vnode\n\t// and move the currentComponent away.\n\tconst comp = currentComponent;\n\thook._cleanup = hook._value();\n\tcurrentComponent = comp;\n}\n\n/**\n * @param {any[]} oldArgs\n * @param {any[]} newArgs\n */\nfunction argsChanged(oldArgs, newArgs) {\n\treturn (\n\t\t!oldArgs ||\n\t\toldArgs.length !== newArgs.length ||\n\t\tnewArgs.some((arg, index) => arg !== oldArgs[index])\n\t);\n}\n\nfunction invokeOrReturn(arg, f) {\n\treturn typeof f == 'function' ? f(arg) : f;\n}\n","export var red = {\"50\":\"#ffebee\",\"100\":\"#ffcdd2\",\"200\":\"#ef9a9a\",\"300\":\"#e57373\",\"400\":\"#ef5350\",\"500\":\"#f44336\",\"600\":\"#e53935\",\"700\":\"#d32f2f\",\"800\":\"#c62828\",\"900\":\"#b71c1c\",\"a100\":\"#ff8a80\",\"a200\":\"#ff5252\",\"a400\":\"#ff1744\",\"a700\":\"#d50000\"};\nexport var pink = {\"50\":\"#fce4ec\",\"100\":\"#f8bbd0\",\"200\":\"#f48fb1\",\"300\":\"#f06292\",\"400\":\"#ec407a\",\"500\":\"#e91e63\",\"600\":\"#d81b60\",\"700\":\"#c2185b\",\"800\":\"#ad1457\",\"900\":\"#880e4f\",\"a100\":\"#ff80ab\",\"a200\":\"#ff4081\",\"a400\":\"#f50057\",\"a700\":\"#c51162\"};\nexport var purple = {\"50\":\"#f3e5f5\",\"100\":\"#e1bee7\",\"200\":\"#ce93d8\",\"300\":\"#ba68c8\",\"400\":\"#ab47bc\",\"500\":\"#9c27b0\",\"600\":\"#8e24aa\",\"700\":\"#7b1fa2\",\"800\":\"#6a1b9a\",\"900\":\"#4a148c\",\"a100\":\"#ea80fc\",\"a200\":\"#e040fb\",\"a400\":\"#d500f9\",\"a700\":\"#aa00ff\"};\nexport var deepPurple = {\"50\":\"#ede7f6\",\"100\":\"#d1c4e9\",\"200\":\"#b39ddb\",\"300\":\"#9575cd\",\"400\":\"#7e57c2\",\"500\":\"#673ab7\",\"600\":\"#5e35b1\",\"700\":\"#512da8\",\"800\":\"#4527a0\",\"900\":\"#311b92\",\"a100\":\"#b388ff\",\"a200\":\"#7c4dff\",\"a400\":\"#651fff\",\"a700\":\"#6200ea\"};\nexport var indigo = {\"50\":\"#e8eaf6\",\"100\":\"#c5cae9\",\"200\":\"#9fa8da\",\"300\":\"#7986cb\",\"400\":\"#5c6bc0\",\"500\":\"#3f51b5\",\"600\":\"#3949ab\",\"700\":\"#303f9f\",\"800\":\"#283593\",\"900\":\"#1a237e\",\"a100\":\"#8c9eff\",\"a200\":\"#536dfe\",\"a400\":\"#3d5afe\",\"a700\":\"#304ffe\"};\nexport var blue = {\"50\":\"#e3f2fd\",\"100\":\"#bbdefb\",\"200\":\"#90caf9\",\"300\":\"#64b5f6\",\"400\":\"#42a5f5\",\"500\":\"#2196f3\",\"600\":\"#1e88e5\",\"700\":\"#1976d2\",\"800\":\"#1565c0\",\"900\":\"#0d47a1\",\"a100\":\"#82b1ff\",\"a200\":\"#448aff\",\"a400\":\"#2979ff\",\"a700\":\"#2962ff\"};\nexport var lightBlue = {\"50\":\"#e1f5fe\",\"100\":\"#b3e5fc\",\"200\":\"#81d4fa\",\"300\":\"#4fc3f7\",\"400\":\"#29b6f6\",\"500\":\"#03a9f4\",\"600\":\"#039be5\",\"700\":\"#0288d1\",\"800\":\"#0277bd\",\"900\":\"#01579b\",\"a100\":\"#80d8ff\",\"a200\":\"#40c4ff\",\"a400\":\"#00b0ff\",\"a700\":\"#0091ea\"};\nexport var cyan = {\"50\":\"#e0f7fa\",\"100\":\"#b2ebf2\",\"200\":\"#80deea\",\"300\":\"#4dd0e1\",\"400\":\"#26c6da\",\"500\":\"#00bcd4\",\"600\":\"#00acc1\",\"700\":\"#0097a7\",\"800\":\"#00838f\",\"900\":\"#006064\",\"a100\":\"#84ffff\",\"a200\":\"#18ffff\",\"a400\":\"#00e5ff\",\"a700\":\"#00b8d4\"};\nexport var teal = {\"50\":\"#e0f2f1\",\"100\":\"#b2dfdb\",\"200\":\"#80cbc4\",\"300\":\"#4db6ac\",\"400\":\"#26a69a\",\"500\":\"#009688\",\"600\":\"#00897b\",\"700\":\"#00796b\",\"800\":\"#00695c\",\"900\":\"#004d40\",\"a100\":\"#a7ffeb\",\"a200\":\"#64ffda\",\"a400\":\"#1de9b6\",\"a700\":\"#00bfa5\"};\nexport var green = {\"50\":\"#e8f5e9\",\"100\":\"#c8e6c9\",\"200\":\"#a5d6a7\",\"300\":\"#81c784\",\"400\":\"#66bb6a\",\"500\":\"#4caf50\",\"600\":\"#43a047\",\"700\":\"#388e3c\",\"800\":\"#2e7d32\",\"900\":\"#1b5e20\",\"a100\":\"#b9f6ca\",\"a200\":\"#69f0ae\",\"a400\":\"#00e676\",\"a700\":\"#00c853\"};\nexport var lightGreen = {\"50\":\"#f1f8e9\",\"100\":\"#dcedc8\",\"200\":\"#c5e1a5\",\"300\":\"#aed581\",\"400\":\"#9ccc65\",\"500\":\"#8bc34a\",\"600\":\"#7cb342\",\"700\":\"#689f38\",\"800\":\"#558b2f\",\"900\":\"#33691e\",\"a100\":\"#ccff90\",\"a200\":\"#b2ff59\",\"a400\":\"#76ff03\",\"a700\":\"#64dd17\"};\nexport var lime = {\"50\":\"#f9fbe7\",\"100\":\"#f0f4c3\",\"200\":\"#e6ee9c\",\"300\":\"#dce775\",\"400\":\"#d4e157\",\"500\":\"#cddc39\",\"600\":\"#c0ca33\",\"700\":\"#afb42b\",\"800\":\"#9e9d24\",\"900\":\"#827717\",\"a100\":\"#f4ff81\",\"a200\":\"#eeff41\",\"a400\":\"#c6ff00\",\"a700\":\"#aeea00\"};\nexport var yellow = {\"50\":\"#fffde7\",\"100\":\"#fff9c4\",\"200\":\"#fff59d\",\"300\":\"#fff176\",\"400\":\"#ffee58\",\"500\":\"#ffeb3b\",\"600\":\"#fdd835\",\"700\":\"#fbc02d\",\"800\":\"#f9a825\",\"900\":\"#f57f17\",\"a100\":\"#ffff8d\",\"a200\":\"#ffff00\",\"a400\":\"#ffea00\",\"a700\":\"#ffd600\"};\nexport var amber = {\"50\":\"#fff8e1\",\"100\":\"#ffecb3\",\"200\":\"#ffe082\",\"300\":\"#ffd54f\",\"400\":\"#ffca28\",\"500\":\"#ffc107\",\"600\":\"#ffb300\",\"700\":\"#ffa000\",\"800\":\"#ff8f00\",\"900\":\"#ff6f00\",\"a100\":\"#ffe57f\",\"a200\":\"#ffd740\",\"a400\":\"#ffc400\",\"a700\":\"#ffab00\"};\nexport var orange = {\"50\":\"#fff3e0\",\"100\":\"#ffe0b2\",\"200\":\"#ffcc80\",\"300\":\"#ffb74d\",\"400\":\"#ffa726\",\"500\":\"#ff9800\",\"600\":\"#fb8c00\",\"700\":\"#f57c00\",\"800\":\"#ef6c00\",\"900\":\"#e65100\",\"a100\":\"#ffd180\",\"a200\":\"#ffab40\",\"a400\":\"#ff9100\",\"a700\":\"#ff6d00\"};\nexport var deepOrange = {\"50\":\"#fbe9e7\",\"100\":\"#ffccbc\",\"200\":\"#ffab91\",\"300\":\"#ff8a65\",\"400\":\"#ff7043\",\"500\":\"#ff5722\",\"600\":\"#f4511e\",\"700\":\"#e64a19\",\"800\":\"#d84315\",\"900\":\"#bf360c\",\"a100\":\"#ff9e80\",\"a200\":\"#ff6e40\",\"a400\":\"#ff3d00\",\"a700\":\"#dd2c00\"};\nexport var brown = {\"50\":\"#efebe9\",\"100\":\"#d7ccc8\",\"200\":\"#bcaaa4\",\"300\":\"#a1887f\",\"400\":\"#8d6e63\",\"500\":\"#795548\",\"600\":\"#6d4c41\",\"700\":\"#5d4037\",\"800\":\"#4e342e\",\"900\":\"#3e2723\"};\nexport var grey = {\"50\":\"#fafafa\",\"100\":\"#f5f5f5\",\"200\":\"#eeeeee\",\"300\":\"#e0e0e0\",\"400\":\"#bdbdbd\",\"500\":\"#9e9e9e\",\"600\":\"#757575\",\"700\":\"#616161\",\"800\":\"#424242\",\"900\":\"#212121\"};\nexport var blueGrey = {\"50\":\"#eceff1\",\"100\":\"#cfd8dc\",\"200\":\"#b0bec5\",\"300\":\"#90a4ae\",\"400\":\"#78909c\",\"500\":\"#607d8b\",\"600\":\"#546e7a\",\"700\":\"#455a64\",\"800\":\"#37474f\",\"900\":\"#263238\"};\nexport var darkText = {\"primary\":\"rgba(0, 0, 0, 0.87)\",\"secondary\":\"rgba(0, 0, 0, 0.54)\",\"disabled\":\"rgba(0, 0, 0, 0.38)\",\"dividers\":\"rgba(0, 0, 0, 0.12)\"};\nexport var lightText = {\"primary\":\"rgba(255, 255, 255, 1)\",\"secondary\":\"rgba(255, 255, 255, 0.7)\",\"disabled\":\"rgba(255, 255, 255, 0.5)\",\"dividers\":\"rgba(255, 255, 255, 0.12)\"};\nexport var darkIcons = {\"active\":\"rgba(0, 0, 0, 0.54)\",\"inactive\":\"rgba(0, 0, 0, 0.38)\"};\nexport var lightIcons = {\"active\":\"rgba(255, 255, 255, 1)\",\"inactive\":\"rgba(255, 255, 255, 0.5)\"};\nexport var white = \"#ffffff\";\nexport var black = \"#000000\";\n\nexport default {\n  red: red,\n  pink: pink,\n  purple: purple,\n  deepPurple: deepPurple,\n  indigo: indigo,\n  blue: blue,\n  lightBlue: lightBlue,\n  cyan: cyan,\n  teal: teal,\n  green: green,\n  lightGreen: lightGreen,\n  lime: lime,\n  yellow: yellow,\n  amber: amber,\n  orange: orange,\n  deepOrange: deepOrange,\n  brown: brown,\n  grey: grey,\n  blueGrey: blueGrey,\n  darkText: darkText,\n  lightText: lightText,\n  darkIcons: darkIcons,\n  lightIcons: lightIcons,\n  white: white,\n  black: black\n};\n","// NOTE: failed to make TypeScript accept this module\n// @ts-ignore\nimport materialColors from 'material-colors'\n\nexport const getColors = (weight: number) => {\n  const names = [\n    'pink',\n    'blue',\n    'deepOrange',\n    'green',\n    'purple',\n    'lightBlue',\n    'lightGreen',\n    'orange',\n    'deepPurple',\n    'cyan',\n    'lime',\n    'amber',\n    'indigo',\n    'teal',\n    'yellow',\n    'red'\n  ]\n  return names.map(name => materialColors[name][weight])\n}\n","import 'typeface-jetbrains-mono'\nimport 'typeface-roboto-slab'\nimport {ComponentChildren, createContext, h, RenderableProps} from 'preact'\nimport {useContext, useEffect, useState} from 'preact/hooks'\nimport {getColors} from '../colors'\n\nexport type Theme = typeof lightTheme\n\n// language=css\nconst css = (theme: Theme) => `\n::selection {\n  background: ${theme.backgroundSelection};\n}\n\nhtml {\n  background: ${theme.background};\n  font-size: ${theme.fontSize};\n}\n\nbody {\n  margin: 0;\n}\n\n[data-tight=\"true\"] > li > p {\n  margin: 0;\n}\n`\n\nconst lightTheme = {\n\n  font: '\"Roboto Slab\", sans-serif',\n  fontCode: '\"JetBrains Mono\", monospace',\n  fontSize: '14px',\n  fontSizeCode: '12px',\n  lineHeight: '30px',\n  lineHeightCode: '30px',\n\n  text: 'rgba(0, 0, 0, 0.75)',\n  textPrimary: 'rgba(0, 0, 0, 1)',\n  textSecondary: 'rgba(0, 0, 0, 0.5)',\n  textDisabled: 'rgba(0, 0, 0, 0.25)',\n\n  color: getColors(600),\n\n  divider: 'rgba(0, 0, 0, 0.25)',\n\n  background: '#eee',\n  backgroundSelection: 'rgba(0, 0, 0, 0.25)',\n  backgroundHover: 'rgba(0, 0, 0, 0.125)',\n\n  cardRadius: '0.25rem',\n  cardBackground: 'white',\n\n  maxTextWidth: '768px',\n\n  elevation: {\n    lower: '0 1px 2px inset rgba(0, 0, 0, 0.25)',\n    none: '',\n    higher: '0 1px 2px rgba(0, 0, 0, 0.25)'\n  }\n}\n\nconst darkTheme: Theme = {\n  ...lightTheme,\n  text: 'rgba(255, 255, 255, 0.75)',\n  textPrimary: 'rgba(255, 255, 255, 1)',\n  textSecondary: 'rgba(255, 255, 255, 0.5)',\n  textDisabled: 'rgba(255, 255, 255, 0.25)',\n\n  color: getColors(500),\n\n  divider: 'rgba(255, 255, 255, 0.125)',\n\n  background: '#222',\n  backgroundSelection: 'rgba(255, 255, 255, 0.25)',\n  backgroundHover: 'rgba(255, 255, 255, 0.125)',\n\n  cardBackground: '#333',\n\n  elevation: {\n    lower: '0 1px 1px inset rgba(0, 0, 0, 0.5)',\n    none: '',\n    higher: '0 1px 1px rgba(0, 0, 0, 0.5)'\n  }\n}\n\nconst ThemeContext = createContext(darkTheme)\n\nconst useGlobalStyle = (css: string) => {\n  useEffect(() => {\n    let style = document.createElement('style')\n    style.appendChild(document.createTextNode(css))\n    document.head.appendChild(style)\n    return () => {\n      document.head.removeChild(style)\n    }\n  }, [css])\n}\n\nexport function useTheme () {\n  return useContext(ThemeContext)\n}\n\nexport function Theming (props: RenderableProps<{\n  dark?: boolean\n  render: (state: {\n    theme: Theme\n    dark: boolean\n    setDark: (dark: boolean) => void\n  }) => ComponentChildren\n}>) {\n  const [dark, setDark] = useState(props.dark || false)\n  const theme = dark ? darkTheme : lightTheme\n  useGlobalStyle(css(theme))\n  return (\n    <ThemeContext.Provider value={theme}>\n      <div class=\"theming\" style={{\n        color: theme.text,\n        fontFamily: theme.font,\n        fontSize: theme.fontSize,\n        lineHeight: theme.lineHeight\n      }}>\n        {props.render({theme, dark, setDark})}\n      </div>\n    </ThemeContext.Provider>\n  )\n}\n","import {ComponentChildren, h} from 'preact'\nimport {useTheme} from './Theming'\n\nexport type InputLabelProps<T> = {\n  label: string\n  children: ComponentChildren\n}\n\nexport function InputLabel<T> (props: InputLabelProps<T>) {\n  const theme = useTheme()\n  return (\n    <label style={{\n      display: 'flex',\n      flexShrink: 0,\n      alignItems: 'stretch',\n      color: theme.textSecondary,\n      margin: '0.25rem'\n    }}>\n      <div\n        style={{\n          width: '120px',\n          textAlign: 'left',\n          marginRight: '0.5rem'\n        }}>\n        {props.label}\n      </div>\n      <div style={{\n        display: 'flex',\n        flex: 1\n      }}>\n        {props.children}\n      </div>\n    </label>\n  )\n}\n","import {Inputs, Ref, useEffect} from 'preact/hooks'\n\nexport const useEvent = <K extends keyof HTMLElementEventMap> (\n  ref: Ref<HTMLElement>,\n  type: K,\n  listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,\n  inputs?: Inputs\n) => {\n  useEffect(() => {\n    ref.current.addEventListener(type, listener)\n    return () => {\n      ref.current.removeEventListener(type, listener)\n    }\n  }, inputs)\n}\n","import {Ref, useState} from 'preact/hooks'\nimport {useEvent} from './useEvent'\n\nexport const useHover = (ref: Ref<HTMLElement>) => {\n  const [state, setState] = useState(false)\n  useEvent(ref, 'pointerover', () => setState(true))\n  useEvent(ref, 'pointerout', () => setState(false))\n  return state\n}\n","import {Ref, useState} from 'preact/hooks'\nimport {useEvent} from './useEvent'\n\nexport const useFocus = (ref: Ref<HTMLElement>) => {\n  const [state, setState] = useState(false)\n  useEvent(ref, 'focus', () => setState(true))\n  useEvent(ref, 'blur', () => setState(false))\n  return state\n}\n","import {useTheme} from './Theming'\nimport {Fragment, h} from 'preact'\nimport {useHover} from '../hooks/useHover'\nimport {useFocus} from '../hooks/useFocus'\nimport {useRef, useState} from 'preact/hooks'\n\nexport function InputField<T> (props: {\n  value: T\n  setValue: (value: T) => void\n  type?: string\n  step?: number\n  min?: number\n  max?: number\n  ticks?: number[]\n  minLength?: number\n  parse: (str: string) => T\n  stringify: (value: T) => string\n}) {\n  const ref = useRef<HTMLElement>()\n  const theme = useTheme()\n  const hover = useHover(ref)\n  const focus = useFocus(ref)\n  const [listId] = useState('datalist-' + String(Math.random()).substr(2))\n  return (\n    <Fragment>\n      <input\n        ref={ref as any}\n        type={props.type}\n        step={props.step || 'any'}\n        min={props.min}\n        max={props.max}\n        minLength={props.minLength}\n        list={props.ticks ? listId : undefined}\n        value={props.stringify(props.value)}\n        onChange={(e: any) => props.setValue(props.parse(e.target.value))}\n        style={{\n          width: '100%',\n          color: focus ? theme.textPrimary : theme.textSecondary,\n          background: hover || focus ? theme.backgroundHover : 'none',\n          border: `1px solid ${theme.divider}`,\n          borderRadius: theme.cardRadius,\n          fontFamily: 'inherit',\n          fontSize: 'inherit',\n          padding: '0.25rem 0.5rem',\n          outline: 'none'\n        }}\n      />\n      {props.ticks && (\n        <datalist id={listId}>\n          {props.ticks.map(value => (\n            <option value={value}/>\n          ))}\n        </datalist>\n      )}\n    </Fragment>\n  )\n}\n","import {useTheme} from './Theming'\nimport {h} from 'preact'\nimport {useRef} from 'preact/hooks'\nimport {useHover} from '../hooks/useHover'\nimport {useFocus} from '../hooks/useFocus'\n\nexport function SelectField<T> (props: {\n  value: T\n  setValue: (value: T) => void\n  items: T[]\n  parse: (str: string) => T\n  stringify: (value: T) => string\n}) {\n  const theme = useTheme()\n  const ref = useRef<HTMLElement>()\n  const hover = useHover(ref)\n  const focus = useFocus(ref)\n  return (\n    <select\n      ref={ref as any}\n      value={props.stringify(props.value)}\n      onChange={(e: any) => props.setValue(props.parse(e.target.value))}\n      style={{\n        width: '100%',\n        fontFamily: 'inherit',\n        fontSize: 'inherit',\n        padding: '0.25rem 0.5rem',\n        color: focus ? theme.textPrimary : theme.textSecondary,\n        background: hover || focus ? theme.backgroundHover : 'none',\n        border: `1px solid ${theme.divider}`,\n        borderRadius: theme.cardRadius\n      }}\n    >\n      {props.items.map(item => (\n        <option value={props.stringify(item)}>\n          {props.stringify(item)}\n        </option>\n      ))}\n    </select>\n  )\n}\n","import {ComponentChildren, h} from 'preact'\nimport {useHover} from '../hooks/useHover'\nimport {useRef} from 'preact/hooks'\nimport {useTheme} from './Theming'\nimport {useFocus} from '../hooks/useFocus'\n\nexport function InputButton<T> (props: {\n  children?: ComponentChildren\n  onClick: () => void\n  rounded?: boolean\n}) {\n  const ref = useRef<HTMLElement>()\n  const hover = useHover(ref)\n  const focus = useFocus(ref)\n  const theme = useTheme()\n  return (\n    <button\n      ref={ref as any}\n      onClick={props.onClick}\n      style={{\n        borderRadius: props.rounded ? theme.cardRadius : 0,\n        border: props.rounded ? `1px solid ${theme.divider}` : 'none',\n        background: hover || focus ? theme.backgroundHover : 'none',\n        color: focus ? theme.textPrimary : theme.textSecondary,\n        transition: 'background 0.125s, color 0.125s',\n        cursor: 'pointer',\n        display: 'flex',\n        alignItems: 'center',\n        textAlign: 'left',\n        fontSize: 'inherit',\n        padding: !props.rounded ? '0.5rem' : `0.25rem 0.5rem`,\n        fontFamily: 'inherit',\n        outline: 'none',\n        margin: props.rounded ? '0.25rem' : 0\n      }}>\n      {props.children}\n    </button>\n  )\n}\n","import {ComponentChildren, h} from 'preact'\nimport {useTheme} from './Theming'\nimport {useState} from 'preact/hooks'\nimport {InputButton} from './InputButton'\n\nexport type FieldsetProps<T> = {\n  legend: string\n  children: ComponentChildren\n}\n\nexport function Fieldset<T> (props: FieldsetProps<T>) {\n  const [open, setOpen] = useState(false)\n\n  const theme = useTheme()\n  return (\n    <div style={{\n      display: 'flex',\n      flexDirection: 'column',\n      border: 'none',\n      color: theme.textSecondary,\n      padding: 0,\n      margin: 0,\n      borderBottom: '1px solid ' + theme.divider\n    }}>\n      <InputButton onClick={() => setOpen(!open)}>\n        <i\n          style={{\n            fontStyle: 'initial',\n            marginRight: '1rem',\n            textAlign: 'center',\n            width: '16px',\n            marginTop: '-0.25rem',\n          }}>\n          {open ? '▿' : '▹'}\n        </i>\n        <span>{props.legend}</span>\n      </InputButton>\n      {open && <div style={{\n        padding: '0.25rem',\n        display: 'flex',\n        flexDirection: 'column',\n        borderTop: '1px dashed ' + theme.divider\n      }}>\n        {props.children}\n      </div>}\n    </div>\n  )\n}\n","/**\n * A function maps a value from a set X to a value from a set Y.\n */\nexport type Fun<Y, X> = (x: X) => Y\n\n/**\n * An expression is defined recursively:\n *\n * - base case: a value of a set Y\n * - induction: a function from a set X to an expression\n */\nexport type Exp<Y, X> = Y | ((x: X) => Exp<Y, X>)\n\n/**\n * A result is an optional return value of a function that may have failed.\n *\n * - The success value indicates whether the value is available.\n * - The weight is optional and its interpretation depends on a consumer.\n * - The value, if successful, can be accessed with a lazy getter function.\n */\nexport type Res<Y> = {\n  success: boolean\n  weight: number\n  get: () => Y\n}\n\n/**\n * An optional expression is an expression that can fail.\n */\nexport type Opt<Y, X> = Exp<Y | Res<Y>, X>\n\n/**\n * An object expression treats the properties of an object Y as expressions.\n */\nexport type Obj<Y, X> = { [k in keyof Y]: Exp<Y[k], X> }\n\n/**\n * A sequence is defined recursively:\n *\n * - base case: a value of a set Y\n * - induction: an array of sequences\n */\nexport type Seq<Y> = Y | Seq<Y>[]\n\n/**\n * Converts an expression f into a simple function.\n */\nexport function exp<Y, X> (f: Exp<Y, X>): Fun<Y, X> {\n  return x => {\n    if (typeof f !== 'function') return f as Y\n    return exp((f as (x: X) => Y)(x))(x)\n  }\n}\n\n/**\n * Converts an optional expression f into a simple function.\n */\nexport function opt<Y, X> (f: Opt<Y, X>): Fun<Res<Y>, X> {\n  return x => {\n    const r = exp(f)(x)\n    const isRes = !!r\n      && typeof r === 'object'\n      && typeof Reflect.get(r as object, 'get') === 'function'\n    if (isRes) return r as Res<Y>\n    return {\n      success: true,\n      weight: 1,\n      get: () => r as Y\n    }\n  }\n}\n\n/**\n * Evaluates an expression f using the argument x.\n */\nexport function val<Y, X> (f: Exp<Y, X>, x: X): Y {\n  return exp(f)(x)\n}\n\n/**\n * Evaluates an optional expression f using the argument x.\n */\nexport function res<Y, X> (f: Opt<Y, X>, x: X): Res<Y> {\n  return opt(f)(x)\n}\n\n/**\n * Converts an object expression o into a simple function.\n */\nexport function obj<Y, X> (o: Exp<Obj<Y, X>, X>): Fun<Y, X> {\n  return x => {\n    const _o = val(o, x)\n    const y: Partial<Y> = {}\n    for (const k in _o) {\n      // noinspection JSUnfilteredForInLoop\n      const v: Exp<Y[any], X> = _o[k]\n      // noinspection JSUnfilteredForInLoop\n      y[k] = val(v, x)\n    }\n    return y as Y\n  }\n}\n\n/**\n * Flattens sn array of sequence expressions s.\n */\nexport function seq<Y, X> (...s: Exp<Seq<Y>, X>[]): Fun<Y[], X> {\n  return x => {\n    return s.reduce((a: Y[], si: Exp<Seq<Y>, X>) => {\n      const _si: Seq<Y> = val(si, x)\n      return [...a, ...(\n        Array.isArray(_si)\n          ? val(seq(..._si), x)\n          : [_si]\n      )]\n    }, [])\n  }\n}\n\n/**\n * @returns a function that overwrites the properties of x with the properties of o.\n */\nexport function set<O, X> (o: Exp<O, X>): Fun<X & O, X> {\n  return x => ({...x, ...val(o, x)})\n}\n\n/**\n * @returns a function that sets the properties of o as default values for the properties of x.\n */\nexport function def<Y, X extends Partial<Y>> (o: Exp<Y, X>): Fun<Y, X> {\n  return x => set<X, Y>(x)(val(o, x))\n}\n\n/**\n * @remarks\n * Same as {@see set}, but treats o as an object expression.\n */\nexport function setx<O, X> (o: Exp<Obj<O, X>, X>): Fun<X & O, X> {\n  return set(obj(exp(o)))\n}\n\n/**\n * @remarks\n * Same as {@see def}, but treats o as an object expression.\n */\nexport function defx<Y, X extends Partial<Y>> (o: Exp<Obj<Y, X>, X>): Fun<Y, X> {\n  return def(obj(o))\n}\n\n/**\n * @returns a function that changes the value of property k with a list of mapping functions fs.\n */\nexport function mut<X, K extends keyof X> (k: K, ...fs: ((value: X[K]) => Exp<X[K], X>)[]): Fun<X, X> {\n  return setx({\n    [k]: (x: X): X[K] => fs\n      .reduce((y: X[K], f) => val(f(y), x), x[k])\n  })\n}\n\n/**\n * @returns a function that checks whether property k is defined.\n */\nexport function has<X, K extends keyof X> (k: K): Fun<boolean, X> {\n  return x => k in x\n}\n\n/**\n * @returns a function that returns value of property k, or throws an error if it is not defined.\n */\nexport function get<X, K extends keyof X> (k: K): Fun<X[K], X> {\n  return x => {\n    if (k in x) return x[k]\n    throw new Error(`get: key ${k} does not exist`)\n  }\n}\n\n/**\n * @returns an identity function\n */\nexport function noop<X> (): Fun<X, X> {\n  // NOTE: This definition does not seem to work:\n  //   const noop = <X> (x: X) => x\n  // These would not be valid:\n  //   const f: F = pipe(noop)\n  //   const g: F = fork(noop)\n  return (x: X) => x\n}\n\n/**\n * @returns an identity function that runs the side effect f\n */\nexport function action<X> (f: (x: X) => void): Fun<X, X> {\n  return x => {\n    f(x)\n    return x\n  }\n}\n\n/**\n * @returns an identity function that passes the result of f to a logging function l as a side effect\n *\n * @remarks\n * Per default, the logging function used is console.log\n */\nexport function log<X> (f: Exp<unknown, X> = (x: X) => x, l: (message: any) => void = console.log): Fun<X, X> {\n  return action(x => {\n    l(val(f, x))\n  })\n}\n\n/**\n * @returns a function that returns the result of f, if the condition c is true, and otherwise returns the result of g.\n */\nexport function cond<Y, X> (c: Exp<boolean, X>, f: Exp<Y, X>, g: Exp<Y, X>): Fun<Y, X> {\n  return exp(x => val(c, x) ? f : g)\n}\n\n/**\n * @remarks\n * Same as {@see cond}, but specialized to sequences and the function g is optional\n */\nexport function when<X> (c: Exp<boolean, X>, f: Exp<Seq<X>, X>, g: Exp<Seq<X>, X> = noop): Fun<X[], X> {\n  return seq(cond(c, f, g))\n}\n\n/**\n * @remarks\n * Same as {@see when}, but the condition c is inverted\n */\nexport function unless<X> (c: Exp<boolean, X>, f: Exp<Seq<X>, X>, g: Exp<Seq<X>, X> = noop): Fun<X[], X> {\n  return seq(cond(x => !val(c, x), f, g))\n}\n\n/**\n * @returns a function that returns the results of n invocations of the indexer function f\n */\nexport function range<Y, X> (n: Exp<number, X>, f: (i: number, n: number) => Exp<Y, X>): Fun<Y[], X> {\n  return use(n, n => x => {\n    return new Array(n).fill(0).map((_, i) => (\n      val(f(i, n), x)\n    ))\n  })\n}\n\n/**\n * @returns a function that returns n copies of an argument x\n */\nexport function clone<X> (n: Exp<number, X>): Fun<X[], X> {\n  return range(n, () => x => x)\n}\n\n/**\n * @returns a function that returns the results of the mapping function f applied to each element of the array ys, together with an index i, and the full array ys\n */\nexport function map<Z, Y, X> (ys: Exp<Y[], X>, f: (y: Y, i: number, ys: Y[]) => Exp<Z, X>): Fun<Z[], X> {\n  return use(ys, ys => fork(...ys.map(f)))\n}\n\n/**\n * @returns a function that returns the items ys sorted by the comparison function f\n */\nexport function sort<Y, X> (ys: Exp<Y[], X>, f: (y1: Y, y2: Y) => Exp<number, X>): Fun<Y[], X> {\n  return use(ys, ys => x => ys.sort((a, b) => val(f(a, b), x)))\n}\n\n/**\n * @returns a function that returns the first element of ys, if ys is not empty, or y0 otherwise\n */\nexport function first<Y, X> (ys: Exp<Y[], X>, y0: Exp<Y, X>): Fun<Y, X> {\n  return use(ys, ys => ys.length > 0 ? ys[0] : y0)\n}\n\n/**\n * @returns a function that returns exactly those elements from ys that match the condition c\n */\nexport function filter<Y, X> (ys: Exp<Y[], X>, c: (yi: Y) => Exp<boolean, X>): Fun<Y[], X> {\n  return use(ys, ys => x => ys.filter(yi => val(c(yi), x)))\n}\n\n/**\n * @returns a function that evaluates the expression returned by f on each element in the array ys, together with an index i, and the full array ys\n *\n * @remarks\n * This is similar to {@see map}, but notice that the expressions are evaluated on each element of ys, rather than on x.\n */\nexport function indexed<Z, Y, X> (ys: Exp<Y[], X>, f: (i: number, ys: Y[]) => Exp<Z, Y>): Fun<Z[], X> {\n  return map(ys, (yi, i, ys) => val(f(i, ys), yi))\n}\n\n/**\n * @returns a successful result with the value y\n */\nexport function pass<Y> (y: Y): Res<Y> {\n  return {\n    success: true,\n    weight: 1,\n    get: () => y\n  }\n}\n\n/**\n * @returns a failing result that raises the error e\n */\nexport function fail (e?: string | Error): Res<any> {\n  return {\n    success: false,\n    weight: 0,\n    get () {\n      if (e === undefined) {\n        e = 'fail: unspecified failure'\n      }\n      if (typeof e === 'string') {\n        e = new Error(e)\n      }\n      throw e\n    }\n  }\n}\n\n/**\n * @returns a function that returns the result of f with the weight w\n */\nexport function weight<Y, X> (w: Exp<number, X>, f: Opt<Y, X>): Fun<Res<Y>, X> {\n  return use(w, w => x => (\n    {...res(f, x), weight: w}\n  ))\n}\n\n/**\n * @returns a function that returns the value of the optional expression f, if f succeeds, otherwise returns the value of f0\n */\nexport function fallback<Y, X> (f0: Exp<Y, X>, f: Opt<Y, X>): Fun<Y, X> {\n  return x => {\n    const r = res(f, x)\n    if (r.success) return r.get()\n    return val(f0, x)\n  }\n}\n\n/**\n * @returns a function that concatenates the sequences generated by the expressions fs\n *\n * @remarks\n * This function takes optional expressions. When one of the expressions fails, it behaves as if the value was an empty sequence.\n */\nexport function fork<Y, X> (...fs: Opt<Seq<Y>, X>[]): Fun<Y[], X> {\n  return x => fs\n    .map(f => res<Seq<Y>, X>(f, x))\n    .filter(({success}) => success)\n    .reduce((a: Y[], {get}) => [...a, ...seq(get())(x)], [])\n}\n\n/**\n * @returns a function that is composed of the functions fs\n *\n * @remarks\n * Same as {@see compose}, but for n functions and weaker typing.\n */\nexport function chain<X> (...fs: Exp<X, X>[]): Fun<X, X> {\n  return exp(x => first(pipe(...fs), x))\n}\n\n/**\n * @returns a function that composes the functions f and g\n *\n * @remarks\n * Same as {@see chain}, but for two functions and strong typing.\n */\nexport function compose<Z, Y, X> (f: Exp<Y, X>, g: Exp<Z, Y>): Fun<Z, X> {\n  return x => val(g, val(f, x))\n}\n\n/**\n * @returns a function that performs context-free derivation with a sequence of rules fs\n *\n * @remarks\n * This function takes optional expressions. When one of the expressions fails, the remaining ones are not applied.\n *\n * The behavior of this function is similar to an L-system.\n */\nexport function pipe<X> (...fs: Opt<Seq<X>, X>[]): Fun<X[], X> {\n  return x => {\n    if (fs.length === 0) return [x]\n    const [f, ...gs] = fs\n    const r: Res<Seq<X>> = res(f, x)\n    if (!r.success) return [x]\n    const xs: X[] = seq(r.get())(x)\n    const recurse = xs.map(exp(pipe(...gs)))\n    return val(seq(recurse), x)\n  }\n}\n\n/**\n * @remarks\n * Same as {@see pipe}, but the passes fs are repeated n times inside another pipe.\n */\nexport function pipeDeep<X> (n: Exp<number, X>, ...fs: Opt<Seq<X>, X>[]): Fun<X[], X> {\n  return use(n, n => (\n    pipe(...(n > 0 ? [...fs, pipeDeep(n - 1, ...fs)] : []))\n  ))\n}\n\n/**\n * @returns a function that passes the value of y to f and returns its result\n */\nexport function use<Z, Y, X> (y: Exp<Y, X>, f: (context: Y) => Exp<Z, X>): Fun<Z, X> {\n  return exp(x => f(val(y, x)))\n}\n\n/**\n * @returns a function that is the same as the unary function f, but takes an expression as its argument\n */\nexport function unary<Y, A> (f: (t: A) => Y) {\n  return <X> (a: Exp<A, X>): Fun<Y, X> => {\n    return x => f(val(a, x))\n  }\n}\n\n/**\n * @remarks\n * Same as {@see unary} but with binary functions\n */\nexport function binary<Y, A, B> (f: (a: A, b: B) => Y) {\n  return <X> (a: Exp<A, X>, b: Exp<B, X>): Fun<Y, X> => {\n    return x => f(val(a, x), val(b, x))\n  }\n}\n\n/**\n * @remarks\n * Same as {@see unary} but with ternary functions\n */\nexport function ternary<Y, A, B, C> (f: (a: A, b: B, c: C) => Y) {\n  return <X> (a: Exp<A, X>, b: Exp<B, X>, c: Exp<C, X>): Fun<Y, X> => {\n    return x => f(val(a, x), val(b, x), val(c, x))\n  }\n}\n","import {h} from 'preact'\nimport {useTheme} from './Theming'\n\nexport function InputDivider () {\n  const theme = useTheme()\n  return <hr style={{\n    border: 'none',\n    borderBottom: '1px dashed ' + theme.divider,\n    margin: '0.25rem 0',\n  }}/>\n}\n","import {h} from 'preact'\n\nexport function InputCheckbox (props: {\n  value: boolean\n  setValue: (value: boolean) => void\n}) {\n  return (\n    <input\n      checked={props.value}\n      onClick={() => props.setValue(!props.value)}\n      type=\"checkbox\"\n    />\n  )\n}\n","import {Fragment, h, VNode} from 'preact'\nimport {InputLabel} from './components/InputLabel'\nimport {InputField} from './components/InputField'\nimport {SelectField} from './components/SelectField'\nimport {Fieldset} from './components/Fieldset'\nimport {Exp, val} from '@dipl/lib-core'\nimport {InputButton} from './components/InputButton'\nimport {InputDivider} from './components/InputDivider'\nimport {InputCheckbox} from './components/InputCheckbox'\n\nexport type Input<T> = (value: T, setValue: (value: T) => void) => VNode\n\nexport const toLabel = (key: PropertyKey) => {\n  // \"camelCase\" to \"Title Case\"\n  return String(key)\n    .replace(/([a-z])([A-Z])/g, '$1 $2')\n    .split(' ')\n    .map(x => x[0].toUpperCase() + x.substr(1))\n    .join(' ')\n}\n\nexport function inputs<T> (...inputs: Input<T>[]): Input<T> {\n  return (value, setValue) => (\n    <Fragment>\n      {inputs.map(input => input(value, setValue))}\n    </Fragment>\n  )\n}\n\nexport function fieldset<T> (legend: PropertyKey, ...ins: Input<T>[]): Input<T> {\n  return (value, setValue) => {\n    return (\n      <Fieldset legend={toLabel(String(legend))}>\n        {inputs(...ins)(value, setValue)}\n      </Fieldset>\n    )\n  }\n}\n\nexport function label<T> (label: PropertyKey, input: Input<T>): Input<T> {\n  return (value, setValue) => (\n    <InputLabel label={toLabel(label)}>\n      {input(value, setValue)}\n    </InputLabel>\n  )\n}\n\nexport function prop<T, K extends keyof T> (key: K, input: Input<T[K]>): Input<T> {\n  return (value, setValue) => input(\n    value[key],\n    value1 => setValue({...value, [key]: value1})\n  )\n}\n\nexport function propKey<T, K extends keyof T> (\n  wrap: (key: K, input: Input<T[K]>) => Input<T[K]>,\n  key: K,\n  input: Input<T[K]>\n): Input<T> {\n  return prop(key, wrap(key, input))\n}\n\nexport function item<T> (key: number, input: Input<T>): Input<T[]> {\n  return (value, setValue) => input(\n    value[key],\n    item => setValue(value.map((oldItem, i) => i === key ? item : oldItem))\n  )\n}\n\nexport function preset<T> (key: PropertyKey, preset: Exp<T, T>): Input<T> {\n  return (value, setValue) => (\n    <InputButton\n      rounded={true}\n      onClick={() => {\n        const newValue = val(preset, value)\n        setValue(newValue)\n      }}>\n      {toLabel(key)}\n    </InputButton>\n  )\n}\n\nexport function presets<T> (presets: Record<PropertyKey, Exp<T, T>>): Input<T> {\n  return inputs(\n    ...Object.keys(presets).map(\n      (key): Input<T> => preset(key, presets[key])\n    )\n  )\n}\n\nexport function items<T> (map: (item: T, index: number, items: T[]) => Input<T>): Input<T[]> {\n  return (value, setValue) => {\n    return inputs<T[]>(\n      ...value.map((x: T, i) => item<T>(i, map(x, i, value)))\n    )(value, setValue)\n  }\n}\n\nexport function object<T> (obj: { [k in keyof T]?: Input<T[k]> }): Input<T> {\n  const renderProp = <K extends keyof T> (key: K): Input<T> => {\n    const param = obj[key] as Input<T[K]>\n    return label(key, prop(key, param))\n  }\n  const keys = Object.keys(obj) as (keyof T)[]\n  return inputs<T>(...keys.map(renderProp))\n}\n\nexport function slider (min: number = 0, max: number = 1, ticks?: number[]): Input<number> {\n  return field({\n    type: 'range',\n    min,\n    max,\n    ticks,\n    parse: x => Number(x),\n    stringify: x => String(x)\n  })\n}\n\nexport function ticks (min: number = 0, max: number = 1, step: number = 1) {\n  const nums: number[] = []\n  for (let n = min; n <= max; n += step) nums.push(n)\n  return slider(min, max, nums)\n}\n\nexport function number (min?: number, max?: number, step?: number): Input<number> {\n  return field({\n    type: 'number',\n    min,\n    max,\n    step,\n    parse: x => Number(x),\n    stringify: x => String(x)\n  })\n}\n\nexport function toggle (): Input<boolean> {\n  return (value, setValue) => {\n    return <InputCheckbox {...{\n      value,\n      setValue\n    }}/>\n  }\n}\n\nexport function text (minLength: number = 0): Input<string> {\n  return field({\n    parse: x => x,\n    stringify: x => x,\n    minLength\n  })\n}\n\nexport function field<T> (props: {\n  type?: string\n  step?: number\n  min?: number\n  max?: number\n  minLength?: number\n  ticks?: number[]\n  parse: (str: string) => T\n  stringify: (value: T) => string\n}): Input<T> {\n  return (value, setValue) => {\n    return <InputField {...{\n      value,\n      setValue,\n      ...props\n    }}/>\n  }\n}\n\nexport function names<T extends PropertyKey> (...items: T[]) {\n  return select({\n    items,\n    stringify: x => String(x),\n    parse: x => x as T\n  })\n}\n\nexport function select<T> (props: {\n  items: T[]\n  parse: (str: string) => T\n  stringify: (value: T) => string\n}): Input<T> {\n  return (value, setValue) => {\n    return <SelectField {...{\n      value,\n      setValue,\n      ...props\n    }}/>\n  }\n}\n\nexport function divider (): Input<any> {\n  return () => <InputDivider/>\n}","type Options = {\n  time: number\n  span: number\n  gain: number\n  attack: number\n  decay: number\n  sustain: number\n  release: number\n  silence: boolean\n}\n\ntype Result = {\n  start: number\n  end: number\n  points: [number, number][]\n}\n\nconst num = (value: unknown, fallback: number): number => {\n  const n = Number(value)\n  return Math.max(0, isNaN(n) ? fallback : n)\n}\n\nconst defaults: Options = {\n  silence: false,\n  time: 0,\n  span: 1,\n  gain: 1,\n  attack: 0,\n  decay: 0,\n  sustain: 1,\n  release: 0\n}\n\nconst validate = (x: Partial<Options>): Options | null => {\n  const gain = num(x.gain, defaults.gain)\n  const silent = gain === 0\n  if (silent && x.silence) return null\n  return {\n    gain,\n    silence: x.silence || defaults.silence,\n    time: num(x.time, defaults.time),\n    span: num(x.span, defaults.span),\n    attack: num(x.attack, defaults.attack),\n    decay: num(x.decay, defaults.decay),\n    sustain: num(x.sustain, defaults.sustain),\n    release: num(x.release, defaults.release)\n  }\n}\n\nconst calculate = (options: Options): Result => {\n  const {time, span, gain, attack, decay, sustain, release} = options\n  return {\n    start: time,\n    end: time + span + release,\n    points: [\n      [time, 0],\n      [time + attack, gain],\n      [time + attack + decay, sustain * gain],\n      [time + span, sustain * gain],\n      [time + span + release, 0]\n    ]\n  }\n}\n\nconst Adsr = (options: Partial<Options> = {}): Result | null => {\n  const opts = validate(options)\n  return opts == null ? null : calculate(opts)\n}\n\nexport default Adsr\n","type Props<T> = {\n  array: T[]\n  compare: (a: T, b: T) => number\n}\n\nfunction BinarySearch<T> ({array: a, compare}: Props<T>) {\n  return (x: T) => {\n    // see: https://stackoverflow.com/a/29018745/925580\n    let l = 0\n    let r = a.length - 1\n    while (l <= r) {\n      const m = (l + r) >> 1\n      const c = compare(x, a[m])\n      if (c > 0) {\n        l = m + 1\n      } else if (c < 0) {\n        r = m - 1\n      } else {\n        return m\n      }\n    }\n    // not found, return insertion index (complement)\n    return ~l\n  }\n}\n\nexport default BinarySearch\n","import Adsr from '@dipl/utils-adsr'\nimport BinarySearch from '@dipl/utils-binary-search'\nimport {Sound} from './sound'\n\nexport type Synth = (sound: Sound) => AudioNode\n\nexport type SynthFactory = (ac: BaseAudioContext) => Synth\n\nexport type SoundFont = {\n  keys: number[]\n  get: (key: number) => AudioBuffer\n}\n\nconst envelope = (ac: BaseAudioContext, sound: Sound, source: AudioScheduledSourceNode) => {\n  const gain = ac.createGain()\n\n  const envelope = Adsr(sound)\n  if (!envelope) return gain // will be silent\n  envelope.points.forEach(([time, value]) => {\n    gain.gain.linearRampToValueAtTime(\n      Math.max(Number.EPSILON, value),\n      time\n    )\n  })\n\n  source.connect(gain)\n  source.start(envelope.start)\n  source.stop(envelope.end)\n  return gain\n}\n\nexport const buffer = (buffer: AudioBuffer): SynthFactory => (\n  ac => sound => {\n    const node = ac.createBufferSource()\n    node.buffer = buffer\n    node.detune.setValueAtTime(sound.detune || 0, 0)\n    return envelope(ac, sound, node)\n  }\n)\n\nexport const font = (font: SoundFont): SynthFactory => (\n  ac => {\n    const compare = (a: number, b: number) => a - b\n\n    const instruments = new Map<number, Synth>()\n    font.keys.map(key => {\n      const instrument = buffer(font.get(key))(ac)\n      instruments.set(key, instrument)\n    })\n\n    const nums = font.keys.sort(compare)\n    const find = BinarySearch({compare, array: nums})\n\n    const silence = ac.createBufferSource()\n\n    return sound => {\n      const index = find(sound.freq)\n\n      // frequency falls between two sounds\n      let detune = 0\n      let key = nums[index]\n      if (index < 0) {\n        key = nums[-index]\n      }\n\n      const instrument = instruments.get(key)\n      if (!instrument) return silence\n\n      const changedSound = Object.create(sound)\n      changedSound.detune = detune\n      return instrument(changedSound)\n    }\n  }\n)\n","export function cached<K, V> (\n  load: (key: K) => Promise<V>\n) {\n  const pending = new Map<K, Promise<V>>()\n  const ready = new Map<K, V>()\n  const error = new Map<K, Error>()\n\n  return (key: K): Promise<V> => {\n    if (pending.has(key)) {\n      return pending.get(key) as Promise<V>\n    }\n    if (error.has(key)) {\n      error.delete(key)\n    }\n    if (ready.has(key)) {\n      return Promise.resolve(ready.get(key) as V)\n    }\n    return new Promise((resolve, reject) => {\n      const promise = load(key)\n      pending.set(key, promise)\n      promise\n        .then(v => {\n          ready.set(key, v)\n          resolve(v)\n        })\n        .catch(e => {\n          error.set(key, e)\n          reject(e)\n        })\n        .finally(() => {\n          pending.delete(key)\n        })\n    })\n  }\n}\n","export type Pitch = {\n  letter: 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G'\n  accidental?: 'bb' | 'b' | '' | '#' | '##'\n  octave: number\n}\n\nexport const accidentals = {\n  'bb': -2,\n  'b': -1,\n  '': 0,\n  '#': 1,\n  '##': 2\n}\n\nexport const pitchLetters = {\n  C: 0,\n  D: 2,\n  E: 4,\n  F: 5,\n  G: 7,\n  A: 9,\n  B: 11\n}\n\nexport function pitchFromString (str: string): Pitch {\n  const pattern = /^([A-G])(b|bb|#|##)?([0-9])$/\n  const match = str.match(pattern)\n  if (!match) throw new Error(`could not parse pitch: ${str}`)\n  const [, letter, accidental = '', octave] = match\n  return {letter, accidental, octave: parseInt(octave)} as Pitch\n}\n\nexport function midiPitchFromString (x: unknown): number {\n  const str = String(x)\n  const num = parseInt(str)\n  if (!isNaN(num)) return num\n  return midiPitchFromPitch(pitchFromString(str))\n}\n\nexport function midiPitchFromPitch ({letter, octave, accidental = ''}: Pitch) {\n  return pitchLetters[letter] + accidentals[accidental] + 12 * (octave + 1)\n}\n\nexport function hertzFromMidiPitch (x: number) {\n  return 440 * Math.pow(2, (x - 69) / 12)\n}\n\nexport function midiPitchFromHertz (x: number) {\n  return 12 * Math.log2(x / 440) + 69\n}\n","'use strict'\r\n\r\n// DECODE UTILITIES\r\nfunction b64ToUint6 (nChr) {\r\n  return nChr > 64 && nChr < 91 ? nChr - 65\r\n    : nChr > 96 && nChr < 123 ? nChr - 71\r\n    : nChr > 47 && nChr < 58 ? nChr + 4\r\n    : nChr === 43 ? 62\r\n    : nChr === 47 ? 63\r\n    : 0\r\n}\r\n\r\n// Decode Base64 to Uint8Array\r\n// ---------------------------\r\nfunction decode (sBase64, nBlocksSize) {\r\n  var sB64Enc = sBase64.replace(/[^A-Za-z0-9\\+\\/]/g, '')\r\n  var nInLen = sB64Enc.length\r\n  var nOutLen = nBlocksSize\r\n    ? Math.ceil((nInLen * 3 + 1 >> 2) / nBlocksSize) * nBlocksSize\r\n    : nInLen * 3 + 1 >> 2\r\n  var taBytes = new Uint8Array(nOutLen)\r\n\r\n  for (var nMod3, nMod4, nUint24 = 0, nOutIdx = 0, nInIdx = 0; nInIdx < nInLen; nInIdx++) {\r\n    nMod4 = nInIdx & 3\r\n    nUint24 |= b64ToUint6(sB64Enc.charCodeAt(nInIdx)) << 18 - 6 * nMod4\r\n    if (nMod4 === 3 || nInLen - nInIdx === 1) {\r\n      for (nMod3 = 0; nMod3 < 3 && nOutIdx < nOutLen; nMod3++, nOutIdx++) {\r\n        taBytes[nOutIdx] = nUint24 >>> (16 >>> nMod3 & 24) & 255\r\n      }\r\n      nUint24 = 0\r\n    }\r\n  }\r\n  return taBytes\r\n}\r\n\r\nmodule.exports = { decode: decode }\r\n","/*!\n * Determine if an object is a Buffer\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n\n// The _isBuffer check is for Safari 5-7 support, because it's missing\n// Object.prototype.constructor. Remove this eventually\nmodule.exports = function (obj) {\n  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)\n}\n\nfunction isBuffer (obj) {\n  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)\n}\n\n// For Node v0.10 support. Remove this eventually.\nfunction isSlowBuffer (obj) {\n  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))\n}\n","'use strict'\r\n\r\nvar base64 = require('./base64')\r\nvar isBuffer = require('is-buffer')\r\n\r\n// Given a regex, return a function that test if against a string\r\nfunction fromRegex (r) {\r\n  return function (o) { return typeof o === 'string' && r.test(o) }\r\n}\r\n// Try to apply a prefix to a name\r\nfunction prefix (pre, name) {\r\n  return typeof pre === 'string' ? pre + name\r\n    : typeof pre === 'function' ? pre(name)\r\n    : name\r\n}\r\n\r\n/**\r\n * Load one or more audio files\r\n *\r\n *\r\n * Possible option keys:\r\n *\r\n * - __from__ {Function|String}: a function or string to convert from file names to urls.\r\n * If is a string it will be prefixed to the name:\r\n * `load('snare.mp3', { from: 'http://audio.net/samples/' })`\r\n * If it's a function it receives the file name and should return the url as string.\r\n * - __only__ {Array} - when loading objects, if provided, only the given keys\r\n * will be included in the decoded object:\r\n * `load('piano.json', { only: ['C2', 'D2'] })`\r\n *\r\n * @param {Object} source - the object to be loaded\r\n * @param {Object} options - (Optional) the load options for that object\r\n * @param {Object} defaultValue - (Optional) the default value to return as\r\n * in a promise if not valid loader found\r\n */\r\nfunction load (source, options, defVal) {\r\n  var loader =\r\n    // Basic audio loading\r\n      isArrayBuffer(source) || isBuffer(source) ? decodeBuffer\r\n    : isAudioFileName(source) ? loadAudioFile\r\n    : isPromise(source) ? loadPromise\r\n    // Compound objects\r\n    : isArray(source) ? loadArrayData\r\n    : isObject(source) ? loadObjectData\r\n    : isJsonFileName(source) ? loadJsonFile\r\n    // Base64 encoded audio\r\n    : isBase64Audio(source) ? loadBase64Audio\r\n    : isJsFileName(source) ? loadMidiJSFile\r\n    : null\r\n\r\n  var opts = options || {}\r\n  var promise = loader ? loader(source, opts)\r\n    : defVal ? Promise.resolve(defVal)\r\n    : Promise.reject('Source not valid (' + source + ')')\r\n\r\n  return promise.then(function (data) {\r\n    opts.ready(null, data)\r\n    return data\r\n  }, function (err) {\r\n    opts.ready(err)\r\n    throw err\r\n  })\r\n}\r\n\r\n// BASIC AUDIO LOADING\r\n// ===================\r\n\r\n// Load (decode) an array buffer\r\nfunction isArrayBuffer (o) { return o instanceof ArrayBuffer }\r\nfunction decodeBuffer (array, options) {\r\n  return options.decode(array)\r\n}\r\n\r\n// Load an audio filename\r\nvar isAudioFileName = fromRegex(/\\.(mp3|wav|ogg)(\\?.*)?$/i)\r\nfunction loadAudioFile (name, options) {\r\n  var url = prefix(options.from, name)\r\n  return load(options.fetch(url, 'arraybuffer'), options)\r\n}\r\n\r\n// Load the result of a promise\r\nfunction isPromise (o) { return o && typeof o.then === 'function' }\r\nfunction loadPromise (promise, options) {\r\n  return promise.then(function (value) {\r\n    return load(value, options)\r\n  })\r\n}\r\n\r\n// COMPOUND OBJECTS\r\n// ================\r\n\r\n// Try to load all the items of an array\r\nvar isArray = Array.isArray\r\nfunction loadArrayData (array, options) {\r\n  return Promise.all(array.map(function (data) {\r\n    return load(data, options, data)\r\n  }))\r\n}\r\n\r\n// Try to load all the values of a key/value object\r\nfunction isObject (o) { return o && typeof o === 'object' }\r\nfunction loadObjectData (obj, options) {\r\n  var dest = {}\r\n  var promises = Object.keys(obj).map(function (key) {\r\n    if (options.only && options.only.indexOf(key) === -1) return null\r\n    var value = obj[key]\r\n    return load(value, options, value).then(function (audio) {\r\n      dest[key] = audio\r\n    })\r\n  })\r\n  return Promise.all(promises).then(function () { return dest })\r\n}\r\n\r\n// Load the content of a JSON file\r\nvar isJsonFileName = fromRegex(/\\.json(\\?.*)?$/i)\r\nfunction loadJsonFile (name, options) {\r\n  var url = prefix(options.from, name)\r\n  return load(options.fetch(url, 'text').then(JSON.parse), options)\r\n}\r\n\r\n// BASE64 ENCODED FORMATS\r\n// ======================\r\n\r\n// Load strings with Base64 encoded audio\r\nvar isBase64Audio = fromRegex(/^data:audio/)\r\nfunction loadBase64Audio (source, options) {\r\n  var i = source.indexOf(',')\r\n  return load(base64.decode(source.slice(i + 1)).buffer, options)\r\n}\r\n\r\n// Load .js files with MidiJS soundfont prerendered audio\r\nvar isJsFileName = fromRegex(/\\.js(\\?.*)?$/i)\r\nfunction loadMidiJSFile (name, options) {\r\n  var url = prefix(options.from, name)\r\n  return load(options.fetch(url, 'text').then(midiJsToJson), options)\r\n}\r\n\r\n// convert a MIDI.js javascript soundfont file to json\r\nfunction midiJsToJson (data) {\r\n  var begin = data.indexOf('MIDI.Soundfont.')\r\n  if (begin < 0) throw Error('Invalid MIDI.js Soundfont format')\r\n  begin = data.indexOf('=', begin) + 2\r\n  var end = data.lastIndexOf(',')\r\n  return JSON.parse(data.slice(begin, end) + '}')\r\n}\r\n\r\nif (typeof module === 'object' && module.exports) module.exports = load\r\nif (typeof window !== 'undefined') window.loadAudio = load\r\n","'use strict'\r\n\r\nvar cache = {}\r\n\r\nmodule.exports = function getContext (options) {\r\n\tif (typeof window === 'undefined') return null\r\n\t\r\n\tvar OfflineContext = window.OfflineAudioContext || window.webkitOfflineAudioContext\r\n\tvar Context = window.AudioContext || window.webkitAudioContext\r\n\t\r\n\tif (!Context) return null\r\n\r\n\tif (typeof options === 'number') {\r\n\t\toptions = {sampleRate: options}\r\n\t}\r\n\r\n\tvar sampleRate = options && options.sampleRate\r\n\r\n\r\n\tif (options && options.offline) {\r\n\t\tif (!OfflineContext) return null\r\n\r\n\t\treturn new OfflineContext(options.channels || 2, options.length, sampleRate || 44100)\r\n\t}\r\n\r\n\r\n\t//cache by sampleRate, rather strong guess\r\n\tvar ctx = cache[sampleRate]\r\n\r\n\tif (ctx) return ctx\r\n\r\n\t//several versions of firefox have issues with the\r\n\t//constructor argument\r\n\t//see: https://bugzilla.mozilla.org/show_bug.cgi?id=1361475\r\n\ttry {\r\n\t\tctx = new Context(options)\r\n\t}\r\n\tcatch (err) {\r\n\t\tctx = new Context()\r\n\t}\r\n\tcache[ctx.sampleRate] = cache[sampleRate] = ctx\r\n\r\n\treturn ctx\r\n}\r\n","/* global XMLHttpRequest */\r\n'use strict'\r\nvar load = require('./load')\r\nvar context = require('audio-context')\r\n\r\nmodule.exports = function (source, options, cb) {\r\n  if (options instanceof Function) {\r\n    cb = options\r\n    options = {}\r\n  }\r\n  options = options || {}\r\n  options.ready = cb || function () {}\r\n  var ac = options && options.context ? options.context : context()\r\n  var defaults = { decode: getAudioDecoder(ac), fetch: fetch }\r\n  var opts = Object.assign(defaults, options)\r\n  return load(source, opts)\r\n}\r\n\r\n/**\r\n * Wraps AudioContext's decodeAudio into a Promise\r\n */\r\nfunction getAudioDecoder (ac) {\r\n  return function decode (buffer) {\r\n    return new Promise(function (resolve, reject) {\r\n      ac.decodeAudioData(buffer,\r\n        function (data) { resolve(data) },\r\n        function (err) { reject(err) })\r\n    })\r\n  }\r\n}\r\n\r\n/*\r\n * Wraps a XMLHttpRequest into a Promise\r\n *\r\n * @param {String} url\r\n * @param {String} type - can be 'text' or 'arraybuffer'\r\n * @return {Promise}\r\n */\r\nfunction fetch (url, type) {\r\n  return new Promise(function (resolve, reject) {\r\n    var req = new XMLHttpRequest()\r\n    if (type) req.responseType = type\r\n\r\n    req.open('GET', url)\r\n    req.onload = function () {\r\n      req.status === 200 ? resolve(req.response) : reject(Error(req.statusText))\r\n    }\r\n    req.onerror = function () { reject(Error('Network Error')) }\r\n    req.send()\r\n  })\r\n}\r\n","import {font, Synth} from './synth'\nimport {cached} from '@dipl/utils-cached'\nimport {midiPitchFromString} from '@dipl/utils-pitch'\n// @ts-ignore\nimport loadAudio from 'audio-loader'\n\nexport type Loader = (ac: BaseAudioContext, config: unknown) => Promise<Synth>\n\nexport function Loader (): Loader {\n\n  // NOTE: This ac is only used for decoding audio.\n  // AudioBuffer can freely be shared between contexts.\n  const ac = new AudioContext()\n  const loadFont = cached(async (config: unknown) => {\n\n    // Ensure the audio is loaded as a map from pitch to buffers.\n    let audio: AudioBuffer | Record<PropertyKey, AudioBuffer> = (\n      await loadAudio(config, {context: ac})\n    )\n    if (audio instanceof AudioBuffer) {\n      audio = {[0]: audio} // use arbitrary default pitch of 0\n    }\n\n    const map = new Map<number, AudioBuffer>()\n    Object.entries(audio).map(([key, data]) => {\n      map.set(midiPitchFromString(key), data)\n    })\n\n    return {\n      keys: Array.from(map.keys()),\n      get: (key: number): AudioBuffer => {\n        const value = map.get(key)\n        if (value) return value\n        throw new Error('key not found: ' + key)\n      }\n    }\n  })\n\n  // NOTE: This ac is used for building the actual audio graph.\n  // This allows us to serve multiple AudioContexts with a single loader.\n  // Use case: Preview audio then render it to file with OfflineAudioContext.\n  return async (ac: BaseAudioContext, config: unknown): Promise<Synth> => {\n    return font(await loadFont(config))(ac)\n  }\n}\n","import {Loader} from './loader'\nimport {Synth} from './synth'\nimport {Sound} from './sound'\n\nexport type Sampler = {\n  play:  (sound: Sound, time: number) => () => void\n  stop: () => void\n}\n\nexport async function Sampler (\n  ac: BaseAudioContext,\n  score: Sound[],\n  loader: Loader\n): Promise<Sampler> {\n\n  // fetch sound resources to load\n  const unique = <T> (array: T[]) => Array.from(new Set(array))\n  const configs = unique(score.map(x => x.play))\n\n  // load synths\n  const synths = new Map(\n    await Promise.all(\n      configs.map(async (config): Promise<[unknown, Synth]> => [\n        config,\n        await loader(ac, config)\n      ])\n    )\n  )\n\n  // overall processing\n  const gain = ac.createGain()\n  gain.connect(ac.destination)\n  const compressor = ac.createDynamicsCompressor()\n  compressor.connect(gain)\n\n  // creates a node that collects all single-use sound nodes\n  const connectInput = () => {\n    const node = ac.createGain()\n    node.connect(compressor)\n    return node\n  }\n\n  // for stopping just disconnect and throw away the input node\n  let input = connectInput()\n  const stop = () => {\n    input.disconnect()\n    input = connectInput()\n  }\n\n  const play = (sound: Sound, time: number) => {\n    const synth = synths.get(sound.play) as Synth\n    const offsetSound = Object.create(sound)\n    offsetSound.time = sound.time + time\n    const node = synth(offsetSound)\n    node.connect(input)\n    return () => node.disconnect()\n  }\n\n  return {\n    play,\n    stop\n  }\n}\n","export type Timeline = {\n  play: () => void\n  stop: () => void\n  jump: (time: number) => void\n  getState: () => {\n    playing: boolean\n    time: number\n  }\n}\n\nexport function Timeline (clock: () => number): Timeline {\n  let playing = false\n  // While playing: time = clock - marker.\n  // While not playing: time = marker.\n  let marker = 0\n  return {\n    play: () => {\n      if (playing) return\n      playing = true\n      // We need to start before the clock starts\n      marker = clock() - marker\n    },\n    stop: () => {\n      if (!playing) return\n      playing = false\n      marker = clock() - marker\n    },\n    jump: (time: number) => {\n      marker = playing\n        ? clock() - time\n        : time\n    },\n    getState: () => {\n      return {\n        playing,\n        time: playing\n          ? clock() - marker\n          : marker\n      }\n    }\n  }\n}\n","export type PeekingIterator<T> = Iterator<T> & {\n  readonly peek: () => {\n    value: T\n    done?: boolean\n  }\n}\n\nexport const peekingIterator = <T> (it: Iterator<T>): PeekingIterator<T> => {\n  let current = it.next()\n  return {\n    peek: () => current,\n    next: () => {\n      const temp = current\n      current = it.next()\n      return temp\n    }\n  }\n}\n\nexport const peeking = <T> (it: Iterable<T>): PeekingIterator<T> => {\n  return peekingIterator(it[Symbol.iterator]())\n}\n\n// take items from the iterator until either\n// (1) the next value does not match the predicate\n// (2) the iterator is done\nexport const takeWhile = function* <T> (it: PeekingIterator<T>, predicate: (x: T) => boolean): Iterable<T> {\n  for (\n    // try first value\n    let {value, done} = it.peek();\n\n    // iterator not empty, and item matches predicate\n    !done && predicate(value);\n\n    // remove value, try next item\n    it.next(), {value, done} = it.peek()\n  ) {\n    // emit current event\n    yield value\n  }\n}\n\n","import {peekingIterator, takeWhile} from '@dipl/utils-peeking-iterator'\n\ntype Cancel = void | (() => void)\n\nexport type Params<E> = {\n  events: E[]\n  callback: (event: E, origin: number) => Cancel\n  getTime: (e: E) => number\n}\n\nexport type Options = {\n  setInterval: (f: () => void, delay: number) => unknown\n  clearInterval: (handle: any) => void\n  delay: number\n  interval: number\n  overlap: number\n}\n\nexport const defaults: Options = {\n  interval: 1,\n  overlap: 0,\n  delay: 0,\n  setInterval: global.setInterval,\n  clearInterval: global.clearInterval\n}\n\nexport type Config<E> = Params<E> & Partial<Options>\n\nexport default function Scheduler<E> (config: Config<E>) {\n  const {\n    events,\n    callback,\n    getTime,\n    delay,\n    interval,\n    overlap,\n    setInterval,\n    clearInterval\n  } = {...defaults, ...config}\n\n  if (interval <= 0) {\n    throw new Error('interval must be positive')\n  }\n  if (overlap < 0) {\n    throw new Error('overlap must not be negative')\n  }\n  if (delay < 0) {\n    throw new Error('delay must not be negative')\n  }\n\n  // Events will be removed chronologically\n  const sorted = events.sort((a, b) => getTime(a) - getTime(b))\n\n  // Initialize the iterator\n  const createIterator = () => peekingIterator(sorted[Symbol.iterator]())\n  let it = createIterator()\n\n  // Remove all before specified time\n  const takeBefore = (time: number) => {\n    // NOTE: We MUST evaluate the iterator here (via Array.from)\n    // otherwise, the elements are not actually removed.\n    return Array.from(takeWhile(it, e => getTime(e) < time))\n  }\n\n  let cancel: Cancel[] = []\n\n  // Cancel everything and reset iterator\n  const stop = () => {\n    cancel.forEach(f => f ? f() : null)\n    cancel = []\n    it = createIterator()\n  }\n\n  // Start periodic scheduling\n  // time: time offset in the event timeline\n  // now: current time in the external clock\n  const play = (time: number, now: number) => {\n\n    // the origin anchors an hypothetical event at time zero to the actual time\n    // on the clock in such a way that the event at time 'time' happens now\n    const origin = now - time + delay\n\n    // schedule events in upcoming time frame\n    let prev = time\n\n    // throw away any events before the first frame\n    takeBefore(prev)\n\n    const cycle = () => {\n      const next = prev + interval + overlap\n      for (const event of takeBefore(next)) {\n        cancel.push(callback(event, origin))\n      }\n      prev = next\n    }\n\n    // call initially\n    cycle()\n\n    // call periodically\n    const handle = setInterval(cycle, interval * 1000)\n    cancel.push(() => {\n      clearInterval(handle)\n    })\n  }\n\n  return {play, stop}\n}\n","import {Sound} from './sound'\nimport {Loader} from './loader'\nimport {Timeline} from '@dipl/utils-timeline'\nimport Scheduler from '@dipl/utils-scheduler'\nimport {Sampler} from './sampler'\n\nexport type Player = {\n  play: () => void\n  stop: () => void\n  jump: (time: number) => void\n  getState: () => {\n    time: number\n    playing: boolean\n  }\n}\n\nexport async function Player (\n  score: Sound[],\n  loader: Loader\n): Promise<Player> {\n\n  const ac = new AudioContext()\n  const player = await Sampler(ac, score, loader)\n  const timeline = Timeline(() => ac.currentTime)\n\n  // create time-accurate scheduler\n  const scheduler = Scheduler({\n    events: score,\n    getTime: x => x.time,\n    delay: 0.1,\n    overlap: 0.1,\n    interval: 1.0,\n    callback: (sound, time) => {\n      player.play(sound, time)\n    }\n  })\n\n  const play = () => {\n    const {time} = timeline.getState()\n    scheduler.play(time, ac.currentTime)\n    timeline.play()\n  }\n\n  const stop = () => {\n    scheduler.stop()\n    player.stop()\n    timeline.stop()\n  }\n\n  const jump = (time: number) => {\n    timeline.jump(time)\n    const {playing} = timeline.getState()\n    if (playing) {\n      scheduler.stop()\n      player.stop()\n      scheduler.play(time, ac.currentTime)\n    }\n  }\n\n  return {play, stop, jump, getState: timeline.getState}\n}\n","import {Sound} from './sound'\nimport {Loader} from './loader'\nimport {Sampler} from './sampler'\n\nexport async function render (\n  score: Sound[],\n  loader: Loader\n): Promise<AudioBuffer> {\n\n  // Note: We ignore the release attribute and cut off immediately.\n  const getMaxTime = (score: Sound[]) => score\n    .map(s => s.time + s.span)\n    .reduce((a, b) => Math.max(a, b), 0)\n\n  // Compute length and add some delay after the piece for good measure.\n  const padding = 1.0 // seconds\n  const sampleRate = 44100\n  const totalDuration = getMaxTime(score) + padding\n  const length = sampleRate * totalDuration\n\n  // Create offline context for rendering.\n  const channels = 2\n  const ac = new OfflineAudioContext(channels, length, sampleRate)\n\n  // NOTE: OfflineAudioContext.currentTime is zero until started.\n  // We can take all the time we need to schedule the events.\n  // NOTE: Any events before time 0 will be played at time 0 (FireFox).\n  const {play} = await Sampler(ac, score, loader)\n  score.forEach(sound => play(sound, 0))\n\n  return ac.startRendering()\n}\n","export * from './src/loader'\nexport * from './src/sampler'\nexport * from './src/player'\nexport * from './src/render'\n","import {h, RenderableProps} from 'preact'\nimport {Dim, Pair, Scale} from '../utils'\n\nexport const Shape = ({\n  children,\n  onClick = () => {},\n  geometry = [0, 0],\n  scale = [x => x, x => x],\n  axis = 0,\n  interactive = false\n}: RenderableProps<{\n  scale?: Pair<Scale>\n  axis?: 0 | 1\n  geometry?: Pair<Dim>\n  interactive?: boolean\n  onClick?: () => void\n}>) => {\n\n  const toPair = (x: Dim): Pair => {\n    const [a, b] = typeof x === 'number' ? [x, x] : x\n    return [Math.min(a, b), Math.max(a, b)]\n  }\n\n  const swap = <T extends any> ([a, b]: Pair<T>, yes: boolean = true): Pair<T> => {\n    return yes ? [b, a] : [a, b]\n  }\n\n  const [[x0, x1], [y0, y1]] = swap([\n    toPair(geometry[0]),\n    toPair(geometry[1])\n  ], axis === 1)\n\n  const pc = (n: number) => 100 * n + '%'\n\n  return (\n    <div\n      class=\"shape\"\n      onClick={onClick}\n      style={{\n        pointerEvents: interactive ? 'initial' : 'none',\n        position: 'absolute',\n        left: pc(scale[0](x0, 1)),\n        bottom: pc(scale[1](y0, 1)),\n        width: pc(scale[0](x1 - x0, 0)),\n        height: pc(scale[1](y1 - y0, 0))\n      }}>\n      {children}\n    </div>\n  )\n}\n","import {h, RenderableProps} from 'preact'\n\nexport const FillStyle = ({}: {} = {}) => ({\n  position: 'absolute',\n  top: '0',\n  left: '0',\n  right: '0',\n  bottom: '0'\n})\n\nexport const Fill = (props: RenderableProps<{\n  style?: object\n}> = {}) => {\n  return (\n    <div {...props} style={{...FillStyle() as any, ...props.style}}/>\n  )\n}\n","import {Pair, Scale} from '../utils'\nimport {Shape} from './Shape'\nimport {Fill} from './Fill'\nimport {h} from 'preact'\nimport {useTheme} from './Theming'\n\nexport function LineView (props: {\n  axis: 0 | 1\n  value: number\n  scope?: Pair\n  color?: string\n  scale: Pair<Scale>\n}) {\n  // NOTE: If not explicit scope is given, line should be infinite.\n  // Since we cannot extend the line towards infinity, we will instead\n  // modify the scale so that it maps the scope axis to 0-100% of the element.\n  const scope = props.scope || [0, 1]\n  const scale: Pair<Scale> = props.scope\n    ? props.scale\n    : props.axis === 1\n      ? [(x: number) => x, props.scale[1]]\n      : [props.scale[0], (x: number) => x]\n\n  const theme = useTheme()\n  const {color = theme.divider} = props\n\n  return (\n    <Shape\n      axis={props.axis}\n      scale={scale}\n      geometry={[props.value, scope]}>\n      <Fill style={{\n        ...(props.axis === 0 ? {\n          borderLeft: '1px solid ' + color\n        } : {\n          borderTop: '1px solid ' + color\n        })\n      }}/>\n    </Shape>\n  )\n}\n","import {Note, Pair, Scale} from '../utils'\nimport {Shape} from './Shape'\nimport {Fill} from './Fill'\nimport {h} from 'preact'\nimport {Theme, useTheme} from './Theming'\n\nconst getColor = (theme: Theme, value: string | number): string => {\n  const num = Number(value)\n  const isInt = !isNaN(num) && num % 1 === 0\n  const n = isInt ? num : String(value)\n    .split('').reduce((a, x) => a + x.charCodeAt(0), 0)\n  return theme.color[n % theme.color.length]\n}\n\nexport function NoteView (props: {\n  note: Note\n  scale: Pair<Scale>\n}) {\n  const note = props.note\n  const theme = useTheme()\n  const opacity = Math.min(1, Math.max(0, note.gain))\n  const color = getColor(theme, note.color)\n  const silent = note.gain <= 0\n  const size = '6px'\n  const common = {\n    borderRadius: theme.cardRadius,\n    margin: `-${size} 0 -${size} 0`,\n  }\n  return (\n    <Shape\n      scale={props.scale}\n      geometry={[[note.time, note.time + note.span], note.freq]}\n      interactive={true}\n      onClick={() => console.log(note)}>\n      <Fill style={{\n        ...common,\n        opacity: silent ? 1 : opacity,\n        background: silent ? 'none' : color\n      }}/>\n      <Fill style={{\n        ...common,\n        border: `1px solid ${color}`\n      }}/>\n    </Shape>\n  )\n}\n","export type LabelProps = {\n  side: 'top' | 'left' | 'bottom' | 'right',\n  offset?: string\n}\n\nexport function Label ({\n  side,\n  offset = '0'\n}: LabelProps): Record<string, any> {\n  const custom = {\n    top: {\n      left: '50%',\n      bottom: '100%',\n      marginBottom: offset,\n      transform: 'translateX(-50%)'\n    },\n    bottom: {\n      left: '50%',\n      top: '100%',\n      marginTop: offset,\n      transform: 'translateX(-50%)'\n    },\n    left: {\n      top: '50%',\n      right: '100%',\n      marginRight: offset,\n      transform: 'translateY(-50%)'\n    },\n    right: {\n      top: '50%',\n      left: '100%',\n      marginLeft: offset,\n      transform: 'translateY(-50%)'\n    }\n  }\n  return {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    position: 'absolute',\n    whiteSpace: 'nowrap',\n    ...custom[side]\n  }\n}\n","type Pair = [number, number]\ntype Scale = (x: number, w: number) => number\n\nexport default ([a, b]: Pair, [c, d]: Pair): Scale => {\n  const ab = b - a\n  const s = (d - c) / ab\n  const t = a * (c - d) / ab + c\n  return (x: number, w: number) => x * s + w * t\n}\n","import linear from '@dipl/utils-linear'\nimport {Ref, useState} from 'preact/hooks'\nimport {useEvent} from './useEvent'\n\ntype Pair = [number, number]\n\nexport const usePointer = (ref: Ref<HTMLElement>): Pair => {\n  const [position, setPosition] = useState<Pair>([0, 0])\n\n  useEvent(ref, 'pointermove', (e: PointerEvent) => {\n    const {left, width, top, height} = ref.current.getBoundingClientRect()\n    const rangeX: Pair = [left, left + width]\n    const rangeY: Pair = [top, top + height]\n    const scaleX = linear(rangeX, [0, 1])\n    const scaleY = linear(rangeY, [1, 0])\n    const x = scaleX(e.clientX, 1)\n    const y = scaleY(e.clientY, 1)\n    setPosition([x, y])\n  })\n\n  return position\n}\n","import {Ref} from 'preact/hooks'\nimport {usePointer} from './usePointer'\nimport {useHover} from './useHover'\nimport {Pair, Scale} from '../utils'\n\nconst findNearest = (x: number, ticks: number[]): number => {\n  if (!ticks.length) return x\n  const i1 = ticks.findIndex(xi => x <= xi)\n  if (i1 < 0) return ticks[ticks.length - 1]\n  if (i1 === 0) return ticks[0]\n  const x0 = ticks[i1 - 1]\n  const x1 = ticks[i1]\n  const d0 = x - x0\n  const d1 = x1 - x\n  return d0 < d1 ? x0 : x1\n}\n\nexport function useCrosshair (props: {\n  element: Ref<HTMLElement>\n  ticks: Pair<number[]>\n  scale: Pair<Scale>\n}) {\n  const over = useHover(props.element)\n  const pointer = usePointer(props.element)\n\n  const hover: Pair = [\n    props.scale[0](pointer[0], 1),\n    props.scale[1](pointer[1], 1)\n  ]\n\n  // NOTE: Values must be sorted for 'findNearest'\n  const ticks: Pair<number[]> = [\n    props.ticks[0].sort((a, b) => a - b),\n    props.ticks[1].sort((a, b) => a - b)\n  ]\n\n  const ghost: Pair = [\n    findNearest(hover[0], ticks[0]),\n    findNearest(hover[1], ticks[1])\n  ]\n\n  return {\n    over,\n    hover,\n    ghost\n  }\n}\n","export const modulo = (n: number, m: number): number => {\n  return ((n % m) + m) % m\n}\n\nexport const quotient = (n: number, m: number): number => {\n  return Math.floor(n / m)\n}\n\nexport const decompose = (n: number, m: number): [number, number] => {\n  return [quotient(n, m), modulo(n, m)]\n}\n","import {Fragment, h} from 'preact'\nimport {Ref} from 'preact/hooks'\nimport {LineView} from './LineView'\nimport {Shape} from './Shape'\nimport {Label} from './Label'\nimport {Pair, Scale} from '../utils'\nimport {useCrosshair} from '../hooks/useCrosshair'\nimport {useEvent} from '../hooks/useEvent'\nimport {useTheme} from './Theming'\nimport {decompose} from '@dipl/utils-modulo'\n\nfunction AxisLabel (props: {\n  axis: 0 | 1\n  scale: Pair<Scale>\n  value: number\n  label: (value: number) => string\n}) {\n  const theme = useTheme()\n  return <Shape\n    axis={props.axis}\n    scale={\n      props.axis === 0\n        ? [props.scale[0], x => x]\n        : [x => x, props.scale[1]]\n    }\n    geometry={[props.value, 0]}>\n      <span style={{\n        ...Label({side: props.axis ? 'right' : 'top'}),\n        background: theme.background,\n        lineHeight: '1rem',\n        padding: '0.5rem',\n        borderRadius: theme.cardRadius\n      }}>\n        {props.label(props.value)}\n      </span>\n  </Shape>\n}\n\nexport function Crosshair (props: {\n  element: Ref<HTMLElement>\n  ticks: Pair<number[]>\n  unscale: Pair<Scale>\n  scale: Pair<Scale>\n  onSelect: (point: Pair) => void\n}) {\n\n  const state = useCrosshair({\n    scale: props.unscale,\n    element: props.element,\n    ticks: props.ticks\n  })\n\n  useEvent(props.element, 'click', () => {\n    props.onSelect(state.ghost)\n  })\n\n  // Render nothing.\n  if (!state.over) {\n    return <Fragment/>\n  }\n\n  const theme = useTheme()\n\n  const AxisLine = (axis: 0 | 1) => (\n    <LineView\n      axis={axis}\n      color={theme.divider}\n      value={state.ghost[axis]}\n      scale={props.scale}\n    />\n  )\n\n  const timeLabel = (x: number) => {\n    return x.toFixed(3)\n  }\n\n  const freqLabel = (x: number) => {\n    const midi = Math.round(x)\n    const cents = Math.round((x - midi) * 100)\n    const fmtMidi = (x: number) => {\n      const [octave, chroma] = decompose(midi, 12)\n      const chromaStr = 'C C# D D# E F F# G G# A A# B'.split(' ')[chroma]\n      return chromaStr + octave\n    }\n    const fmtCent = (x: number) => {\n      const padded = String(x * 100).padStart(2, '0')\n      const sign = x < 0 ? '-' : '+'\n      if (x === 0) return ''\n      return sign + padded\n    }\n    return fmtMidi(midi) + ' ' + fmtCent(cents)\n  }\n\n  return (\n    <Fragment>\n      {AxisLine(0)}\n      {AxisLine(1)}\n      <AxisLabel\n        axis={0}\n        value={state.ghost[0]}\n        scale={props.scale}\n        label={timeLabel}\n      />\n      <AxisLabel\n        axis={1}\n        value={state.ghost[1]}\n        scale={props.scale}\n        label={freqLabel}\n      />\n    </Fragment>\n  )\n}\n","import {ComponentChildren, h, RenderableProps} from 'preact'\nimport * as React from 'preact/compat'\nimport {useRef} from 'preact/hooks'\nimport {useHover} from '../hooks/useHover'\nimport {useFocus} from '../hooks/useFocus'\nimport {useTheme} from './Theming'\n\nexport const IconButton = (props: RenderableProps<{\n  id?: string\n  label: string\n  icon: ComponentChildren\n  onAction?: () => void\n  disabled?: boolean\n}>) => {\n  const {\n    label,\n    icon,\n    onAction = () => void(0),\n    disabled = false,\n    ...rest\n  } = props\n\n  const ref = useRef<HTMLElement>()\n  const hover = useHover(ref)\n  const focus = useFocus(ref)\n  const theme = useTheme()\n\n  const getColor = () => {\n    if (disabled) return theme.textDisabled\n    return focus\n      ? theme.textPrimary\n      : theme.textSecondary\n  }\n\n  const getBackground = () => {\n    if (disabled) return 'none'\n    return hover || focus\n      ? theme.backgroundHover\n      : 'none'\n  }\n\n  const getCursor = () => {\n    return disabled ? 'normal' : 'pointer'\n  }\n\n  return (\n    <button\n      {...rest}\n      disabled={disabled}\n      title={label}\n      ref={ref as any}\n      style={{\n        border: 'none',\n        cursor: getCursor(),\n        padding: 0,\n        background: getBackground(),\n        transition: 'color 0.125s, background: 0.125s',\n        position: 'relative',\n        color: getColor(),\n        fontSize: 'inherit',\n        fontFamily: 'inherit',\n        lineHeight: 'inherit',\n        margin: '0.5rem',\n        width: '3rem',\n        height: '3rem',\n        borderRadius: '3rem',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        outline: 'none'\n      }}\n      onClick={() => onAction()}>\n      <span style={{\n        position: 'relative',\n        zIndex: 1,\n        fontSize: '2rem'\n      }}>\n        {icon}\n      </span>\n    </button>\n  )\n}\n","export var IconsManifest = [\n  {\n    \"id\": \"fa\",\n    \"name\": \"Font Awesome\",\n    \"projectUrl\": \"https://fontawesome.com/\",\n    \"license\": \"CC BY 4.0 License\",\n    \"licenseUrl\": \"https://creativecommons.org/licenses/by/4.0/\"\n  },\n  {\n    \"id\": \"io\",\n    \"name\": \"Ionicons 4\",\n    \"projectUrl\": \"https://ionicons.com/\",\n    \"license\": \"MIT\",\n    \"licenseUrl\": \"https://github.com/ionic-team/ionicons/blob/master/LICENSE\"\n  },\n  {\n    \"id\": \"io5\",\n    \"name\": \"Ionicons 5\",\n    \"projectUrl\": \"https://ionicons.com/\",\n    \"license\": \"MIT\",\n    \"licenseUrl\": \"https://github.com/ionic-team/ionicons/blob/master/LICENSE\"\n  },\n  {\n    \"id\": \"md\",\n    \"name\": \"Material Design icons\",\n    \"projectUrl\": \"http://google.github.io/material-design-icons/\",\n    \"license\": \"Apache License Version 2.0\",\n    \"licenseUrl\": \"https://github.com/google/material-design-icons/blob/master/LICENSE\"\n  },\n  {\n    \"id\": \"ti\",\n    \"name\": \"Typicons\",\n    \"projectUrl\": \"http://s-ings.com/typicons/\",\n    \"license\": \"CC BY-SA 3.0\",\n    \"licenseUrl\": \"https://creativecommons.org/licenses/by-sa/3.0/\"\n  },\n  {\n    \"id\": \"go\",\n    \"name\": \"Github Octicons icons\",\n    \"projectUrl\": \"https://octicons.github.com/\",\n    \"license\": \"MIT\",\n    \"licenseUrl\": \"https://github.com/primer/octicons/blob/master/LICENSE\"\n  },\n  {\n    \"id\": \"fi\",\n    \"name\": \"Feather\",\n    \"projectUrl\": \"https://feathericons.com/\",\n    \"license\": \"MIT\",\n    \"licenseUrl\": \"https://github.com/feathericons/feather/blob/master/LICENSE\"\n  },\n  {\n    \"id\": \"gi\",\n    \"name\": \"Game Icons\",\n    \"projectUrl\": \"https://game-icons.net/\",\n    \"license\": \"CC BY 3.0\",\n    \"licenseUrl\": \"https://creativecommons.org/licenses/by/3.0/\"\n  },\n  {\n    \"id\": \"wi\",\n    \"name\": \"Weather Icons\",\n    \"projectUrl\": \"https://erikflowers.github.io/weather-icons/\",\n    \"license\": \"SIL OFL 1.1\",\n    \"licenseUrl\": \"http://scripts.sil.org/OFL\"\n  },\n  {\n    \"id\": \"di\",\n    \"name\": \"Devicons\",\n    \"projectUrl\": \"https://vorillaz.github.io/devicons/\",\n    \"license\": \"MIT\",\n    \"licenseUrl\": \"https://opensource.org/licenses/MIT\"\n  },\n  {\n    \"id\": \"ai\",\n    \"name\": \"Ant Design Icons\",\n    \"projectUrl\": \"https://github.com/ant-design/ant-design-icons\",\n    \"license\": \"MIT\",\n    \"licenseUrl\": \"https://opensource.org/licenses/MIT\"\n  },\n  {\n    \"id\": \"bs\",\n    \"name\": \"Bootstrap Icons\",\n    \"projectUrl\": \"https://github.com/twbs/icons\",\n    \"license\": \"MIT\",\n    \"licenseUrl\": \"https://opensource.org/licenses/MIT\"\n  },\n  {\n    \"id\": \"ri\",\n    \"name\": \"Remix Icon\",\n    \"projectUrl\": \"https://github.com/Remix-Design/RemixIcon\",\n    \"license\": \"Apache License Version 2.0\",\n    \"licenseUrl\": \"http://www.apache.org/licenses/\"\n  },\n  {\n    \"id\": \"fc\",\n    \"name\": \"Flat Color Icons\",\n    \"projectUrl\": \"https://github.com/icons8/flat-color-icons\",\n    \"license\": \"MIT\",\n    \"licenseUrl\": \"https://opensource.org/licenses/MIT\"\n  },\n  {\n    \"id\": \"gr\",\n    \"name\": \"Grommet-Icons\",\n    \"projectUrl\": \"https://github.com/grommet/grommet-icons\",\n    \"license\": \"Apache License Version 2.0\",\n    \"licenseUrl\": \"http://www.apache.org/licenses/\"\n  },\n  {\n    \"id\": \"hi\",\n    \"name\": \"Heroicons\",\n    \"projectUrl\": \"https://github.com/refactoringui/heroicons\",\n    \"license\": \"MIT\",\n    \"licenseUrl\": \"https://opensource.org/licenses/MIT\"\n  },\n  {\n    \"id\": \"si\",\n    \"name\": \"Simple Icons\",\n    \"projectUrl\": \"https://simpleicons.org/\",\n    \"license\": \"CC0 1.0 Universal\",\n    \"licenseUrl\": \"https://creativecommons.org/publicdomain/zero/1.0/\"\n  },\n  {\n    \"id\": \"im\",\n    \"name\": \"IcoMoon Free\",\n    \"projectUrl\": \"https://github.com/Keyamoon/IcoMoon-Free\",\n    \"license\": \"CC BY 4.0 License\"\n  },\n  {\n    \"id\": \"bi\",\n    \"name\": \"BoxIcons\",\n    \"projectUrl\": \"https://github.com/atisawd/boxicons\",\n    \"license\": \"CC BY 4.0 License\"\n  },\n  {\n    \"id\": \"cg\",\n    \"name\": \"css.gg\",\n    \"projectUrl\": \"https://github.com/astrit/css.gg\",\n    \"license\": \"MIT\",\n    \"licenseUrl\": \"https://opensource.org/licenses/MIT\"\n  },\n  {\n    \"id\": \"vsc\",\n    \"name\": \"VS Code Icons\",\n    \"projectUrl\": \"https://github.com/microsoft/vscode-codicons\",\n    \"license\": \"CC BY 4.0\",\n    \"licenseUrl\": \"https://creativecommons.org/licenses/by/4.0/\"\n  }\n]","import { Component } from 'preact';\nimport { shallowDiffers } from './util';\n\n/**\n * Component class with a predefined `shouldComponentUpdate` implementation\n */\nexport function PureComponent(p) {\n\tthis.props = p;\n}\nPureComponent.prototype = new Component();\n// Some third-party libraries check if this property is present\nPureComponent.prototype.isPureReactComponent = true;\nPureComponent.prototype.shouldComponentUpdate = function(props, state) {\n\treturn shallowDiffers(this.props, props) || shallowDiffers(this.state, state);\n};\n","import { createElement } from 'preact';\nimport { shallowDiffers } from './util';\n\n/**\n * Memoize a component, so that it only updates when the props actually have\n * changed. This was previously known as `React.pure`.\n * @param {import('./internal').FunctionComponent} c functional component\n * @param {(prev: object, next: object) => boolean} [comparer] Custom equality function\n * @returns {import('./internal').FunctionComponent}\n */\nexport function memo(c, comparer) {\n\tfunction shouldUpdate(nextProps) {\n\t\tlet ref = this.props.ref;\n\t\tlet updateRef = ref == nextProps.ref;\n\t\tif (!updateRef && ref) {\n\t\t\tref.call ? ref(null) : (ref.current = null);\n\t\t}\n\n\t\tif (!comparer) {\n\t\t\treturn shallowDiffers(this.props, nextProps);\n\t\t}\n\n\t\treturn !comparer(this.props, nextProps) || !updateRef;\n\t}\n\n\tfunction Memoed(props) {\n\t\tthis.shouldComponentUpdate = shouldUpdate;\n\t\treturn createElement(c, props);\n\t}\n\tMemoed.displayName = 'Memo(' + (c.displayName || c.name) + ')';\n\tMemoed.prototype.isReactComponent = true;\n\tMemoed._forwarded = true;\n\treturn Memoed;\n}\n","import { options } from 'preact';\nimport { assign } from './util';\n\nlet oldDiffHook = options._diff;\noptions._diff = vnode => {\n\tif (vnode.type && vnode.type._forwarded && vnode.ref) {\n\t\tvnode.props.ref = vnode.ref;\n\t\tvnode.ref = null;\n\t}\n\tif (oldDiffHook) oldDiffHook(vnode);\n};\n\nexport const REACT_FORWARD_SYMBOL =\n\t(typeof Symbol != 'undefined' &&\n\t\tSymbol.for &&\n\t\tSymbol.for('react.forward_ref')) ||\n\t0xf47;\n\n/**\n * Pass ref down to a child. This is mainly used in libraries with HOCs that\n * wrap components. Using `forwardRef` there is an easy way to get a reference\n * of the wrapped component instead of one of the wrapper itself.\n * @param {import('./index').ForwardFn} fn\n * @returns {import('./internal').FunctionComponent}\n */\nexport function forwardRef(fn) {\n\t// We always have ref in props.ref, except for\n\t// mobx-react. It will call this function directly\n\t// and always pass ref as the second argument.\n\tfunction Forwarded(props, ref) {\n\t\tlet clone = assign({}, props);\n\t\tdelete clone.ref;\n\t\tref = props.ref || ref;\n\t\treturn fn(\n\t\t\tclone,\n\t\t\t!ref || (typeof ref === 'object' && !('current' in ref)) ? null : ref\n\t\t);\n\t}\n\n\t// mobx-react checks for this being present\n\tForwarded.$$typeof = REACT_FORWARD_SYMBOL;\n\t// mobx-react heavily relies on implementation details.\n\t// It expects an object here with a `render` property,\n\t// and prototype.render will fail. Without this\n\t// mobx-react throws.\n\tForwarded.render = Forwarded;\n\n\tForwarded.prototype.isReactComponent = Forwarded._forwarded = true;\n\tForwarded.displayName = 'ForwardRef(' + (fn.displayName || fn.name) + ')';\n\treturn Forwarded;\n}\n","import { toChildArray } from 'preact';\n\nconst mapFn = (children, fn) => {\n\tif (children == null) return null;\n\treturn toChildArray(toChildArray(children).map(fn));\n};\n\n// This API is completely unnecessary for Preact, so it's basically passthrough.\nexport const Children = {\n\tmap: mapFn,\n\tforEach: mapFn,\n\tcount(children) {\n\t\treturn children ? toChildArray(children).length : 0;\n\t},\n\tonly(children) {\n\t\tconst normalized = toChildArray(children);\n\t\tif (normalized.length !== 1) throw 'Children.only';\n\t\treturn normalized[0];\n\t},\n\ttoArray: toChildArray\n};\n","import { Component, createElement, options, Fragment } from 'preact';\nimport { assign } from './util';\n\nconst oldCatchError = options._catchError;\noptions._catchError = function(error, newVNode, oldVNode) {\n\tif (error.then) {\n\t\t/** @type {import('./internal').Component} */\n\t\tlet component;\n\t\tlet vnode = newVNode;\n\n\t\tfor (; (vnode = vnode._parent); ) {\n\t\t\tif ((component = vnode._component) && component._childDidSuspend) {\n\t\t\t\tif (newVNode._dom == null) {\n\t\t\t\t\tnewVNode._dom = oldVNode._dom;\n\t\t\t\t\tnewVNode._children = oldVNode._children;\n\t\t\t\t}\n\t\t\t\t// Don't call oldCatchError if we found a Suspense\n\t\t\t\treturn component._childDidSuspend(error, newVNode);\n\t\t\t}\n\t\t}\n\t}\n\toldCatchError(error, newVNode, oldVNode);\n};\n\nfunction detachedClone(vnode) {\n\tif (vnode) {\n\t\tif (vnode._component && vnode._component.__hooks) {\n\t\t\tvnode._component.__hooks._list.forEach(effect => {\n\t\t\t\tif (typeof effect._cleanup == 'function') effect._cleanup();\n\t\t\t});\n\n\t\t\tvnode._component.__hooks = null;\n\t\t}\n\n\t\tvnode = assign({}, vnode);\n\t\tvnode._component = null;\n\t\tvnode._children = vnode._children && vnode._children.map(detachedClone);\n\t}\n\n\treturn vnode;\n}\n\nfunction removeOriginal(vnode) {\n\tif (vnode) {\n\t\tvnode._original = null;\n\t\tvnode._children = vnode._children && vnode._children.map(removeOriginal);\n\t}\n\treturn vnode;\n}\n\n// having custom inheritance instead of a class here saves a lot of bytes\nexport function Suspense() {\n\t// we do not call super here to golf some bytes...\n\tthis._pendingSuspensionCount = 0;\n\tthis._suspenders = null;\n\tthis._detachOnNextRender = null;\n}\n\n// Things we do here to save some bytes but are not proper JS inheritance:\n// - call `new Component()` as the prototype\n// - do not set `Suspense.prototype.constructor` to `Suspense`\nSuspense.prototype = new Component();\n\n/**\n * @this {import('./internal').SuspenseComponent}\n * @param {Promise} promise The thrown promise\n * @param {import('./internal').VNode<any, any>} suspendingVNode The suspending component\n */\nSuspense.prototype._childDidSuspend = function(promise, suspendingVNode) {\n\tconst suspendingComponent = suspendingVNode._component;\n\n\t/** @type {import('./internal').SuspenseComponent} */\n\tconst c = this;\n\n\tif (c._suspenders == null) {\n\t\tc._suspenders = [];\n\t}\n\tc._suspenders.push(suspendingComponent);\n\n\tconst resolve = suspended(c._vnode);\n\n\tlet resolved = false;\n\tconst onResolved = () => {\n\t\tif (resolved) return;\n\n\t\tresolved = true;\n\t\tsuspendingComponent.componentWillUnmount =\n\t\t\tsuspendingComponent._suspendedComponentWillUnmount;\n\n\t\tif (resolve) {\n\t\t\tresolve(onSuspensionComplete);\n\t\t} else {\n\t\t\tonSuspensionComplete();\n\t\t}\n\t};\n\n\tsuspendingComponent._suspendedComponentWillUnmount =\n\t\tsuspendingComponent.componentWillUnmount;\n\tsuspendingComponent.componentWillUnmount = () => {\n\t\tonResolved();\n\n\t\tif (suspendingComponent._suspendedComponentWillUnmount) {\n\t\t\tsuspendingComponent._suspendedComponentWillUnmount();\n\t\t}\n\t};\n\n\tconst onSuspensionComplete = () => {\n\t\tif (!--c._pendingSuspensionCount) {\n\t\t\t// If the suspension was during hydration we don't need to restore the\n\t\t\t// suspended children into the _children array\n\t\t\tif (c.state._suspended) {\n\t\t\t\tc._vnode._children[0] = removeOriginal(c.state._suspended);\n\t\t\t}\n\n\t\t\tc.setState({ _suspended: (c._detachOnNextRender = null) });\n\n\t\t\tlet suspended;\n\t\t\twhile ((suspended = c._suspenders.pop())) {\n\t\t\t\tsuspended.forceUpdate();\n\t\t\t}\n\t\t}\n\t};\n\n\t/**\n\t * We do not set `suspended: true` during hydration because we want the actual markup\n\t * to remain on screen and hydrate it when the suspense actually gets resolved.\n\t * While in non-hydration cases the usual fallback -> component flow would occour.\n\t */\n\tconst wasHydrating = suspendingVNode._hydrating === true;\n\tif (!c._pendingSuspensionCount++ && !wasHydrating) {\n\t\tc.setState({ _suspended: (c._detachOnNextRender = c._vnode._children[0]) });\n\t}\n\tpromise.then(onResolved, onResolved);\n};\n\nSuspense.prototype.componentWillUnmount = function() {\n\tthis._suspenders = [];\n};\n\n/**\n * @this {import('./internal').SuspenseComponent}\n * @param {import('./internal').SuspenseComponent[\"props\"]} props\n * @param {import('./internal').SuspenseState} state\n */\nSuspense.prototype.render = function(props, state) {\n\tif (this._detachOnNextRender) {\n\t\t// When the Suspense's _vnode was created by a call to createVNode\n\t\t// (i.e. due to a setState further up in the tree)\n\t\t// it's _children prop is null, in this case we \"forget\" about the parked vnodes to detach\n\t\tif (this._vnode._children) {\n\t\t\tthis._vnode._children[0] = detachedClone(this._detachOnNextRender);\n\t\t}\n\n\t\tthis._detachOnNextRender = null;\n\t}\n\n\t// Wrap fallback tree in a VNode that prevents itself from being marked as aborting mid-hydration:\n\t/** @type {import('./internal').VNode} */\n\tconst fallback =\n\t\tstate._suspended && createElement(Fragment, null, props.fallback);\n\tif (fallback) fallback._hydrating = null;\n\n\treturn [\n\t\tcreateElement(Fragment, null, state._suspended ? null : props.children),\n\t\tfallback\n\t];\n};\n\n/**\n * Checks and calls the parent component's _suspended method, passing in the\n * suspended vnode. This is a way for a parent (e.g. SuspenseList) to get notified\n * that one of its children/descendants suspended.\n *\n * The parent MAY return a callback. The callback will get called when the\n * suspension resolves, notifying the parent of the fact.\n * Moreover, the callback gets function `unsuspend` as a parameter. The resolved\n * child descendant will not actually get unsuspended until `unsuspend` gets called.\n * This is a way for the parent to delay unsuspending.\n *\n * If the parent does not return a callback then the resolved vnode\n * gets unsuspended immediately when it resolves.\n *\n * @param {import('./internal').VNode} vnode\n * @returns {((unsuspend: () => void) => void)?}\n */\nexport function suspended(vnode) {\n\t/** @type {import('./internal').Component} */\n\tlet component = vnode._parent._component;\n\treturn component && component._suspended && component._suspended(vnode);\n}\n\nexport function lazy(loader) {\n\tlet prom;\n\tlet component;\n\tlet error;\n\n\tfunction Lazy(props) {\n\t\tif (!prom) {\n\t\t\tprom = loader();\n\t\t\tprom.then(\n\t\t\t\texports => {\n\t\t\t\t\tcomponent = exports.default || exports;\n\t\t\t\t},\n\t\t\t\te => {\n\t\t\t\t\terror = e;\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\n\t\tif (error) {\n\t\t\tthrow error;\n\t\t}\n\n\t\tif (!component) {\n\t\t\tthrow prom;\n\t\t}\n\n\t\treturn createElement(component, props);\n\t}\n\n\tLazy.displayName = 'Lazy';\n\tLazy._forwarded = true;\n\treturn Lazy;\n}\n","import { Component, toChildArray } from 'preact';\nimport { suspended } from './suspense.js';\n\n// Indexes to linked list nodes (nodes are stored as arrays to save bytes).\nconst SUSPENDED_COUNT = 0;\nconst RESOLVED_COUNT = 1;\nconst NEXT_NODE = 2;\n\n// Having custom inheritance instead of a class here saves a lot of bytes.\nexport function SuspenseList() {\n\tthis._next = null;\n\tthis._map = null;\n}\n\n// Mark one of child's earlier suspensions as resolved.\n// Some pending callbacks may become callable due to this\n// (e.g. the last suspended descendant gets resolved when\n// revealOrder === 'together'). Process those callbacks as well.\nconst resolve = (list, child, node) => {\n\tif (++node[RESOLVED_COUNT] === node[SUSPENDED_COUNT]) {\n\t\t// The number a child (or any of its descendants) has been suspended\n\t\t// matches the number of times it's been resolved. Therefore we\n\t\t// mark the child as completely resolved by deleting it from ._map.\n\t\t// This is used to figure out when *all* children have been completely\n\t\t// resolved when revealOrder is 'together'.\n\t\tlist._map.delete(child);\n\t}\n\n\t// If revealOrder is falsy then we can do an early exit, as the\n\t// callbacks won't get queued in the node anyway.\n\t// If revealOrder is 'together' then also do an early exit\n\t// if all suspended descendants have not yet been resolved.\n\tif (\n\t\t!list.props.revealOrder ||\n\t\t(list.props.revealOrder[0] === 't' && list._map.size)\n\t) {\n\t\treturn;\n\t}\n\n\t// Walk the currently suspended children in order, calling their\n\t// stored callbacks on the way. Stop if we encounter a child that\n\t// has not been completely resolved yet.\n\tnode = list._next;\n\twhile (node) {\n\t\twhile (node.length > 3) {\n\t\t\tnode.pop()();\n\t\t}\n\t\tif (node[RESOLVED_COUNT] < node[SUSPENDED_COUNT]) {\n\t\t\tbreak;\n\t\t}\n\t\tlist._next = node = node[NEXT_NODE];\n\t}\n};\n\n// Things we do here to save some bytes but are not proper JS inheritance:\n// - call `new Component()` as the prototype\n// - do not set `Suspense.prototype.constructor` to `Suspense`\nSuspenseList.prototype = new Component();\n\nSuspenseList.prototype._suspended = function(child) {\n\tconst list = this;\n\tconst delegated = suspended(list._vnode);\n\n\tlet node = list._map.get(child);\n\tnode[SUSPENDED_COUNT]++;\n\n\treturn unsuspend => {\n\t\tconst wrappedUnsuspend = () => {\n\t\t\tif (!list.props.revealOrder) {\n\t\t\t\t// Special case the undefined (falsy) revealOrder, as there\n\t\t\t\t// is no need to coordinate a specific order or unsuspends.\n\t\t\t\tunsuspend();\n\t\t\t} else {\n\t\t\t\tnode.push(unsuspend);\n\t\t\t\tresolve(list, child, node);\n\t\t\t}\n\t\t};\n\t\tif (delegated) {\n\t\t\tdelegated(wrappedUnsuspend);\n\t\t} else {\n\t\t\twrappedUnsuspend();\n\t\t}\n\t};\n};\n\nSuspenseList.prototype.render = function(props) {\n\tthis._next = null;\n\tthis._map = new Map();\n\n\tconst children = toChildArray(props.children);\n\tif (props.revealOrder && props.revealOrder[0] === 'b') {\n\t\t// If order === 'backwards' (or, well, anything starting with a 'b')\n\t\t// then flip the child list around so that the last child will be\n\t\t// the first in the linked list.\n\t\tchildren.reverse();\n\t}\n\t// Build the linked list. Iterate through the children in reverse order\n\t// so that `_next` points to the first linked list node to be resolved.\n\tfor (let i = children.length; i--; ) {\n\t\t// Create a new linked list node as an array of form:\n\t\t// \t[suspended_count, resolved_count, next_node]\n\t\t// where suspended_count and resolved_count are numeric counters for\n\t\t// keeping track how many times a node has been suspended and resolved.\n\t\t//\n\t\t// Note that suspended_count starts from 1 instead of 0, so we can block\n\t\t// processing callbacks until componentDidMount has been called. In a sense\n\t\t// node is suspended at least until componentDidMount gets called!\n\t\t//\n\t\t// Pending callbacks are added to the end of the node:\n\t\t// \t[suspended_count, resolved_count, next_node, callback_0, callback_1, ...]\n\t\tthis._map.set(children[i], (this._next = [1, 0, this._next]));\n\t}\n\treturn props.children;\n};\n\nSuspenseList.prototype.componentDidUpdate = SuspenseList.prototype.componentDidMount = function() {\n\t// Iterate through all children after mounting for two reasons:\n\t// 1. As each node[SUSPENDED_COUNT] starts from 1, this iteration increases\n\t//    each node[RELEASED_COUNT] by 1, therefore balancing the counters.\n\t//    The nodes can now be completely consumed from the linked list.\n\t// 2. Handle nodes that might have gotten resolved between render and\n\t//    componentDidMount.\n\tthis._map.forEach((node, child) => {\n\t\tresolve(this, child, node);\n\t});\n};\n","import { createElement, render } from 'preact';\n\n/**\n * @param {import('../../src/index').RenderableProps<{ context: any }>} props\n */\nfunction ContextProvider(props) {\n\tthis.getChildContext = () => props.context;\n\treturn props.children;\n}\n\n/**\n * Portal component\n * @this {import('./internal').Component}\n * @param {object | null | undefined} props\n *\n * TODO: use createRoot() instead of fake root\n */\nfunction Portal(props) {\n\tconst _this = this;\n\tlet container = props._container;\n\n\t_this.componentWillUnmount = function() {\n\t\trender(null, _this._temp);\n\t\t_this._temp = null;\n\t\t_this._container = null;\n\t};\n\n\t// When we change container we should clear our old container and\n\t// indicate a new mount.\n\tif (_this._container && _this._container !== container) {\n\t\t_this.componentWillUnmount();\n\t}\n\n\t// When props.vnode is undefined/false/null we are dealing with some kind of\n\t// conditional vnode. This should not trigger a render.\n\tif (props._vnode) {\n\t\tif (!_this._temp) {\n\t\t\t_this._container = container;\n\n\t\t\t// Create a fake DOM parent node that manages a subset of `container`'s children:\n\t\t\t_this._temp = {\n\t\t\t\tnodeType: 1,\n\t\t\t\tparentNode: container,\n\t\t\t\tchildNodes: [],\n\t\t\t\tappendChild(child) {\n\t\t\t\t\tthis.childNodes.push(child);\n\t\t\t\t\t_this._container.appendChild(child);\n\t\t\t\t},\n\t\t\t\tinsertBefore(child, before) {\n\t\t\t\t\tthis.childNodes.push(child);\n\t\t\t\t\t_this._container.appendChild(child);\n\t\t\t\t},\n\t\t\t\tremoveChild(child) {\n\t\t\t\t\tthis.childNodes.splice(this.childNodes.indexOf(child) >>> 1, 1);\n\t\t\t\t\t_this._container.removeChild(child);\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t\t// Render our wrapping element into temp.\n\t\trender(\n\t\t\tcreateElement(ContextProvider, { context: _this.context }, props._vnode),\n\t\t\t_this._temp\n\t\t);\n\t}\n\t// When we come from a conditional render, on a mounted\n\t// portal we should clear the DOM.\n\telse if (_this._temp) {\n\t\t_this.componentWillUnmount();\n\t}\n}\n\n/**\n * Create a `Portal` to continue rendering the vnode tree at a different DOM node\n * @param {import('./internal').VNode} vnode The vnode to render\n * @param {import('./internal').PreactElement} container The DOM node to continue rendering in to.\n */\nexport function createPortal(vnode, container) {\n\treturn createElement(Portal, { _vnode: vnode, _container: container });\n}\n","import React from 'react';\nexport var DefaultContext = {\n  color: undefined,\n  size: undefined,\n  className: undefined,\n  style: undefined,\n  attr: undefined\n};\nexport var IconContext = React.createContext && React.createContext(DefaultContext);","var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React from 'react';\nimport { IconContext, DefaultContext } from './iconContext';\n\nfunction Tree2Element(tree) {\n  return tree && tree.map(function (node, i) {\n    return React.createElement(node.tag, __assign({\n      key: i\n    }, node.attr), Tree2Element(node.child));\n  });\n}\n\nexport function GenIcon(data) {\n  return function (props) {\n    return React.createElement(IconBase, __assign({\n      attr: __assign({}, data.attr)\n    }, props), Tree2Element(data.child));\n  };\n}\nexport function IconBase(props) {\n  var elem = function (conf) {\n    var attr = props.attr,\n        size = props.size,\n        title = props.title,\n        svgProps = __rest(props, [\"attr\", \"size\", \"title\"]);\n\n    var computedSize = size || conf.size || \"1em\";\n    var className;\n    if (conf.className) className = conf.className;\n    if (props.className) className = (className ? className + ' ' : '') + props.className;\n    return React.createElement(\"svg\", __assign({\n      stroke: \"currentColor\",\n      fill: \"currentColor\",\n      strokeWidth: \"0\"\n    }, conf.attr, attr, svgProps, {\n      className: className,\n      style: __assign(__assign({\n        color: props.color || conf.color\n      }, conf.style), props.style),\n      height: computedSize,\n      width: computedSize,\n      xmlns: \"http://www.w3.org/2000/svg\"\n    }), title && React.createElement(\"title\", null, title), props.children);\n  };\n\n  return IconContext !== undefined ? React.createElement(IconContext.Consumer, null, function (conf) {\n    return elem(conf);\n  }) : elem(DefaultContext);\n}","export * from \"./iconsManifest\";\nexport * from \"./iconBase\";\nexport * from \"./iconContext\";","// THIS FILE IS AUTO GENERATED\nimport { GenIcon } from '../lib';\nexport function Md3DRotation (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M7.52 21.48C4.25 19.94 1.91 16.76 1.55 13H.05C.56 19.16 5.71 24 12 24l.66-.03-3.81-3.81-1.33 1.32zm.89-6.52c-.19 0-.37-.03-.52-.08-.16-.06-.29-.13-.4-.24-.11-.1-.2-.22-.26-.37-.06-.14-.09-.3-.09-.47h-1.3c0 .36.07.68.21.95.14.27.33.5.56.69.24.18.51.32.82.41.3.1.62.15.96.15.37 0 .72-.05 1.03-.15.32-.1.6-.25.83-.44s.42-.43.55-.72c.13-.29.2-.61.2-.97 0-.19-.02-.38-.07-.56-.05-.18-.12-.35-.23-.51-.1-.16-.24-.3-.4-.43-.17-.13-.37-.23-.61-.31.2-.09.37-.2.52-.33.15-.13.27-.27.37-.42.1-.15.17-.3.22-.46.05-.16.07-.32.07-.48 0-.36-.06-.68-.18-.96-.12-.28-.29-.51-.51-.69-.2-.19-.47-.33-.77-.43C9.1 8.05 8.76 8 8.39 8c-.36 0-.69.05-1 .16-.3.11-.57.26-.79.45-.21.19-.38.41-.51.67-.12.26-.18.54-.18.85h1.3c0-.17.03-.32.09-.45s.14-.25.25-.34c.11-.09.23-.17.38-.22.15-.05.3-.08.48-.08.4 0 .7.1.89.31.19.2.29.49.29.86 0 .18-.03.34-.08.49-.05.15-.14.27-.25.37-.11.1-.25.18-.41.24-.16.06-.36.09-.58.09H7.5v1.03h.77c.22 0 .42.02.6.07s.33.13.45.23c.12.11.22.24.29.4.07.16.1.35.1.57 0 .41-.12.72-.35.93-.23.23-.55.33-.95.33zm8.55-5.92c-.32-.33-.7-.59-1.14-.77-.43-.18-.92-.27-1.46-.27H12v8h2.3c.55 0 1.06-.09 1.51-.27.45-.18.84-.43 1.16-.76.32-.33.57-.73.74-1.19.17-.47.26-.99.26-1.57v-.4c0-.58-.09-1.1-.26-1.57-.18-.47-.43-.87-.75-1.2zm-.39 3.16c0 .42-.05.79-.14 1.13-.1.33-.24.62-.43.85-.19.23-.43.41-.71.53-.29.12-.62.18-.99.18h-.91V9.12h.97c.72 0 1.27.23 1.64.69.38.46.57 1.12.57 1.99v.4zM12 0l-.66.03 3.81 3.81 1.33-1.33c3.27 1.55 5.61 4.72 5.96 8.48h1.5C23.44 4.84 18.29 0 12 0z\"}}]})(props);\n};\nexport function MdAccessibility (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 2c1.1 0 2 .9 2 2s-.9 2-2 2-2-.9-2-2 .9-2 2-2zm9 7h-6v13h-2v-6h-2v6H9V9H3V7h18v2z\"}}]})(props);\n};\nexport function MdAccessible (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"circle\",\"attr\":{\"cx\":\"12\",\"cy\":\"4\",\"r\":\"2\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M19 13v-2c-1.54.02-3.09-.75-4.07-1.83l-1.29-1.43c-.17-.19-.38-.34-.61-.45-.01 0-.01-.01-.02-.01H13c-.35-.2-.75-.3-1.19-.26C10.76 7.11 10 8.04 10 9.09V15c0 1.1.9 2 2 2h5v5h2v-5.5c0-1.1-.9-2-2-2h-3v-3.45c1.29 1.07 3.25 1.94 5 1.95zm-6.17 5c-.41 1.16-1.52 2-2.83 2-1.66 0-3-1.34-3-3 0-1.31.84-2.41 2-2.83V12.1c-2.28.46-4 2.48-4 4.9 0 2.76 2.24 5 5 5 2.42 0 4.44-1.72 4.9-4h-2.07z\"}}]})(props);\n};\nexport function MdAccountBalance (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M4 10v7h3v-7H4zm6 0v7h3v-7h-3zM2 22h19v-3H2v3zm14-12v7h3v-7h-3zm-4.5-9L2 6v2h19V6l-9.5-5z\"}}]})(props);\n};\nexport function MdAccountBalanceWallet (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M21 18v1c0 1.1-.9 2-2 2H5c-1.11 0-2-.9-2-2V5c0-1.1.89-2 2-2h14c1.1 0 2 .9 2 2v1h-9c-1.11 0-2 .9-2 2v8c0 1.1.89 2 2 2h9zm-9-2h10V8H12v8zm4-2.5c-.83 0-1.5-.67-1.5-1.5s.67-1.5 1.5-1.5 1.5.67 1.5 1.5-.67 1.5-1.5 1.5z\"}}]})(props);\n};\nexport function MdAccountBox (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M3 5v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2H5c-1.11 0-2 .9-2 2zm12 4c0 1.66-1.34 3-3 3s-3-1.34-3-3 1.34-3 3-3 3 1.34 3 3zm-9 8c0-2 4-3.1 6-3.1s6 1.1 6 3.1v1H6v-1z\"}}]})(props);\n};\nexport function MdAccountCircle (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 3c1.66 0 3 1.34 3 3s-1.34 3-3 3-3-1.34-3-3 1.34-3 3-3zm0 14.2c-2.5 0-4.71-1.28-6-3.22.03-1.99 4-3.08 6-3.08 1.99 0 5.97 1.09 6 3.08-1.29 1.94-3.5 3.22-6 3.22z\"}}]})(props);\n};\nexport function MdAddShoppingCart (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M11 9h2V6h3V4h-3V1h-2v3H8v2h3v3zm-4 9c-1.1 0-1.99.9-1.99 2S5.9 22 7 22s2-.9 2-2-.9-2-2-2zm10 0c-1.1 0-1.99.9-1.99 2s.89 2 1.99 2 2-.9 2-2-.9-2-2-2zm-9.83-3.25l.03-.12.9-1.63h7.45c.75 0 1.41-.41 1.75-1.03l3.86-7.01L19.42 4h-.01l-1.1 2-2.76 5H8.53l-.13-.27L6.16 6l-.95-2-.94-2H1v2h2l3.6 7.59-1.35 2.45c-.16.28-.25.61-.25.96 0 1.1.9 2 2 2h12v-2H7.42c-.13 0-.25-.11-.25-.25z\"}}]})(props);\n};\nexport function MdAlarm (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M22 5.72l-4.6-3.86-1.29 1.53 4.6 3.86L22 5.72zM7.88 3.39L6.6 1.86 2 5.71l1.29 1.53 4.59-3.85zM12.5 8H11v6l4.75 2.85.75-1.23-4-2.37V8zM12 4c-4.97 0-9 4.03-9 9s4.02 9 9 9c4.97 0 9-4.03 9-9s-4.03-9-9-9zm0 16c-3.87 0-7-3.13-7-7s3.13-7 7-7 7 3.13 7 7-3.13 7-7 7z\"}}]})(props);\n};\nexport function MdAlarmAdd (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M7.88 3.39L6.6 1.86 2 5.71l1.29 1.53 4.59-3.85zM22 5.72l-4.6-3.86-1.29 1.53 4.6 3.86L22 5.72zM12 4c-4.97 0-9 4.03-9 9s4.02 9 9 9c4.97 0 9-4.03 9-9s-4.03-9-9-9zm0 16c-3.87 0-7-3.13-7-7s3.13-7 7-7 7 3.13 7 7-3.13 7-7 7zm1-11h-2v3H8v2h3v3h2v-3h3v-2h-3V9z\"}}]})(props);\n};\nexport function MdAlarmOff (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 6c3.87 0 7 3.13 7 7 0 .84-.16 1.65-.43 2.4l1.52 1.52c.58-1.19.91-2.51.91-3.92 0-4.97-4.03-9-9-9-1.41 0-2.73.33-3.92.91L9.6 6.43C10.35 6.16 11.16 6 12 6zm10-.28l-4.6-3.86-1.29 1.53 4.6 3.86L22 5.72zM2.92 2.29L1.65 3.57 2.98 4.9l-1.11.93 1.42 1.42 1.11-.94.8.8C3.83 8.69 3 10.75 3 13c0 4.97 4.02 9 9 9 2.25 0 4.31-.83 5.89-2.2l2.2 2.2 1.27-1.27L3.89 3.27l-.97-.98zm13.55 16.1C15.26 19.39 13.7 20 12 20c-3.87 0-7-3.13-7-7 0-1.7.61-3.26 1.61-4.47l9.86 9.86zM8.02 3.28L6.6 1.86l-.86.71 1.42 1.42.86-.71z\"}}]})(props);\n};\nexport function MdAlarmOn (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M22 5.72l-4.6-3.86-1.29 1.53 4.6 3.86L22 5.72zM7.88 3.39L6.6 1.86 2 5.71l1.29 1.53 4.59-3.85zM12 4c-4.97 0-9 4.03-9 9s4.02 9 9 9c4.97 0 9-4.03 9-9s-4.03-9-9-9zm0 16c-3.87 0-7-3.13-7-7s3.13-7 7-7 7 3.13 7 7-3.13 7-7 7zm-1.46-5.47L8.41 12.4l-1.06 1.06 3.18 3.18 6-6-1.06-1.06-4.93 4.95z\"}}]})(props);\n};\nexport function MdAllOut (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M16.21 4.16l4 4v-4zm4 12l-4 4h4zm-12 4l-4-4v4zm-4-12l4-4h-4zm12.95-.95c-2.73-2.73-7.17-2.73-9.9 0s-2.73 7.17 0 9.9 7.17 2.73 9.9 0 2.73-7.16 0-9.9zm-1.1 8.8c-2.13 2.13-5.57 2.13-7.7 0s-2.13-5.57 0-7.7 5.57-2.13 7.7 0 2.13 5.57 0 7.7z\"}}]})(props);\n};\nexport function MdAndroid (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M6 18c0 .55.45 1 1 1h1v3.5c0 .83.67 1.5 1.5 1.5s1.5-.67 1.5-1.5V19h2v3.5c0 .83.67 1.5 1.5 1.5s1.5-.67 1.5-1.5V19h1c.55 0 1-.45 1-1V8H6v10zM3.5 8C2.67 8 2 8.67 2 9.5v7c0 .83.67 1.5 1.5 1.5S5 17.33 5 16.5v-7C5 8.67 4.33 8 3.5 8zm17 0c-.83 0-1.5.67-1.5 1.5v7c0 .83.67 1.5 1.5 1.5s1.5-.67 1.5-1.5v-7c0-.83-.67-1.5-1.5-1.5zm-4.97-5.84l1.3-1.3c.2-.2.2-.51 0-.71-.2-.2-.51-.2-.71 0l-1.48 1.48C13.85 1.23 12.95 1 12 1c-.96 0-1.86.23-2.66.63L7.85.15c-.2-.2-.51-.2-.71 0-.2.2-.2.51 0 .71l1.31 1.31C6.97 3.26 6 5.01 6 7h12c0-1.99-.97-3.75-2.47-4.84zM10 5H9V4h1v1zm5 0h-1V4h1v1z\"}}]})(props);\n};\nexport function MdAnnouncement (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M20 2H4c-1.1 0-1.99.9-1.99 2L2 22l4-4h14c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm-7 9h-2V5h2v6zm0 4h-2v-2h2v2z\"}}]})(props);\n};\nexport function MdAspectRatio (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M19 12h-2v3h-3v2h5v-5zM7 9h3V7H5v5h2V9zm14-6H3c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h18c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16.01H3V4.99h18v14.02z\"}}]})(props);\n};\nexport function MdAssessment (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"}}]})(props);\n};\nexport function MdAssignment (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M19 3h-4.18C14.4 1.84 13.3 1 12 1c-1.3 0-2.4.84-2.82 2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-7 0c.55 0 1 .45 1 1s-.45 1-1 1-1-.45-1-1 .45-1 1-1zm2 14H7v-2h7v2zm3-4H7v-2h10v2zm0-4H7V7h10v2z\"}}]})(props);\n};\nexport function MdAssignmentInd (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M19 3h-4.18C14.4 1.84 13.3 1 12 1c-1.3 0-2.4.84-2.82 2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-7 0c.55 0 1 .45 1 1s-.45 1-1 1-1-.45-1-1 .45-1 1-1zm0 4c1.66 0 3 1.34 3 3s-1.34 3-3 3-3-1.34-3-3 1.34-3 3-3zm6 12H6v-1.4c0-2 4-3.1 6-3.1s6 1.1 6 3.1V19z\"}}]})(props);\n};\nexport function MdAssignmentLate (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M19 3h-4.18C14.4 1.84 13.3 1 12 1c-1.3 0-2.4.84-2.82 2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-6 15h-2v-2h2v2zm0-4h-2V8h2v6zm-1-9c-.55 0-1-.45-1-1s.45-1 1-1 1 .45 1 1-.45 1-1 1z\"}}]})(props);\n};\nexport function MdAssignmentReturn (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M19 3h-4.18C14.4 1.84 13.3 1 12 1c-1.3 0-2.4.84-2.82 2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-7 0c.55 0 1 .45 1 1s-.45 1-1 1-1-.45-1-1 .45-1 1-1zm4 12h-4v3l-5-5 5-5v3h4v4z\"}}]})(props);\n};\nexport function MdAssignmentReturned (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M19 3h-4.18C14.4 1.84 13.3 1 12 1c-1.3 0-2.4.84-2.82 2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-7 0c.55 0 1 .45 1 1s-.45 1-1 1-1-.45-1-1 .45-1 1-1zm0 15l-5-5h3V9h4v4h3l-5 5z\"}}]})(props);\n};\nexport function MdAssignmentTurnedIn (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M19 3h-4.18C14.4 1.84 13.3 1 12 1c-1.3 0-2.4.84-2.82 2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-7 0c.55 0 1 .45 1 1s-.45 1-1 1-1-.45-1-1 .45-1 1-1zm-2 14l-4-4 1.41-1.41L10 14.17l6.59-6.59L18 9l-8 8z\"}}]})(props);\n};\nexport function MdAutorenew (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 6v3l4-4-4-4v3c-4.42 0-8 3.58-8 8 0 1.57.46 3.03 1.24 4.26L6.7 14.8c-.45-.83-.7-1.79-.7-2.8 0-3.31 2.69-6 6-6zm6.76 1.74L17.3 9.2c.44.84.7 1.79.7 2.8 0 3.31-2.69 6-6 6v-3l-4 4 4 4v-3c4.42 0 8-3.58 8-8 0-1.57-.46-3.03-1.24-4.26z\"}}]})(props);\n};\nexport function MdBackup (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M19.35 10.04C18.67 6.59 15.64 4 12 4 9.11 4 6.6 5.64 5.35 8.04 2.34 8.36 0 10.91 0 14c0 3.31 2.69 6 6 6h13c2.76 0 5-2.24 5-5 0-2.64-2.05-4.78-4.65-4.96zM14 13v4h-4v-4H7l5-5 5 5h-3z\"}}]})(props);\n};\nexport function MdBook (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M18 2H6c-1.1 0-2 .9-2 2v16c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zM6 4h5v8l-2.5-1.5L6 12V4z\"}}]})(props);\n};\nexport function MdBookmark (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M17 3H7c-1.1 0-1.99.9-1.99 2L5 21l7-3 7 3V5c0-1.1-.9-2-2-2z\"}}]})(props);\n};\nexport function MdBookmarkBorder (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M17 3H7c-1.1 0-1.99.9-1.99 2L5 21l7-3 7 3V5c0-1.1-.9-2-2-2zm0 15l-5-2.18L7 18V5h10v13z\"}}]})(props);\n};\nexport function MdBugReport (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M20 8h-2.81c-.45-.78-1.07-1.45-1.82-1.96L17 4.41 15.59 3l-2.17 2.17C12.96 5.06 12.49 5 12 5c-.49 0-.96.06-1.41.17L8.41 3 7 4.41l1.62 1.63C7.88 6.55 7.26 7.22 6.81 8H4v2h2.09c-.05.33-.09.66-.09 1v1H4v2h2v1c0 .34.04.67.09 1H4v2h2.81c1.04 1.79 2.97 3 5.19 3s4.15-1.21 5.19-3H20v-2h-2.09c.05-.33.09-.66.09-1v-1h2v-2h-2v-1c0-.34-.04-.67-.09-1H20V8zm-6 8h-4v-2h4v2zm0-4h-4v-2h4v2z\"}}]})(props);\n};\nexport function MdBuild (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M22.7 19l-9.1-9.1c.9-2.3.4-5-1.5-6.9-2-2-5-2.4-7.4-1.3L9 6 6 9 1.6 4.7C.4 7.1.9 10.1 2.9 12.1c1.9 1.9 4.6 2.4 6.9 1.5l9.1 9.1c.4.4 1 .4 1.4 0l2.3-2.3c.5-.4.5-1.1.1-1.4z\"}}]})(props);\n};\nexport function MdCached (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M19 8l-4 4h3c0 3.31-2.69 6-6 6-1.01 0-1.97-.25-2.8-.7l-1.46 1.46C8.97 19.54 10.43 20 12 20c4.42 0 8-3.58 8-8h3l-4-4zM6 12c0-3.31 2.69-6 6-6 1.01 0 1.97.25 2.8.7l1.46-1.46C15.03 4.46 13.57 4 12 4c-4.42 0-8 3.58-8 8H1l4 4 4-4H6z\"}}]})(props);\n};\nexport function MdCameraEnhance (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M9 3L7.17 5H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V7c0-1.1-.9-2-2-2h-3.17L15 3H9zm3 15c-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5-2.24 5-5 5zm0-1l1.25-2.75L16 13l-2.75-1.25L12 9l-1.25 2.75L8 13l2.75 1.25z\"}}]})(props);\n};\nexport function MdCardGiftcard (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M20 6h-2.18c.11-.31.18-.65.18-1 0-1.66-1.34-3-3-3-1.05 0-1.96.54-2.5 1.35l-.5.67-.5-.68C10.96 2.54 10.05 2 9 2 7.34 2 6 3.34 6 5c0 .35.07.69.18 1H4c-1.11 0-1.99.89-1.99 2L2 19c0 1.11.89 2 2 2h16c1.11 0 2-.89 2-2V8c0-1.11-.89-2-2-2zm-5-2c.55 0 1 .45 1 1s-.45 1-1 1-1-.45-1-1 .45-1 1-1zM9 4c.55 0 1 .45 1 1s-.45 1-1 1-1-.45-1-1 .45-1 1-1zm11 15H4v-2h16v2zm0-5H4V8h5.08L7 10.83 8.62 12 11 8.76l1-1.36 1 1.36L15.38 12 17 10.83 14.92 8H20v6z\"}}]})(props);\n};\nexport function MdCardMembership (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M20 2H4c-1.11 0-2 .89-2 2v11c0 1.11.89 2 2 2h4v5l4-2 4 2v-5h4c1.11 0 2-.89 2-2V4c0-1.11-.89-2-2-2zm0 13H4v-2h16v2zm0-5H4V4h16v6z\"}}]})(props);\n};\nexport function MdCardTravel (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M20 6h-3V4c0-1.11-.89-2-2-2H9c-1.11 0-2 .89-2 2v2H4c-1.11 0-2 .89-2 2v11c0 1.11.89 2 2 2h16c1.11 0 2-.89 2-2V8c0-1.11-.89-2-2-2zM9 4h6v2H9V4zm11 15H4v-2h16v2zm0-5H4V8h3v2h2V8h6v2h2V8h3v6z\"}}]})(props);\n};\nexport function MdChangeHistory (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 7.77L18.39 18H5.61L12 7.77M12 4L2 20h20L12 4z\"}}]})(props);\n};\nexport function MdCheckCircle (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z\"}}]})(props);\n};\nexport function MdChromeReaderMode (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M13 12h7v1.5h-7zm0-2.5h7V11h-7zm0 5h7V16h-7zM21 4H3c-1.1 0-2 .9-2 2v13c0 1.1.9 2 2 2h18c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm0 15h-9V6h9v13z\"}}]})(props);\n};\nexport function MdClass (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M18 2H6c-1.1 0-2 .9-2 2v16c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zM6 4h5v8l-2.5-1.5L6 12V4z\"}}]})(props);\n};\nexport function MdCode (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M9.4 16.6L4.8 12l4.6-4.6L8 6l-6 6 6 6 1.4-1.4zm5.2 0l4.6-4.6-4.6-4.6L16 6l6 6-6 6-1.4-1.4z\"}}]})(props);\n};\nexport function MdCompareArrows (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M9.01 14H2v2h7.01v3L13 15l-3.99-4v3zm5.98-1v-3H22V8h-7.01V5L11 9l3.99 4z\"}}]})(props);\n};\nexport function MdCopyright (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M10.08 10.86c.05-.33.16-.62.3-.87s.34-.46.59-.62c.24-.15.54-.22.91-.23.23.01.44.05.63.13.2.09.38.21.52.36s.25.33.34.53.13.42.14.64h1.79c-.02-.47-.11-.9-.28-1.29s-.4-.73-.7-1.01-.66-.5-1.08-.66-.88-.23-1.39-.23c-.65 0-1.22.11-1.7.34s-.88.53-1.2.92-.56.84-.71 1.36S8 11.29 8 11.87v.27c0 .58.08 1.12.23 1.64s.39.97.71 1.35.72.69 1.2.91 1.05.34 1.7.34c.47 0 .91-.08 1.32-.23s.77-.36 1.08-.63.56-.58.74-.94.29-.74.3-1.15h-1.79c-.01.21-.06.4-.15.58s-.21.33-.36.46-.32.23-.52.3c-.19.07-.39.09-.6.1-.36-.01-.66-.08-.89-.23-.25-.16-.45-.37-.59-.62s-.25-.55-.3-.88-.08-.67-.08-1v-.27c0-.35.03-.68.08-1.01zM12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z\"}}]})(props);\n};\nexport function MdCreditCard (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M20 4H4c-1.11 0-1.99.89-1.99 2L2 18c0 1.11.89 2 2 2h16c1.11 0 2-.89 2-2V6c0-1.11-.89-2-2-2zm0 14H4v-6h16v6zm0-10H4V6h16v2z\"}}]})(props);\n};\nexport function MdDashboard (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M3 13h8V3H3v10zm0 8h8v-6H3v6zm10 0h8V11h-8v10zm0-18v6h8V3h-8z\"}}]})(props);\n};\nexport function MdDateRange (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M9 11H7v2h2v-2zm4 0h-2v2h2v-2zm4 0h-2v2h2v-2zm2-7h-1V2h-2v2H8V2H6v2H5c-1.11 0-1.99.9-1.99 2L3 20c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm0 16H5V9h14v11z\"}}]})(props);\n};\nexport function MdDelete (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z\"}}]})(props);\n};\nexport function MdDeleteForever (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zm2.46-7.12l1.41-1.41L12 12.59l2.12-2.12 1.41 1.41L13.41 14l2.12 2.12-1.41 1.41L12 15.41l-2.12 2.12-1.41-1.41L10.59 14l-2.13-2.12zM15.5 4l-1-1h-5l-1 1H5v2h14V4z\"}}]})(props);\n};\nexport function MdDescription (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M14 2H6c-1.1 0-1.99.9-1.99 2L4 20c0 1.1.89 2 1.99 2H18c1.1 0 2-.9 2-2V8l-6-6zm2 16H8v-2h8v2zm0-4H8v-2h8v2zm-3-5V3.5L18.5 9H13z\"}}]})(props);\n};\nexport function MdDns (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M20 13H4c-.55 0-1 .45-1 1v6c0 .55.45 1 1 1h16c.55 0 1-.45 1-1v-6c0-.55-.45-1-1-1zM7 19c-1.1 0-2-.9-2-2s.9-2 2-2 2 .9 2 2-.9 2-2 2zM20 3H4c-.55 0-1 .45-1 1v6c0 .55.45 1 1 1h16c.55 0 1-.45 1-1V4c0-.55-.45-1-1-1zM7 9c-1.1 0-2-.9-2-2s.9-2 2-2 2 .9 2 2-.9 2-2 2z\"}}]})(props);\n};\nexport function MdDone (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M9 16.2L4.8 12l-1.4 1.4L9 19 21 7l-1.4-1.4L9 16.2z\"}}]})(props);\n};\nexport function MdDoneAll (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M18 7l-1.41-1.41-6.34 6.34 1.41 1.41L18 7zm4.24-1.41L11.66 16.17 7.48 12l-1.41 1.41L11.66 19l12-12-1.42-1.41zM.41 13.41L6 19l1.41-1.41L1.83 12 .41 13.41z\"}}]})(props);\n};\nexport function MdDonutLarge (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M11 5.08V2c-5 .5-9 4.81-9 10s4 9.5 9 10v-3.08c-3-.48-6-3.4-6-6.92s3-6.44 6-6.92zM18.97 11H22c-.47-5-4-8.53-9-9v3.08C16 5.51 18.54 8 18.97 11zM13 18.92V22c5-.47 8.53-4 9-9h-3.03c-.43 3-2.97 5.49-5.97 5.92z\"}}]})(props);\n};\nexport function MdDonutSmall (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M11 9.16V2c-5 .5-9 4.79-9 10s4 9.5 9 10v-7.16c-1-.41-2-1.52-2-2.84s1-2.43 2-2.84zM14.86 11H22c-.48-4.75-4-8.53-9-9v7.16c1 .3 1.52.98 1.86 1.84zM13 14.84V22c5-.47 8.52-4.25 9-9h-7.14c-.34.86-.86 1.54-1.86 1.84z\"}}]})(props);\n};\nexport function MdEject (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M5 17h14v2H5zm7-12L5.33 15h13.34z\"}}]})(props);\n};\nexport function MdEuroSymbol (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M15 18.5c-2.51 0-4.68-1.42-5.76-3.5H15v-2H8.58c-.05-.33-.08-.66-.08-1s.03-.67.08-1H15V9H9.24C10.32 6.92 12.5 5.5 15 5.5c1.61 0 3.09.59 4.23 1.57L21 5.3C19.41 3.87 17.3 3 15 3c-3.92 0-7.24 2.51-8.48 6H3v2h3.06c-.04.33-.06.66-.06 1 0 .34.02.67.06 1H3v2h3.52c1.24 3.49 4.56 6 8.48 6 2.31 0 4.41-.87 6-2.3l-1.78-1.77c-1.13.98-2.6 1.57-4.22 1.57z\"}}]})(props);\n};\nexport function MdEvent (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M17 12h-5v5h5v-5zM16 1v2H8V1H6v2H5c-1.11 0-1.99.9-1.99 2L3 19c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2h-1V1h-2zm3 18H5V8h14v11z\"}}]})(props);\n};\nexport function MdEventSeat (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M4 18v3h3v-3h10v3h3v-6H4zm15-8h3v3h-3zM2 10h3v3H2zm15 3H7V5c0-1.1.9-2 2-2h6c1.1 0 2 .9 2 2v8z\"}}]})(props);\n};\nexport function MdExitToApp (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M10.09 15.59L11.5 17l5-5-5-5-1.41 1.41L12.67 11H3v2h9.67l-2.58 2.59zM19 3H5c-1.11 0-2 .9-2 2v4h2V5h14v14H5v-4H3v4c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z\"}}]})(props);\n};\nexport function MdExplore (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 10.9c-.61 0-1.1.49-1.1 1.1s.49 1.1 1.1 1.1c.61 0 1.1-.49 1.1-1.1s-.49-1.1-1.1-1.1zM12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm2.19 12.19L6 18l3.81-8.19L18 6l-3.81 8.19z\"}}]})(props);\n};\nexport function MdExtension (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M20.5 11H19V7c0-1.1-.9-2-2-2h-4V3.5C13 2.12 11.88 1 10.5 1S8 2.12 8 3.5V5H4c-1.1 0-1.99.9-1.99 2v3.8H3.5c1.49 0 2.7 1.21 2.7 2.7s-1.21 2.7-2.7 2.7H2V20c0 1.1.9 2 2 2h3.8v-1.5c0-1.49 1.21-2.7 2.7-2.7 1.49 0 2.7 1.21 2.7 2.7V22H17c1.1 0 2-.9 2-2v-4h1.5c1.38 0 2.5-1.12 2.5-2.5S21.88 11 20.5 11z\"}}]})(props);\n};\nexport function MdFace (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M9 11.75c-.69 0-1.25.56-1.25 1.25s.56 1.25 1.25 1.25 1.25-.56 1.25-1.25-.56-1.25-1.25-1.25zm6 0c-.69 0-1.25.56-1.25 1.25s.56 1.25 1.25 1.25 1.25-.56 1.25-1.25-.56-1.25-1.25-1.25zM12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8 0-.29.02-.58.05-.86 2.36-1.05 4.23-2.98 5.21-5.37C11.07 8.33 14.05 10 17.42 10c.78 0 1.53-.09 2.25-.26.21.71.33 1.47.33 2.26 0 4.41-3.59 8-8 8z\"}}]})(props);\n};\nexport function MdFavorite (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 21.35l-1.45-1.32C5.4 15.36 2 12.28 2 8.5 2 5.42 4.42 3 7.5 3c1.74 0 3.41.81 4.5 2.09C13.09 3.81 14.76 3 16.5 3 19.58 3 22 5.42 22 8.5c0 3.78-3.4 6.86-8.55 11.54L12 21.35z\"}}]})(props);\n};\nexport function MdFavoriteBorder (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M16.5 3c-1.74 0-3.41.81-4.5 2.09C10.91 3.81 9.24 3 7.5 3 4.42 3 2 5.42 2 8.5c0 3.78 3.4 6.86 8.55 11.54L12 21.35l1.45-1.32C18.6 15.36 22 12.28 22 8.5 22 5.42 19.58 3 16.5 3zm-4.4 15.55l-.1.1-.1-.1C7.14 14.24 4 11.39 4 8.5 4 6.5 5.5 5 7.5 5c1.54 0 3.04.99 3.57 2.36h1.87C13.46 5.99 14.96 5 16.5 5c2 0 3.5 1.5 3.5 3.5 0 2.89-3.14 5.74-7.9 10.05z\"}}]})(props);\n};\nexport function MdFeedback (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M20 2H4c-1.1 0-1.99.9-1.99 2L2 22l4-4h14c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm-7 12h-2v-2h2v2zm0-4h-2V6h2v4z\"}}]})(props);\n};\nexport function MdFindInPage (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M20 19.59V8l-6-6H6c-1.1 0-1.99.9-1.99 2L4 20c0 1.1.89 2 1.99 2H18c.45 0 .85-.15 1.19-.4l-4.43-4.43c-.8.52-1.74.83-2.76.83-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5c0 1.02-.31 1.96-.83 2.75L20 19.59zM9 13c0 1.66 1.34 3 3 3s3-1.34 3-3-1.34-3-3-3-3 1.34-3 3z\"}}]})(props);\n};\nexport function MdFindReplace (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M11 6c1.38 0 2.63.56 3.54 1.46L12 10h6V4l-2.05 2.05C14.68 4.78 12.93 4 11 4c-3.53 0-6.43 2.61-6.92 6H6.1c.46-2.28 2.48-4 4.9-4zm5.64 9.14c.66-.9 1.12-1.97 1.28-3.14H15.9c-.46 2.28-2.48 4-4.9 4-1.38 0-2.63-.56-3.54-1.46L10 12H4v6l2.05-2.05C7.32 17.22 9.07 18 11 18c1.55 0 2.98-.51 4.14-1.36L20 21.49 21.49 20l-4.85-4.86z\"}}]})(props);\n};\nexport function MdFingerprint (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M17.81 4.47c-.08 0-.16-.02-.23-.06C15.66 3.42 14 3 12.01 3c-1.98 0-3.86.47-5.57 1.41-.24.13-.54.04-.68-.2-.13-.24-.04-.55.2-.68C7.82 2.52 9.86 2 12.01 2c2.13 0 3.99.47 6.03 1.52.25.13.34.43.21.67-.09.18-.26.28-.44.28zM3.5 9.72c-.1 0-.2-.03-.29-.09-.23-.16-.28-.47-.12-.7.99-1.4 2.25-2.5 3.75-3.27C9.98 4.04 14 4.03 17.15 5.65c1.5.77 2.76 1.86 3.75 3.25.16.22.11.54-.12.7-.23.16-.54.11-.7-.12-.9-1.26-2.04-2.25-3.39-2.94-2.87-1.47-6.54-1.47-9.4.01-1.36.7-2.5 1.7-3.4 2.96-.08.14-.23.21-.39.21zm6.25 12.07c-.13 0-.26-.05-.35-.15-.87-.87-1.34-1.43-2.01-2.64-.69-1.23-1.05-2.73-1.05-4.34 0-2.97 2.54-5.39 5.66-5.39s5.66 2.42 5.66 5.39c0 .28-.22.5-.5.5s-.5-.22-.5-.5c0-2.42-2.09-4.39-4.66-4.39-2.57 0-4.66 1.97-4.66 4.39 0 1.44.32 2.77.93 3.85.64 1.15 1.08 1.64 1.85 2.42.19.2.19.51 0 .71-.11.1-.24.15-.37.15zm7.17-1.85c-1.19 0-2.24-.3-3.1-.89-1.49-1.01-2.38-2.65-2.38-4.39 0-.28.22-.5.5-.5s.5.22.5.5c0 1.41.72 2.74 1.94 3.56.71.48 1.54.71 2.54.71.24 0 .64-.03 1.04-.1.27-.05.53.13.58.41.05.27-.13.53-.41.58-.57.11-1.07.12-1.21.12zM14.91 22c-.04 0-.09-.01-.13-.02-1.59-.44-2.63-1.03-3.72-2.1-1.4-1.39-2.17-3.24-2.17-5.22 0-1.62 1.38-2.94 3.08-2.94 1.7 0 3.08 1.32 3.08 2.94 0 1.07.93 1.94 2.08 1.94s2.08-.87 2.08-1.94c0-3.77-3.25-6.83-7.25-6.83-2.84 0-5.44 1.58-6.61 4.03-.39.81-.59 1.76-.59 2.8 0 .78.07 2.01.67 3.61.1.26-.03.55-.29.64-.26.1-.55-.04-.64-.29-.49-1.31-.73-2.61-.73-3.96 0-1.2.23-2.29.68-3.24 1.33-2.79 4.28-4.6 7.51-4.6 4.55 0 8.25 3.51 8.25 7.83 0 1.62-1.38 2.94-3.08 2.94s-3.08-1.32-3.08-2.94c0-1.07-.93-1.94-2.08-1.94s-2.08.87-2.08 1.94c0 1.71.66 3.31 1.87 4.51.95.94 1.86 1.46 3.27 1.85.27.07.42.35.35.61-.05.23-.26.38-.47.38z\"}}]})(props);\n};\nexport function MdFlightLand (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M2.5 19h19v2h-19zm7.18-5.73l4.35 1.16 5.31 1.42c.8.21 1.62-.26 1.84-1.06.21-.8-.26-1.62-1.06-1.84l-5.31-1.42-2.76-9.02L10.12 2v8.28L5.15 8.95l-.93-2.32-1.45-.39v5.17l1.6.43 5.31 1.43z\"}}]})(props);\n};\nexport function MdFlightTakeoff (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M2.5 19h19v2h-19zm19.57-9.36c-.21-.8-1.04-1.28-1.84-1.06L14.92 10l-6.9-6.43-1.93.51 4.14 7.17-4.97 1.33-1.97-1.54-1.45.39 1.82 3.16.77 1.33 1.6-.43 5.31-1.42 4.35-1.16L21 11.49c.81-.23 1.28-1.05 1.07-1.85z\"}}]})(props);\n};\nexport function MdFlipToBack (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M9 7H7v2h2V7zm0 4H7v2h2v-2zm0-8c-1.11 0-2 .9-2 2h2V3zm4 12h-2v2h2v-2zm6-12v2h2c0-1.1-.9-2-2-2zm-6 0h-2v2h2V3zM9 17v-2H7c0 1.1.89 2 2 2zm10-4h2v-2h-2v2zm0-4h2V7h-2v2zm0 8c1.1 0 2-.9 2-2h-2v2zM5 7H3v12c0 1.1.89 2 2 2h12v-2H5V7zm10-2h2V3h-2v2zm0 12h2v-2h-2v2z\"}}]})(props);\n};\nexport function MdFlipToFront (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M3 13h2v-2H3v2zm0 4h2v-2H3v2zm2 4v-2H3c0 1.1.89 2 2 2zM3 9h2V7H3v2zm12 12h2v-2h-2v2zm4-18H9c-1.11 0-2 .9-2 2v10c0 1.1.89 2 2 2h10c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 12H9V5h10v10zm-8 6h2v-2h-2v2zm-4 0h2v-2H7v2z\"}}]})(props);\n};\nexport function MdGTranslate (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M20 5h-9.12L10 2H4c-1.1 0-2 .9-2 2v13c0 1.1.9 2 2 2h7l1 3h8c1.1 0 2-.9 2-2V7c0-1.1-.9-2-2-2zM7.17 14.59c-2.25 0-4.09-1.83-4.09-4.09s1.83-4.09 4.09-4.09c1.04 0 1.99.37 2.74 1.07l.07.06-1.23 1.18-.06-.05c-.29-.27-.78-.59-1.52-.59-1.31 0-2.38 1.09-2.38 2.42s1.07 2.42 2.38 2.42c1.37 0 1.96-.87 2.12-1.46H7.08V9.91h3.95l.01.07c.04.21.05.4.05.61 0 2.35-1.61 4-3.92 4zm6.03-1.71c.33.6.74 1.18 1.19 1.7l-.54.53-.65-2.23zm.77-.76h-.99l-.31-1.04h3.99s-.34 1.31-1.56 2.74c-.52-.62-.89-1.23-1.13-1.7zM21 20c0 .55-.45 1-1 1h-7l2-2-.81-2.77.92-.92L17.79 18l.73-.73-2.71-2.68c.9-1.03 1.6-2.25 1.92-3.51H19v-1.04h-3.64V9h-1.04v1.04h-1.96L11.18 6H20c.55 0 1 .45 1 1v13z\"}}]})(props);\n};\nexport function MdGavel (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M1 21h12v2H1zM5.245 8.07l2.83-2.827 14.14 14.142-2.828 2.828zM12.317 1l5.657 5.656-2.83 2.83-5.654-5.66zM3.825 9.485l5.657 5.657-2.828 2.828-5.657-5.657z\"}}]})(props);\n};\nexport function MdGetApp (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M19 9h-4V3H9v6H5l7 7 7-7zM5 18v2h14v-2H5z\"}}]})(props);\n};\nexport function MdGif (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M11.5 9H13v6h-1.5zM9 9H6c-.6 0-1 .5-1 1v4c0 .5.4 1 1 1h3c.6 0 1-.5 1-1v-2H8.5v1.5h-2v-3H10V10c0-.5-.4-1-1-1zm10 1.5V9h-4.5v6H16v-2h2v-1.5h-2v-1z\"}}]})(props);\n};\nexport function MdGrade (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 17.27L18.18 21l-1.64-7.03L22 9.24l-7.19-.61L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21z\"}}]})(props);\n};\nexport function MdGroupWork (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zM8 17.5c-1.38 0-2.5-1.12-2.5-2.5s1.12-2.5 2.5-2.5 2.5 1.12 2.5 2.5-1.12 2.5-2.5 2.5zM9.5 8c0-1.38 1.12-2.5 2.5-2.5s2.5 1.12 2.5 2.5-1.12 2.5-2.5 2.5S9.5 9.38 9.5 8zm6.5 9.5c-1.38 0-2.5-1.12-2.5-2.5s1.12-2.5 2.5-2.5 2.5 1.12 2.5 2.5-1.12 2.5-2.5 2.5z\"}}]})(props);\n};\nexport function MdHelp (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 17h-2v-2h2v2zm2.07-7.75l-.9.92C13.45 12.9 13 13.5 13 15h-2v-.5c0-1.1.45-2.1 1.17-2.83l1.24-1.26c.37-.36.59-.86.59-1.41 0-1.1-.9-2-2-2s-2 .9-2 2H8c0-2.21 1.79-4 4-4s4 1.79 4 4c0 .88-.36 1.68-.93 2.25z\"}}]})(props);\n};\nexport function MdHelpOutline (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M11 18h2v-2h-2v2zm1-16C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm0-14c-2.21 0-4 1.79-4 4h2c0-1.1.9-2 2-2s2 .9 2 2c0 2-3 1.75-3 5h2c0-2.25 3-2.5 3-5 0-2.21-1.79-4-4-4z\"}}]})(props);\n};\nexport function MdHighlightOff (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M14.59 8L12 10.59 9.41 8 8 9.41 10.59 12 8 14.59 9.41 16 12 13.41 14.59 16 16 14.59 13.41 12 16 9.41 14.59 8zM12 2C6.47 2 2 6.47 2 12s4.47 10 10 10 10-4.47 10-10S17.53 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z\"}}]})(props);\n};\nexport function MdHistory (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M13 3c-4.97 0-9 4.03-9 9H1l3.89 3.89.07.14L9 12H6c0-3.87 3.13-7 7-7s7 3.13 7 7-3.13 7-7 7c-1.93 0-3.68-.79-4.94-2.06l-1.42 1.42C8.27 19.99 10.51 21 13 21c4.97 0 9-4.03 9-9s-4.03-9-9-9zm-1 5v5l4.28 2.54.72-1.21-3.5-2.08V8H12z\"}}]})(props);\n};\nexport function MdHome (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z\"}}]})(props);\n};\nexport function MdHourglassEmpty (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M6 2v6h.01L6 8.01 10 12l-4 4 .01.01H6V22h12v-5.99h-.01L18 16l-4-4 4-3.99-.01-.01H18V2H6zm10 14.5V20H8v-3.5l4-4 4 4zm-4-5l-4-4V4h8v3.5l-4 4z\"}}]})(props);\n};\nexport function MdHourglassFull (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M6 2v6h.01L6 8.01 10 12l-4 4 .01.01H6V22h12v-5.99h-.01L18 16l-4-4 4-3.99-.01-.01H18V2H6z\"}}]})(props);\n};\nexport function MdHttp (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M4.5 11h-2V9H1v6h1.5v-2.5h2V15H6V9H4.5v2zm2.5-.5h1.5V15H10v-4.5h1.5V9H7v1.5zm5.5 0H14V15h1.5v-4.5H17V9h-4.5v1.5zm9-1.5H18v6h1.5v-2h2c.8 0 1.5-.7 1.5-1.5v-1c0-.8-.7-1.5-1.5-1.5zm0 2.5h-2v-1h2v1z\"}}]})(props);\n};\nexport function MdHttps (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M18 8h-1V6c0-2.76-2.24-5-5-5S7 3.24 7 6v2H6c-1.1 0-2 .9-2 2v10c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V10c0-1.1-.9-2-2-2zm-6 9c-1.1 0-2-.9-2-2s.9-2 2-2 2 .9 2 2-.9 2-2 2zm3.1-9H8.9V6c0-1.71 1.39-3.1 3.1-3.1 1.71 0 3.1 1.39 3.1 3.1v2z\"}}]})(props);\n};\nexport function MdImportantDevices (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M23 11.01L18 11c-.55 0-1 .45-1 1v9c0 .55.45 1 1 1h5c.55 0 1-.45 1-1v-9c0-.55-.45-.99-1-.99zM23 20h-5v-7h5v7zM20 2H2C.89 2 0 2.89 0 4v12c0 1.1.89 2 2 2h7v2H7v2h8v-2h-2v-2h2v-2H2V4h18v5h2V4c0-1.11-.9-2-2-2zm-8.03 7L11 6l-.97 3H7l2.47 1.76-.94 2.91 2.47-1.8 2.47 1.8-.94-2.91L15 9h-3.03z\"}}]})(props);\n};\nexport function MdInfo (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-6h2v6zm0-8h-2V7h2v2z\"}}]})(props);\n};\nexport function MdInfoOutline (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M11 17h2v-6h-2v6zm1-15C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zM11 9h2V7h-2v2z\"}}]})(props);\n};\nexport function MdInput (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M21 3.01H3c-1.1 0-2 .9-2 2V9h2V4.99h18v14.03H3V15H1v4.01c0 1.1.9 1.98 2 1.98h18c1.1 0 2-.88 2-1.98v-14c0-1.11-.9-2-2-2zM11 16l4-4-4-4v3H1v2h10v3z\"}}]})(props);\n};\nexport function MdInvertColors (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M17.66 7.93L12 2.27 6.34 7.93c-3.12 3.12-3.12 8.19 0 11.31C7.9 20.8 9.95 21.58 12 21.58c2.05 0 4.1-.78 5.66-2.34 3.12-3.12 3.12-8.19 0-11.31zM12 19.59c-1.6 0-3.11-.62-4.24-1.76C6.62 16.69 6 15.19 6 13.59s.62-3.11 1.76-4.24L12 5.1v14.49z\"}}]})(props);\n};\nexport function MdLabel (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M17.63 5.84C17.27 5.33 16.67 5 16 5L5 5.01C3.9 5.01 3 5.9 3 7v10c0 1.1.9 1.99 2 1.99L16 19c.67 0 1.27-.33 1.63-.84L22 12l-4.37-6.16z\"}}]})(props);\n};\nexport function MdLabelOutline (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M17.63 5.84C17.27 5.33 16.67 5 16 5L5 5.01C3.9 5.01 3 5.9 3 7v10c0 1.1.9 1.99 2 1.99L16 19c.67 0 1.27-.33 1.63-.84L22 12l-4.37-6.16zM16 17H5V7h11l3.55 5L16 17z\"}}]})(props);\n};\nexport function MdLanguage (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M11.99 2C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zm6.93 6h-2.95c-.32-1.25-.78-2.45-1.38-3.56 1.84.63 3.37 1.91 4.33 3.56zM12 4.04c.83 1.2 1.48 2.53 1.91 3.96h-3.82c.43-1.43 1.08-2.76 1.91-3.96zM4.26 14C4.1 13.36 4 12.69 4 12s.1-1.36.26-2h3.38c-.08.66-.14 1.32-.14 2 0 .68.06 1.34.14 2H4.26zm.82 2h2.95c.32 1.25.78 2.45 1.38 3.56-1.84-.63-3.37-1.9-4.33-3.56zm2.95-8H5.08c.96-1.66 2.49-2.93 4.33-3.56C8.81 5.55 8.35 6.75 8.03 8zM12 19.96c-.83-1.2-1.48-2.53-1.91-3.96h3.82c-.43 1.43-1.08 2.76-1.91 3.96zM14.34 14H9.66c-.09-.66-.16-1.32-.16-2 0-.68.07-1.35.16-2h4.68c.09.65.16 1.32.16 2 0 .68-.07 1.34-.16 2zm.25 5.56c.6-1.11 1.06-2.31 1.38-3.56h2.95c-.96 1.65-2.49 2.93-4.33 3.56zM16.36 14c.08-.66.14-1.32.14-2 0-.68-.06-1.34-.14-2h3.38c.16.64.26 1.31.26 2s-.1 1.36-.26 2h-3.38z\"}}]})(props);\n};\nexport function MdLaunch (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M19 19H5V5h7V3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2v-7h-2v7zM14 3v2h3.59l-9.83 9.83 1.41 1.41L19 6.41V10h2V3h-7z\"}}]})(props);\n};\nexport function MdLightbulbOutline (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M9 21c0 .55.45 1 1 1h4c.55 0 1-.45 1-1v-1H9v1zm3-19C8.14 2 5 5.14 5 9c0 2.38 1.19 4.47 3 5.74V17c0 .55.45 1 1 1h6c.55 0 1-.45 1-1v-2.26c1.81-1.27 3-3.36 3-5.74 0-3.86-3.14-7-7-7zm2.85 11.1l-.85.6V16h-4v-2.3l-.85-.6C7.8 12.16 7 10.63 7 9c0-2.76 2.24-5 5-5s5 2.24 5 5c0 1.63-.8 3.16-2.15 4.1z\"}}]})(props);\n};\nexport function MdLineStyle (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M3 16h5v-2H3v2zm6.5 0h5v-2h-5v2zm6.5 0h5v-2h-5v2zM3 20h2v-2H3v2zm4 0h2v-2H7v2zm4 0h2v-2h-2v2zm4 0h2v-2h-2v2zm4 0h2v-2h-2v2zM3 12h8v-2H3v2zm10 0h8v-2h-8v2zM3 4v4h18V4H3z\"}}]})(props);\n};\nexport function MdLineWeight (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M3 17h18v-2H3v2zm0 3h18v-1H3v1zm0-7h18v-3H3v3zm0-9v4h18V4H3z\"}}]})(props);\n};\nexport function MdList (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M3 13h2v-2H3v2zm0 4h2v-2H3v2zm0-8h2V7H3v2zm4 4h14v-2H7v2zm0 4h14v-2H7v2zM7 7v2h14V7H7z\"}}]})(props);\n};\nexport function MdLock (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M18 8h-1V6c0-2.76-2.24-5-5-5S7 3.24 7 6v2H6c-1.1 0-2 .9-2 2v10c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V10c0-1.1-.9-2-2-2zm-6 9c-1.1 0-2-.9-2-2s.9-2 2-2 2 .9 2 2-.9 2-2 2zm3.1-9H8.9V6c0-1.71 1.39-3.1 3.1-3.1 1.71 0 3.1 1.39 3.1 3.1v2z\"}}]})(props);\n};\nexport function MdLockOpen (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 17c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm6-9h-1V6c0-2.76-2.24-5-5-5S7 3.24 7 6h1.9c0-1.71 1.39-3.1 3.1-3.1 1.71 0 3.1 1.39 3.1 3.1v2H6c-1.1 0-2 .9-2 2v10c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V10c0-1.1-.9-2-2-2zm0 12H6V10h12v10z\"}}]})(props);\n};\nexport function MdLockOutline (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 17c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm6-9h-1V6c0-2.76-2.24-5-5-5S7 3.24 7 6v2H6c-1.1 0-2 .9-2 2v10c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V10c0-1.1-.9-2-2-2zM8.9 6c0-1.71 1.39-3.1 3.1-3.1s3.1 1.39 3.1 3.1v2H8.9V6zM18 20H6V10h12v10z\"}}]})(props);\n};\nexport function MdLoyalty (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M21.41 11.58l-9-9C12.05 2.22 11.55 2 11 2H4c-1.1 0-2 .9-2 2v7c0 .55.22 1.05.59 1.42l9 9c.36.36.86.58 1.41.58.55 0 1.05-.22 1.41-.59l7-7c.37-.36.59-.86.59-1.41 0-.55-.23-1.06-.59-1.42zM5.5 7C4.67 7 4 6.33 4 5.5S4.67 4 5.5 4 7 4.67 7 5.5 6.33 7 5.5 7zm11.77 8.27L13 19.54l-4.27-4.27C8.28 14.81 8 14.19 8 13.5c0-1.38 1.12-2.5 2.5-2.5.69 0 1.32.28 1.77.74l.73.72.73-.73c.45-.45 1.08-.73 1.77-.73 1.38 0 2.5 1.12 2.5 2.5 0 .69-.28 1.32-.73 1.77z\"}}]})(props);\n};\nexport function MdMarkunreadMailbox (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M20 6H10v6H8V4h6V0H6v6H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V8c0-1.1-.9-2-2-2z\"}}]})(props);\n};\nexport function MdMotorcycle (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M19.44 9.03L15.41 5H11v2h3.59l2 2H5c-2.8 0-5 2.2-5 5s2.2 5 5 5c2.46 0 4.45-1.69 4.9-4h1.65l2.77-2.77c-.21.54-.32 1.14-.32 1.77 0 2.8 2.2 5 5 5s5-2.2 5-5c0-2.65-1.97-4.77-4.56-4.97zM7.82 15C7.4 16.15 6.28 17 5 17c-1.63 0-3-1.37-3-3s1.37-3 3-3c1.28 0 2.4.85 2.82 2H5v2h2.82zM19 17c-1.66 0-3-1.34-3-3s1.34-3 3-3 3 1.34 3 3-1.34 3-3 3z\"}}]})(props);\n};\nexport function MdNoteAdd (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M14 2H6c-1.1 0-1.99.9-1.99 2L4 20c0 1.1.89 2 1.99 2H18c1.1 0 2-.9 2-2V8l-6-6zm2 14h-3v3h-2v-3H8v-2h3v-3h2v3h3v2zm-3-7V3.5L18.5 9H13z\"}}]})(props);\n};\nexport function MdOfflinePin (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 2C6.5 2 2 6.5 2 12s4.5 10 10 10 10-4.5 10-10S17.5 2 12 2zm5 16H7v-2h10v2zm-6.7-4L7 10.7l1.4-1.4 1.9 1.9 5.3-5.3L17 7.3 10.3 14z\"}}]})(props);\n};\nexport function MdOpacity (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M17.66 8L12 2.35 6.34 8C4.78 9.56 4 11.64 4 13.64s.78 4.11 2.34 5.67 3.61 2.35 5.66 2.35 4.1-.79 5.66-2.35S20 15.64 20 13.64 19.22 9.56 17.66 8zM6 14c.01-2 .62-3.27 1.76-4.4L12 5.27l4.24 4.38C17.38 10.77 17.99 12 18 14H6z\"}}]})(props);\n};\nexport function MdOpenInBrowser (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M19 4H5c-1.11 0-2 .9-2 2v12c0 1.1.89 2 2 2h4v-2H5V8h14v10h-4v2h4c1.1 0 2-.9 2-2V6c0-1.1-.89-2-2-2zm-7 6l-4 4h3v6h2v-6h3l-4-4z\"}}]})(props);\n};\nexport function MdOpenInNew (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M19 19H5V5h7V3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2v-7h-2v7zM14 3v2h3.59l-9.83 9.83 1.41 1.41L19 6.41V10h2V3h-7z\"}}]})(props);\n};\nexport function MdOpenWith (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M10 9h4V6h3l-5-5-5 5h3v3zm-1 1H6V7l-5 5 5 5v-3h3v-4zm14 2l-5-5v3h-3v4h3v3l5-5zm-9 3h-4v3H7l5 5 5-5h-3v-3z\"}}]})(props);\n};\nexport function MdPageview (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M11.5 9C10.12 9 9 10.12 9 11.5s1.12 2.5 2.5 2.5 2.5-1.12 2.5-2.5S12.88 9 11.5 9zM20 4H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm-3.21 14.21l-2.91-2.91c-.69.44-1.51.7-2.39.7C9.01 16 7 13.99 7 11.5S9.01 7 11.5 7 16 9.01 16 11.5c0 .88-.26 1.69-.7 2.39l2.91 2.9-1.42 1.42z\"}}]})(props);\n};\nexport function MdPanTool (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M23 5.5V20c0 2.2-1.8 4-4 4h-7.3c-1.08 0-2.1-.43-2.85-1.19L1 14.83s1.26-1.23 1.3-1.25c.22-.19.49-.29.79-.29.22 0 .42.06.6.16.04.01 4.31 2.46 4.31 2.46V4c0-.83.67-1.5 1.5-1.5S11 3.17 11 4v7h1V1.5c0-.83.67-1.5 1.5-1.5S15 .67 15 1.5V11h1V2.5c0-.83.67-1.5 1.5-1.5s1.5.67 1.5 1.5V11h1V5.5c0-.83.67-1.5 1.5-1.5s1.5.67 1.5 1.5z\"}}]})(props);\n};\nexport function MdPayment (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M20 4H4c-1.11 0-1.99.89-1.99 2L2 18c0 1.11.89 2 2 2h16c1.11 0 2-.89 2-2V6c0-1.11-.89-2-2-2zm0 14H4v-6h16v6zm0-10H4V6h16v2z\"}}]})(props);\n};\nexport function MdPermCameraMic (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M20 5h-3.17L15 3H9L7.17 5H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h7v-2.09c-2.83-.48-5-2.94-5-5.91h2c0 2.21 1.79 4 4 4s4-1.79 4-4h2c0 2.97-2.17 5.43-5 5.91V21h7c1.1 0 2-.9 2-2V7c0-1.1-.9-2-2-2zm-6 8c0 1.1-.9 2-2 2s-2-.9-2-2V9c0-1.1.9-2 2-2s2 .9 2 2v4z\"}}]})(props);\n};\nexport function MdPermContactCalendar (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M19 3h-1V1h-2v2H8V1H6v2H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-7 3c1.66 0 3 1.34 3 3s-1.34 3-3 3-3-1.34-3-3 1.34-3 3-3zm6 12H6v-1c0-2 4-3.1 6-3.1s6 1.1 6 3.1v1z\"}}]})(props);\n};\nexport function MdPermDataSetting (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M18.99 11.5c.34 0 .67.03 1 .07L20 0 0 20h11.56c-.04-.33-.07-.66-.07-1 0-4.14 3.36-7.5 7.5-7.5zm3.71 7.99c.02-.16.04-.32.04-.49 0-.17-.01-.33-.04-.49l1.06-.83c.09-.08.12-.21.06-.32l-1-1.73c-.06-.11-.19-.15-.31-.11l-1.24.5c-.26-.2-.54-.37-.85-.49l-.19-1.32c-.01-.12-.12-.21-.24-.21h-2c-.12 0-.23.09-.25.21l-.19 1.32c-.3.13-.59.29-.85.49l-1.24-.5c-.11-.04-.24 0-.31.11l-1 1.73c-.06.11-.04.24.06.32l1.06.83c-.02.16-.03.32-.03.49 0 .17.01.33.03.49l-1.06.83c-.09.08-.12.21-.06.32l1 1.73c.06.11.19.15.31.11l1.24-.5c.26.2.54.37.85.49l.19 1.32c.02.12.12.21.25.21h2c.12 0 .23-.09.25-.21l.19-1.32c.3-.13.59-.29.84-.49l1.25.5c.11.04.24 0 .31-.11l1-1.73c.06-.11.03-.24-.06-.32l-1.07-.83zm-3.71 1.01c-.83 0-1.5-.67-1.5-1.5s.67-1.5 1.5-1.5 1.5.67 1.5 1.5-.67 1.5-1.5 1.5z\"}}]})(props);\n};\nexport function MdPermDeviceInformation (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M13 7h-2v2h2V7zm0 4h-2v6h2v-6zm4-9.99L7 1c-1.1 0-2 .9-2 2v18c0 1.1.9 2 2 2h10c1.1 0 2-.9 2-2V3c0-1.1-.9-1.99-2-1.99zM17 19H7V5h10v14z\"}}]})(props);\n};\nexport function MdPermIdentity (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 5.9c1.16 0 2.1.94 2.1 2.1s-.94 2.1-2.1 2.1S9.9 9.16 9.9 8s.94-2.1 2.1-2.1m0 9c2.97 0 6.1 1.46 6.1 2.1v1.1H5.9V17c0-.64 3.13-2.1 6.1-2.1M12 4C9.79 4 8 5.79 8 8s1.79 4 4 4 4-1.79 4-4-1.79-4-4-4zm0 9c-2.67 0-8 1.34-8 4v3h16v-3c0-2.66-5.33-4-8-4z\"}}]})(props);\n};\nexport function MdPermMedia (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M2 6H0v5h.01L0 20c0 1.1.9 2 2 2h18v-2H2V6zm20-2h-8l-2-2H6c-1.1 0-1.99.9-1.99 2L4 16c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zM7 15l4.5-6 3.5 4.51 2.5-3.01L21 15H7z\"}}]})(props);\n};\nexport function MdPermPhoneMsg (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M20 15.5c-1.25 0-2.45-.2-3.57-.57-.35-.11-.74-.03-1.02.24l-2.2 2.2c-2.83-1.44-5.15-3.75-6.59-6.58l2.2-2.21c.28-.27.36-.66.25-1.01C8.7 6.45 8.5 5.25 8.5 4c0-.55-.45-1-1-1H4c-.55 0-1 .45-1 1 0 9.39 7.61 17 17 17 .55 0 1-.45 1-1v-3.5c0-.55-.45-1-1-1zM12 3v10l3-3h6V3h-9z\"}}]})(props);\n};\nexport function MdPermScanWifi (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 3C6.95 3 3.15 4.85 0 7.23L12 22 24 7.25C20.85 4.87 17.05 3 12 3zm1 13h-2v-6h2v6zm-2-8V6h2v2h-2z\"}}]})(props);\n};\nexport function MdPets (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"circle\",\"attr\":{\"cx\":\"4.5\",\"cy\":\"9.5\",\"r\":\"2.5\"}},{\"tag\":\"circle\",\"attr\":{\"cx\":\"9\",\"cy\":\"5.5\",\"r\":\"2.5\"}},{\"tag\":\"circle\",\"attr\":{\"cx\":\"15\",\"cy\":\"5.5\",\"r\":\"2.5\"}},{\"tag\":\"circle\",\"attr\":{\"cx\":\"19.5\",\"cy\":\"9.5\",\"r\":\"2.5\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M17.34 14.86c-.87-1.02-1.6-1.89-2.48-2.91-.46-.54-1.05-1.08-1.75-1.32-.11-.04-.22-.07-.33-.09-.25-.04-.52-.04-.78-.04s-.53 0-.79.05c-.11.02-.22.05-.33.09-.7.24-1.28.78-1.75 1.32-.87 1.02-1.6 1.89-2.48 2.91-1.31 1.31-2.92 2.76-2.62 4.79.29 1.02 1.02 2.03 2.33 2.32.73.15 3.06-.44 5.54-.44h.18c2.48 0 4.81.58 5.54.44 1.31-.29 2.04-1.31 2.33-2.32.31-2.04-1.3-3.49-2.61-4.8z\"}}]})(props);\n};\nexport function MdPictureInPicture (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M19 7h-8v6h8V7zm2-4H3c-1.1 0-2 .9-2 2v14c0 1.1.9 1.98 2 1.98h18c1.1 0 2-.88 2-1.98V5c0-1.1-.9-2-2-2zm0 16.01H3V4.98h18v14.03z\"}}]})(props);\n};\nexport function MdPictureInPictureAlt (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M19 11h-8v6h8v-6zm4 8V4.98C23 3.88 22.1 3 21 3H3c-1.1 0-2 .88-2 1.98V19c0 1.1.9 2 2 2h18c1.1 0 2-.9 2-2zm-2 .02H3V4.97h18v14.05z\"}}]})(props);\n};\nexport function MdPlayForWork (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M11 5v5.59H7.5l4.5 4.5 4.5-4.5H13V5h-2zm-5 9c0 3.31 2.69 6 6 6s6-2.69 6-6h-2c0 2.21-1.79 4-4 4s-4-1.79-4-4H6z\"}}]})(props);\n};\nexport function MdPolymer (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M19 4h-4L7.11 16.63 4.5 12 9 4H5L.5 12 5 20h4l7.89-12.63L19.5 12 15 20h4l4.5-8z\"}}]})(props);\n};\nexport function MdPowerSettingsNew (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M13 3h-2v10h2V3zm4.83 2.17l-1.42 1.42C17.99 7.86 19 9.81 19 12c0 3.87-3.13 7-7 7s-7-3.13-7-7c0-2.19 1.01-4.14 2.58-5.42L6.17 5.17C4.23 6.82 3 9.26 3 12c0 4.97 4.03 9 9 9s9-4.03 9-9c0-2.74-1.23-5.18-3.17-6.83z\"}}]})(props);\n};\nexport function MdPregnantWoman (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M9 4c0-1.11.89-2 2-2s2 .89 2 2-.89 2-2 2-2-.89-2-2zm7 9c-.01-1.34-.83-2.51-2-3 0-1.66-1.34-3-3-3s-3 1.34-3 3v7h2v5h3v-5h3v-4z\"}}]})(props);\n};\nexport function MdPrint (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M19 8H5c-1.66 0-3 1.34-3 3v6h4v4h12v-4h4v-6c0-1.66-1.34-3-3-3zm-3 11H8v-5h8v5zm3-7c-.55 0-1-.45-1-1s.45-1 1-1 1 .45 1 1-.45 1-1 1zm-1-9H6v4h12V3z\"}}]})(props);\n};\nexport function MdQueryBuilder (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M11.99 2C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8zm.5-13H11v6l5.25 3.15.75-1.23-4.5-2.67z\"}}]})(props);\n};\nexport function MdQuestionAnswer (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M21 6h-2v9H6v2c0 .55.45 1 1 1h11l4 4V7c0-.55-.45-1-1-1zm-4 6V3c0-.55-.45-1-1-1H3c-.55 0-1 .45-1 1v14l4-4h10c.55 0 1-.45 1-1z\"}}]})(props);\n};\nexport function MdReceipt (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M18 17H6v-2h12v2zm0-4H6v-2h12v2zm0-4H6V7h12v2zM3 22l1.5-1.5L6 22l1.5-1.5L9 22l1.5-1.5L12 22l1.5-1.5L15 22l1.5-1.5L18 22l1.5-1.5L21 22V2l-1.5 1.5L18 2l-1.5 1.5L15 2l-1.5 1.5L12 2l-1.5 1.5L9 2 7.5 3.5 6 2 4.5 3.5 3 2v20z\"}}]})(props);\n};\nexport function MdRecordVoiceOver (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"circle\",\"attr\":{\"cx\":\"9\",\"cy\":\"9\",\"r\":\"4\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M9 15c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4zm7.76-9.64l-1.68 1.69c.84 1.18.84 2.71 0 3.89l1.68 1.69c2.02-2.02 2.02-5.07 0-7.27zM20.07 2l-1.63 1.63c2.77 3.02 2.77 7.56 0 10.74L20.07 16c3.9-3.89 3.91-9.95 0-14z\"}}]})(props);\n};\nexport function MdRedeem (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M20 6h-2.18c.11-.31.18-.65.18-1 0-1.66-1.34-3-3-3-1.05 0-1.96.54-2.5 1.35l-.5.67-.5-.68C10.96 2.54 10.05 2 9 2 7.34 2 6 3.34 6 5c0 .35.07.69.18 1H4c-1.11 0-1.99.89-1.99 2L2 19c0 1.11.89 2 2 2h16c1.11 0 2-.89 2-2V8c0-1.11-.89-2-2-2zm-5-2c.55 0 1 .45 1 1s-.45 1-1 1-1-.45-1-1 .45-1 1-1zM9 4c.55 0 1 .45 1 1s-.45 1-1 1-1-.45-1-1 .45-1 1-1zm11 15H4v-2h16v2zm0-5H4V8h5.08L7 10.83 8.62 12 11 8.76l1-1.36 1 1.36L15.38 12 17 10.83 14.92 8H20v6z\"}}]})(props);\n};\nexport function MdRemoveShoppingCart (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M22.73 22.73L2.77 2.77 2 2l-.73-.73L0 2.54l4.39 4.39 2.21 4.66-1.35 2.45c-.16.28-.25.61-.25.96 0 1.1.9 2 2 2h7.46l1.38 1.38c-.5.36-.83.95-.83 1.62 0 1.1.89 2 1.99 2 .67 0 1.26-.33 1.62-.84L21.46 24l1.27-1.27zM7.42 15c-.14 0-.25-.11-.25-.25l.03-.12.9-1.63h2.36l2 2H7.42zm8.13-2c.75 0 1.41-.41 1.75-1.03l3.58-6.49c.08-.14.12-.31.12-.48 0-.55-.45-1-1-1H6.54l9.01 9zM7 18c-1.1 0-1.99.9-1.99 2S5.9 22 7 22s2-.9 2-2-.9-2-2-2z\"}}]})(props);\n};\nexport function MdReorder (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M3 15h18v-2H3v2zm0 4h18v-2H3v2zm0-8h18V9H3v2zm0-6v2h18V5H3z\"}}]})(props);\n};\nexport function MdReportProblem (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M1 21h22L12 2 1 21zm12-3h-2v-2h2v2zm0-4h-2v-4h2v4z\"}}]})(props);\n};\nexport function MdRestore (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M13 3c-4.97 0-9 4.03-9 9H1l3.89 3.89.07.14L9 12H6c0-3.87 3.13-7 7-7s7 3.13 7 7-3.13 7-7 7c-1.93 0-3.68-.79-4.94-2.06l-1.42 1.42C8.27 19.99 10.51 21 13 21c4.97 0 9-4.03 9-9s-4.03-9-9-9zm-1 5v5l4.28 2.54.72-1.21-3.5-2.08V8H12z\"}}]})(props);\n};\nexport function MdRestorePage (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M14 2H6c-1.1 0-1.99.9-1.99 2L4 20c0 1.1.89 2 1.99 2H18c1.1 0 2-.9 2-2V8l-6-6zm-2 16c-2.05 0-3.81-1.24-4.58-3h1.71c.63.9 1.68 1.5 2.87 1.5 1.93 0 3.5-1.57 3.5-3.5S13.93 9.5 12 9.5c-1.35 0-2.52.78-3.1 1.9l1.6 1.6h-4V9l1.3 1.3C8.69 8.92 10.23 8 12 8c2.76 0 5 2.24 5 5s-2.24 5-5 5z\"}}]})(props);\n};\nexport function MdRoom (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 2C8.13 2 5 5.13 5 9c0 5.25 7 13 7 13s7-7.75 7-13c0-3.87-3.13-7-7-7zm0 9.5c-1.38 0-2.5-1.12-2.5-2.5s1.12-2.5 2.5-2.5 2.5 1.12 2.5 2.5-1.12 2.5-2.5 2.5z\"}}]})(props);\n};\nexport function MdRoundedCorner (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M19 19h2v2h-2v-2zm0-2h2v-2h-2v2zM3 13h2v-2H3v2zm0 4h2v-2H3v2zm0-8h2V7H3v2zm0-4h2V3H3v2zm4 0h2V3H7v2zm8 16h2v-2h-2v2zm-4 0h2v-2h-2v2zm4 0h2v-2h-2v2zm-8 0h2v-2H7v2zm-4 0h2v-2H3v2zM21 8c0-2.76-2.24-5-5-5h-5v2h5c1.65 0 3 1.35 3 3v5h2V8z\"}}]})(props);\n};\nexport function MdRowing (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M8.5 14.5L4 19l1.5 1.5L9 17h2l-2.5-2.5zM15 1c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm6 20.01L18 24l-2.99-3.01V19.5l-7.1-7.09c-.31.05-.61.07-.91.07v-2.16c1.66.03 3.61-.87 4.67-2.04l1.4-1.55c.19-.21.43-.38.69-.5.29-.14.62-.23.96-.23h.03C15.99 6.01 17 7.02 17 8.26v5.75c0 .84-.35 1.61-.92 2.16l-3.58-3.58v-2.27c-.63.52-1.43 1.02-2.29 1.39L16.5 18H18l3 3.01z\"}}]})(props);\n};\nexport function MdSchedule (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M11.99 2C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8zm.5-13H11v6l5.25 3.15.75-1.23-4.5-2.67z\"}}]})(props);\n};\nexport function MdSearch (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z\"}}]})(props);\n};\nexport function MdSettings (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M19.43 12.98c.04-.32.07-.64.07-.98s-.03-.66-.07-.98l2.11-1.65c.19-.15.24-.42.12-.64l-2-3.46c-.12-.22-.39-.3-.61-.22l-2.49 1c-.52-.4-1.08-.73-1.69-.98l-.38-2.65C14.46 2.18 14.25 2 14 2h-4c-.25 0-.46.18-.49.42l-.38 2.65c-.61.25-1.17.59-1.69.98l-2.49-1c-.23-.09-.49 0-.61.22l-2 3.46c-.13.22-.07.49.12.64l2.11 1.65c-.04.32-.07.65-.07.98s.03.66.07.98l-2.11 1.65c-.19.15-.24.42-.12.64l2 3.46c.12.22.39.3.61.22l2.49-1c.52.4 1.08.73 1.69.98l.38 2.65c.03.24.24.42.49.42h4c.25 0 .46-.18.49-.42l.38-2.65c.61-.25 1.17-.59 1.69-.98l2.49 1c.23.09.49 0 .61-.22l2-3.46c.12-.22.07-.49-.12-.64l-2.11-1.65zM12 15.5c-1.93 0-3.5-1.57-3.5-3.5s1.57-3.5 3.5-3.5 3.5 1.57 3.5 3.5-1.57 3.5-3.5 3.5z\"}}]})(props);\n};\nexport function MdSettingsApplications (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 10c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm7-7H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2zm-1.75 9c0 .23-.02.46-.05.68l1.48 1.16c.13.11.17.3.08.45l-1.4 2.42c-.09.15-.27.21-.43.15l-1.74-.7c-.36.28-.76.51-1.18.69l-.26 1.85c-.03.17-.18.3-.35.3h-2.8c-.17 0-.32-.13-.35-.29l-.26-1.85c-.43-.18-.82-.41-1.18-.69l-1.74.7c-.16.06-.34 0-.43-.15l-1.4-2.42c-.09-.15-.05-.34.08-.45l1.48-1.16c-.03-.23-.05-.46-.05-.69 0-.23.02-.46.05-.68l-1.48-1.16c-.13-.11-.17-.3-.08-.45l1.4-2.42c.09-.15.27-.21.43-.15l1.74.7c.36-.28.76-.51 1.18-.69l.26-1.85c.03-.17.18-.3.35-.3h2.8c.17 0 .32.13.35.29l.26 1.85c.43.18.82.41 1.18.69l1.74-.7c.16-.06.34 0 .43.15l1.4 2.42c.09.15.05.34-.08.45l-1.48 1.16c.03.23.05.46.05.69z\"}}]})(props);\n};\nexport function MdSettingsBackupRestore (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M14 12c0-1.1-.9-2-2-2s-2 .9-2 2 .9 2 2 2 2-.9 2-2zm-2-9c-4.97 0-9 4.03-9 9H0l4 4 4-4H5c0-3.87 3.13-7 7-7s7 3.13 7 7-3.13 7-7 7c-1.51 0-2.91-.49-4.06-1.3l-1.42 1.44C8.04 20.3 9.94 21 12 21c4.97 0 9-4.03 9-9s-4.03-9-9-9z\"}}]})(props);\n};\nexport function MdSettingsBluetooth (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M11 24h2v-2h-2v2zm-4 0h2v-2H7v2zm8 0h2v-2h-2v2zm2.71-18.29L12 0h-1v7.59L6.41 3 5 4.41 10.59 10 5 15.59 6.41 17 11 12.41V20h1l5.71-5.71-4.3-4.29 4.3-4.29zM13 3.83l1.88 1.88L13 7.59V3.83zm1.88 10.46L13 16.17v-3.76l1.88 1.88z\"}}]})(props);\n};\nexport function MdSettingsBrightness (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M21 3H3c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h18c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16.01H3V4.99h18v14.02zM8 16h2.5l1.5 1.5 1.5-1.5H16v-2.5l1.5-1.5-1.5-1.5V8h-2.5L12 6.5 10.5 8H8v2.5L6.5 12 8 13.5V16zm4-7c1.66 0 3 1.34 3 3s-1.34 3-3 3V9z\"}}]})(props);\n};\nexport function MdSettingsCell (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M7 24h2v-2H7v2zm4 0h2v-2h-2v2zm4 0h2v-2h-2v2zM16 .01L8 0C6.9 0 6 .9 6 2v16c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V2c0-1.1-.9-1.99-2-1.99zM16 16H8V4h8v12z\"}}]})(props);\n};\nexport function MdSettingsEthernet (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M7.77 6.76L6.23 5.48.82 12l5.41 6.52 1.54-1.28L3.42 12l4.35-5.24zM7 13h2v-2H7v2zm10-2h-2v2h2v-2zm-6 2h2v-2h-2v2zm6.77-7.52l-1.54 1.28L20.58 12l-4.35 5.24 1.54 1.28L23.18 12l-5.41-6.52z\"}}]})(props);\n};\nexport function MdSettingsInputAntenna (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 5c-3.87 0-7 3.13-7 7h2c0-2.76 2.24-5 5-5s5 2.24 5 5h2c0-3.87-3.13-7-7-7zm1 9.29c.88-.39 1.5-1.26 1.5-2.29 0-1.38-1.12-2.5-2.5-2.5S9.5 10.62 9.5 12c0 1.02.62 1.9 1.5 2.29v3.3L7.59 21 9 22.41l3-3 3 3L16.41 21 13 17.59v-3.3zM12 1C5.93 1 1 5.93 1 12h2c0-4.97 4.03-9 9-9s9 4.03 9 9h2c0-6.07-4.93-11-11-11z\"}}]})(props);\n};\nexport function MdSettingsInputComponent (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M5 2c0-.55-.45-1-1-1s-1 .45-1 1v4H1v6h6V6H5V2zm4 14c0 1.3.84 2.4 2 2.82V23h2v-4.18c1.16-.41 2-1.51 2-2.82v-2H9v2zm-8 0c0 1.3.84 2.4 2 2.82V23h2v-4.18C6.16 18.4 7 17.3 7 16v-2H1v2zM21 6V2c0-.55-.45-1-1-1s-1 .45-1 1v4h-2v6h6V6h-2zm-8-4c0-.55-.45-1-1-1s-1 .45-1 1v4H9v6h6V6h-2V2zm4 14c0 1.3.84 2.4 2 2.82V23h2v-4.18c1.16-.41 2-1.51 2-2.82v-2h-6v2z\"}}]})(props);\n};\nexport function MdSettingsInputComposite (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M5 2c0-.55-.45-1-1-1s-1 .45-1 1v4H1v6h6V6H5V2zm4 14c0 1.3.84 2.4 2 2.82V23h2v-4.18c1.16-.41 2-1.51 2-2.82v-2H9v2zm-8 0c0 1.3.84 2.4 2 2.82V23h2v-4.18C6.16 18.4 7 17.3 7 16v-2H1v2zM21 6V2c0-.55-.45-1-1-1s-1 .45-1 1v4h-2v6h6V6h-2zm-8-4c0-.55-.45-1-1-1s-1 .45-1 1v4H9v6h6V6h-2V2zm4 14c0 1.3.84 2.4 2 2.82V23h2v-4.18c1.16-.41 2-1.51 2-2.82v-2h-6v2z\"}}]})(props);\n};\nexport function MdSettingsInputHdmi (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M18 7V4c0-1.1-.9-2-2-2H8c-1.1 0-2 .9-2 2v3H5v6l3 6v3h8v-3l3-6V7h-1zM8 4h8v3h-2V5h-1v2h-2V5h-1v2H8V4z\"}}]})(props);\n};\nexport function MdSettingsInputSvideo (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M8 11.5c0-.83-.67-1.5-1.5-1.5S5 10.67 5 11.5 5.67 13 6.5 13 8 12.33 8 11.5zm7-5c0-.83-.67-1.5-1.5-1.5h-3C9.67 5 9 5.67 9 6.5S9.67 8 10.5 8h3c.83 0 1.5-.67 1.5-1.5zM8.5 15c-.83 0-1.5.67-1.5 1.5S7.67 18 8.5 18s1.5-.67 1.5-1.5S9.33 15 8.5 15zM12 1C5.93 1 1 5.93 1 12s4.93 11 11 11 11-4.93 11-11S18.07 1 12 1zm0 20c-4.96 0-9-4.04-9-9s4.04-9 9-9 9 4.04 9 9-4.04 9-9 9zm5.5-11c-.83 0-1.5.67-1.5 1.5s.67 1.5 1.5 1.5 1.5-.67 1.5-1.5-.67-1.5-1.5-1.5zm-2 5c-.83 0-1.5.67-1.5 1.5s.67 1.5 1.5 1.5 1.5-.67 1.5-1.5-.67-1.5-1.5-1.5z\"}}]})(props);\n};\nexport function MdSettingsOverscan (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12.01 5.5L10 8h4l-1.99-2.5zM18 10v4l2.5-1.99L18 10zM6 10l-2.5 2.01L6 14v-4zm8 6h-4l2.01 2.5L14 16zm7-13H3c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h18c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16.01H3V4.99h18v14.02z\"}}]})(props);\n};\nexport function MdSettingsPhone (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M13 9h-2v2h2V9zm4 0h-2v2h2V9zm3 6.5c-1.25 0-2.45-.2-3.57-.57-.35-.11-.74-.03-1.02.24l-2.2 2.2c-2.83-1.44-5.15-3.75-6.59-6.58l2.2-2.21c.28-.27.36-.66.25-1.01C8.7 6.45 8.5 5.25 8.5 4c0-.55-.45-1-1-1H4c-.55 0-1 .45-1 1 0 9.39 7.61 17 17 17 .55 0 1-.45 1-1v-3.5c0-.55-.45-1-1-1zM19 9v2h2V9h-2z\"}}]})(props);\n};\nexport function MdSettingsPower (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M7 24h2v-2H7v2zm4 0h2v-2h-2v2zm2-22h-2v10h2V2zm3.56 2.44l-1.45 1.45C16.84 6.94 18 8.83 18 11c0 3.31-2.69 6-6 6s-6-2.69-6-6c0-2.17 1.16-4.06 2.88-5.12L7.44 4.44C5.36 5.88 4 8.28 4 11c0 4.42 3.58 8 8 8s8-3.58 8-8c0-2.72-1.36-5.12-3.44-6.56zM15 24h2v-2h-2v2z\"}}]})(props);\n};\nexport function MdSettingsRemote (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M15 9H9c-.55 0-1 .45-1 1v12c0 .55.45 1 1 1h6c.55 0 1-.45 1-1V10c0-.55-.45-1-1-1zm-3 6c-1.1 0-2-.9-2-2s.9-2 2-2 2 .9 2 2-.9 2-2 2zM7.05 6.05l1.41 1.41C9.37 6.56 10.62 6 12 6s2.63.56 3.54 1.46l1.41-1.41C15.68 4.78 13.93 4 12 4s-3.68.78-4.95 2.05zM12 0C8.96 0 6.21 1.23 4.22 3.22l1.41 1.41C7.26 3.01 9.51 2 12 2s4.74 1.01 6.36 2.64l1.41-1.41C17.79 1.23 15.04 0 12 0z\"}}]})(props);\n};\nexport function MdSettingsVoice (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M7 24h2v-2H7v2zm5-11c1.66 0 2.99-1.34 2.99-3L15 4c0-1.66-1.34-3-3-3S9 2.34 9 4v6c0 1.66 1.34 3 3 3zm-1 11h2v-2h-2v2zm4 0h2v-2h-2v2zm4-14h-1.7c0 3-2.54 5.1-5.3 5.1S6.7 13 6.7 10H5c0 3.41 2.72 6.23 6 6.72V20h2v-3.28c3.28-.49 6-3.31 6-6.72z\"}}]})(props);\n};\nexport function MdShop (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M16 6V4c0-1.11-.89-2-2-2h-4c-1.11 0-2 .89-2 2v2H2v13c0 1.11.89 2 2 2h16c1.11 0 2-.89 2-2V6h-6zm-6-2h4v2h-4V4zM9 18V9l7.5 4L9 18z\"}}]})(props);\n};\nexport function MdShopTwo (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M3 9H1v11c0 1.11.89 2 2 2h14c1.11 0 2-.89 2-2H3V9zm15-4V3c0-1.11-.89-2-2-2h-4c-1.11 0-2 .89-2 2v2H5v11c0 1.11.89 2 2 2h14c1.11 0 2-.89 2-2V5h-5zm-6-2h4v2h-4V3zm0 12V8l5.5 3-5.5 4z\"}}]})(props);\n};\nexport function MdShoppingBasket (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M17.21 9l-4.38-6.56c-.19-.28-.51-.42-.83-.42-.32 0-.64.14-.83.43L6.79 9H2c-.55 0-1 .45-1 1 0 .09.01.18.04.27l2.54 9.27c.23.84 1 1.46 1.92 1.46h13c.92 0 1.69-.62 1.93-1.46l2.54-9.27L23 10c0-.55-.45-1-1-1h-4.79zM9 9l3-4.4L15 9H9zm3 8c-1.1 0-2-.9-2-2s.9-2 2-2 2 .9 2 2-.9 2-2 2z\"}}]})(props);\n};\nexport function MdShoppingCart (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M7 18c-1.1 0-1.99.9-1.99 2S5.9 22 7 22s2-.9 2-2-.9-2-2-2zM1 2v2h2l3.6 7.59-1.35 2.45c-.16.28-.25.61-.25.96 0 1.1.9 2 2 2h12v-2H7.42c-.14 0-.25-.11-.25-.25l.03-.12.9-1.63h7.45c.75 0 1.41-.41 1.75-1.03l3.58-6.49c.08-.14.12-.31.12-.48 0-.55-.45-1-1-1H5.21l-.94-2H1zm16 16c-1.1 0-1.99.9-1.99 2s.89 2 1.99 2 2-.9 2-2-.9-2-2-2z\"}}]})(props);\n};\nexport function MdSpeakerNotes (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M20 2H4c-1.1 0-1.99.9-1.99 2L2 22l4-4h14c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zM8 14H6v-2h2v2zm0-3H6V9h2v2zm0-3H6V6h2v2zm7 6h-5v-2h5v2zm3-3h-8V9h8v2zm0-3h-8V6h8v2z\"}}]})(props);\n};\nexport function MdSpeakerNotesOff (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M10.54 11l-.54-.54L7.54 8 6 6.46 2.38 2.84 1.27 1.73 0 3l2.01 2.01L2 22l4-4h9l5.73 5.73L22 22.46 17.54 18l-7-7zM8 14H6v-2h2v2zm-2-3V9l2 2H6zm14-9H4.08L10 7.92V6h8v2h-7.92l1 1H18v2h-4.92l6.99 6.99C21.14 17.95 22 17.08 22 16V4c0-1.1-.9-2-2-2z\"}}]})(props);\n};\nexport function MdSpellcheck (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12.45 16h2.09L9.43 3H7.57L2.46 16h2.09l1.12-3h5.64l1.14 3zm-6.02-5L8.5 5.48 10.57 11H6.43zm15.16.59l-8.09 8.09L9.83 16l-1.41 1.41 5.09 5.09L23 13l-1.41-1.41z\"}}]})(props);\n};\nexport function MdStars (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M11.99 2C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zm4.24 16L12 15.45 7.77 18l1.12-4.81-3.73-3.23 4.92-.42L12 5l1.92 4.53 4.92.42-3.73 3.23L16.23 18z\"}}]})(props);\n};\nexport function MdStore (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M20 4H4v2h16V4zm1 10v-2l-1-5H4l-1 5v2h1v6h10v-6h4v6h2v-6h1zm-9 4H6v-4h6v4z\"}}]})(props);\n};\nexport function MdSubject (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M14 17H4v2h10v-2zm6-8H4v2h16V9zM4 15h16v-2H4v2zM4 5v2h16V5H4z\"}}]})(props);\n};\nexport function MdSupervisorAccount (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M16.5 12c1.38 0 2.49-1.12 2.49-2.5S17.88 7 16.5 7C15.12 7 14 8.12 14 9.5s1.12 2.5 2.5 2.5zM9 11c1.66 0 2.99-1.34 2.99-3S10.66 5 9 5C7.34 5 6 6.34 6 8s1.34 3 3 3zm7.5 3c-1.83 0-5.5.92-5.5 2.75V19h11v-2.25c0-1.83-3.67-2.75-5.5-2.75zM9 13c-2.33 0-7 1.17-7 3.5V19h7v-2.25c0-.85.33-2.34 2.37-3.47C10.5 13.1 9.66 13 9 13z\"}}]})(props);\n};\nexport function MdSwapHoriz (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M6.99 11L3 15l3.99 4v-3H14v-2H6.99v-3zM21 9l-3.99-4v3H10v2h7.01v3L21 9z\"}}]})(props);\n};\nexport function MdSwapVert (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M16 17.01V10h-2v7.01h-3L15 21l4-3.99h-3zM9 3L5 6.99h3V14h2V6.99h3L9 3z\"}}]})(props);\n};\nexport function MdSwapVerticalCircle (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zM6.5 9L10 5.5 13.5 9H11v4H9V9H6.5zm11 6L14 18.5 10.5 15H13v-4h2v4h2.5z\"}}]})(props);\n};\nexport function MdSystemUpdateAlt (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 16.5l4-4h-3v-9h-2v9H8l4 4zm9-13h-6v1.99h6v14.03H3V5.49h6V3.5H3c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h18c1.1 0 2-.9 2-2v-14c0-1.1-.9-2-2-2z\"}}]})(props);\n};\nexport function MdTab (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M21 3H3c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h18c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H3V5h10v4h8v10z\"}}]})(props);\n};\nexport function MdTabUnselected (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M1 9h2V7H1v2zm0 4h2v-2H1v2zm0-8h2V3c-1.1 0-2 .9-2 2zm8 16h2v-2H9v2zm-8-4h2v-2H1v2zm2 4v-2H1c0 1.1.9 2 2 2zM21 3h-8v6h10V5c0-1.1-.9-2-2-2zm0 14h2v-2h-2v2zM9 5h2V3H9v2zM5 21h2v-2H5v2zM5 5h2V3H5v2zm16 16c1.1 0 2-.9 2-2h-2v2zm0-8h2v-2h-2v2zm-8 8h2v-2h-2v2zm4 0h2v-2h-2v2z\"}}]})(props);\n};\nexport function MdTheaters (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M18 3v2h-2V3H8v2H6V3H4v18h2v-2h2v2h8v-2h2v2h2V3h-2zM8 17H6v-2h2v2zm0-4H6v-2h2v2zm0-4H6V7h2v2zm10 8h-2v-2h2v2zm0-4h-2v-2h2v2zm0-4h-2V7h2v2z\"}}]})(props);\n};\nexport function MdThumbDown (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M15 3H6c-.83 0-1.54.5-1.84 1.22l-3.02 7.05c-.09.23-.14.47-.14.73v1.91l.01.01L1 14c0 1.1.9 2 2 2h6.31l-.95 4.57-.03.32c0 .41.17.79.44 1.06L9.83 23l6.59-6.59c.36-.36.58-.86.58-1.41V5c0-1.1-.9-2-2-2zm4 0v12h4V3h-4z\"}}]})(props);\n};\nexport function MdThumbUp (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M1 21h4V9H1v12zm22-11c0-1.1-.9-2-2-2h-6.31l.95-4.57.03-.32c0-.41-.17-.79-.44-1.06L14.17 1 7.59 7.59C7.22 7.95 7 8.45 7 9v10c0 1.1.9 2 2 2h9c.83 0 1.54-.5 1.84-1.22l3.02-7.05c.09-.23.14-.47.14-.73v-1.91l-.01-.01L23 10z\"}}]})(props);\n};\nexport function MdThumbsUpDown (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 6c0-.55-.45-1-1-1H5.82l.66-3.18.02-.23c0-.31-.13-.59-.33-.8L5.38 0 .44 4.94C.17 5.21 0 5.59 0 6v6.5c0 .83.67 1.5 1.5 1.5h6.75c.62 0 1.15-.38 1.38-.91l2.26-5.29c.07-.17.11-.36.11-.55V6zm10.5 4h-6.75c-.62 0-1.15.38-1.38.91l-2.26 5.29c-.07.17-.11.36-.11.55V18c0 .55.45 1 1 1h5.18l-.66 3.18-.02.24c0 .31.13.59.33.8l.79.78 4.94-4.94c.27-.27.44-.65.44-1.06v-6.5c0-.83-.67-1.5-1.5-1.5z\"}}]})(props);\n};\nexport function MdTimeline (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M23 8c0 1.1-.9 2-2 2-.18 0-.35-.02-.51-.07l-3.56 3.55c.05.16.07.34.07.52 0 1.1-.9 2-2 2s-2-.9-2-2c0-.18.02-.36.07-.52l-2.55-2.55c-.16.05-.34.07-.52.07s-.36-.02-.52-.07l-4.55 4.56c.05.16.07.33.07.51 0 1.1-.9 2-2 2s-2-.9-2-2 .9-2 2-2c.18 0 .35.02.51.07l4.56-4.55C8.02 9.36 8 9.18 8 9c0-1.1.9-2 2-2s2 .9 2 2c0 .18-.02.36-.07.52l2.55 2.55c.16-.05.34-.07.52-.07s.36.02.52.07l3.55-3.56C19.02 8.35 19 8.18 19 8c0-1.1.9-2 2-2s2 .9 2 2z\"}}]})(props);\n};\nexport function MdToc (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M3 9h14V7H3v2zm0 4h14v-2H3v2zm0 4h14v-2H3v2zm16 0h2v-2h-2v2zm0-10v2h2V7h-2zm0 6h2v-2h-2v2z\"}}]})(props);\n};\nexport function MdToday (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M19 3h-1V1h-2v2H8V1H6v2H5c-1.11 0-1.99.9-1.99 2L3 19c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H5V8h14v11zM7 10h5v5H7z\"}}]})(props);\n};\nexport function MdToll (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M15 4c-4.42 0-8 3.58-8 8s3.58 8 8 8 8-3.58 8-8-3.58-8-8-8zm0 14c-3.31 0-6-2.69-6-6s2.69-6 6-6 6 2.69 6 6-2.69 6-6 6zM3 12c0-2.61 1.67-4.83 4-5.65V4.26C3.55 5.15 1 8.27 1 12s2.55 6.85 6 7.74v-2.09c-2.33-.82-4-3.04-4-5.65z\"}}]})(props);\n};\nexport function MdTouchApp (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M9 11.24V7.5C9 6.12 10.12 5 11.5 5S14 6.12 14 7.5v3.74c1.21-.81 2-2.18 2-3.74C16 5.01 13.99 3 11.5 3S7 5.01 7 7.5c0 1.56.79 2.93 2 3.74zm9.84 4.63l-4.54-2.26c-.17-.07-.35-.11-.54-.11H13v-6c0-.83-.67-1.5-1.5-1.5S10 6.67 10 7.5v10.74l-3.43-.72c-.08-.01-.15-.03-.24-.03-.31 0-.59.13-.79.33l-.79.8 4.94 4.94c.27.27.65.44 1.06.44h6.79c.75 0 1.33-.55 1.44-1.28l.75-5.27c.01-.07.02-.14.02-.2 0-.62-.38-1.16-.91-1.38z\"}}]})(props);\n};\nexport function MdTrackChanges (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M19.07 4.93l-1.41 1.41C19.1 7.79 20 9.79 20 12c0 4.42-3.58 8-8 8s-8-3.58-8-8c0-4.08 3.05-7.44 7-7.93v2.02C8.16 6.57 6 9.03 6 12c0 3.31 2.69 6 6 6s6-2.69 6-6c0-1.66-.67-3.16-1.76-4.24l-1.41 1.41C15.55 9.9 16 10.9 16 12c0 2.21-1.79 4-4 4s-4-1.79-4-4c0-1.86 1.28-3.41 3-3.86v2.14c-.6.35-1 .98-1 1.72 0 1.1.9 2 2 2s2-.9 2-2c0-.74-.4-1.38-1-1.72V2h-1C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10c0-2.76-1.12-5.26-2.93-7.07z\"}}]})(props);\n};\nexport function MdTranslate (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12.87 15.07l-2.54-2.51.03-.03c1.74-1.94 2.98-4.17 3.71-6.53H17V4h-7V2H8v2H1v1.99h11.17C11.5 7.92 10.44 9.75 9 11.35 8.07 10.32 7.3 9.19 6.69 8h-2c.73 1.63 1.73 3.17 2.98 4.56l-5.09 5.02L4 19l5-5 3.11 3.11.76-2.04zM18.5 10h-2L12 22h2l1.12-3h4.75L21 22h2l-4.5-12zm-2.62 7l1.62-4.33L19.12 17h-3.24z\"}}]})(props);\n};\nexport function MdTrendingDown (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M16 18l2.29-2.29-4.88-4.88-4 4L2 7.41 3.41 6l6 6 4-4 6.3 6.29L22 12v6z\"}}]})(props);\n};\nexport function MdTrendingFlat (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M22 12l-4-4v3H3v2h15v3z\"}}]})(props);\n};\nexport function MdTrendingUp (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M16 6l2.29 2.29-4.88 4.88-4-4L2 16.59 3.41 18l6-6 4 4 6.3-6.29L22 12V6z\"}}]})(props);\n};\nexport function MdTurnedIn (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M17 3H7c-1.1 0-1.99.9-1.99 2L5 21l7-3 7 3V5c0-1.1-.9-2-2-2z\"}}]})(props);\n};\nexport function MdTurnedInNot (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M17 3H7c-1.1 0-1.99.9-1.99 2L5 21l7-3 7 3V5c0-1.1-.9-2-2-2zm0 15l-5-2.18L7 18V5h10v13z\"}}]})(props);\n};\nexport function MdUpdate (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M21 10.12h-6.78l2.74-2.82c-2.73-2.7-7.15-2.8-9.88-.1-2.73 2.71-2.73 7.08 0 9.79 2.73 2.71 7.15 2.71 9.88 0C18.32 15.65 19 14.08 19 12.1h2c0 1.98-.88 4.55-2.64 6.29-3.51 3.48-9.21 3.48-12.72 0-3.5-3.47-3.53-9.11-.02-12.58 3.51-3.47 9.14-3.47 12.65 0L21 3v7.12zM12.5 8v4.25l3.5 2.08-.72 1.21L11 13V8h1.5z\"}}]})(props);\n};\nexport function MdVerifiedUser (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 1L3 5v6c0 5.55 3.84 10.74 9 12 5.16-1.26 9-6.45 9-12V5l-9-4zm-2 16l-4-4 1.41-1.41L10 14.17l6.59-6.59L18 9l-8 8z\"}}]})(props);\n};\nexport function MdViewAgenda (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M20 13H3c-.55 0-1 .45-1 1v6c0 .55.45 1 1 1h17c.55 0 1-.45 1-1v-6c0-.55-.45-1-1-1zm0-10H3c-.55 0-1 .45-1 1v6c0 .55.45 1 1 1h17c.55 0 1-.45 1-1V4c0-.55-.45-1-1-1z\"}}]})(props);\n};\nexport function MdViewArray (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M4 18h3V5H4v13zM18 5v13h3V5h-3zM8 18h9V5H8v13z\"}}]})(props);\n};\nexport function MdViewCarousel (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M7 19h10V4H7v15zm-5-2h4V6H2v11zM18 6v11h4V6h-4z\"}}]})(props);\n};\nexport function MdViewColumn (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M10 18h5V5h-5v13zm-6 0h5V5H4v13zM16 5v13h5V5h-5z\"}}]})(props);\n};\nexport function MdViewDay (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M2 21h19v-3H2v3zM20 8H3c-.55 0-1 .45-1 1v6c0 .55.45 1 1 1h17c.55 0 1-.45 1-1V9c0-.55-.45-1-1-1zM2 3v3h19V3H2z\"}}]})(props);\n};\nexport function MdViewHeadline (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M4 15h16v-2H4v2zm0 4h16v-2H4v2zm0-8h16V9H4v2zm0-6v2h16V5H4z\"}}]})(props);\n};\nexport function MdViewList (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M4 14h4v-4H4v4zm0 5h4v-4H4v4zM4 9h4V5H4v4zm5 5h12v-4H9v4zm0 5h12v-4H9v4zM9 5v4h12V5H9z\"}}]})(props);\n};\nexport function MdViewModule (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M4 11h5V5H4v6zm0 7h5v-6H4v6zm6 0h5v-6h-5v6zm6 0h5v-6h-5v6zm-6-7h5V5h-5v6zm6-6v6h5V5h-5z\"}}]})(props);\n};\nexport function MdViewQuilt (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M10 18h5v-6h-5v6zm-6 0h5V5H4v13zm12 0h5v-6h-5v6zM10 5v6h11V5H10z\"}}]})(props);\n};\nexport function MdViewStream (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M4 18h17v-6H4v6zM4 5v6h17V5H4z\"}}]})(props);\n};\nexport function MdViewWeek (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M6 5H3c-.55 0-1 .45-1 1v12c0 .55.45 1 1 1h3c.55 0 1-.45 1-1V6c0-.55-.45-1-1-1zm14 0h-3c-.55 0-1 .45-1 1v12c0 .55.45 1 1 1h3c.55 0 1-.45 1-1V6c0-.55-.45-1-1-1zm-7 0h-3c-.55 0-1 .45-1 1v12c0 .55.45 1 1 1h3c.55 0 1-.45 1-1V6c0-.55-.45-1-1-1z\"}}]})(props);\n};\nexport function MdVisibility (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 4.5C7 4.5 2.73 7.61 1 12c1.73 4.39 6 7.5 11 7.5s9.27-3.11 11-7.5c-1.73-4.39-6-7.5-11-7.5zM12 17c-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5-2.24 5-5 5zm0-8c-1.66 0-3 1.34-3 3s1.34 3 3 3 3-1.34 3-3-1.34-3-3-3z\"}}]})(props);\n};\nexport function MdVisibilityOff (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 7c2.76 0 5 2.24 5 5 0 .65-.13 1.26-.36 1.83l2.92 2.92c1.51-1.26 2.7-2.89 3.43-4.75-1.73-4.39-6-7.5-11-7.5-1.4 0-2.74.25-3.98.7l2.16 2.16C10.74 7.13 11.35 7 12 7zM2 4.27l2.28 2.28.46.46C3.08 8.3 1.78 10.02 1 12c1.73 4.39 6 7.5 11 7.5 1.55 0 3.03-.3 4.38-.84l.42.42L19.73 22 21 20.73 3.27 3 2 4.27zM7.53 9.8l1.55 1.55c-.05.21-.08.43-.08.65 0 1.66 1.34 3 3 3 .22 0 .44-.03.65-.08l1.55 1.55c-.67.33-1.41.53-2.2.53-2.76 0-5-2.24-5-5 0-.79.2-1.53.53-2.2zm4.31-.78l3.15 3.15.02-.16c0-1.66-1.34-3-3-3l-.17.01z\"}}]})(props);\n};\nexport function MdWatchLater (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 2C6.5 2 2 6.5 2 12s4.5 10 10 10 10-4.5 10-10S17.5 2 12 2zm4.2 14.2L11 13V7h1.5v5.2l4.5 2.7-.8 1.3z\"}}]})(props);\n};\nexport function MdWork (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M20 6h-4V4c0-1.11-.89-2-2-2h-4c-1.11 0-2 .89-2 2v2H4c-1.11 0-1.99.89-1.99 2L2 19c0 1.11.89 2 2 2h16c1.11 0 2-.89 2-2V8c0-1.11-.89-2-2-2zm-6 0h-4V4h4v2z\"}}]})(props);\n};\nexport function MdYoutubeSearchedFor (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M17.01 14h-.8l-.27-.27c.98-1.14 1.57-2.61 1.57-4.23 0-3.59-2.91-6.5-6.5-6.5s-6.5 3-6.5 6.5H2l3.84 4 4.16-4H6.51C6.51 7 8.53 5 11.01 5s4.5 2.01 4.5 4.5c0 2.48-2.02 4.5-4.5 4.5-.65 0-1.26-.14-1.82-.38L7.71 15.1c.97.57 2.09.9 3.3.9 1.61 0 3.08-.59 4.22-1.57l.27.27v.79l5.01 4.99L22 19l-4.99-5z\"}}]})(props);\n};\nexport function MdZoomIn (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14zm2.5-4h-2v2H9v-2H7V9h2V7h1v2h2v1z\"}}]})(props);\n};\nexport function MdZoomOut (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14zM7 9h5v1H7z\"}}]})(props);\n};\nexport function MdAddAlert (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M10.01 21.01c0 1.1.89 1.99 1.99 1.99s1.99-.89 1.99-1.99h-3.98zm8.87-4.19V11c0-3.25-2.25-5.97-5.29-6.69v-.72C13.59 2.71 12.88 2 12 2s-1.59.71-1.59 1.59v.72C7.37 5.03 5.12 7.75 5.12 11v5.82L3 18.94V20h18v-1.06l-2.12-2.12zM16 13.01h-3v3h-2v-3H8V11h3V8h2v3h3v2.01z\"}}]})(props);\n};\nexport function MdError (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-2h2v2zm0-4h-2V7h2v6z\"}}]})(props);\n};\nexport function MdErrorOutline (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M11 15h2v2h-2zm0-8h2v6h-2zm.99-5C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z\"}}]})(props);\n};\nexport function MdWarning (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M1 21h22L12 2 1 21zm12-3h-2v-2h2v2zm0-4h-2v-4h2v4z\"}}]})(props);\n};\nexport function MdAddToQueue (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M21 3H3c-1.11 0-2 .89-2 2v12c0 1.1.89 2 2 2h5v2h8v-2h5c1.1 0 1.99-.9 1.99-2L23 5c0-1.11-.9-2-2-2zm0 14H3V5h18v12zm-5-7v2h-3v3h-2v-3H8v-2h3V7h2v3h3z\"}}]})(props);\n};\nexport function MdAirplay (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M6 22h12l-6-6zM21 3H3c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h4v-2H3V5h18v12h-4v2h4c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z\"}}]})(props);\n};\nexport function MdAlbum (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 14.5c-2.49 0-4.5-2.01-4.5-4.5S9.51 7.5 12 7.5s4.5 2.01 4.5 4.5-2.01 4.5-4.5 4.5zm0-5.5c-.55 0-1 .45-1 1s.45 1 1 1 1-.45 1-1-.45-1-1-1z\"}}]})(props);\n};\nexport function MdArtTrack (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M22 13h-8v-2h8v2zm0-6h-8v2h8V7zm-8 10h8v-2h-8v2zm-2-8v6c0 1.1-.9 2-2 2H4c-1.1 0-2-.9-2-2V9c0-1.1.9-2 2-2h6c1.1 0 2 .9 2 2zm-1.5 6l-2.25-3-1.75 2.26-1.25-1.51L3.5 15h7z\"}}]})(props);\n};\nexport function MdAvTimer (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M11 17c0 .55.45 1 1 1s1-.45 1-1-.45-1-1-1-1 .45-1 1zm0-14v4h2V5.08c3.39.49 6 3.39 6 6.92 0 3.87-3.13 7-7 7s-7-3.13-7-7c0-1.68.59-3.22 1.58-4.42L12 13l1.41-1.41-6.8-6.8v.02C4.42 6.45 3 9.05 3 12c0 4.97 4.02 9 9 9 4.97 0 9-4.03 9-9s-4.03-9-9-9h-1zm7 9c0-.55-.45-1-1-1s-1 .45-1 1 .45 1 1 1 1-.45 1-1zM6 12c0 .55.45 1 1 1s1-.45 1-1-.45-1-1-1-1 .45-1 1z\"}}]})(props);\n};\nexport function MdBrandingWatermark (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M21 3H3c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h18c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16h-9v-6h9v6z\"}}]})(props);\n};\nexport function MdCallToAction (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M21 3H3c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h18c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H3v-3h18v3z\"}}]})(props);\n};\nexport function MdClosedCaption (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M19 4H5c-1.11 0-2 .9-2 2v12c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm-8 7H9.5v-.5h-2v3h2V13H11v1c0 .55-.45 1-1 1H7c-.55 0-1-.45-1-1v-4c0-.55.45-1 1-1h3c.55 0 1 .45 1 1v1zm7 0h-1.5v-.5h-2v3h2V13H18v1c0 .55-.45 1-1 1h-3c-.55 0-1-.45-1-1v-4c0-.55.45-1 1-1h3c.55 0 1 .45 1 1v1z\"}}]})(props);\n};\nexport function MdEqualizer (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M10 20h4V4h-4v16zm-6 0h4v-8H4v8zM16 9v11h4V9h-4z\"}}]})(props);\n};\nexport function MdExplicit (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-4 6h-4v2h4v2h-4v2h4v2H9V7h6v2z\"}}]})(props);\n};\nexport function MdFastForward (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M4 18l8.5-6L4 6v12zm9-12v12l8.5-6L13 6z\"}}]})(props);\n};\nexport function MdFastRewind (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M11 18V6l-8.5 6 8.5 6zm.5-6l8.5 6V6l-8.5 6z\"}}]})(props);\n};\nexport function MdFeaturedPlayList (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M21 3H3c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h18c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-9 8H3V9h9v2zm0-4H3V5h9v2z\"}}]})(props);\n};\nexport function MdFeaturedVideo (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M21 3H3c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h18c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-9 9H3V5h9v7z\"}}]})(props);\n};\nexport function MdFiberDvr (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M17.5 10.5h2v1h-2zm-13 0h2v3h-2zM21 3H3c-1.11 0-2 .89-2 2v14c0 1.1.89 2 2 2h18c1.11 0 2-.9 2-2V5c0-1.11-.89-2-2-2zM8 13.5c0 .85-.65 1.5-1.5 1.5H3V9h3.5c.85 0 1.5.65 1.5 1.5v3zm4.62 1.5h-1.5L9.37 9h1.5l1 3.43 1-3.43h1.5l-1.75 6zM21 11.5c0 .6-.4 1.15-.9 1.4L21 15h-1.5l-.85-2H17.5v2H16V9h3.5c.85 0 1.5.65 1.5 1.5v1z\"}}]})(props);\n};\nexport function MdFiberManualRecord (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"circle\",\"attr\":{\"cx\":\"12\",\"cy\":\"12\",\"r\":\"8\"}}]})(props);\n};\nexport function MdFiberNew (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M20 4H4c-1.11 0-1.99.89-1.99 2L2 18c0 1.11.89 2 2 2h16c1.11 0 2-.89 2-2V6c0-1.11-.89-2-2-2zM8.5 15H7.3l-2.55-3.5V15H3.5V9h1.25l2.5 3.5V9H8.5v6zm5-4.74H11v1.12h2.5v1.26H11v1.11h2.5V15h-4V9h4v1.26zm7 3.74c0 .55-.45 1-1 1h-4c-.55 0-1-.45-1-1V9h1.25v4.51h1.13V9.99h1.25v3.51h1.12V9h1.25v5z\"}}]})(props);\n};\nexport function MdFiberPin (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M5.5 10.5h2v1h-2zM20 4H4c-1.11 0-1.99.89-1.99 2L2 18c0 1.11.89 2 2 2h16c1.11 0 2-.89 2-2V6c0-1.11-.89-2-2-2zM9 11.5c0 .85-.65 1.5-1.5 1.5h-2v2H4V9h3.5c.85 0 1.5.65 1.5 1.5v1zm3.5 3.5H11V9h1.5v6zm7.5 0h-1.2l-2.55-3.5V15H15V9h1.25l2.5 3.5V9H20v6z\"}}]})(props);\n};\nexport function MdFiberSmartRecord (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"g\",\"attr\":{},\"child\":[{\"tag\":\"circle\",\"attr\":{\"cx\":\"9\",\"cy\":\"12\",\"r\":\"8\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M17 4.26v2.09c2.33.82 4 3.04 4 5.65s-1.67 4.83-4 5.65v2.09c3.45-.89 6-4.01 6-7.74s-2.55-6.85-6-7.74z\"}}]}]})(props);\n};\nexport function MdForward10 (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M4 13c0 4.4 3.6 8 8 8s8-3.6 8-8h-2c0 3.3-2.7 6-6 6s-6-2.7-6-6 2.7-6 6-6v4l5-5-5-5v4c-4.4 0-8 3.6-8 8zm6.8 3H10v-3.3L9 13v-.7l1.8-.6h.1V16zm4.3-1.8c0 .3 0 .6-.1.8l-.3.6s-.3.3-.5.3-.4.1-.6.1-.4 0-.6-.1-.3-.2-.5-.3-.2-.3-.3-.6-.1-.5-.1-.8v-.7c0-.3 0-.6.1-.8l.3-.6s.3-.3.5-.3.4-.1.6-.1.4 0 .6.1.3.2.5.3.2.3.3.6.1.5.1.8v.7zm-.8-.8v-.5s-.1-.2-.1-.3-.1-.1-.2-.2-.2-.1-.3-.1-.2 0-.3.1l-.2.2s-.1.2-.1.3v2s.1.2.1.3.1.1.2.2.2.1.3.1.2 0 .3-.1l.2-.2s.1-.2.1-.3v-1.5z\"}}]})(props);\n};\nexport function MdForward30 (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M9.6 13.5h.4c.2 0 .4-.1.5-.2s.2-.2.2-.4v-.2s-.1-.1-.1-.2-.1-.1-.2-.1h-.5s-.1.1-.2.1-.1.1-.1.2v.2h-1c0-.2 0-.3.1-.5s.2-.3.3-.4.3-.2.4-.2.4-.1.5-.1c.2 0 .4 0 .6.1s.3.1.5.2.2.2.3.4.1.3.1.5v.3s-.1.2-.1.3-.1.2-.2.2-.2.1-.3.2c.2.1.4.2.5.4s.2.4.2.6c0 .2 0 .4-.1.5s-.2.3-.3.4-.3.2-.5.2-.4.1-.6.1c-.2 0-.4 0-.5-.1s-.3-.1-.5-.2-.2-.2-.3-.4-.1-.4-.1-.6h.8v.2s.1.1.1.2.1.1.2.1h.5s.1-.1.2-.1.1-.1.1-.2v-.5s-.1-.1-.1-.2-.1-.1-.2-.1h-.6v-.7zm5.7.7c0 .3 0 .6-.1.8l-.3.6s-.3.3-.5.3-.4.1-.6.1-.4 0-.6-.1-.3-.2-.5-.3-.2-.3-.3-.6-.1-.5-.1-.8v-.7c0-.3 0-.6.1-.8l.3-.6s.3-.3.5-.3.4-.1.6-.1.4 0 .6.1.3.2.5.3.2.3.3.6.1.5.1.8v.7zm-.9-.8v-.5s-.1-.2-.1-.3-.1-.1-.2-.2-.2-.1-.3-.1-.2 0-.3.1l-.2.2s-.1.2-.1.3v2s.1.2.1.3.1.1.2.2.2.1.3.1.2 0 .3-.1l.2-.2s.1-.2.1-.3v-1.5zM4 13c0 4.4 3.6 8 8 8s8-3.6 8-8h-2c0 3.3-2.7 6-6 6s-6-2.7-6-6 2.7-6 6-6v4l5-5-5-5v4c-4.4 0-8 3.6-8 8z\"}}]})(props);\n};\nexport function MdForward5 (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M4 13c0 4.4 3.6 8 8 8s8-3.6 8-8h-2c0 3.3-2.7 6-6 6s-6-2.7-6-6 2.7-6 6-6v4l5-5-5-5v4c-4.4 0-8 3.6-8 8zm6.7.9l.2-2.2h2.4v.7h-1.7l-.1.9s.1 0 .1-.1.1 0 .1-.1.1 0 .2 0h.2c.2 0 .4 0 .5.1s.3.2.4.3.2.3.3.5.1.4.1.6c0 .2 0 .4-.1.5s-.1.3-.3.5-.3.2-.5.3-.4.1-.6.1c-.2 0-.4 0-.5-.1s-.3-.1-.5-.2-.2-.2-.3-.4-.1-.3-.1-.5h.8c0 .2.1.3.2.4s.2.1.4.1c.1 0 .2 0 .3-.1l.2-.2s.1-.2.1-.3v-.6l-.1-.2-.2-.2s-.2-.1-.3-.1h-.2s-.1 0-.2.1-.1 0-.1.1-.1.1-.1.1h-.6z\"}}]})(props);\n};\nexport function MdGames (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M15 7.5V2H9v5.5l3 3 3-3zM7.5 9H2v6h5.5l3-3-3-3zM9 16.5V22h6v-5.5l-3-3-3 3zM16.5 9l-3 3 3 3H22V9h-5.5z\"}}]})(props);\n};\nexport function MdHd (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-8 12H9.5v-2h-2v2H6V9h1.5v2.5h2V9H11v6zm2-6h4c.55 0 1 .45 1 1v4c0 .55-.45 1-1 1h-4V9zm1.5 4.5h2v-3h-2v3z\"}}]})(props);\n};\nexport function MdHearing (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M17 20c-.29 0-.56-.06-.76-.15-.71-.37-1.21-.88-1.71-2.38-.51-1.56-1.47-2.29-2.39-3-.79-.61-1.61-1.24-2.32-2.53C9.29 10.98 9 9.93 9 9c0-2.8 2.2-5 5-5s5 2.2 5 5h2c0-3.93-3.07-7-7-7S7 5.07 7 9c0 1.26.38 2.65 1.07 3.9.91 1.65 1.98 2.48 2.85 3.15.81.62 1.39 1.07 1.71 2.05.6 1.82 1.37 2.84 2.73 3.55.51.23 1.07.35 1.64.35 2.21 0 4-1.79 4-4h-2c0 1.1-.9 2-2 2zM7.64 2.64L6.22 1.22C4.23 3.21 3 5.96 3 9s1.23 5.79 3.22 7.78l1.41-1.41C6.01 13.74 5 11.49 5 9s1.01-4.74 2.64-6.36zM11.5 9c0 1.38 1.12 2.5 2.5 2.5s2.5-1.12 2.5-2.5-1.12-2.5-2.5-2.5-2.5 1.12-2.5 2.5z\"}}]})(props);\n};\nexport function MdHighQuality (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M19 4H5c-1.11 0-2 .9-2 2v12c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm-8 11H9.5v-2h-2v2H6V9h1.5v2.5h2V9H11v6zm7-1c0 .55-.45 1-1 1h-.75v1.5h-1.5V15H14c-.55 0-1-.45-1-1v-4c0-.55.45-1 1-1h3c.55 0 1 .45 1 1v4zm-3.5-.5h2v-3h-2v3z\"}}]})(props);\n};\nexport function MdLibraryAdd (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M4 6H2v14c0 1.1.9 2 2 2h14v-2H4V6zm16-4H8c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm-1 9h-4v4h-2v-4H9V9h4V5h2v4h4v2z\"}}]})(props);\n};\nexport function MdLibraryBooks (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M4 6H2v14c0 1.1.9 2 2 2h14v-2H4V6zm16-4H8c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm-1 9H9V9h10v2zm-4 4H9v-2h6v2zm4-8H9V5h10v2z\"}}]})(props);\n};\nexport function MdLibraryMusic (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M20 2H8c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm-2 5h-3v5.5c0 1.38-1.12 2.5-2.5 2.5S10 13.88 10 12.5s1.12-2.5 2.5-2.5c.57 0 1.08.19 1.5.51V5h4v2zM4 6H2v14c0 1.1.9 2 2 2h14v-2H4V6z\"}}]})(props);\n};\nexport function MdLoop (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 4V1L8 5l4 4V6c3.31 0 6 2.69 6 6 0 1.01-.25 1.97-.7 2.8l1.46 1.46C19.54 15.03 20 13.57 20 12c0-4.42-3.58-8-8-8zm0 14c-3.31 0-6-2.69-6-6 0-1.01.25-1.97.7-2.8L5.24 7.74C4.46 8.97 4 10.43 4 12c0 4.42 3.58 8 8 8v3l4-4-4-4v3z\"}}]})(props);\n};\nexport function MdMic (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 14c1.66 0 2.99-1.34 2.99-3L15 5c0-1.66-1.34-3-3-3S9 3.34 9 5v6c0 1.66 1.34 3 3 3zm5.3-3c0 3-2.54 5.1-5.3 5.1S6.7 14 6.7 11H5c0 3.41 2.72 6.23 6 6.72V21h2v-3.28c3.28-.48 6-3.3 6-6.72h-1.7z\"}}]})(props);\n};\nexport function MdMicNone (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 14c1.66 0 2.99-1.34 2.99-3L15 5c0-1.66-1.34-3-3-3S9 3.34 9 5v6c0 1.66 1.34 3 3 3zm-1.2-9.1c0-.66.54-1.2 1.2-1.2.66 0 1.2.54 1.2 1.2l-.01 6.2c0 .66-.53 1.2-1.19 1.2-.66 0-1.2-.54-1.2-1.2V4.9zm6.5 6.1c0 3-2.54 5.1-5.3 5.1S6.7 14 6.7 11H5c0 3.41 2.72 6.23 6 6.72V21h2v-3.28c3.28-.48 6-3.3 6-6.72h-1.7z\"}}]})(props);\n};\nexport function MdMicOff (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M19 11h-1.7c0 .74-.16 1.43-.43 2.05l1.23 1.23c.56-.98.9-2.09.9-3.28zm-4.02.17c0-.06.02-.11.02-.17V5c0-1.66-1.34-3-3-3S9 3.34 9 5v.18l5.98 5.99zM4.27 3L3 4.27l6.01 6.01V11c0 1.66 1.33 3 2.99 3 .22 0 .44-.03.65-.08l1.66 1.66c-.71.33-1.5.52-2.31.52-2.76 0-5.3-2.1-5.3-5.1H5c0 3.41 2.72 6.23 6 6.72V21h2v-3.28c.91-.13 1.77-.45 2.54-.9L19.73 21 21 19.73 4.27 3z\"}}]})(props);\n};\nexport function MdMovie (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M18 4l2 4h-3l-2-4h-2l2 4h-3l-2-4H8l2 4H7L5 4H4c-1.1 0-1.99.9-1.99 2L2 18c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V4h-4z\"}}]})(props);\n};\nexport function MdMusicVideo (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M21 3H3c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h18c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H3V5h18v14zM8 15c0-1.66 1.34-3 3-3 .35 0 .69.07 1 .18V6h5v2h-3v7.03c-.02 1.64-1.35 2.97-3 2.97-1.66 0-3-1.34-3-3z\"}}]})(props);\n};\nexport function MdNewReleases (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M23 12l-2.44-2.78.34-3.68-3.61-.82-1.89-3.18L12 3 8.6 1.54 6.71 4.72l-3.61.81.34 3.68L1 12l2.44 2.78-.34 3.69 3.61.82 1.89 3.18L12 21l3.4 1.46 1.89-3.18 3.61-.82-.34-3.68L23 12zm-10 5h-2v-2h2v2zm0-4h-2V7h2v6z\"}}]})(props);\n};\nexport function MdNotInterested (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.42 0-8-3.58-8-8 0-1.85.63-3.55 1.69-4.9L16.9 18.31C15.55 19.37 13.85 20 12 20zm6.31-3.1L7.1 5.69C8.45 4.63 10.15 4 12 4c4.42 0 8 3.58 8 8 0 1.85-.63 3.55-1.69 4.9z\"}}]})(props);\n};\nexport function MdNote (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M22 10l-6-6H4c-1.1 0-2 .9-2 2v12.01c0 1.1.9 1.99 2 1.99l16-.01c1.1 0 2-.89 2-1.99v-8zm-7-4.5l5.5 5.5H15V5.5z\"}}]})(props);\n};\nexport function MdPause (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M6 19h4V5H6v14zm8-14v14h4V5h-4z\"}}]})(props);\n};\nexport function MdPauseCircleFilled (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-1 14H9V8h2v8zm4 0h-2V8h2v8z\"}}]})(props);\n};\nexport function MdPauseCircleOutline (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M9 16h2V8H9v8zm3-14C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm1-4h2V8h-2v8z\"}}]})(props);\n};\nexport function MdPlayArrow (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M8 5v14l11-7z\"}}]})(props);\n};\nexport function MdPlayCircleFilled (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 14.5v-9l6 4.5-6 4.5z\"}}]})(props);\n};\nexport function MdPlayCircleOutline (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M10 16.5l6-4.5-6-4.5v9zM12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z\"}}]})(props);\n};\nexport function MdPlaylistAdd (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M14 10H2v2h12v-2zm0-4H2v2h12V6zm4 8v-4h-2v4h-4v2h4v4h2v-4h4v-2h-4zM2 16h8v-2H2v2z\"}}]})(props);\n};\nexport function MdPlaylistAddCheck (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M14 10H2v2h12v-2zm0-4H2v2h12V6zM2 16h8v-2H2v2zm19.5-4.5L23 13l-6.99 7-4.51-4.5L13 14l3.01 3 5.49-5.5z\"}}]})(props);\n};\nexport function MdPlaylistPlay (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M19 9H2v2h17V9zm0-4H2v2h17V5zM2 15h13v-2H2v2zm15-2v6l5-3-5-3z\"}}]})(props);\n};\nexport function MdQueue (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M4 6H2v14c0 1.1.9 2 2 2h14v-2H4V6zm16-4H8c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm-1 9h-4v4h-2v-4H9V9h4V5h2v4h4v2z\"}}]})(props);\n};\nexport function MdQueueMusic (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M15 6H3v2h12V6zm0 4H3v2h12v-2zM3 16h8v-2H3v2zM17 6v8.18c-.31-.11-.65-.18-1-.18-1.66 0-3 1.34-3 3s1.34 3 3 3 3-1.34 3-3V8h3V6h-5z\"}}]})(props);\n};\nexport function MdQueuePlayNext (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M21 3H3c-1.11 0-2 .89-2 2v12c0 1.1.89 2 2 2h5v2h8v-2h2v-2H3V5h18v8h2V5c0-1.11-.9-2-2-2zm-8 7V7h-2v3H8v2h3v3h2v-3h3v-2h-3zm11 8l-4.5 4.5L18 21l3-3-3-3 1.5-1.5L24 18z\"}}]})(props);\n};\nexport function MdRadio (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M3.24 6.15C2.51 6.43 2 7.17 2 8v12c0 1.1.89 2 2 2h16c1.11 0 2-.9 2-2V8c0-1.11-.89-2-2-2H8.3l8.26-3.34L15.88 1 3.24 6.15zM7 20c-1.66 0-3-1.34-3-3s1.34-3 3-3 3 1.34 3 3-1.34 3-3 3zm13-8h-2v-2h-2v2H4V8h16v4z\"}}]})(props);\n};\nexport function MdRecentActors (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M21 5v14h2V5h-2zm-4 14h2V5h-2v14zM14 5H2c-.55 0-1 .45-1 1v12c0 .55.45 1 1 1h12c.55 0 1-.45 1-1V6c0-.55-.45-1-1-1zM8 7.75c1.24 0 2.25 1.01 2.25 2.25S9.24 12.25 8 12.25 5.75 11.24 5.75 10 6.76 7.75 8 7.75zM12.5 17h-9v-.75c0-1.5 3-2.25 4.5-2.25s4.5.75 4.5 2.25V17z\"}}]})(props);\n};\nexport function MdRemoveFromQueue (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M21 3H3c-1.11 0-2 .89-2 2v12c0 1.1.89 2 2 2h5v2h8v-2h5c1.1 0 1.99-.9 1.99-2L23 5c0-1.11-.9-2-2-2zm0 14H3V5h18v12zm-5-7v2H8v-2h8z\"}}]})(props);\n};\nexport function MdRepeat (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M7 7h10v3l4-4-4-4v3H5v6h2V7zm10 10H7v-3l-4 4 4 4v-3h12v-6h-2v4z\"}}]})(props);\n};\nexport function MdRepeatOne (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M7 7h10v3l4-4-4-4v3H5v6h2V7zm10 10H7v-3l-4 4 4 4v-3h12v-6h-2v4zm-4-2V9h-1l-2 1v1h1.5v4H13z\"}}]})(props);\n};\nexport function MdReplay10 (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 5V1L7 6l5 5V7c3.3 0 6 2.7 6 6s-2.7 6-6 6-6-2.7-6-6H4c0 4.4 3.6 8 8 8s8-3.6 8-8-3.6-8-8-8zm-1.1 11H10v-3.3L9 13v-.7l1.8-.6h.1V16zm4.3-1.8c0 .3 0 .6-.1.8l-.3.6s-.3.3-.5.3-.4.1-.6.1-.4 0-.6-.1-.3-.2-.5-.3-.2-.3-.3-.6-.1-.5-.1-.8v-.7c0-.3 0-.6.1-.8l.3-.6s.3-.3.5-.3.4-.1.6-.1.4 0 .6.1c.2.1.3.2.5.3s.2.3.3.6.1.5.1.8v.7zm-.9-.8v-.5s-.1-.2-.1-.3-.1-.1-.2-.2-.2-.1-.3-.1-.2 0-.3.1l-.2.2s-.1.2-.1.3v2s.1.2.1.3.1.1.2.2.2.1.3.1.2 0 .3-.1l.2-.2s.1-.2.1-.3v-1.5z\"}}]})(props);\n};\nexport function MdReplay (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 5V1L7 6l5 5V7c3.31 0 6 2.69 6 6s-2.69 6-6 6-6-2.69-6-6H4c0 4.42 3.58 8 8 8s8-3.58 8-8-3.58-8-8-8z\"}}]})(props);\n};\nexport function MdReplay30 (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 5V1L7 6l5 5V7c3.3 0 6 2.7 6 6s-2.7 6-6 6-6-2.7-6-6H4c0 4.4 3.6 8 8 8s8-3.6 8-8-3.6-8-8-8zm-2.4 8.5h.4c.2 0 .4-.1.5-.2s.2-.2.2-.4v-.2s-.1-.1-.1-.2-.1-.1-.2-.1h-.5s-.1.1-.2.1-.1.1-.1.2v.2h-1c0-.2 0-.3.1-.5s.2-.3.3-.4.3-.2.4-.2.4-.1.5-.1c.2 0 .4 0 .6.1s.3.1.5.2.2.2.3.4.1.3.1.5v.3s-.1.2-.1.3-.1.2-.2.2-.2.1-.3.2c.2.1.4.2.5.4s.2.4.2.6c0 .2 0 .4-.1.5s-.2.3-.3.4-.3.2-.5.2-.4.1-.6.1c-.2 0-.4 0-.5-.1s-.3-.1-.5-.2-.2-.2-.3-.4-.1-.4-.1-.6h.8v.2s.1.1.1.2.1.1.2.1h.5s.1-.1.2-.1.1-.1.1-.2v-.5s-.1-.1-.1-.2-.1-.1-.2-.1h-.6v-.7zm5.7.7c0 .3 0 .6-.1.8l-.3.6s-.3.3-.5.3-.4.1-.6.1-.4 0-.6-.1-.3-.2-.5-.3-.2-.3-.3-.6-.1-.5-.1-.8v-.7c0-.3 0-.6.1-.8l.3-.6s.3-.3.5-.3.4-.1.6-.1.4 0 .6.1.3.2.5.3.2.3.3.6.1.5.1.8v.7zm-.8-.8v-.5c0-.1-.1-.2-.1-.3s-.1-.1-.2-.2-.2-.1-.3-.1-.2 0-.3.1l-.2.2s-.1.2-.1.3v2s.1.2.1.3.1.1.2.2.2.1.3.1.2 0 .3-.1l.2-.2s.1-.2.1-.3v-1.5z\"}}]})(props);\n};\nexport function MdReplay5 (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 5V1L7 6l5 5V7c3.3 0 6 2.7 6 6s-2.7 6-6 6-6-2.7-6-6H4c0 4.4 3.6 8 8 8s8-3.6 8-8-3.6-8-8-8zm-1.3 8.9l.2-2.2h2.4v.7h-1.7l-.1.9s.1 0 .1-.1.1 0 .1-.1.1 0 .2 0h.2c.2 0 .4 0 .5.1s.3.2.4.3.2.3.3.5.1.4.1.6c0 .2 0 .4-.1.5s-.1.3-.3.5-.3.2-.4.3-.4.1-.6.1c-.2 0-.4 0-.5-.1s-.3-.1-.5-.2-.2-.2-.3-.4-.1-.3-.1-.5h.8c0 .2.1.3.2.4s.2.1.4.1c.1 0 .2 0 .3-.1l.2-.2s.1-.2.1-.3v-.6l-.1-.2-.2-.2s-.2-.1-.3-.1h-.2s-.1 0-.2.1-.1 0-.1.1-.1.1-.1.1h-.7z\"}}]})(props);\n};\nexport function MdShuffle (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M10.59 9.17L5.41 4 4 5.41l5.17 5.17 1.42-1.41zM14.5 4l2.04 2.04L4 18.59 5.41 20 17.96 7.46 20 9.5V4h-5.5zm.33 9.41l-1.41 1.41 3.13 3.13L14.5 20H20v-5.5l-2.04 2.04-3.13-3.13z\"}}]})(props);\n};\nexport function MdSkipNext (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M6 18l8.5-6L6 6v12zM16 6v12h2V6h-2z\"}}]})(props);\n};\nexport function MdSkipPrevious (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M6 6h2v12H6zm3.5 6l8.5 6V6z\"}}]})(props);\n};\nexport function MdSlowMotionVideo (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M13.05 9.79L10 7.5v9l3.05-2.29L16 12zm0 0L10 7.5v9l3.05-2.29L16 12zm0 0L10 7.5v9l3.05-2.29L16 12zM11 4.07V2.05c-2.01.2-3.84 1-5.32 2.21L7.1 5.69c1.11-.86 2.44-1.44 3.9-1.62zM5.69 7.1L4.26 5.68C3.05 7.16 2.25 8.99 2.05 11h2.02c.18-1.46.76-2.79 1.62-3.9zM4.07 13H2.05c.2 2.01 1 3.84 2.21 5.32l1.43-1.43c-.86-1.1-1.44-2.43-1.62-3.89zm1.61 6.74C7.16 20.95 9 21.75 11 21.95v-2.02c-1.46-.18-2.79-.76-3.9-1.62l-1.42 1.43zM22 12c0 5.16-3.92 9.42-8.95 9.95v-2.02C16.97 19.41 20 16.05 20 12s-3.03-7.41-6.95-7.93V2.05C18.08 2.58 22 6.84 22 12z\"}}]})(props);\n};\nexport function MdSnooze (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M7.88 3.39L6.6 1.86 2 5.71l1.29 1.53 4.59-3.85zM22 5.72l-4.6-3.86-1.29 1.53 4.6 3.86L22 5.72zM12 4c-4.97 0-9 4.03-9 9s4.02 9 9 9c4.97 0 9-4.03 9-9s-4.03-9-9-9zm0 16c-3.87 0-7-3.13-7-7s3.13-7 7-7 7 3.13 7 7-3.13 7-7 7zm-3-9h3.63L9 15.2V17h6v-2h-3.63L15 10.8V9H9v2z\"}}]})(props);\n};\nexport function MdSortByAlpha (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M14.94 4.66h-4.72l2.36-2.36zm-4.69 14.71h4.66l-2.33 2.33zM6.1 6.27L1.6 17.73h1.84l.92-2.45h5.11l.92 2.45h1.84L7.74 6.27H6.1zm-1.13 7.37l1.94-5.18 1.94 5.18H4.97zm10.76 2.5h6.12v1.59h-8.53v-1.29l5.92-8.56h-5.88v-1.6h8.3v1.26l-5.93 8.6z\"}}]})(props);\n};\nexport function MdStop (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M6 6h12v12H6z\"}}]})(props);\n};\nexport function MdSubscriptions (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M20 8H4V6h16v2zm-2-6H6v2h12V2zm4 10v8c0 1.1-.9 2-2 2H4c-1.1 0-2-.9-2-2v-8c0-1.1.9-2 2-2h16c1.1 0 2 .9 2 2zm-6 4l-6-3.27v6.53L16 16z\"}}]})(props);\n};\nexport function MdSubtitles (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M20 4H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zM4 12h4v2H4v-2zm10 6H4v-2h10v2zm6 0h-4v-2h4v2zm0-4H10v-2h10v2z\"}}]})(props);\n};\nexport function MdSurroundSound (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M20 4H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zM7.76 16.24l-1.41 1.41C4.78 16.1 4 14.05 4 12c0-2.05.78-4.1 2.34-5.66l1.41 1.41C6.59 8.93 6 10.46 6 12s.59 3.07 1.76 4.24zM12 16c-2.21 0-4-1.79-4-4s1.79-4 4-4 4 1.79 4 4-1.79 4-4 4zm5.66 1.66l-1.41-1.41C17.41 15.07 18 13.54 18 12s-.59-3.07-1.76-4.24l1.41-1.41C19.22 7.9 20 9.95 20 12c0 2.05-.78 4.1-2.34 5.66zM12 10c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z\"}}]})(props);\n};\nexport function MdVideoCall (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M17 10.5V7c0-.55-.45-1-1-1H4c-.55 0-1 .45-1 1v10c0 .55.45 1 1 1h12c.55 0 1-.45 1-1v-3.5l4 4v-11l-4 4zM14 13h-3v3H9v-3H6v-2h3V8h2v3h3v2z\"}}]})(props);\n};\nexport function MdVideoLabel (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M21 3H3c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h18c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 13H3V5h18v11z\"}}]})(props);\n};\nexport function MdVideoLibrary (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M4 6H2v14c0 1.1.9 2 2 2h14v-2H4V6zm16-4H8c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm-8 12.5v-9l6 4.5-6 4.5z\"}}]})(props);\n};\nexport function MdVideocam (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M17 10.5V7c0-.55-.45-1-1-1H4c-.55 0-1 .45-1 1v10c0 .55.45 1 1 1h12c.55 0 1-.45 1-1v-3.5l4 4v-11l-4 4z\"}}]})(props);\n};\nexport function MdVideocamOff (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M21 6.5l-4 4V7c0-.55-.45-1-1-1H9.82L21 17.18V6.5zM3.27 2L2 3.27 4.73 6H4c-.55 0-1 .45-1 1v10c0 .55.45 1 1 1h12c.21 0 .39-.08.54-.18L19.73 21 21 19.73 3.27 2z\"}}]})(props);\n};\nexport function MdVolumeDown (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M18.5 12c0-1.77-1.02-3.29-2.5-4.03v8.05c1.48-.73 2.5-2.25 2.5-4.02zM5 9v6h4l5 5V4L9 9H5z\"}}]})(props);\n};\nexport function MdVolumeMute (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M7 9v6h4l5 5V4l-5 5H7z\"}}]})(props);\n};\nexport function MdVolumeOff (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M16.5 12c0-1.77-1.02-3.29-2.5-4.03v2.21l2.45 2.45c.03-.2.05-.41.05-.63zm2.5 0c0 .94-.2 1.82-.54 2.64l1.51 1.51C20.63 14.91 21 13.5 21 12c0-4.28-2.99-7.86-7-8.77v2.06c2.89.86 5 3.54 5 6.71zM4.27 3L3 4.27 7.73 9H3v6h4l5 5v-6.73l4.25 4.25c-.67.52-1.42.93-2.25 1.18v2.06c1.38-.31 2.63-.95 3.69-1.81L19.73 21 21 19.73l-9-9L4.27 3zM12 4L9.91 6.09 12 8.18V4z\"}}]})(props);\n};\nexport function MdVolumeUp (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M3 9v6h4l5 5V4L7 9H3zm13.5 3c0-1.77-1.02-3.29-2.5-4.03v8.05c1.48-.73 2.5-2.25 2.5-4.02zM14 3.23v2.06c2.89.86 5 3.54 5 6.71s-2.11 5.85-5 6.71v2.06c4.01-.91 7-4.49 7-8.77s-2.99-7.86-7-8.77z\"}}]})(props);\n};\nexport function MdWeb (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M20 4H4c-1.1 0-1.99.9-1.99 2L2 18c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm-5 14H4v-4h11v4zm0-5H4V9h11v4zm5 5h-4V9h4v9z\"}}]})(props);\n};\nexport function MdWebAsset (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M19 4H5c-1.11 0-2 .9-2 2v12c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V6c0-1.1-.89-2-2-2zm0 14H5V8h14v10z\"}}]})(props);\n};\nexport function MdBusiness (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 7V3H2v18h20V7H12zM6 19H4v-2h2v2zm0-4H4v-2h2v2zm0-4H4V9h2v2zm0-4H4V5h2v2zm4 12H8v-2h2v2zm0-4H8v-2h2v2zm0-4H8V9h2v2zm0-4H8V5h2v2zm10 12h-8v-2h2v-2h-2v-2h2v-2h-2V9h8v10zm-2-8h-2v2h2v-2zm0 4h-2v2h2v-2z\"}}]})(props);\n};\nexport function MdCall (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M6.62 10.79c1.44 2.83 3.76 5.14 6.59 6.59l2.2-2.2c.27-.27.67-.36 1.02-.24 1.12.37 2.33.57 3.57.57.55 0 1 .45 1 1V20c0 .55-.45 1-1 1-9.39 0-17-7.61-17-17 0-.55.45-1 1-1h3.5c.55 0 1 .45 1 1 0 1.25.2 2.45.57 3.57.11.35.03.74-.25 1.02l-2.2 2.2z\"}}]})(props);\n};\nexport function MdCallEnd (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 9c-1.6 0-3.15.25-4.6.72v3.1c0 .39-.23.74-.56.9-.98.49-1.87 1.12-2.66 1.85-.18.18-.43.28-.7.28-.28 0-.53-.11-.71-.29L.29 13.08c-.18-.17-.29-.42-.29-.7 0-.28.11-.53.29-.71C3.34 8.78 7.46 7 12 7s8.66 1.78 11.71 4.67c.18.18.29.43.29.71 0 .28-.11.53-.29.71l-2.48 2.48c-.18.18-.43.29-.71.29-.27 0-.52-.11-.7-.28-.79-.74-1.69-1.36-2.67-1.85-.33-.16-.56-.5-.56-.9v-3.1C15.15 9.25 13.6 9 12 9z\"}}]})(props);\n};\nexport function MdCallMade (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M9 5v2h6.59L4 18.59 5.41 20 17 8.41V15h2V5z\"}}]})(props);\n};\nexport function MdCallMerge (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M17 20.41L18.41 19 15 15.59 13.59 17 17 20.41zM7.5 8H11v5.59L5.59 19 7 20.41l6-6V8h3.5L12 3.5 7.5 8z\"}}]})(props);\n};\nexport function MdCallMissed (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M19.59 7L12 14.59 6.41 9H11V7H3v8h2v-4.59l7 7 9-9z\"}}]})(props);\n};\nexport function MdCallMissedOutgoing (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M3 8.41l9 9 7-7V15h2V7h-8v2h4.59L12 14.59 4.41 7 3 8.41z\"}}]})(props);\n};\nexport function MdCallReceived (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M20 5.41L18.59 4 7 15.59V9H5v10h10v-2H8.41z\"}}]})(props);\n};\nexport function MdCallSplit (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M14 4l2.29 2.29-2.88 2.88 1.42 1.42 2.88-2.88L20 10V4zm-4 0H4v6l2.29-2.29 4.71 4.7V20h2v-8.41l-5.29-5.3z\"}}]})(props);\n};\nexport function MdChat (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M20 2H4c-1.1 0-1.99.9-1.99 2L2 22l4-4h14c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zM6 9h12v2H6V9zm8 5H6v-2h8v2zm4-6H6V6h12v2z\"}}]})(props);\n};\nexport function MdChatBubble (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M20 2H4c-1.1 0-2 .9-2 2v18l4-4h14c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2z\"}}]})(props);\n};\nexport function MdChatBubbleOutline (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M20 2H4c-1.1 0-2 .9-2 2v18l4-4h14c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm0 14H6l-2 2V4h16v12z\"}}]})(props);\n};\nexport function MdClearAll (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M5 13h14v-2H5v2zm-2 4h14v-2H3v2zM7 7v2h14V7H7z\"}}]})(props);\n};\nexport function MdComment (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M21.99 4c0-1.1-.89-2-1.99-2H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h14l4 4-.01-18zM18 14H6v-2h12v2zm0-3H6V9h12v2zm0-3H6V6h12v2z\"}}]})(props);\n};\nexport function MdContactMail (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M21 8V7l-3 2-3-2v1l3 2 3-2zm1-5H2C.9 3 0 3.9 0 5v14c0 1.1.9 2 2 2h20c1.1 0 1.99-.9 1.99-2L24 5c0-1.1-.9-2-2-2zM8 6c1.66 0 3 1.34 3 3s-1.34 3-3 3-3-1.34-3-3 1.34-3 3-3zm6 12H2v-1c0-2 4-3.1 6-3.1s6 1.1 6 3.1v1zm8-6h-8V6h8v6z\"}}]})(props);\n};\nexport function MdContactPhone (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M22 3H2C.9 3 0 3.9 0 5v14c0 1.1.9 2 2 2h20c1.1 0 1.99-.9 1.99-2L24 5c0-1.1-.9-2-2-2zM8 6c1.66 0 3 1.34 3 3s-1.34 3-3 3-3-1.34-3-3 1.34-3 3-3zm6 12H2v-1c0-2 4-3.1 6-3.1s6 1.1 6 3.1v1zm3.85-4h1.64L21 16l-1.99 1.99c-1.31-.98-2.28-2.38-2.73-3.99-.18-.64-.28-1.31-.28-2s.1-1.36.28-2c.45-1.62 1.42-3.01 2.73-3.99L21 8l-1.51 2h-1.64c-.22.63-.35 1.3-.35 2s.13 1.37.35 2z\"}}]})(props);\n};\nexport function MdContacts (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M20 0H4v2h16V0zM4 24h16v-2H4v2zM20 4H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm-8 2.75c1.24 0 2.25 1.01 2.25 2.25s-1.01 2.25-2.25 2.25S9.75 10.24 9.75 9 10.76 6.75 12 6.75zM17 17H7v-1.5c0-1.67 3.33-2.5 5-2.5s5 .83 5 2.5V17z\"}}]})(props);\n};\nexport function MdDialerSip (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M17 3h-1v5h1V3zm-2 2h-2V4h2V3h-3v3h2v1h-2v1h3V5zm3-2v5h1V6h2V3h-3zm2 2h-1V4h1v1zm0 10.5c-1.25 0-2.45-.2-3.57-.57-.35-.11-.74-.03-1.01.24l-2.2 2.2c-2.83-1.44-5.15-3.75-6.59-6.59l2.2-2.21c.27-.26.35-.65.24-1C8.7 6.45 8.5 5.25 8.5 4c0-.55-.45-1-1-1H4c-.55 0-1 .45-1 1 0 9.39 7.61 17 17 17 .55 0 1-.45 1-1v-3.5c0-.55-.45-1-1-1z\"}}]})(props);\n};\nexport function MdDialpad (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 19c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zM6 1c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0 6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0 6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm12-8c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm-6 8c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm6 0c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0-6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm-6 0c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0-6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z\"}}]})(props);\n};\nexport function MdEmail (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M20 4H4c-1.1 0-1.99.9-1.99 2L2 18c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm0 4l-8 5-8-5V6l8 5 8-5v2z\"}}]})(props);\n};\nexport function MdForum (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M21 6h-2v9H6v2c0 .55.45 1 1 1h11l4 4V7c0-.55-.45-1-1-1zm-4 6V3c0-.55-.45-1-1-1H3c-.55 0-1 .45-1 1v14l4-4h10c.55 0 1-.45 1-1z\"}}]})(props);\n};\nexport function MdImportContacts (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M21 5c-1.11-.35-2.33-.5-3.5-.5-1.95 0-4.05.4-5.5 1.5-1.45-1.1-3.55-1.5-5.5-1.5S2.45 4.9 1 6v14.65c0 .25.25.5.5.5.1 0 .15-.05.25-.05C3.1 20.45 5.05 20 6.5 20c1.95 0 4.05.4 5.5 1.5 1.35-.85 3.8-1.5 5.5-1.5 1.65 0 3.35.3 4.75 1.05.1.05.15.05.25.05.25 0 .5-.25.5-.5V6c-.6-.45-1.25-.75-2-1zm0 13.5c-1.1-.35-2.3-.5-3.5-.5-1.7 0-4.15.65-5.5 1.5V8c1.35-.85 3.8-1.5 5.5-1.5 1.2 0 2.4.15 3.5.5v11.5z\"}}]})(props);\n};\nexport function MdImportExport (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M9 3L5 6.99h3V14h2V6.99h3L9 3zm7 14.01V10h-2v7.01h-3L15 21l4-3.99h-3z\"}}]})(props);\n};\nexport function MdInvertColorsOff (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M20.65 20.87l-2.35-2.35-6.3-6.29-3.56-3.57-1.42-1.41L4.27 4.5 3 5.77l2.78 2.78c-2.55 3.14-2.36 7.76.56 10.69C7.9 20.8 9.95 21.58 12 21.58c1.79 0 3.57-.59 5.03-1.78l2.7 2.7L21 21.23l-.35-.36zM12 19.59c-1.6 0-3.11-.62-4.24-1.76C6.62 16.69 6 15.19 6 13.59c0-1.32.43-2.57 1.21-3.6L12 14.77v4.82zM12 5.1v4.58l7.25 7.26c1.37-2.96.84-6.57-1.6-9.01L12 2.27l-3.7 3.7 1.41 1.41L12 5.1z\"}}]})(props);\n};\nexport function MdLiveHelp (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M19 2H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h4l3 3 3-3h4c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm-6 16h-2v-2h2v2zm2.07-7.75l-.9.92C13.45 11.9 13 12.5 13 14h-2v-.5c0-1.1.45-2.1 1.17-2.83l1.24-1.26c.37-.36.59-.86.59-1.41 0-1.1-.9-2-2-2s-2 .9-2 2H8c0-2.21 1.79-4 4-4s4 1.79 4 4c0 .88-.36 1.68-.93 2.25z\"}}]})(props);\n};\nexport function MdLocationOff (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 6.5c1.38 0 2.5 1.12 2.5 2.5 0 .74-.33 1.39-.83 1.85l3.63 3.63c.98-1.86 1.7-3.8 1.7-5.48 0-3.87-3.13-7-7-7-1.98 0-3.76.83-5.04 2.15l3.19 3.19c.46-.52 1.11-.84 1.85-.84zm4.37 9.6l-4.63-4.63-.11-.11L3.27 3 2 4.27l3.18 3.18C5.07 7.95 5 8.47 5 9c0 5.25 7 13 7 13s1.67-1.85 3.38-4.35L18.73 21 20 19.73l-3.63-3.63z\"}}]})(props);\n};\nexport function MdLocationOn (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 2C8.13 2 5 5.13 5 9c0 5.25 7 13 7 13s7-7.75 7-13c0-3.87-3.13-7-7-7zm0 9.5c-1.38 0-2.5-1.12-2.5-2.5s1.12-2.5 2.5-2.5 2.5 1.12 2.5 2.5-1.12 2.5-2.5 2.5z\"}}]})(props);\n};\nexport function MdMailOutline (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M20 4H4c-1.1 0-1.99.9-1.99 2L2 18c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm0 14H4V8l8 5 8-5v10zm-8-7L4 6h16l-8 5z\"}}]})(props);\n};\nexport function MdMessage (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M20 2H4c-1.1 0-1.99.9-1.99 2L2 22l4-4h14c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm-2 12H6v-2h12v2zm0-3H6V9h12v2zm0-3H6V6h12v2z\"}}]})(props);\n};\nexport function MdNoSim (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M18.99 5c0-1.1-.89-2-1.99-2h-7L7.66 5.34 19 16.68 18.99 5zM3.65 3.88L2.38 5.15 5 7.77V19c0 1.1.9 2 2 2h10.01c.35 0 .67-.1.96-.26l1.88 1.88 1.27-1.27L3.65 3.88z\"}}]})(props);\n};\nexport function MdPhone (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M6.62 10.79c1.44 2.83 3.76 5.14 6.59 6.59l2.2-2.2c.27-.27.67-.36 1.02-.24 1.12.37 2.33.57 3.57.57.55 0 1 .45 1 1V20c0 .55-.45 1-1 1-9.39 0-17-7.61-17-17 0-.55.45-1 1-1h3.5c.55 0 1 .45 1 1 0 1.25.2 2.45.57 3.57.11.35.03.74-.25 1.02l-2.2 2.2z\"}}]})(props);\n};\nexport function MdPhonelinkErase (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M13 8.2l-1-1-4 4-4-4-1 1 4 4-4 4 1 1 4-4 4 4 1-1-4-4 4-4zM19 1H9c-1.1 0-2 .9-2 2v3h2V4h10v16H9v-2H7v3c0 1.1.9 2 2 2h10c1.1 0 2-.9 2-2V3c0-1.1-.9-2-2-2z\"}}]})(props);\n};\nexport function MdPhonelinkLock (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M19 1H9c-1.1 0-2 .9-2 2v3h2V4h10v16H9v-2H7v3c0 1.1.9 2 2 2h10c1.1 0 2-.9 2-2V3c0-1.1-.9-2-2-2zm-8.2 10V9.5C10.8 8.1 9.4 7 8 7S5.2 8.1 5.2 9.5V11c-.6 0-1.2.6-1.2 1.2v3.5c0 .7.6 1.3 1.2 1.3h5.5c.7 0 1.3-.6 1.3-1.2v-3.5c0-.7-.6-1.3-1.2-1.3zm-1.3 0h-3V9.5c0-.8.7-1.3 1.5-1.3s1.5.5 1.5 1.3V11z\"}}]})(props);\n};\nexport function MdPhonelinkRing (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M20.1 7.7l-1 1c1.8 1.8 1.8 4.6 0 6.5l1 1c2.5-2.3 2.5-6.1 0-8.5zM18 9.8l-1 1c.5.7.5 1.6 0 2.3l1 1c1.2-1.2 1.2-3 0-4.3zM14 1H4c-1.1 0-2 .9-2 2v18c0 1.1.9 2 2 2h10c1.1 0 2-.9 2-2V3c0-1.1-.9-2-2-2zm0 19H4V4h10v16z\"}}]})(props);\n};\nexport function MdPhonelinkSetup (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M11.8 12.5v-1l1.1-.8c.1-.1.1-.2.1-.3l-1-1.7c-.1-.1-.2-.2-.3-.1l-1.3.4c-.3-.2-.6-.4-.9-.5l-.2-1.3c0-.1-.1-.2-.3-.2H7c-.1 0-.2.1-.3.2l-.2 1.3c-.3.1-.6.3-.9.5l-1.3-.5c-.1 0-.2 0-.3.1l-1 1.7c-.1.1 0 .2.1.3l1.1.8v1l-1.1.8c-.1.2-.1.3-.1.4l1 1.7c.1.1.2.2.3.1l1.4-.4c.3.2.6.4.9.5l.2 1.3c-.1.1.1.2.2.2h2c.1 0 .2-.1.3-.2l.2-1.3c.3-.1.6-.3.9-.5l1.3.5c.1 0 .2 0 .3-.1l1-1.7c.1-.1 0-.2-.1-.3l-1.1-.9zM8 14c-1.1 0-2-.9-2-2s.9-2 2-2 2 .9 2 2-.9 2-2 2zM19 1H9c-1.1 0-2 .9-2 2v3h2V4h10v16H9v-2H7v3c0 1.1.9 2 2 2h10c1.1 0 2-.9 2-2V3c0-1.1-.9-2-2-2z\"}}]})(props);\n};\nexport function MdPortableWifiOff (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M17.56 14.24c.28-.69.44-1.45.44-2.24 0-3.31-2.69-6-6-6-.79 0-1.55.16-2.24.44l1.62 1.62c.2-.03.41-.06.62-.06 2.21 0 4 1.79 4 4 0 .21-.02.42-.05.63l1.61 1.61zM12 4c4.42 0 8 3.58 8 8 0 1.35-.35 2.62-.95 3.74l1.47 1.47C21.46 15.69 22 13.91 22 12c0-5.52-4.48-10-10-10-1.91 0-3.69.55-5.21 1.47l1.46 1.46C9.37 4.34 10.65 4 12 4zM3.27 2.5L2 3.77l2.1 2.1C2.79 7.57 2 9.69 2 12c0 3.7 2.01 6.92 4.99 8.65l1-1.73C5.61 17.53 4 14.96 4 12c0-1.76.57-3.38 1.53-4.69l1.43 1.44C6.36 9.68 6 10.8 6 12c0 2.22 1.21 4.15 3 5.19l1-1.74c-1.19-.7-2-1.97-2-3.45 0-.65.17-1.25.44-1.79l1.58 1.58L10 12c0 1.1.9 2 2 2l.21-.02.01.01 7.51 7.51L21 20.23 4.27 3.5l-1-1z\"}}]})(props);\n};\nexport function MdPresentToAll (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M21 3H3c-1.11 0-2 .89-2 2v14c0 1.11.89 2 2 2h18c1.11 0 2-.89 2-2V5c0-1.11-.89-2-2-2zm0 16.02H3V4.98h18v14.04zM10 12H8l4-4 4 4h-2v4h-4v-4z\"}}]})(props);\n};\nexport function MdRingVolume (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M23.71 16.67C20.66 13.78 16.54 12 12 12 7.46 12 3.34 13.78.29 16.67c-.18.18-.29.43-.29.71 0 .28.11.53.29.71l2.48 2.48c.18.18.43.29.71.29.27 0 .52-.11.7-.28.79-.74 1.69-1.36 2.66-1.85.33-.16.56-.5.56-.9v-3.1c1.45-.48 3-.73 4.6-.73s3.15.25 4.6.72v3.1c0 .39.23.74.56.9.98.49 1.87 1.12 2.66 1.85.18.18.43.28.7.28.28 0 .53-.11.71-.29l2.48-2.48c.18-.18.29-.43.29-.71 0-.27-.11-.52-.29-.7zM21.16 6.26l-1.41-1.41-3.56 3.55 1.41 1.41s3.45-3.52 3.56-3.55zM13 2h-2v5h2V2zM6.4 9.81L7.81 8.4 4.26 4.84 2.84 6.26c.11.03 3.56 3.55 3.56 3.55z\"}}]})(props);\n};\nexport function MdRssFeed (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"circle\",\"attr\":{\"cx\":\"6.18\",\"cy\":\"17.82\",\"r\":\"2.18\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M4 4.44v2.83c7.03 0 12.73 5.7 12.73 12.73h2.83c0-8.59-6.97-15.56-15.56-15.56zm0 5.66v2.83c3.9 0 7.07 3.17 7.07 7.07h2.83c0-5.47-4.43-9.9-9.9-9.9z\"}}]})(props);\n};\nexport function MdScreenShare (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M20 18c1.1 0 1.99-.9 1.99-2L22 6c0-1.11-.9-2-2-2H4c-1.11 0-2 .89-2 2v10c0 1.1.89 2 2 2H0v2h24v-2h-4zm-7-3.53v-2.19c-2.78 0-4.61.85-6 2.72.56-2.67 2.11-5.33 6-5.87V7l4 3.73-4 3.74z\"}}]})(props);\n};\nexport function MdSpeakerPhone (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M7 7.07L8.43 8.5c.91-.91 2.18-1.48 3.57-1.48s2.66.57 3.57 1.48L17 7.07C15.72 5.79 13.95 5 12 5s-3.72.79-5 2.07zM12 1C8.98 1 6.24 2.23 4.25 4.21l1.41 1.41C7.28 4 9.53 3 12 3s4.72 1 6.34 2.62l1.41-1.41C17.76 2.23 15.02 1 12 1zm2.86 9.01L9.14 10C8.51 10 8 10.51 8 11.14v9.71c0 .63.51 1.14 1.14 1.14h5.71c.63 0 1.14-.51 1.14-1.14v-9.71c.01-.63-.5-1.13-1.13-1.13zM15 20H9v-8h6v8z\"}}]})(props);\n};\nexport function MdStayCurrentLandscape (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M1.01 7L1 17c0 1.1.9 2 2 2h18c1.1 0 2-.9 2-2V7c0-1.1-.9-2-2-2H3c-1.1 0-1.99.9-1.99 2zM19 7v10H5V7h14z\"}}]})(props);\n};\nexport function MdStayCurrentPortrait (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M17 1.01L7 1c-1.1 0-1.99.9-1.99 2v18c0 1.1.89 2 1.99 2h10c1.1 0 2-.9 2-2V3c0-1.1-.9-1.99-2-1.99zM17 19H7V5h10v14z\"}}]})(props);\n};\nexport function MdStayPrimaryLandscape (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M1.01 7L1 17c0 1.1.9 2 2 2h18c1.1 0 2-.9 2-2V7c0-1.1-.9-2-2-2H3c-1.1 0-1.99.9-1.99 2zM19 7v10H5V7h14z\"}}]})(props);\n};\nexport function MdStayPrimaryPortrait (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M17 1.01L7 1c-1.1 0-1.99.9-1.99 2v18c0 1.1.89 2 1.99 2h10c1.1 0 2-.9 2-2V3c0-1.1-.9-1.99-2-1.99zM17 19H7V5h10v14z\"}}]})(props);\n};\nexport function MdStopScreenShare (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M21.22 18.02l2 2H24v-2h-2.78zm.77-2l.01-10c0-1.11-.9-2-2-2H7.22l5.23 5.23c.18-.04.36-.07.55-.1V7.02l4 3.73-1.58 1.47 5.54 5.54c.61-.33 1.03-.99 1.03-1.74zM2.39 1.73L1.11 3l1.54 1.54c-.4.36-.65.89-.65 1.48v10c0 1.1.89 2 2 2H0v2h18.13l2.71 2.71 1.27-1.27L2.39 1.73zM7 15.02c.31-1.48.92-2.95 2.07-4.06l1.59 1.59c-1.54.38-2.7 1.18-3.66 2.47z\"}}]})(props);\n};\nexport function MdSwapCalls (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M18 4l-4 4h3v7c0 1.1-.9 2-2 2s-2-.9-2-2V8c0-2.21-1.79-4-4-4S5 5.79 5 8v7H2l4 4 4-4H7V8c0-1.1.9-2 2-2s2 .9 2 2v7c0 2.21 1.79 4 4 4s4-1.79 4-4V8h3l-4-4z\"}}]})(props);\n};\nexport function MdTextsms (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M20 2H4c-1.1 0-1.99.9-1.99 2L2 22l4-4h14c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zM9 11H7V9h2v2zm4 0h-2V9h2v2zm4 0h-2V9h2v2z\"}}]})(props);\n};\nexport function MdVoicemail (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M18.5 6C15.46 6 13 8.46 13 11.5c0 1.33.47 2.55 1.26 3.5H9.74c.79-.95 1.26-2.17 1.26-3.5C11 8.46 8.54 6 5.5 6S0 8.46 0 11.5 2.46 17 5.5 17h13c3.04 0 5.5-2.46 5.5-5.5S21.54 6 18.5 6zm-13 9C3.57 15 2 13.43 2 11.5S3.57 8 5.5 8 9 9.57 9 11.5 7.43 15 5.5 15zm13 0c-1.93 0-3.5-1.57-3.5-3.5S16.57 8 18.5 8 22 9.57 22 11.5 20.43 15 18.5 15z\"}}]})(props);\n};\nexport function MdVpnKey (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12.65 10C11.83 7.67 9.61 6 7 6c-3.31 0-6 2.69-6 6s2.69 6 6 6c2.61 0 4.83-1.67 5.65-4H17v4h4v-4h2v-4H12.65zM7 14c-1.1 0-2-.9-2-2s.9-2 2-2 2 .9 2 2-.9 2-2 2z\"}}]})(props);\n};\nexport function MdAdd (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z\"}}]})(props);\n};\nexport function MdAddBox (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-2 10h-4v4h-2v-4H7v-2h4V7h2v4h4v2z\"}}]})(props);\n};\nexport function MdAddCircle (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm5 11h-4v4h-2v-4H7v-2h4V7h2v4h4v2z\"}}]})(props);\n};\nexport function MdAddCircleOutline (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M13 7h-2v4H7v2h4v4h2v-4h4v-2h-4V7zm-1-5C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z\"}}]})(props);\n};\nexport function MdArchive (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M20.54 5.23l-1.39-1.68C18.88 3.21 18.47 3 18 3H6c-.47 0-.88.21-1.16.55L3.46 5.23C3.17 5.57 3 6.02 3 6.5V19c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V6.5c0-.48-.17-.93-.46-1.27zM12 17.5L6.5 12H10v-2h4v2h3.5L12 17.5zM5.12 5l.81-1h12l.94 1H5.12z\"}}]})(props);\n};\nexport function MdBackspace (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M22 3H7c-.69 0-1.23.35-1.59.88L0 12l5.41 8.11c.36.53.9.89 1.59.89h15c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-3 12.59L17.59 17 14 13.41 10.41 17 9 15.59 12.59 12 9 8.41 10.41 7 14 10.59 17.59 7 19 8.41 15.41 12 19 15.59z\"}}]})(props);\n};\nexport function MdBlock (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zM4 12c0-4.42 3.58-8 8-8 1.85 0 3.55.63 4.9 1.69L5.69 16.9C4.63 15.55 4 13.85 4 12zm8 8c-1.85 0-3.55-.63-4.9-1.69L18.31 7.1C19.37 8.45 20 10.15 20 12c0 4.42-3.58 8-8 8z\"}}]})(props);\n};\nexport function MdClear (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\"}}]})(props);\n};\nexport function MdContentCopy (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M16 1H4c-1.1 0-2 .9-2 2v14h2V3h12V1zm3 4H8c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h11c1.1 0 2-.9 2-2V7c0-1.1-.9-2-2-2zm0 16H8V7h11v14z\"}}]})(props);\n};\nexport function MdContentCut (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M9.64 7.64c.23-.5.36-1.05.36-1.64 0-2.21-1.79-4-4-4S2 3.79 2 6s1.79 4 4 4c.59 0 1.14-.13 1.64-.36L10 12l-2.36 2.36C7.14 14.13 6.59 14 6 14c-2.21 0-4 1.79-4 4s1.79 4 4 4 4-1.79 4-4c0-.59-.13-1.14-.36-1.64L12 14l7 7h3v-1L9.64 7.64zM6 8c-1.1 0-2-.89-2-2s.9-2 2-2 2 .89 2 2-.9 2-2 2zm0 12c-1.1 0-2-.89-2-2s.9-2 2-2 2 .89 2 2-.9 2-2 2zm6-7.5c-.28 0-.5-.22-.5-.5s.22-.5.5-.5.5.22.5.5-.22.5-.5.5zM19 3l-6 6 2 2 7-7V3z\"}}]})(props);\n};\nexport function MdContentPaste (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M19 2h-4.18C14.4.84 13.3 0 12 0c-1.3 0-2.4.84-2.82 2H5c-1.1 0-2 .9-2 2v16c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm-7 0c.55 0 1 .45 1 1s-.45 1-1 1-1-.45-1-1 .45-1 1-1zm7 18H5V4h2v3h10V4h2v16z\"}}]})(props);\n};\nexport function MdCreate (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34c-.39-.39-1.02-.39-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z\"}}]})(props);\n};\nexport function MdDeleteSweep (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M15 16h4v2h-4zm0-8h7v2h-7zm0 4h6v2h-6zM3 18c0 1.1.9 2 2 2h6c1.1 0 2-.9 2-2V8H3v10zM14 5h-3l-1-1H6L5 5H2v2h12z\"}}]})(props);\n};\nexport function MdDrafts (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M21.99 8c0-.72-.37-1.35-.94-1.7L12 1 2.95 6.3C2.38 6.65 2 7.28 2 8v10c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2l-.01-10zM12 13L3.74 7.84 12 3l8.26 4.84L12 13z\"}}]})(props);\n};\nexport function MdFilterList (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M10 18h4v-2h-4v2zM3 6v2h18V6H3zm3 7h12v-2H6v2z\"}}]})(props);\n};\nexport function MdFlag (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M14.4 6L14 4H5v17h2v-7h5.6l.4 2h7V6z\"}}]})(props);\n};\nexport function MdFontDownload (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"baseProfile\":\"tiny\",\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M9.93 13.5h4.14L12 7.98zM20 2H4c-1.1 0-2 .9-2 2v16c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm-4.05 16.5l-1.14-3H9.17l-1.12 3H5.96l5.11-13h1.86l5.11 13h-2.09z\"}}]})(props);\n};\nexport function MdForward (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 8V4l8 8-8 8v-4H4V8z\"}}]})(props);\n};\nexport function MdGesture (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M4.59 6.89c.7-.71 1.4-1.35 1.71-1.22.5.2 0 1.03-.3 1.52-.25.42-2.86 3.89-2.86 6.31 0 1.28.48 2.34 1.34 2.98.75.56 1.74.73 2.64.46 1.07-.31 1.95-1.4 3.06-2.77 1.21-1.49 2.83-3.44 4.08-3.44 1.63 0 1.65 1.01 1.76 1.79-3.78.64-5.38 3.67-5.38 5.37 0 1.7 1.44 3.09 3.21 3.09 1.63 0 4.29-1.33 4.69-6.1H21v-2.5h-2.47c-.15-1.65-1.09-4.2-4.03-4.2-2.25 0-4.18 1.91-4.94 2.84-.58.73-2.06 2.48-2.29 2.72-.25.3-.68.84-1.11.84-.45 0-.72-.83-.36-1.92.35-1.09 1.4-2.86 1.85-3.52.78-1.14 1.3-1.92 1.3-3.28C8.95 3.69 7.31 3 6.44 3 5.12 3 3.97 4 3.72 4.25c-.36.36-.66.66-.88.93l1.75 1.71zm9.29 11.66c-.31 0-.74-.26-.74-.72 0-.6.73-2.2 2.87-2.76-.3 2.69-1.43 3.48-2.13 3.48z\"}}]})(props);\n};\nexport function MdInbox (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M19 3H4.99c-1.11 0-1.98.89-1.98 2L3 19c0 1.1.88 2 1.99 2H19c1.1 0 2-.9 2-2V5c0-1.11-.9-2-2-2zm0 12h-4c0 1.66-1.35 3-3 3s-3-1.34-3-3H4.99V5H19v10z\"}}]})(props);\n};\nexport function MdLink (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76 0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71 0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71 0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76 0 5-2.24 5-5s-2.24-5-5-5z\"}}]})(props);\n};\nexport function MdLowPriority (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M14 5h8v2h-8zm0 5.5h8v2h-8zm0 5.5h8v2h-8zM2 11.5C2 15.08 4.92 18 8.5 18H9v2l3-3-3-3v2h-.5C6.02 16 4 13.98 4 11.5S6.02 7 8.5 7H12V5H8.5C4.92 5 2 7.92 2 11.5z\"}}]})(props);\n};\nexport function MdMail (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M20 4H4c-1.1 0-1.99.9-1.99 2L2 18c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm0 4l-8 5-8-5V6l8 5 8-5v2z\"}}]})(props);\n};\nexport function MdMarkunread (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M20 4H4c-1.1 0-1.99.9-1.99 2L2 18c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm0 4l-8 5-8-5V6l8 5 8-5v2z\"}}]})(props);\n};\nexport function MdMoveToInbox (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M19 3H4.99c-1.11 0-1.98.9-1.98 2L3 19c0 1.1.88 2 1.99 2H19c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 12h-4c0 1.66-1.35 3-3 3s-3-1.34-3-3H4.99V5H19v10zm-3-5h-2V7h-4v3H8l4 4 4-4z\"}}]})(props);\n};\nexport function MdNextWeek (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M20 7h-4V5c0-.55-.22-1.05-.59-1.41C15.05 3.22 14.55 3 14 3h-4c-1.1 0-2 .9-2 2v2H4c-1.1 0-2 .9-2 2v11c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V9c0-1.1-.9-2-2-2zM10 5h4v2h-4V5zm1 13.5l-1-1 3-3-3-3 1-1 4 4-4 4z\"}}]})(props);\n};\nexport function MdRedo (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M18.4 10.6C16.55 8.99 14.15 8 11.5 8c-4.65 0-8.58 3.03-9.96 7.22L3.9 16c1.05-3.19 4.05-5.5 7.6-5.5 1.95 0 3.73.72 5.12 1.88L13 16h9V7l-3.6 3.6z\"}}]})(props);\n};\nexport function MdRemove (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M19 13H5v-2h14v2z\"}}]})(props);\n};\nexport function MdRemoveCircle (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm5 11H7v-2h10v2z\"}}]})(props);\n};\nexport function MdRemoveCircleOutline (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M7 11v2h10v-2H7zm5-9C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z\"}}]})(props);\n};\nexport function MdReply (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M10 9V5l-7 7 7 7v-4.1c5 0 8.5 1.6 11 5.1-1-5-4-10-11-11z\"}}]})(props);\n};\nexport function MdReplyAll (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M7 8V5l-7 7 7 7v-3l-4-4 4-4zm6 1V5l-7 7 7 7v-4.1c5 0 8.5 1.6 11 5.1-1-5-4-10-11-11z\"}}]})(props);\n};\nexport function MdReport (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M15.73 3H8.27L3 8.27v7.46L8.27 21h7.46L21 15.73V8.27L15.73 3zM12 17.3c-.72 0-1.3-.58-1.3-1.3 0-.72.58-1.3 1.3-1.3.72 0 1.3.58 1.3 1.3 0 .72-.58 1.3-1.3 1.3zm1-4.3h-2V7h2v6z\"}}]})(props);\n};\nexport function MdSave (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M17 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V7l-4-4zm-5 16c-1.66 0-3-1.34-3-3s1.34-3 3-3 3 1.34 3 3-1.34 3-3 3zm3-10H5V5h10v4z\"}}]})(props);\n};\nexport function MdSelectAll (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M3 5h2V3c-1.1 0-2 .9-2 2zm0 8h2v-2H3v2zm4 8h2v-2H7v2zM3 9h2V7H3v2zm10-6h-2v2h2V3zm6 0v2h2c0-1.1-.9-2-2-2zM5 21v-2H3c0 1.1.9 2 2 2zm-2-4h2v-2H3v2zM9 3H7v2h2V3zm2 18h2v-2h-2v2zm8-8h2v-2h-2v2zm0 8c1.1 0 2-.9 2-2h-2v2zm0-12h2V7h-2v2zm0 8h2v-2h-2v2zm-4 4h2v-2h-2v2zm0-16h2V3h-2v2zM7 17h10V7H7v10zm2-8h6v6H9V9z\"}}]})(props);\n};\nexport function MdSend (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M2.01 21L23 12 2.01 3 2 10l15 2-15 2z\"}}]})(props);\n};\nexport function MdSort (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M3 18h6v-2H3v2zM3 6v2h18V6H3zm0 7h12v-2H3v2z\"}}]})(props);\n};\nexport function MdTextFormat (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M5 17v2h14v-2H5zm4.5-4.2h5l.9 2.2h2.1L12.75 4h-1.5L6.5 15h2.1l.9-2.2zM12 5.98L13.87 11h-3.74L12 5.98z\"}}]})(props);\n};\nexport function MdUnarchive (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M20.55 5.22l-1.39-1.68C18.88 3.21 18.47 3 18 3H6c-.47 0-.88.21-1.15.55L3.46 5.22C3.17 5.57 3 6.01 3 6.5V19c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V6.5c0-.49-.17-.93-.45-1.28zM12 9.5l5.5 5.5H14v2h-4v-2H6.5L12 9.5zM5.12 5l.82-1h12l.93 1H5.12z\"}}]})(props);\n};\nexport function MdUndo (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12.5 8c-2.65 0-5.05.99-6.9 2.6L2 7v9h9l-3.62-3.62c1.39-1.16 3.16-1.88 5.12-1.88 3.54 0 6.55 2.31 7.6 5.5l2.37-.78C21.08 11.03 17.15 8 12.5 8z\"}}]})(props);\n};\nexport function MdWeekend (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M21 10c-1.1 0-2 .9-2 2v3H5v-3c0-1.1-.9-2-2-2s-2 .9-2 2v5c0 1.1.9 2 2 2h18c1.1 0 2-.9 2-2v-5c0-1.1-.9-2-2-2zm-3-5H6c-1.1 0-2 .9-2 2v2.15c1.16.41 2 1.51 2 2.82V14h12v-2.03c0-1.3.84-2.4 2-2.82V7c0-1.1-.9-2-2-2z\"}}]})(props);\n};\nexport function MdAccessAlarm (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M22 5.72l-4.6-3.86-1.29 1.53 4.6 3.86L22 5.72zM7.88 3.39L6.6 1.86 2 5.71l1.29 1.53 4.59-3.85zM12.5 8H11v6l4.75 2.85.75-1.23-4-2.37V8zM12 4c-4.97 0-9 4.03-9 9s4.02 9 9 9c4.97 0 9-4.03 9-9s-4.03-9-9-9zm0 16c-3.87 0-7-3.13-7-7s3.13-7 7-7 7 3.13 7 7-3.13 7-7 7z\"}}]})(props);\n};\nexport function MdAccessAlarms (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M22 5.7l-4.6-3.9-1.3 1.5 4.6 3.9L22 5.7zM7.9 3.4L6.6 1.9 2 5.7l1.3 1.5 4.6-3.8zM12.5 8H11v6l4.7 2.9.8-1.2-4-2.4V8zM12 4c-5 0-9 4-9 9s4 9 9 9 9-4 9-9-4-9-9-9zm0 16c-3.9 0-7-3.1-7-7s3.1-7 7-7 7 3.1 7 7-3.1 7-7 7z\"}}]})(props);\n};\nexport function MdAccessTime (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M11.99 2C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8zm.5-13H11v6l5.25 3.15.75-1.23-4.5-2.67z\"}}]})(props);\n};\nexport function MdAddAlarm (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M7.88 3.39L6.6 1.86 2 5.71l1.29 1.53 4.59-3.85zM22 5.72l-4.6-3.86-1.29 1.53 4.6 3.86L22 5.72zM12 4c-4.97 0-9 4.03-9 9s4.02 9 9 9c4.97 0 9-4.03 9-9s-4.03-9-9-9zm0 16c-3.87 0-7-3.13-7-7s3.13-7 7-7 7 3.13 7 7-3.13 7-7 7zm1-11h-2v3H8v2h3v3h2v-3h3v-2h-3V9z\"}}]})(props);\n};\nexport function MdAirplanemodeActive (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M10.18 9\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M21 16v-2l-8-5V3.5c0-.83-.67-1.5-1.5-1.5S10 2.67 10 3.5V9l-8 5v2l8-2.5V19l-2 1.5V22l3.5-1 3.5 1v-1.5L13 19v-5.5l8 2.5z\"}}]})(props);\n};\nexport function MdAirplanemodeInactive (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M13 9V3.5c0-.83-.67-1.5-1.5-1.5S10 2.67 10 3.5v3.68l7.83 7.83L21 16v-2l-8-5zM3 5.27l4.99 4.99L2 14v2l8-2.5V19l-2 1.5V22l3.5-1 3.5 1v-1.5L13 19v-3.73L18.73 21 20 19.73 4.27 4 3 5.27z\"}}]})(props);\n};\nexport function MdBattery20 (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M7 17v3.67C7 21.4 7.6 22 8.33 22h7.33c.74 0 1.34-.6 1.34-1.33V17H7z\"}},{\"tag\":\"path\",\"attr\":{\"fillOpacity\":\".3\",\"d\":\"M17 5.33C17 4.6 16.4 4 15.67 4H14V2h-4v2H8.33C7.6 4 7 4.6 7 5.33V17h10V5.33z\"}}]})(props);\n};\nexport function MdBattery30 (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillOpacity\":\".3\",\"d\":\"M17 5.33C17 4.6 16.4 4 15.67 4H14V2h-4v2H8.33C7.6 4 7 4.6 7 5.33V15h10V5.33z\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M7 15v5.67C7 21.4 7.6 22 8.33 22h7.33c.74 0 1.34-.6 1.34-1.33V15H7z\"}}]})(props);\n};\nexport function MdBattery50 (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillOpacity\":\".3\",\"d\":\"M17 5.33C17 4.6 16.4 4 15.67 4H14V2h-4v2H8.33C7.6 4 7 4.6 7 5.33V13h10V5.33z\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M7 13v7.67C7 21.4 7.6 22 8.33 22h7.33c.74 0 1.34-.6 1.34-1.33V13H7z\"}}]})(props);\n};\nexport function MdBattery60 (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillOpacity\":\".3\",\"d\":\"M17 5.33C17 4.6 16.4 4 15.67 4H14V2h-4v2H8.33C7.6 4 7 4.6 7 5.33V11h10V5.33z\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M7 11v9.67C7 21.4 7.6 22 8.33 22h7.33c.74 0 1.34-.6 1.34-1.33V11H7z\"}}]})(props);\n};\nexport function MdBattery80 (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillOpacity\":\".3\",\"d\":\"M17 5.33C17 4.6 16.4 4 15.67 4H14V2h-4v2H8.33C7.6 4 7 4.6 7 5.33V9h10V5.33z\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M7 9v11.67C7 21.4 7.6 22 8.33 22h7.33c.74 0 1.34-.6 1.34-1.33V9H7z\"}}]})(props);\n};\nexport function MdBattery90 (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillOpacity\":\".3\",\"d\":\"M17 5.33C17 4.6 16.4 4 15.67 4H14V2h-4v2H8.33C7.6 4 7 4.6 7 5.33V8h10V5.33z\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M7 8v12.67C7 21.4 7.6 22 8.33 22h7.33c.74 0 1.34-.6 1.34-1.33V8H7z\"}}]})(props);\n};\nexport function MdBatteryAlert (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M15.67 4H14V2h-4v2H8.33C7.6 4 7 4.6 7 5.33v15.33C7 21.4 7.6 22 8.33 22h7.33c.74 0 1.34-.6 1.34-1.33V5.33C17 4.6 16.4 4 15.67 4zM13 18h-2v-2h2v2zm0-4h-2V9h2v5z\"}}]})(props);\n};\nexport function MdBatteryCharging20 (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M11 20v-3H7v3.67C7 21.4 7.6 22 8.33 22h7.33c.74 0 1.34-.6 1.34-1.33V17h-4.4L11 20z\"}},{\"tag\":\"path\",\"attr\":{\"fillOpacity\":\".3\",\"d\":\"M15.67 4H14V2h-4v2H8.33C7.6 4 7 4.6 7 5.33V17h4v-2.5H9L13 7v5.5h2L12.6 17H17V5.33C17 4.6 16.4 4 15.67 4z\"}}]})(props);\n};\nexport function MdBatteryCharging30 (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillOpacity\":\".3\",\"d\":\"M15.67 4H14V2h-4v2H8.33C7.6 4 7 4.6 7 5.33v9.17h2L13 7v5.5h2l-1.07 2H17V5.33C17 4.6 16.4 4 15.67 4z\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M11 20v-5.5H7v6.17C7 21.4 7.6 22 8.33 22h7.33c.74 0 1.34-.6 1.34-1.33V14.5h-3.07L11 20z\"}}]})(props);\n};\nexport function MdBatteryCharging50 (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M14.47 13.5L11 20v-5.5H9l.53-1H7v7.17C7 21.4 7.6 22 8.33 22h7.33c.74 0 1.34-.6 1.34-1.33V13.5h-2.53z\"}},{\"tag\":\"path\",\"attr\":{\"fillOpacity\":\".3\",\"d\":\"M15.67 4H14V2h-4v2H8.33C7.6 4 7 4.6 7 5.33v8.17h2.53L13 7v5.5h2l-.53 1H17V5.33C17 4.6 16.4 4 15.67 4z\"}}]})(props);\n};\nexport function MdBatteryCharging60 (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillOpacity\":\".3\",\"d\":\"M15.67 4H14V2h-4v2H8.33C7.6 4 7 4.6 7 5.33V11h3.87L13 7v4h4V5.33C17 4.6 16.4 4 15.67 4z\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M13 12.5h2L11 20v-5.5H9l1.87-3.5H7v9.67C7 21.4 7.6 22 8.33 22h7.33c.74 0 1.34-.6 1.34-1.33V11h-4v1.5z\"}}]})(props);\n};\nexport function MdBatteryCharging80 (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillOpacity\":\".3\",\"d\":\"M15.67 4H14V2h-4v2H8.33C7.6 4 7 4.6 7 5.33V9h4.93L13 7v2h4V5.33C17 4.6 16.4 4 15.67 4z\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M13 12.5h2L11 20v-5.5H9L11.93 9H7v11.67C7 21.4 7.6 22 8.33 22h7.33c.74 0 1.34-.6 1.34-1.33V9h-4v3.5z\"}}]})(props);\n};\nexport function MdBatteryCharging90 (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillOpacity\":\".3\",\"d\":\"M15.67 4H14V2h-4v2H8.33C7.6 4 7 4.6 7 5.33V8h5.47L13 7v1h4V5.33C17 4.6 16.4 4 15.67 4z\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M13 12.5h2L11 20v-5.5H9L12.47 8H7v12.67C7 21.4 7.6 22 8.33 22h7.33c.74 0 1.34-.6 1.34-1.33V8h-4v4.5z\"}}]})(props);\n};\nexport function MdBatteryChargingFull (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M15.67 4H14V2h-4v2H8.33C7.6 4 7 4.6 7 5.33v15.33C7 21.4 7.6 22 8.33 22h7.33c.74 0 1.34-.6 1.34-1.33V5.33C17 4.6 16.4 4 15.67 4zM11 20v-5.5H9L13 7v5.5h2L11 20z\"}}]})(props);\n};\nexport function MdBatteryFull (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M15.67 4H14V2h-4v2H8.33C7.6 4 7 4.6 7 5.33v15.33C7 21.4 7.6 22 8.33 22h7.33c.74 0 1.34-.6 1.34-1.33V5.33C17 4.6 16.4 4 15.67 4z\"}}]})(props);\n};\nexport function MdBatteryStd (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M15.67 4H14V2h-4v2H8.33C7.6 4 7 4.6 7 5.33v15.33C7 21.4 7.6 22 8.33 22h7.33c.74 0 1.34-.6 1.34-1.33V5.33C17 4.6 16.4 4 15.67 4z\"}}]})(props);\n};\nexport function MdBatteryUnknown (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M15.67 4H14V2h-4v2H8.33C7.6 4 7 4.6 7 5.33v15.33C7 21.4 7.6 22 8.33 22h7.33c.74 0 1.34-.6 1.34-1.33V5.33C17 4.6 16.4 4 15.67 4zm-2.72 13.95h-1.9v-1.9h1.9v1.9zm1.35-5.26s-.38.42-.67.71c-.48.48-.83 1.15-.83 1.6h-1.6c0-.83.46-1.52.93-2l.93-.94c.27-.27.44-.65.44-1.06 0-.83-.67-1.5-1.5-1.5s-1.5.67-1.5 1.5H9c0-1.66 1.34-3 3-3s3 1.34 3 3c0 .66-.27 1.26-.7 1.69z\"}}]})(props);\n};\nexport function MdBluetooth (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M17.71 7.71L12 2h-1v7.59L6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 11 14.41V22h1l5.71-5.71-4.3-4.29 4.3-4.29zM13 5.83l1.88 1.88L13 9.59V5.83zm1.88 10.46L13 18.17v-3.76l1.88 1.88z\"}}]})(props);\n};\nexport function MdBluetoothConnected (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M7 12l-2-2-2 2 2 2 2-2zm10.71-4.29L12 2h-1v7.59L6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 11 14.41V22h1l5.71-5.71-4.3-4.29 4.3-4.29zM13 5.83l1.88 1.88L13 9.59V5.83zm1.88 10.46L13 18.17v-3.76l1.88 1.88zM19 10l-2 2 2 2 2-2-2-2z\"}}]})(props);\n};\nexport function MdBluetoothDisabled (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M13 5.83l1.88 1.88-1.6 1.6 1.41 1.41 3.02-3.02L12 2h-1v5.03l2 2v-3.2zM5.41 4L4 5.41 10.59 12 5 17.59 6.41 19 11 14.41V22h1l4.29-4.29 2.3 2.29L20 18.59 5.41 4zM13 18.17v-3.76l1.88 1.88L13 18.17z\"}}]})(props);\n};\nexport function MdBluetoothSearching (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M14.24 12.01l2.32 2.32c.28-.72.44-1.51.44-2.33 0-.82-.16-1.59-.43-2.31l-2.33 2.32zm5.29-5.3l-1.26 1.26c.63 1.21.98 2.57.98 4.02s-.36 2.82-.98 4.02l1.2 1.2c.97-1.54 1.54-3.36 1.54-5.31-.01-1.89-.55-3.67-1.48-5.19zm-3.82 1L10 2H9v7.59L4.41 5 3 6.41 8.59 12 3 17.59 4.41 19 9 14.41V22h1l5.71-5.71-4.3-4.29 4.3-4.29zM11 5.83l1.88 1.88L11 9.59V5.83zm1.88 10.46L11 18.17v-3.76l1.88 1.88z\"}}]})(props);\n};\nexport function MdBrightnessAuto (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M10.85 12.65h2.3L12 9l-1.15 3.65zM20 8.69V4h-4.69L12 .69 8.69 4H4v4.69L.69 12 4 15.31V20h4.69L12 23.31 15.31 20H20v-4.69L23.31 12 20 8.69zM14.3 16l-.7-2h-3.2l-.7 2H7.8L11 7h2l3.2 9h-1.9z\"}}]})(props);\n};\nexport function MdBrightnessHigh (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M20 8.69V4h-4.69L12 .69 8.69 4H4v4.69L.69 12 4 15.31V20h4.69L12 23.31 15.31 20H20v-4.69L23.31 12 20 8.69zM12 18c-3.31 0-6-2.69-6-6s2.69-6 6-6 6 2.69 6 6-2.69 6-6 6zm0-10c-2.21 0-4 1.79-4 4s1.79 4 4 4 4-1.79 4-4-1.79-4-4-4z\"}}]})(props);\n};\nexport function MdBrightnessLow (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M20 15.31L23.31 12 20 8.69V4h-4.69L12 .69 8.69 4H4v4.69L.69 12 4 15.31V20h4.69L12 23.31 15.31 20H20v-4.69zM12 18c-3.31 0-6-2.69-6-6s2.69-6 6-6 6 2.69 6 6-2.69 6-6 6z\"}}]})(props);\n};\nexport function MdBrightnessMedium (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M20 15.31L23.31 12 20 8.69V4h-4.69L12 .69 8.69 4H4v4.69L.69 12 4 15.31V20h4.69L12 23.31 15.31 20H20v-4.69zM12 18V6c3.31 0 6 2.69 6 6s-2.69 6-6 6z\"}}]})(props);\n};\nexport function MdDataUsage (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M13 2.05v3.03c3.39.49 6 3.39 6 6.92 0 .9-.18 1.75-.48 2.54l2.6 1.53c.56-1.24.88-2.62.88-4.07 0-5.18-3.95-9.45-9-9.95zM12 19c-3.87 0-7-3.13-7-7 0-3.53 2.61-6.43 6-6.92V2.05c-5.06.5-9 4.76-9 9.95 0 5.52 4.47 10 9.99 10 3.31 0 6.24-1.61 8.06-4.09l-2.6-1.53C16.17 17.98 14.21 19 12 19z\"}}]})(props);\n};\nexport function MdDeveloperMode (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M7 5h10v2h2V3c0-1.1-.9-1.99-2-1.99L7 1c-1.1 0-2 .9-2 2v4h2V5zm8.41 11.59L20 12l-4.59-4.59L14 8.83 17.17 12 14 15.17l1.41 1.42zM10 15.17L6.83 12 10 8.83 8.59 7.41 4 12l4.59 4.59L10 15.17zM17 19H7v-2H5v4c0 1.1.9 2 2 2h10c1.1 0 2-.9 2-2v-4h-2v2z\"}}]})(props);\n};\nexport function MdDevices (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M4 6h18V4H4c-1.1 0-2 .9-2 2v11H0v3h14v-3H4V6zm19 2h-6c-.55 0-1 .45-1 1v10c0 .55.45 1 1 1h6c.55 0 1-.45 1-1V9c0-.55-.45-1-1-1zm-1 9h-4v-7h4v7z\"}}]})(props);\n};\nexport function MdDvr (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M21 3H3c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h5v2h8v-2h5c1.1 0 1.99-.9 1.99-2L23 5c0-1.1-.9-2-2-2zm0 14H3V5h18v12zm-2-9H8v2h11V8zm0 4H8v2h11v-2zM7 8H5v2h2V8zm0 4H5v2h2v-2z\"}}]})(props);\n};\nexport function MdGpsFixed (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 8c-2.21 0-4 1.79-4 4s1.79 4 4 4 4-1.79 4-4-1.79-4-4-4zm8.94 3c-.46-4.17-3.77-7.48-7.94-7.94V1h-2v2.06C6.83 3.52 3.52 6.83 3.06 11H1v2h2.06c.46 4.17 3.77 7.48 7.94 7.94V23h2v-2.06c4.17-.46 7.48-3.77 7.94-7.94H23v-2h-2.06zM12 19c-3.87 0-7-3.13-7-7s3.13-7 7-7 7 3.13 7 7-3.13 7-7 7z\"}}]})(props);\n};\nexport function MdGpsNotFixed (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M20.94 11c-.46-4.17-3.77-7.48-7.94-7.94V1h-2v2.06C6.83 3.52 3.52 6.83 3.06 11H1v2h2.06c.46 4.17 3.77 7.48 7.94 7.94V23h2v-2.06c4.17-.46 7.48-3.77 7.94-7.94H23v-2h-2.06zM12 19c-3.87 0-7-3.13-7-7s3.13-7 7-7 7 3.13 7 7-3.13 7-7 7z\"}}]})(props);\n};\nexport function MdGpsOff (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M20.94 11c-.46-4.17-3.77-7.48-7.94-7.94V1h-2v2.06c-1.13.12-2.19.46-3.16.97l1.5 1.5C10.16 5.19 11.06 5 12 5c3.87 0 7 3.13 7 7 0 .94-.19 1.84-.52 2.65l1.5 1.5c.5-.96.84-2.02.97-3.15H23v-2h-2.06zM3 4.27l2.04 2.04C3.97 7.62 3.25 9.23 3.06 11H1v2h2.06c.46 4.17 3.77 7.48 7.94 7.94V23h2v-2.06c1.77-.2 3.38-.91 4.69-1.98L19.73 21 21 19.73 4.27 3 3 4.27zm13.27 13.27C15.09 18.45 13.61 19 12 19c-3.87 0-7-3.13-7-7 0-1.61.55-3.09 1.46-4.27l9.81 9.81z\"}}]})(props);\n};\nexport function MdGraphicEq (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M7 18h2V6H7v12zm4 4h2V2h-2v20zm-8-8h2v-4H3v4zm12 4h2V6h-2v12zm4-8v4h2v-4h-2z\"}}]})(props);\n};\nexport function MdLocationDisabled (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M20.94 11c-.46-4.17-3.77-7.48-7.94-7.94V1h-2v2.06c-1.13.12-2.19.46-3.16.97l1.5 1.5C10.16 5.19 11.06 5 12 5c3.87 0 7 3.13 7 7 0 .94-.19 1.84-.52 2.65l1.5 1.5c.5-.96.84-2.02.97-3.15H23v-2h-2.06zM3 4.27l2.04 2.04C3.97 7.62 3.25 9.23 3.06 11H1v2h2.06c.46 4.17 3.77 7.48 7.94 7.94V23h2v-2.06c1.77-.2 3.38-.91 4.69-1.98L19.73 21 21 19.73 4.27 3 3 4.27zm13.27 13.27C15.09 18.45 13.61 19 12 19c-3.87 0-7-3.13-7-7 0-1.61.55-3.09 1.46-4.27l9.81 9.81z\"}}]})(props);\n};\nexport function MdLocationSearching (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M20.94 11c-.46-4.17-3.77-7.48-7.94-7.94V1h-2v2.06C6.83 3.52 3.52 6.83 3.06 11H1v2h2.06c.46 4.17 3.77 7.48 7.94 7.94V23h2v-2.06c4.17-.46 7.48-3.77 7.94-7.94H23v-2h-2.06zM12 19c-3.87 0-7-3.13-7-7s3.13-7 7-7 7 3.13 7 7-3.13 7-7 7z\"}}]})(props);\n};\nexport function MdNetworkCell (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillOpacity\":\".3\",\"d\":\"M2 22h20V2z\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M17 7L2 22h15z\"}}]})(props);\n};\nexport function MdNetworkWifi (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillOpacity\":\".3\",\"d\":\"M12.01 21.49L23.64 7c-.45-.34-4.93-4-11.64-4C5.28 3 .81 6.66.36 7l11.63 14.49.01.01.01-.01z\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M3.53 10.95l8.46 10.54.01.01.01-.01 8.46-10.54C20.04 10.62 16.81 8 12 8c-4.81 0-8.04 2.62-8.47 2.95z\"}}]})(props);\n};\nexport function MdNfc (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M20 2H4c-1.1 0-2 .9-2 2v16c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm0 18H4V4h16v16zM18 6h-5c-1.1 0-2 .9-2 2v2.28c-.6.35-1 .98-1 1.72 0 1.1.9 2 2 2s2-.9 2-2c0-.74-.4-1.38-1-1.72V8h3v8H8V8h2V6H6v12h12V6z\"}}]})(props);\n};\nexport function MdScreenLockLandscape (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M21 5H3c-1.1 0-2 .9-2 2v10c0 1.1.9 2 2 2h18c1.1 0 2-.9 2-2V7c0-1.1-.9-2-2-2zm-2 12H5V7h14v10zm-9-1h4c.55 0 1-.45 1-1v-3c0-.55-.45-1-1-1v-1c0-1.11-.9-2-2-2-1.11 0-2 .9-2 2v1c-.55 0-1 .45-1 1v3c0 .55.45 1 1 1zm.8-6c0-.66.54-1.2 1.2-1.2.66 0 1.2.54 1.2 1.2v1h-2.4v-1z\"}}]})(props);\n};\nexport function MdScreenLockPortrait (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M10 16h4c.55 0 1-.45 1-1v-3c0-.55-.45-1-1-1v-1c0-1.11-.9-2-2-2-1.11 0-2 .9-2 2v1c-.55 0-1 .45-1 1v3c0 .55.45 1 1 1zm.8-6c0-.66.54-1.2 1.2-1.2.66 0 1.2.54 1.2 1.2v1h-2.4v-1zM17 1H7c-1.1 0-2 .9-2 2v18c0 1.1.9 2 2 2h10c1.1 0 2-.9 2-2V3c0-1.1-.9-2-2-2zm0 18H7V5h10v14z\"}}]})(props);\n};\nexport function MdScreenLockRotation (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M23.25 12.77l-2.57-2.57-1.41 1.41 2.22 2.22-5.66 5.66L4.51 8.17l5.66-5.66 2.1 2.1 1.41-1.41L11.23.75c-.59-.59-1.54-.59-2.12 0L2.75 7.11c-.59.59-.59 1.54 0 2.12l12.02 12.02c.59.59 1.54.59 2.12 0l6.36-6.36c.59-.59.59-1.54 0-2.12zM8.47 20.48C5.2 18.94 2.86 15.76 2.5 12H1c.51 6.16 5.66 11 11.95 11l.66-.03-3.81-3.82-1.33 1.33zM16 9h5c.55 0 1-.45 1-1V4c0-.55-.45-1-1-1v-.5C21 1.12 19.88 0 18.5 0S16 1.12 16 2.5V3c-.55 0-1 .45-1 1v4c0 .55.45 1 1 1zm.8-6.5c0-.94.76-1.7 1.7-1.7s1.7.76 1.7 1.7V3h-3.4v-.5z\"}}]})(props);\n};\nexport function MdScreenRotation (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M16.48 2.52c3.27 1.55 5.61 4.72 5.97 8.48h1.5C23.44 4.84 18.29 0 12 0l-.66.03 3.81 3.81 1.33-1.32zm-6.25-.77c-.59-.59-1.54-.59-2.12 0L1.75 8.11c-.59.59-.59 1.54 0 2.12l12.02 12.02c.59.59 1.54.59 2.12 0l6.36-6.36c.59-.59.59-1.54 0-2.12L10.23 1.75zm4.6 19.44L2.81 9.17l6.36-6.36 12.02 12.02-6.36 6.36zm-7.31.29C4.25 19.94 1.91 16.76 1.55 13H.05C.56 19.16 5.71 24 12 24l.66-.03-3.81-3.81-1.33 1.32z\"}}]})(props);\n};\nexport function MdSdStorage (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M18 2h-8L4.02 8 4 20c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm-6 6h-2V4h2v4zm3 0h-2V4h2v4zm3 0h-2V4h2v4z\"}}]})(props);\n};\nexport function MdSettingsSystemDaydream (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M9 16h6.5c1.38 0 2.5-1.12 2.5-2.5S16.88 11 15.5 11h-.05c-.24-1.69-1.69-3-3.45-3-1.4 0-2.6.83-3.16 2.02h-.16C7.17 10.18 6 11.45 6 13c0 1.66 1.34 3 3 3zM21 3H3c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h18c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16.01H3V4.99h18v14.02z\"}}]})(props);\n};\nexport function MdSignalCellular0Bar (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillOpacity\":\".3\",\"d\":\"M2 22h20V2z\"}}]})(props);\n};\nexport function MdSignalCellular1Bar (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillOpacity\":\".3\",\"d\":\"M2 22h20V2z\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M12 12L2 22h10z\"}}]})(props);\n};\nexport function MdSignalCellular2Bar (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillOpacity\":\".3\",\"d\":\"M2 22h20V2z\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M14 10L2 22h12z\"}}]})(props);\n};\nexport function MdSignalCellular3Bar (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillOpacity\":\".3\",\"d\":\"M2 22h20V2z\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M17 7L2 22h15z\"}}]})(props);\n};\nexport function MdSignalCellular4Bar (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M2 22h20V2z\"}}]})(props);\n};\nexport function MdSignalCellularConnectedNoInternet0Bar (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillOpacity\":\".3\",\"d\":\"M22 8V2L2 22h16V8z\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M20 22h2v-2h-2v2zm0-12v8h2v-8h-2z\"}}]})(props);\n};\nexport function MdSignalCellularConnectedNoInternet1Bar (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillOpacity\":\".3\",\"d\":\"M22 8V2L2 22h16V8z\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M20 10v8h2v-8h-2zm-8 12V12L2 22h10zm8 0h2v-2h-2v2z\"}}]})(props);\n};\nexport function MdSignalCellularConnectedNoInternet2Bar (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillOpacity\":\".3\",\"d\":\"M22 8V2L2 22h16V8z\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M14 22V10L2 22h12zm6-12v8h2v-8h-2zm0 12h2v-2h-2v2z\"}}]})(props);\n};\nexport function MdSignalCellularConnectedNoInternet3Bar (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillOpacity\":\".3\",\"d\":\"M22 8V2L2 22h16V8z\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M17 22V7L2 22h15zm3-12v8h2v-8h-2zm0 12h2v-2h-2v2z\"}}]})(props);\n};\nexport function MdSignalCellularConnectedNoInternet4Bar (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M20 18h2v-8h-2v8zm0 4h2v-2h-2v2zM2 22h16V8h4V2L2 22z\"}}]})(props);\n};\nexport function MdSignalCellularNoSim (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M18.99 5c0-1.1-.89-2-1.99-2h-7L7.66 5.34 19 16.68 18.99 5zM3.65 3.88L2.38 5.15 5 7.77V19c0 1.1.9 2 2 2h10.01c.35 0 .67-.1.96-.26l1.88 1.88 1.27-1.27L3.65 3.88z\"}}]})(props);\n};\nexport function MdSignalCellularNull (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M20 6.83V20H6.83L20 6.83M22 2L2 22h20V2z\"}}]})(props);\n};\nexport function MdSignalCellularOff (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M21 1l-8.59 8.59L21 18.18V1zM4.77 4.5L3.5 5.77l6.36 6.36L1 21h17.73l2 2L22 21.73 4.77 4.5z\"}}]})(props);\n};\nexport function MdSignalWifi0Bar (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillOpacity\":\".3\",\"d\":\"M12.01 21.49L23.64 7c-.45-.34-4.93-4-11.64-4C5.28 3 .81 6.66.36 7l11.63 14.49.01.01.01-.01z\"}}]})(props);\n};\nexport function MdSignalWifi1Bar (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillOpacity\":\".3\",\"d\":\"M12.01 21.49L23.64 7c-.45-.34-4.93-4-11.64-4C5.28 3 .81 6.66.36 7l11.63 14.49.01.01.01-.01z\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M6.67 14.86L12 21.49v.01l.01-.01 5.33-6.63C17.06 14.65 15.03 13 12 13s-5.06 1.65-5.33 1.86z\"}}]})(props);\n};\nexport function MdSignalWifi1BarLock (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M23 16v-1.5c0-1.4-1.1-2.5-2.5-2.5S18 13.1 18 14.5V16c-.5 0-1 .5-1 1v4c0 .5.5 1 1 1h5c.5 0 1-.5 1-1v-4c0-.5-.5-1-1-1zm-1 0h-3v-1.5c0-.8.7-1.5 1.5-1.5s1.5.7 1.5 1.5V16z\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M15.5 14.5c0-2.8 2.2-5 5-5 .4 0 .7 0 1 .1L23.6 7c-.4-.3-4.9-4-11.6-4C5.3 3 .8 6.7.4 7L12 21.5l3.5-4.3v-2.7z\",\"opacity\":\".3\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M6.7 14.9l5.3 6.6 3.5-4.3v-2.6c0-.2 0-.5.1-.7-.9-.5-2.2-.9-3.6-.9-3 0-5.1 1.7-5.3 1.9z\"}}]})(props);\n};\nexport function MdSignalWifi2Bar (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillOpacity\":\".3\",\"d\":\"M12.01 21.49L23.64 7c-.45-.34-4.93-4-11.64-4C5.28 3 .81 6.66.36 7l11.63 14.49.01.01.01-.01z\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M4.79 12.52l7.2 8.98H12l.01-.01 7.2-8.98C18.85 12.24 16.1 10 12 10s-6.85 2.24-7.21 2.52z\"}}]})(props);\n};\nexport function MdSignalWifi2BarLock (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M23 16v-1.5c0-1.4-1.1-2.5-2.5-2.5S18 13.1 18 14.5V16c-.5 0-1 .5-1 1v4c0 .5.5 1 1 1h5c.5 0 1-.5 1-1v-4c0-.5-.5-1-1-1zm-1 0h-3v-1.5c0-.8.7-1.5 1.5-1.5s1.5.7 1.5 1.5V16z\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M15.5 14.5c0-2.8 2.2-5 5-5 .4 0 .7 0 1 .1L23.6 7c-.4-.3-4.9-4-11.6-4C5.3 3 .8 6.7.4 7L12 21.5l3.5-4.3v-2.7z\",\"opacity\":\".3\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M4.8 12.5l7.2 9 3.5-4.4v-2.6c0-1.3.5-2.5 1.4-3.4C15.6 10.5 14 10 12 10c-4.1 0-6.8 2.2-7.2 2.5z\"}}]})(props);\n};\nexport function MdSignalWifi3Bar (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillOpacity\":\".3\",\"d\":\"M12.01 21.49L23.64 7c-.45-.34-4.93-4-11.64-4C5.28 3 .81 6.66.36 7l11.63 14.49.01.01.01-.01z\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M3.53 10.95l8.46 10.54.01.01.01-.01 8.46-10.54C20.04 10.62 16.81 8 12 8c-4.81 0-8.04 2.62-8.47 2.95z\"}}]})(props);\n};\nexport function MdSignalWifi3BarLock (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"opacity\":\".3\",\"d\":\"M12 3C5.3 3 .8 6.7.4 7l3.2 3.9L12 21.5l3.5-4.3v-2.6c0-2.2 1.4-4 3.3-4.7.3-.1.5-.2.8-.2.3-.1.6-.1.9-.1.4 0 .7 0 1 .1L23.6 7c-.4-.3-4.9-4-11.6-4z\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M23 16v-1.5c0-1.4-1.1-2.5-2.5-2.5S18 13.1 18 14.5V16c-.5 0-1 .5-1 1v4c0 .5.5 1 1 1h5c.5 0 1-.5 1-1v-4c0-.5-.5-1-1-1zm-1 0h-3v-1.5c0-.8.7-1.5 1.5-1.5s1.5.7 1.5 1.5V16zm-10 5.5l3.5-4.3v-2.6c0-2.2 1.4-4 3.3-4.7C17.3 9 14.9 8 12 8c-4.8 0-8 2.6-8.5 2.9\"}}]})(props);\n};\nexport function MdSignalWifi4Bar (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12.01 21.49L23.64 7c-.45-.34-4.93-4-11.64-4C5.28 3 .81 6.66.36 7l11.63 14.49.01.01.01-.01z\"}}]})(props);\n};\nexport function MdSignalWifi4BarLock (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M23 16v-1.5c0-1.4-1.1-2.5-2.5-2.5S18 13.1 18 14.5V16c-.5 0-1 .5-1 1v4c0 .5.5 1 1 1h5c.5 0 1-.5 1-1v-4c0-.5-.5-1-1-1zm-1 0h-3v-1.5c0-.8.7-1.5 1.5-1.5s1.5.7 1.5 1.5V16zm-6.5-1.5c0-2.8 2.2-5 5-5 .4 0 .7 0 1 .1L23.6 7c-.4-.3-4.9-4-11.6-4C5.3 3 .8 6.7.4 7L12 21.5l3.5-4.4v-2.6z\"}}]})(props);\n};\nexport function MdSignalWifiOff (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M23.64 7c-.45-.34-4.93-4-11.64-4-1.5 0-2.89.19-4.15.48L18.18 13.8 23.64 7zm-6.6 8.22L3.27 1.44 2 2.72l2.05 2.06C1.91 5.76.59 6.82.36 7l11.63 14.49.01.01.01-.01 3.9-4.86 3.32 3.32 1.27-1.27-3.46-3.46z\"}}]})(props);\n};\nexport function MdStorage (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M2 20h20v-4H2v4zm2-3h2v2H4v-2zM2 4v4h20V4H2zm4 3H4V5h2v2zm-4 7h20v-4H2v4zm2-3h2v2H4v-2z\"}}]})(props);\n};\nexport function MdUsb (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M15 7v4h1v2h-3V5h2l-3-4-3 4h2v8H8v-2.07c.7-.37 1.2-1.08 1.2-1.93 0-1.21-.99-2.2-2.2-2.2-1.21 0-2.2.99-2.2 2.2 0 .85.5 1.56 1.2 1.93V13c0 1.11.89 2 2 2h3v3.05c-.71.37-1.2 1.1-1.2 1.95 0 1.22.99 2.2 2.2 2.2 1.21 0 2.2-.98 2.2-2.2 0-.85-.49-1.58-1.2-1.95V15h3c1.11 0 2-.89 2-2v-2h1V7h-4z\"}}]})(props);\n};\nexport function MdWallpaper (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M4 4h7V2H4c-1.1 0-2 .9-2 2v7h2V4zm6 9l-4 5h12l-3-4-2.03 2.71L10 13zm7-4.5c0-.83-.67-1.5-1.5-1.5S14 7.67 14 8.5s.67 1.5 1.5 1.5S17 9.33 17 8.5zM20 2h-7v2h7v7h2V4c0-1.1-.9-2-2-2zm0 18h-7v2h7c1.1 0 2-.9 2-2v-7h-2v7zM4 13H2v7c0 1.1.9 2 2 2h7v-2H4v-7z\"}}]})(props);\n};\nexport function MdWidgets (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M13 13v8h8v-8h-8zM3 21h8v-8H3v8zM3 3v8h8V3H3zm13.66-1.31L11 7.34 16.66 13l5.66-5.66-5.66-5.65z\"}}]})(props);\n};\nexport function MdWifiLock (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M20.5 9.5c.28 0 .55.04.81.08L24 6c-3.34-2.51-7.5-4-12-4S3.34 3.49 0 6l12 16 3.5-4.67V14.5c0-2.76 2.24-5 5-5zM23 16v-1.5c0-1.38-1.12-2.5-2.5-2.5S18 13.12 18 14.5V16c-.55 0-1 .45-1 1v4c0 .55.45 1 1 1h5c.55 0 1-.45 1-1v-4c0-.55-.45-1-1-1zm-1 0h-3v-1.5c0-.83.67-1.5 1.5-1.5s1.5.67 1.5 1.5V16z\"}}]})(props);\n};\nexport function MdWifiTethering (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 11c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm6 2c0-3.31-2.69-6-6-6s-6 2.69-6 6c0 2.22 1.21 4.15 3 5.19l1-1.74c-1.19-.7-2-1.97-2-3.45 0-2.21 1.79-4 4-4s4 1.79 4 4c0 1.48-.81 2.75-2 3.45l1 1.74c1.79-1.04 3-2.97 3-5.19zM12 3C6.48 3 2 7.48 2 13c0 3.7 2.01 6.92 4.99 8.65l1-1.73C5.61 18.53 4 15.96 4 13c0-4.42 3.58-8 8-8s8 3.58 8 8c0 2.96-1.61 5.53-4 6.92l1 1.73c2.99-1.73 5-4.95 5-8.65 0-5.52-4.48-10-10-10z\"}}]})(props);\n};\nexport function MdAttachFile (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M16.5 6v11.5c0 2.21-1.79 4-4 4s-4-1.79-4-4V5c0-1.38 1.12-2.5 2.5-2.5s2.5 1.12 2.5 2.5v10.5c0 .55-.45 1-1 1s-1-.45-1-1V6H10v9.5c0 1.38 1.12 2.5 2.5 2.5s2.5-1.12 2.5-2.5V5c0-2.21-1.79-4-4-4S7 2.79 7 5v12.5c0 3.04 2.46 5.5 5.5 5.5s5.5-2.46 5.5-5.5V6h-1.5z\"}}]})(props);\n};\nexport function MdAttachMoney (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M11.8 10.9c-2.27-.59-3-1.2-3-2.15 0-1.09 1.01-1.85 2.7-1.85 1.78 0 2.44.85 2.5 2.1h2.21c-.07-1.72-1.12-3.3-3.21-3.81V3h-3v2.16c-1.94.42-3.5 1.68-3.5 3.61 0 2.31 1.91 3.46 4.7 4.13 2.5.6 3 1.48 3 2.41 0 .69-.49 1.79-2.7 1.79-2.06 0-2.87-.92-2.98-2.1h-2.2c.12 2.19 1.76 3.42 3.68 3.83V21h3v-2.15c1.95-.37 3.5-1.5 3.5-3.55 0-2.84-2.43-3.81-4.7-4.4z\"}}]})(props);\n};\nexport function MdBorderAll (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M3 3v18h18V3H3zm8 16H5v-6h6v6zm0-8H5V5h6v6zm8 8h-6v-6h6v6zm0-8h-6V5h6v6z\"}}]})(props);\n};\nexport function MdBorderBottom (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M9 11H7v2h2v-2zm4 4h-2v2h2v-2zM9 3H7v2h2V3zm4 8h-2v2h2v-2zM5 3H3v2h2V3zm8 4h-2v2h2V7zm4 4h-2v2h2v-2zm-4-8h-2v2h2V3zm4 0h-2v2h2V3zm2 10h2v-2h-2v2zm0 4h2v-2h-2v2zM5 7H3v2h2V7zm14-4v2h2V3h-2zm0 6h2V7h-2v2zM5 11H3v2h2v-2zM3 21h18v-2H3v2zm2-6H3v2h2v-2z\"}}]})(props);\n};\nexport function MdBorderClear (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M7 5h2V3H7v2zm0 8h2v-2H7v2zm0 8h2v-2H7v2zm4-4h2v-2h-2v2zm0 4h2v-2h-2v2zm-8 0h2v-2H3v2zm0-4h2v-2H3v2zm0-4h2v-2H3v2zm0-4h2V7H3v2zm0-4h2V3H3v2zm8 8h2v-2h-2v2zm8 4h2v-2h-2v2zm0-4h2v-2h-2v2zm0 8h2v-2h-2v2zm0-12h2V7h-2v2zm-8 0h2V7h-2v2zm8-6v2h2V3h-2zm-8 2h2V3h-2v2zm4 16h2v-2h-2v2zm0-8h2v-2h-2v2zm0-8h2V3h-2v2z\"}}]})(props);\n};\nexport function MdBorderColor (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M17.75 7L14 3.25l-10 10V17h3.75l10-10zm2.96-2.96c.39-.39.39-1.02 0-1.41L18.37.29c-.39-.39-1.02-.39-1.41 0L15 2.25 18.75 6l1.96-1.96z\"}},{\"tag\":\"path\",\"attr\":{\"fillOpacity\":\".36\",\"d\":\"M0 20h24v4H0z\"}}]})(props);\n};\nexport function MdBorderHorizontal (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M3 21h2v-2H3v2zM5 7H3v2h2V7zM3 17h2v-2H3v2zm4 4h2v-2H7v2zM5 3H3v2h2V3zm4 0H7v2h2V3zm8 0h-2v2h2V3zm-4 4h-2v2h2V7zm0-4h-2v2h2V3zm6 14h2v-2h-2v2zm-8 4h2v-2h-2v2zm-8-8h18v-2H3v2zM19 3v2h2V3h-2zm0 6h2V7h-2v2zm-8 8h2v-2h-2v2zm4 4h2v-2h-2v2zm4 0h2v-2h-2v2z\"}}]})(props);\n};\nexport function MdBorderInner (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M3 21h2v-2H3v2zm4 0h2v-2H7v2zM5 7H3v2h2V7zM3 17h2v-2H3v2zM9 3H7v2h2V3zM5 3H3v2h2V3zm12 0h-2v2h2V3zm2 6h2V7h-2v2zm0-6v2h2V3h-2zm-4 18h2v-2h-2v2zM13 3h-2v8H3v2h8v8h2v-8h8v-2h-8V3zm6 18h2v-2h-2v2zm0-4h2v-2h-2v2z\"}}]})(props);\n};\nexport function MdBorderLeft (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M11 21h2v-2h-2v2zm0-4h2v-2h-2v2zm0-12h2V3h-2v2zm0 4h2V7h-2v2zm0 4h2v-2h-2v2zm-4 8h2v-2H7v2zM7 5h2V3H7v2zm0 8h2v-2H7v2zm-4 8h2V3H3v18zM19 9h2V7h-2v2zm-4 12h2v-2h-2v2zm4-4h2v-2h-2v2zm0-14v2h2V3h-2zm0 10h2v-2h-2v2zm0 8h2v-2h-2v2zm-4-8h2v-2h-2v2zm0-8h2V3h-2v2z\"}}]})(props);\n};\nexport function MdBorderOuter (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M13 7h-2v2h2V7zm0 4h-2v2h2v-2zm4 0h-2v2h2v-2zM3 3v18h18V3H3zm16 16H5V5h14v14zm-6-4h-2v2h2v-2zm-4-4H7v2h2v-2z\"}}]})(props);\n};\nexport function MdBorderRight (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M7 21h2v-2H7v2zM3 5h2V3H3v2zm4 0h2V3H7v2zm0 8h2v-2H7v2zm-4 8h2v-2H3v2zm8 0h2v-2h-2v2zm-8-8h2v-2H3v2zm0 4h2v-2H3v2zm0-8h2V7H3v2zm8 8h2v-2h-2v2zm4-4h2v-2h-2v2zm4-10v18h2V3h-2zm-4 18h2v-2h-2v2zm0-16h2V3h-2v2zm-4 8h2v-2h-2v2zm0-8h2V3h-2v2zm0 4h2V7h-2v2z\"}}]})(props);\n};\nexport function MdBorderStyle (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M15 21h2v-2h-2v2zm4 0h2v-2h-2v2zM7 21h2v-2H7v2zm4 0h2v-2h-2v2zm8-4h2v-2h-2v2zm0-4h2v-2h-2v2zM3 3v18h2V5h16V3H3zm16 6h2V7h-2v2z\"}}]})(props);\n};\nexport function MdBorderTop (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M7 21h2v-2H7v2zm0-8h2v-2H7v2zm4 0h2v-2h-2v2zm0 8h2v-2h-2v2zm-8-4h2v-2H3v2zm0 4h2v-2H3v2zm0-8h2v-2H3v2zm0-4h2V7H3v2zm8 8h2v-2h-2v2zm8-8h2V7h-2v2zm0 4h2v-2h-2v2zM3 3v2h18V3H3zm16 14h2v-2h-2v2zm-4 4h2v-2h-2v2zM11 9h2V7h-2v2zm8 12h2v-2h-2v2zm-4-8h2v-2h-2v2z\"}}]})(props);\n};\nexport function MdBorderVertical (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M3 9h2V7H3v2zm0-4h2V3H3v2zm4 16h2v-2H7v2zm0-8h2v-2H7v2zm-4 0h2v-2H3v2zm0 8h2v-2H3v2zm0-4h2v-2H3v2zM7 5h2V3H7v2zm12 12h2v-2h-2v2zm-8 4h2V3h-2v18zm8 0h2v-2h-2v2zm0-8h2v-2h-2v2zm0-10v2h2V3h-2zm0 6h2V7h-2v2zm-4-4h2V3h-2v2zm0 16h2v-2h-2v2zm0-8h2v-2h-2v2z\"}}]})(props);\n};\nexport function MdBubbleChart (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"circle\",\"attr\":{\"cx\":\"7.2\",\"cy\":\"14.4\",\"r\":\"3.2\"}},{\"tag\":\"circle\",\"attr\":{\"cx\":\"14.8\",\"cy\":\"18\",\"r\":\"2\"}},{\"tag\":\"circle\",\"attr\":{\"cx\":\"15.2\",\"cy\":\"8.8\",\"r\":\"4.8\"}}]})(props);\n};\nexport function MdDragHandle (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M20 9H4v2h16V9zM4 15h16v-2H4v2z\"}}]})(props);\n};\nexport function MdFormatAlignCenter (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M7 15v2h10v-2H7zm-4 6h18v-2H3v2zm0-8h18v-2H3v2zm4-6v2h10V7H7zM3 3v2h18V3H3z\"}}]})(props);\n};\nexport function MdFormatAlignJustify (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M3 21h18v-2H3v2zm0-4h18v-2H3v2zm0-4h18v-2H3v2zm0-4h18V7H3v2zm0-6v2h18V3H3z\"}}]})(props);\n};\nexport function MdFormatAlignLeft (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M15 15H3v2h12v-2zm0-8H3v2h12V7zM3 13h18v-2H3v2zm0 8h18v-2H3v2zM3 3v2h18V3H3z\"}}]})(props);\n};\nexport function MdFormatAlignRight (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M3 21h18v-2H3v2zm6-4h12v-2H9v2zm-6-4h18v-2H3v2zm6-4h12V7H9v2zM3 3v2h18V3H3z\"}}]})(props);\n};\nexport function MdFormatBold (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M15.6 10.79c.97-.67 1.65-1.77 1.65-2.79 0-2.26-1.75-4-4-4H7v14h7.04c2.09 0 3.71-1.7 3.71-3.79 0-1.52-.86-2.82-2.15-3.42zM10 6.5h3c.83 0 1.5.67 1.5 1.5s-.67 1.5-1.5 1.5h-3v-3zm3.5 9H10v-3h3.5c.83 0 1.5.67 1.5 1.5s-.67 1.5-1.5 1.5z\"}}]})(props);\n};\nexport function MdFormatClear (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M3.27 5L2 6.27l6.97 6.97L6.5 19h3l1.57-3.66L16.73 21 18 19.73 3.55 5.27 3.27 5zM6 5v.18L8.82 8h2.4l-.72 1.68 2.1 2.1L14.21 8H20V5H6z\"}}]})(props);\n};\nexport function MdFormatColorFill (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M16.56 8.94L7.62 0 6.21 1.41l2.38 2.38-5.15 5.15c-.59.59-.59 1.54 0 2.12l5.5 5.5c.29.29.68.44 1.06.44s.77-.15 1.06-.44l5.5-5.5c.59-.58.59-1.53 0-2.12zM5.21 10L10 5.21 14.79 10H5.21zM19 11.5s-2 2.17-2 3.5c0 1.1.9 2 2 2s2-.9 2-2c0-1.33-2-3.5-2-3.5z\"}},{\"tag\":\"path\",\"attr\":{\"fillOpacity\":\".36\",\"d\":\"M0 20h24v4H0z\"}}]})(props);\n};\nexport function MdFormatColorReset (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M18 14c0-4-6-10.8-6-10.8s-1.33 1.51-2.73 3.52l8.59 8.59c.09-.42.14-.86.14-1.31zm-.88 3.12L12.5 12.5 5.27 5.27 4 6.55l3.32 3.32C6.55 11.32 6 12.79 6 14c0 3.31 2.69 6 6 6 1.52 0 2.9-.57 3.96-1.5l2.63 2.63 1.27-1.27-2.74-2.74z\"}}]})(props);\n};\nexport function MdFormatColorText (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillOpacity\":\".36\",\"d\":\"M0 20h24v4H0z\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M11 3L5.5 17h2.25l1.12-3h6.25l1.12 3h2.25L13 3h-2zm-1.38 9L12 5.67 14.38 12H9.62z\"}}]})(props);\n};\nexport function MdFormatIndentDecrease (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M11 17h10v-2H11v2zm-8-5l4 4V8l-4 4zm0 9h18v-2H3v2zM3 3v2h18V3H3zm8 6h10V7H11v2zm0 4h10v-2H11v2z\"}}]})(props);\n};\nexport function MdFormatIndentIncrease (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M3 21h18v-2H3v2zM3 8v8l4-4-4-4zm8 9h10v-2H11v2zM3 3v2h18V3H3zm8 6h10V7H11v2zm0 4h10v-2H11v2z\"}}]})(props);\n};\nexport function MdFormatItalic (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M10 4v3h2.21l-3.42 8H6v3h8v-3h-2.21l3.42-8H18V4z\"}}]})(props);\n};\nexport function MdFormatLineSpacing (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M6 7h2.5L5 3.5 1.5 7H4v10H1.5L5 20.5 8.5 17H6V7zm4-2v2h12V5H10zm0 14h12v-2H10v2zm0-6h12v-2H10v2z\"}}]})(props);\n};\nexport function MdFormatListBulleted (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M4 10.5c-.83 0-1.5.67-1.5 1.5s.67 1.5 1.5 1.5 1.5-.67 1.5-1.5-.67-1.5-1.5-1.5zm0-6c-.83 0-1.5.67-1.5 1.5S3.17 7.5 4 7.5 5.5 6.83 5.5 6 4.83 4.5 4 4.5zm0 12c-.83 0-1.5.68-1.5 1.5s.68 1.5 1.5 1.5 1.5-.68 1.5-1.5-.67-1.5-1.5-1.5zM7 19h14v-2H7v2zm0-6h14v-2H7v2zm0-8v2h14V5H7z\"}}]})(props);\n};\nexport function MdFormatListNumbered (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M2 17h2v.5H3v1h1v.5H2v1h3v-4H2v1zm1-9h1V4H2v1h1v3zm-1 3h1.8L2 13.1v.9h3v-1H3.2L5 10.9V10H2v1zm5-6v2h14V5H7zm0 14h14v-2H7v2zm0-6h14v-2H7v2z\"}}]})(props);\n};\nexport function MdFormatPaint (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M18 4V3c0-.55-.45-1-1-1H5c-.55 0-1 .45-1 1v4c0 .55.45 1 1 1h12c.55 0 1-.45 1-1V6h1v4H9v11c0 .55.45 1 1 1h2c.55 0 1-.45 1-1v-9h8V4h-3z\"}}]})(props);\n};\nexport function MdFormatQuote (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M6 17h3l2-4V7H5v6h3zm8 0h3l2-4V7h-6v6h3z\"}}]})(props);\n};\nexport function MdFormatShapes (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M23 7V1h-6v2H7V1H1v6h2v10H1v6h6v-2h10v2h6v-6h-2V7h2zM3 3h2v2H3V3zm2 18H3v-2h2v2zm12-2H7v-2H5V7h2V5h10v2h2v10h-2v2zm4 2h-2v-2h2v2zM19 5V3h2v2h-2zm-5.27 9h-3.49l-.73 2H7.89l3.4-9h1.4l3.41 9h-1.63l-.74-2zm-3.04-1.26h2.61L12 8.91l-1.31 3.83z\"}}]})(props);\n};\nexport function MdFormatSize (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M9 4v3h5v12h3V7h5V4H9zm-6 8h3v7h3v-7h3V9H3v3z\"}}]})(props);\n};\nexport function MdFormatStrikethrough (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M10 19h4v-3h-4v3zM5 4v3h5v3h4V7h5V4H5zM3 14h18v-2H3v2z\"}}]})(props);\n};\nexport function MdFormatTextdirectionLToR (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M9 10v5h2V4h2v11h2V4h2V2H9C6.79 2 5 3.79 5 6s1.79 4 4 4zm12 8l-4-4v3H5v2h12v3l4-4z\"}}]})(props);\n};\nexport function MdFormatTextdirectionRToL (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M10 10v5h2V4h2v11h2V4h2V2h-8C7.79 2 6 3.79 6 6s1.79 4 4 4zm-2 7v-3l-4 4 4 4v-3h12v-2H8z\"}}]})(props);\n};\nexport function MdFormatUnderlined (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 17c3.31 0 6-2.69 6-6V3h-2.5v8c0 1.93-1.57 3.5-3.5 3.5S8.5 12.93 8.5 11V3H6v8c0 3.31 2.69 6 6 6zm-7 2v2h14v-2H5z\"}}]})(props);\n};\nexport function MdFunctions (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M18 4H6v2l6.5 6L6 18v2h12v-3h-7l5-5-5-5h7z\"}}]})(props);\n};\nexport function MdHighlight (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M6 14l3 3v5h6v-5l3-3V9H6zm5-12h2v3h-2zM3.5 5.875L4.914 4.46l2.12 2.122L5.62 7.997zm13.46.71l2.123-2.12 1.414 1.414L18.375 8z\"}}]})(props);\n};\nexport function MdInsertChart (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"}}]})(props);\n};\nexport function MdInsertComment (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M20 2H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h14l4 4V4c0-1.1-.9-2-2-2zm-2 12H6v-2h12v2zm0-3H6V9h12v2zm0-3H6V6h12v2z\"}}]})(props);\n};\nexport function MdInsertDriveFile (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M6 2c-1.1 0-1.99.9-1.99 2L4 20c0 1.1.89 2 1.99 2H18c1.1 0 2-.9 2-2V8l-6-6H6zm7 7V3.5L18.5 9H13z\"}}]})(props);\n};\nexport function MdInsertEmoticon (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M11.99 2C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8zm3.5-9c.83 0 1.5-.67 1.5-1.5S16.33 8 15.5 8 14 8.67 14 9.5s.67 1.5 1.5 1.5zm-7 0c.83 0 1.5-.67 1.5-1.5S9.33 8 8.5 8 7 8.67 7 9.5 7.67 11 8.5 11zm3.5 6.5c2.33 0 4.31-1.46 5.11-3.5H6.89c.8 2.04 2.78 3.5 5.11 3.5z\"}}]})(props);\n};\nexport function MdInsertInvitation (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M17 12h-5v5h5v-5zM16 1v2H8V1H6v2H5c-1.11 0-1.99.9-1.99 2L3 19c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2h-1V1h-2zm3 18H5V8h14v11z\"}}]})(props);\n};\nexport function MdInsertLink (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76 0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71 0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71 0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76 0 5-2.24 5-5s-2.24-5-5-5z\"}}]})(props);\n};\nexport function MdInsertPhoto (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M21 19V5c0-1.1-.9-2-2-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2zM8.5 13.5l2.5 3.01L14.5 12l4.5 6H5l3.5-4.5z\"}}]})(props);\n};\nexport function MdLinearScale (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M19.5 9.5c-1.03 0-1.9.62-2.29 1.5h-2.92c-.39-.88-1.26-1.5-2.29-1.5s-1.9.62-2.29 1.5H6.79c-.39-.88-1.26-1.5-2.29-1.5C3.12 9.5 2 10.62 2 12s1.12 2.5 2.5 2.5c1.03 0 1.9-.62 2.29-1.5h2.92c.39.88 1.26 1.5 2.29 1.5s1.9-.62 2.29-1.5h2.92c.39.88 1.26 1.5 2.29 1.5 1.38 0 2.5-1.12 2.5-2.5s-1.12-2.5-2.5-2.5z\"}}]})(props);\n};\nexport function MdMergeType (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M17 20.41L18.41 19 15 15.59 13.59 17 17 20.41zM7.5 8H11v5.59L5.59 19 7 20.41l6-6V8h3.5L12 3.5 7.5 8z\"}}]})(props);\n};\nexport function MdModeComment (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M21.99 4c0-1.1-.89-2-1.99-2H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h14l4 4-.01-18z\"}}]})(props);\n};\nexport function MdModeEdit (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34c-.39-.39-1.02-.39-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z\"}}]})(props);\n};\nexport function MdMonetizationOn (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1.41 16.09V20h-2.67v-1.93c-1.71-.36-3.16-1.46-3.27-3.4h1.96c.1 1.05.82 1.87 2.65 1.87 1.96 0 2.4-.98 2.4-1.59 0-.83-.44-1.61-2.67-2.14-2.48-.6-4.18-1.62-4.18-3.67 0-1.72 1.39-2.84 3.11-3.21V4h2.67v1.95c1.86.45 2.79 1.86 2.85 3.39H14.3c-.05-1.11-.64-1.87-2.22-1.87-1.5 0-2.4.68-2.4 1.64 0 .84.65 1.39 2.67 1.91s4.18 1.39 4.18 3.91c-.01 1.83-1.38 2.83-3.12 3.16z\"}}]})(props);\n};\nexport function MdMoneyOff (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12.5 6.9c1.78 0 2.44.85 2.5 2.1h2.21c-.07-1.72-1.12-3.3-3.21-3.81V3h-3v2.16c-.53.12-1.03.3-1.48.54l1.47 1.47c.41-.17.91-.27 1.51-.27zM5.33 4.06L4.06 5.33 7.5 8.77c0 2.08 1.56 3.21 3.91 3.91l3.51 3.51c-.34.48-1.05.91-2.42.91-2.06 0-2.87-.92-2.98-2.1h-2.2c.12 2.19 1.76 3.42 3.68 3.83V21h3v-2.15c.96-.18 1.82-.55 2.45-1.12l2.22 2.22 1.27-1.27L5.33 4.06z\"}}]})(props);\n};\nexport function MdMultilineChart (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M22 6.92l-1.41-1.41-2.85 3.21C15.68 6.4 12.83 5 9.61 5 6.72 5 4.07 6.16 2 8l1.42 1.42C5.12 7.93 7.27 7 9.61 7c2.74 0 5.09 1.26 6.77 3.24l-2.88 3.24-4-4L2 16.99l1.5 1.5 6-6.01 4 4 4.05-4.55c.75 1.35 1.25 2.9 1.44 4.55H21c-.22-2.3-.95-4.39-2.04-6.14L22 6.92z\"}}]})(props);\n};\nexport function MdPieChart (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M11 2v20c-5.07-.5-9-4.79-9-10s3.93-9.5 9-10zm2.03 0v8.99H22c-.47-4.74-4.24-8.52-8.97-8.99zm0 11.01V22c4.74-.47 8.5-4.25 8.97-8.99h-8.97z\"}}]})(props);\n};\nexport function MdPieChartOutlined (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 2C6.5 2 2 6.5 2 12s4.5 10 10 10 10-4.5 10-10S17.5 2 12 2zm1 2.07c3.61.45 6.48 3.33 6.93 6.93H13V4.07zM4 12c0-4.06 3.07-7.44 7-7.93v15.87c-3.93-.5-7-3.88-7-7.94zm9 7.93V13h6.93c-.45 3.61-3.32 6.48-6.93 6.93z\"}}]})(props);\n};\nexport function MdPublish (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M5 4v2h14V4H5zm0 10h4v6h6v-6h4l-7-7-7 7z\"}}]})(props);\n};\nexport function MdShortText (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M4 9h16v2H4zm0 4h10v2H4z\"}}]})(props);\n};\nexport function MdShowChart (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M3.5 18.49l6-6.01 4 4L22 6.92l-1.41-1.41-7.09 7.97-4-4L2 16.99z\"}}]})(props);\n};\nexport function MdSpaceBar (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M18 9v4H6V9H4v6h16V9z\"}}]})(props);\n};\nexport function MdStrikethroughS (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M7.24 8.75c-.26-.48-.39-1.03-.39-1.67 0-.61.13-1.16.4-1.67.26-.5.63-.93 1.11-1.29.48-.35 1.05-.63 1.7-.83.66-.19 1.39-.29 2.18-.29.81 0 1.54.11 2.21.34.66.22 1.23.54 1.69.94.47.4.83.88 1.08 1.43.25.55.38 1.15.38 1.81h-3.01c0-.31-.05-.59-.15-.85-.09-.27-.24-.49-.44-.68-.2-.19-.45-.33-.75-.44-.3-.1-.66-.16-1.06-.16-.39 0-.74.04-1.03.13-.29.09-.53.21-.72.36-.19.16-.34.34-.44.55-.1.21-.15.43-.15.66 0 .48.25.88.74 1.21.38.25.77.48 1.41.7H7.39c-.05-.08-.11-.17-.15-.25zM21 12v-2H3v2h9.62c.18.07.4.14.55.2.37.17.66.34.87.51.21.17.35.36.43.57.07.2.11.43.11.69 0 .23-.05.45-.14.66-.09.2-.23.38-.42.53-.19.15-.42.26-.71.35-.29.08-.63.13-1.01.13-.43 0-.83-.04-1.18-.13s-.66-.23-.91-.42c-.25-.19-.45-.44-.59-.75-.14-.31-.25-.76-.25-1.21H6.4c0 .55.08 1.13.24 1.58.16.45.37.85.65 1.21.28.35.6.66.98.92.37.26.78.48 1.22.65.44.17.9.3 1.38.39.48.08.96.13 1.44.13.8 0 1.53-.09 2.18-.28s1.21-.45 1.67-.79c.46-.34.82-.77 1.07-1.27s.38-1.07.38-1.71c0-.6-.1-1.14-.31-1.61-.05-.11-.11-.23-.17-.33H21z\"}}]})(props);\n};\nexport function MdTextFields (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M2.5 4v3h5v12h3V7h5V4h-13zm19 5h-9v3h3v7h3v-7h3V9z\"}}]})(props);\n};\nexport function MdTitle (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M5 4v3h5.5v12h3V7H19V4z\"}}]})(props);\n};\nexport function MdVerticalAlignBottom (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M16 13h-3V3h-2v10H8l4 4 4-4zM4 19v2h16v-2H4z\"}}]})(props);\n};\nexport function MdVerticalAlignCenter (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M8 19h3v4h2v-4h3l-4-4-4 4zm8-14h-3V1h-2v4H8l4 4 4-4zM4 11v2h16v-2H4z\"}}]})(props);\n};\nexport function MdVerticalAlignTop (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M8 11h3v10h2V11h3l-4-4-4 4zM4 3v2h16V3H4z\"}}]})(props);\n};\nexport function MdWrapText (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M4 19h6v-2H4v2zM20 5H4v2h16V5zm-3 6H4v2h13.25c1.1 0 2 .9 2 2s-.9 2-2 2H15v-2l-3 3 3 3v-2h2c2.21 0 4-1.79 4-4s-1.79-4-4-4z\"}}]})(props);\n};\nexport function MdAttachment (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M2 12.5C2 9.46 4.46 7 7.5 7H18c2.21 0 4 1.79 4 4s-1.79 4-4 4H9.5C8.12 15 7 13.88 7 12.5S8.12 10 9.5 10H17v2H9.41c-.55 0-.55 1 0 1H18c1.1 0 2-.9 2-2s-.9-2-2-2H7.5C5.57 9 4 10.57 4 12.5S5.57 16 7.5 16H17v2H7.5C4.46 18 2 15.54 2 12.5z\"}}]})(props);\n};\nexport function MdCloud (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M19.35 10.04C18.67 6.59 15.64 4 12 4 9.11 4 6.6 5.64 5.35 8.04 2.34 8.36 0 10.91 0 14c0 3.31 2.69 6 6 6h13c2.76 0 5-2.24 5-5 0-2.64-2.05-4.78-4.65-4.96z\"}}]})(props);\n};\nexport function MdCloudCircle (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm4.5 14H8c-1.66 0-3-1.34-3-3s1.34-3 3-3l.14.01C8.58 8.28 10.13 7 12 7c2.21 0 4 1.79 4 4h.5c1.38 0 2.5 1.12 2.5 2.5S17.88 16 16.5 16z\"}}]})(props);\n};\nexport function MdCloudDone (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M19.35 10.04C18.67 6.59 15.64 4 12 4 9.11 4 6.6 5.64 5.35 8.04 2.34 8.36 0 10.91 0 14c0 3.31 2.69 6 6 6h13c2.76 0 5-2.24 5-5 0-2.64-2.05-4.78-4.65-4.96zM10 17l-3.5-3.5 1.41-1.41L10 14.17 15.18 9l1.41 1.41L10 17z\"}}]})(props);\n};\nexport function MdCloudDownload (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M19.35 10.04C18.67 6.59 15.64 4 12 4 9.11 4 6.6 5.64 5.35 8.04 2.34 8.36 0 10.91 0 14c0 3.31 2.69 6 6 6h13c2.76 0 5-2.24 5-5 0-2.64-2.05-4.78-4.65-4.96zM17 13l-5 5-5-5h3V9h4v4h3z\"}}]})(props);\n};\nexport function MdCloudOff (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M19.35 10.04C18.67 6.59 15.64 4 12 4c-1.48 0-2.85.43-4.01 1.17l1.46 1.46C10.21 6.23 11.08 6 12 6c3.04 0 5.5 2.46 5.5 5.5v.5H19c1.66 0 3 1.34 3 3 0 1.13-.64 2.11-1.56 2.62l1.45 1.45C23.16 18.16 24 16.68 24 15c0-2.64-2.05-4.78-4.65-4.96zM3 5.27l2.75 2.74C2.56 8.15 0 10.77 0 14c0 3.31 2.69 6 6 6h11.73l2 2L21 20.73 4.27 4 3 5.27zM7.73 10l8 8H6c-2.21 0-4-1.79-4-4s1.79-4 4-4h1.73z\"}}]})(props);\n};\nexport function MdCloudQueue (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M19.35 10.04C18.67 6.59 15.64 4 12 4 9.11 4 6.6 5.64 5.35 8.04 2.34 8.36 0 10.91 0 14c0 3.31 2.69 6 6 6h13c2.76 0 5-2.24 5-5 0-2.64-2.05-4.78-4.65-4.96zM19 18H6c-2.21 0-4-1.79-4-4s1.79-4 4-4h.71C7.37 7.69 9.48 6 12 6c3.04 0 5.5 2.46 5.5 5.5v.5H19c1.66 0 3 1.34 3 3s-1.34 3-3 3z\"}}]})(props);\n};\nexport function MdCloudUpload (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M19.35 10.04C18.67 6.59 15.64 4 12 4 9.11 4 6.6 5.64 5.35 8.04 2.34 8.36 0 10.91 0 14c0 3.31 2.69 6 6 6h13c2.76 0 5-2.24 5-5 0-2.64-2.05-4.78-4.65-4.96zM14 13v4h-4v-4H7l5-5 5 5h-3z\"}}]})(props);\n};\nexport function MdCreateNewFolder (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M20 6h-8l-2-2H4c-1.11 0-1.99.89-1.99 2L2 18c0 1.11.89 2 2 2h16c1.11 0 2-.89 2-2V8c0-1.11-.89-2-2-2zm-1 8h-3v3h-2v-3h-3v-2h3V9h2v3h3v2z\"}}]})(props);\n};\nexport function MdFileDownload (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M19 9h-4V3H9v6H5l7 7 7-7zM5 18v2h14v-2H5z\"}}]})(props);\n};\nexport function MdFileUpload (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M9 16h6v-6h4l-7-7-7 7h4zm-4 2h14v2H5z\"}}]})(props);\n};\nexport function MdFolder (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M10 4H4c-1.1 0-1.99.9-1.99 2L2 18c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V8c0-1.1-.9-2-2-2h-8l-2-2z\"}}]})(props);\n};\nexport function MdFolderOpen (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M20 6h-8l-2-2H4c-1.1 0-1.99.9-1.99 2L2 18c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V8c0-1.1-.9-2-2-2zm0 12H4V8h16v10z\"}}]})(props);\n};\nexport function MdFolderShared (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M20 6h-8l-2-2H4c-1.1 0-1.99.9-1.99 2L2 18c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V8c0-1.1-.9-2-2-2zm-5 3c1.1 0 2 .9 2 2s-.9 2-2 2-2-.9-2-2 .9-2 2-2zm4 8h-8v-1c0-1.33 2.67-2 4-2s4 .67 4 2v1z\"}}]})(props);\n};\nexport function MdCast (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M21 3H3c-1.1 0-2 .9-2 2v3h2V5h18v14h-7v2h7c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM1 18v3h3c0-1.66-1.34-3-3-3zm0-4v2c2.76 0 5 2.24 5 5h2c0-3.87-3.13-7-7-7zm0-4v2c4.97 0 9 4.03 9 9h2c0-6.08-4.93-11-11-11z\"}}]})(props);\n};\nexport function MdCastConnected (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M1 18v3h3c0-1.66-1.34-3-3-3zm0-4v2c2.76 0 5 2.24 5 5h2c0-3.87-3.13-7-7-7zm18-7H5v1.63c3.96 1.28 7.09 4.41 8.37 8.37H19V7zM1 10v2c4.97 0 9 4.03 9 9h2c0-6.08-4.93-11-11-11zm20-7H3c-1.1 0-2 .9-2 2v3h2V5h18v14h-7v2h7c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z\"}}]})(props);\n};\nexport function MdComputer (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M20 18c1.1 0 1.99-.9 1.99-2L22 6c0-1.1-.9-2-2-2H4c-1.1 0-2 .9-2 2v10c0 1.1.9 2 2 2H0v2h24v-2h-4zM4 6h16v10H4V6z\"}}]})(props);\n};\nexport function MdDesktopMac (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M21 2H3c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h7l-2 3v1h8v-1l-2-3h7c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm0 12H3V4h18v10z\"}}]})(props);\n};\nexport function MdDesktopWindows (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M21 2H3c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h7v2H8v2h8v-2h-2v-2h7c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm0 14H3V4h18v12z\"}}]})(props);\n};\nexport function MdDeveloperBoard (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M22 9V7h-2V5c0-1.1-.9-2-2-2H4c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2v-2h2v-2h-2v-2h2v-2h-2V9h2zm-4 10H4V5h14v14zM6 13h5v4H6zm6-6h4v3h-4zM6 7h5v5H6zm6 4h4v6h-4z\"}}]})(props);\n};\nexport function MdDeviceHub (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M17 16l-4-4V8.82C14.16 8.4 15 7.3 15 6c0-1.66-1.34-3-3-3S9 4.34 9 6c0 1.3.84 2.4 2 2.82V12l-4 4H3v5h5v-3.05l4-4.2 4 4.2V21h5v-5h-4z\"}}]})(props);\n};\nexport function MdDevicesOther (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M3 6h18V4H3c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h4v-2H3V6zm10 6H9v1.78c-.61.55-1 1.33-1 2.22s.39 1.67 1 2.22V20h4v-1.78c.61-.55 1-1.34 1-2.22s-.39-1.67-1-2.22V12zm-2 5.5c-.83 0-1.5-.67-1.5-1.5s.67-1.5 1.5-1.5 1.5.67 1.5 1.5-.67 1.5-1.5 1.5zM22 8h-6c-.5 0-1 .5-1 1v10c0 .5.5 1 1 1h6c.5 0 1-.5 1-1V9c0-.5-.5-1-1-1zm-1 10h-4v-8h4v8z\"}}]})(props);\n};\nexport function MdDock (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M8 23h8v-2H8v2zm8-21.99L8 1c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V3c0-1.1-.9-1.99-2-1.99zM16 15H8V5h8v10z\"}}]})(props);\n};\nexport function MdGamepad (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M15 7.5V2H9v5.5l3 3 3-3zM7.5 9H2v6h5.5l3-3-3-3zM9 16.5V22h6v-5.5l-3-3-3 3zM16.5 9l-3 3 3 3H22V9h-5.5z\"}}]})(props);\n};\nexport function MdHeadset (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 1c-4.97 0-9 4.03-9 9v7c0 1.66 1.34 3 3 3h3v-8H5v-2c0-3.87 3.13-7 7-7s7 3.13 7 7v2h-4v8h3c1.66 0 3-1.34 3-3v-7c0-4.97-4.03-9-9-9z\"}}]})(props);\n};\nexport function MdHeadsetMic (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 1c-4.97 0-9 4.03-9 9v7c0 1.66 1.34 3 3 3h3v-8H5v-2c0-3.87 3.13-7 7-7s7 3.13 7 7v2h-4v8h4v1h-7v2h6c1.66 0 3-1.34 3-3V10c0-4.97-4.03-9-9-9z\"}}]})(props);\n};\nexport function MdKeyboard (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M20 5H4c-1.1 0-1.99.9-1.99 2L2 17c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V7c0-1.1-.9-2-2-2zm-9 3h2v2h-2V8zm0 3h2v2h-2v-2zM8 8h2v2H8V8zm0 3h2v2H8v-2zm-1 2H5v-2h2v2zm0-3H5V8h2v2zm9 7H8v-2h8v2zm0-4h-2v-2h2v2zm0-3h-2V8h2v2zm3 3h-2v-2h2v2zm0-3h-2V8h2v2z\"}}]})(props);\n};\nexport function MdKeyboardArrowDown (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M7.41 7.84L12 12.42l4.59-4.58L18 9.25l-6 6-6-6z\"}}]})(props);\n};\nexport function MdKeyboardArrowLeft (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M15.41 16.09l-4.58-4.59 4.58-4.59L14 5.5l-6 6 6 6z\"}}]})(props);\n};\nexport function MdKeyboardArrowRight (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M8.59 16.34l4.58-4.59-4.58-4.59L10 5.75l6 6-6 6z\"}}]})(props);\n};\nexport function MdKeyboardArrowUp (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M7.41 15.41L12 10.83l4.59 4.58L18 14l-6-6-6 6z\"}}]})(props);\n};\nexport function MdKeyboardBackspace (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M21 11H6.83l3.58-3.59L9 6l-6 6 6 6 1.41-1.41L6.83 13H21z\"}}]})(props);\n};\nexport function MdKeyboardCapslock (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 8.41L16.59 13 18 11.59l-6-6-6 6L7.41 13 12 8.41zM6 18h12v-2H6v2z\"}}]})(props);\n};\nexport function MdKeyboardHide (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M20 3H4c-1.1 0-1.99.9-1.99 2L2 15c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-9 3h2v2h-2V6zm0 3h2v2h-2V9zM8 6h2v2H8V6zm0 3h2v2H8V9zm-1 2H5V9h2v2zm0-3H5V6h2v2zm9 7H8v-2h8v2zm0-4h-2V9h2v2zm0-3h-2V6h2v2zm3 3h-2V9h2v2zm0-3h-2V6h2v2zm-7 15l4-4H8l4 4z\"}}]})(props);\n};\nexport function MdKeyboardReturn (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M19 7v4H5.83l3.58-3.59L8 6l-6 6 6 6 1.41-1.41L5.83 13H21V7z\"}}]})(props);\n};\nexport function MdKeyboardTab (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M11.59 7.41L15.17 11H1v2h14.17l-3.59 3.59L13 18l6-6-6-6-1.41 1.41zM20 6v12h2V6h-2z\"}}]})(props);\n};\nexport function MdKeyboardVoice (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 15c1.66 0 2.99-1.34 2.99-3L15 6c0-1.66-1.34-3-3-3S9 4.34 9 6v6c0 1.66 1.34 3 3 3zm5.3-3c0 3-2.54 5.1-5.3 5.1S6.7 15 6.7 12H5c0 3.42 2.72 6.23 6 6.72V22h2v-3.28c3.28-.48 6-3.3 6-6.72h-1.7z\"}}]})(props);\n};\nexport function MdLaptop (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M20 18c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2H4c-1.1 0-2 .9-2 2v10c0 1.1.9 2 2 2H0v2h24v-2h-4zM4 6h16v10H4V6z\"}}]})(props);\n};\nexport function MdLaptopChromebook (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M22 18V3H2v15H0v2h24v-2h-2zm-8 0h-4v-1h4v1zm6-3H4V5h16v10z\"}}]})(props);\n};\nexport function MdLaptopMac (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M20 18c1.1 0 1.99-.9 1.99-2L22 5c0-1.1-.9-2-2-2H4c-1.1 0-2 .9-2 2v11c0 1.1.9 2 2 2H0c0 1.1.9 2 2 2h20c1.1 0 2-.9 2-2h-4zM4 5h16v11H4V5zm8 14c-.55 0-1-.45-1-1s.45-1 1-1 1 .45 1 1-.45 1-1 1z\"}}]})(props);\n};\nexport function MdLaptopWindows (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M20 18v-1c1.1 0 1.99-.9 1.99-2L22 5c0-1.1-.9-2-2-2H4c-1.1 0-2 .9-2 2v10c0 1.1.9 2 2 2v1H0v2h24v-2h-4zM4 5h16v10H4V5z\"}}]})(props);\n};\nexport function MdMemory (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M15 9H9v6h6V9zm-2 4h-2v-2h2v2zm8-2V9h-2V7c0-1.1-.9-2-2-2h-2V3h-2v2h-2V3H9v2H7c-1.1 0-2 .9-2 2v2H3v2h2v2H3v2h2v2c0 1.1.9 2 2 2h2v2h2v-2h2v2h2v-2h2c1.1 0 2-.9 2-2v-2h2v-2h-2v-2h2zm-4 6H7V7h10v10z\"}}]})(props);\n};\nexport function MdMouse (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M13 1.07V9h7c0-4.08-3.05-7.44-7-7.93zM4 15c0 4.42 3.58 8 8 8s8-3.58 8-8v-4H4v4zm7-13.93C7.05 1.56 4 4.92 4 9h7V1.07z\"}}]})(props);\n};\nexport function MdPhoneAndroid (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M16 1H8C6.34 1 5 2.34 5 4v16c0 1.66 1.34 3 3 3h8c1.66 0 3-1.34 3-3V4c0-1.66-1.34-3-3-3zm-2 20h-4v-1h4v1zm3.25-3H6.75V4h10.5v14z\"}}]})(props);\n};\nexport function MdPhoneIphone (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M15.5 1h-8C6.12 1 5 2.12 5 3.5v17C5 21.88 6.12 23 7.5 23h8c1.38 0 2.5-1.12 2.5-2.5v-17C18 2.12 16.88 1 15.5 1zm-4 21c-.83 0-1.5-.67-1.5-1.5s.67-1.5 1.5-1.5 1.5.67 1.5 1.5-.67 1.5-1.5 1.5zm4.5-4H7V4h9v14z\"}}]})(props);\n};\nexport function MdPhonelink (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M4 6h18V4H4c-1.1 0-2 .9-2 2v11H0v3h14v-3H4V6zm19 2h-6c-.55 0-1 .45-1 1v10c0 .55.45 1 1 1h6c.55 0 1-.45 1-1V9c0-.55-.45-1-1-1zm-1 9h-4v-7h4v7z\"}}]})(props);\n};\nexport function MdPhonelinkOff (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M22 6V4H6.82l2 2H22zM1.92 1.65L.65 2.92l1.82 1.82C2.18 5.08 2 5.52 2 6v11H0v3h17.73l2.35 2.35 1.27-1.27L3.89 3.62 1.92 1.65zM4 6.27L14.73 17H4V6.27zM23 8h-6c-.55 0-1 .45-1 1v4.18l2 2V10h4v7h-2.18l3 3H23c.55 0 1-.45 1-1V9c0-.55-.45-1-1-1z\"}}]})(props);\n};\nexport function MdPowerInput (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M2 9v2h19V9H2zm0 6h5v-2H2v2zm7 0h5v-2H9v2zm7 0h5v-2h-5v2z\"}}]})(props);\n};\nexport function MdRouter (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M20.2 5.9l.8-.8C19.6 3.7 17.8 3 16 3s-3.6.7-5 2.1l.8.8C13 4.8 14.5 4.2 16 4.2s3 .6 4.2 1.7zm-.9.8c-.9-.9-2.1-1.4-3.3-1.4s-2.4.5-3.3 1.4l.8.8c.7-.7 1.6-1 2.5-1 .9 0 1.8.3 2.5 1l.8-.8zM19 13h-2V9h-2v4H5c-1.1 0-2 .9-2 2v4c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2v-4c0-1.1-.9-2-2-2zM8 18H6v-2h2v2zm3.5 0h-2v-2h2v2zm3.5 0h-2v-2h2v2z\"}}]})(props);\n};\nexport function MdScanner (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M19.8 10.7L4.2 5l-.7 1.9L17.6 12H5c-1.1 0-2 .9-2 2v4c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2v-5.5c0-.8-.5-1.6-1.2-1.8zM7 17H5v-2h2v2zm12 0H9v-2h10v2z\"}}]})(props);\n};\nexport function MdSecurity (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 1L3 5v6c0 5.55 3.84 10.74 9 12 5.16-1.26 9-6.45 9-12V5l-9-4zm0 10.99h7c-.53 4.12-3.28 7.79-7 8.94V12H5V6.3l7-3.11v8.8z\"}}]})(props);\n};\nexport function MdSimCard (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M19.99 4c0-1.1-.89-2-1.99-2h-8L4 8v12c0 1.1.9 2 2 2h12.01c1.1 0 1.99-.9 1.99-2l-.01-16zM9 19H7v-2h2v2zm8 0h-2v-2h2v2zm-8-4H7v-4h2v4zm4 4h-2v-4h2v4zm0-6h-2v-2h2v2zm4 2h-2v-4h2v4z\"}}]})(props);\n};\nexport function MdSmartphone (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M17 1.01L7 1c-1.1 0-2 .9-2 2v18c0 1.1.9 2 2 2h10c1.1 0 2-.9 2-2V3c0-1.1-.9-1.99-2-1.99zM17 19H7V5h10v14z\"}}]})(props);\n};\nexport function MdSpeaker (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M17 2H7c-1.1 0-2 .9-2 2v16c0 1.1.9 1.99 2 1.99L17 22c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm-5 2c1.1 0 2 .9 2 2s-.9 2-2 2c-1.11 0-2-.9-2-2s.89-2 2-2zm0 16c-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5-2.24 5-5 5zm0-8c-1.66 0-3 1.34-3 3s1.34 3 3 3 3-1.34 3-3-1.34-3-3-3z\"}}]})(props);\n};\nexport function MdSpeakerGroup (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M18.2 1H9.8C8.81 1 8 1.81 8 2.8v14.4c0 .99.81 1.79 1.8 1.79l8.4.01c.99 0 1.8-.81 1.8-1.8V2.8c0-.99-.81-1.8-1.8-1.8zM14 3c1.1 0 2 .89 2 2s-.9 2-2 2-2-.89-2-2 .9-2 2-2zm0 13.5c-2.21 0-4-1.79-4-4s1.79-4 4-4 4 1.79 4 4-1.79 4-4 4z\"}},{\"tag\":\"circle\",\"attr\":{\"cx\":\"14\",\"cy\":\"12.5\",\"r\":\"2.5\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M6 5H4v16c0 1.1.89 2 2 2h10v-2H6V5z\"}}]})(props);\n};\nexport function MdTablet (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M21 4H3c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h18c1.1 0 1.99-.9 1.99-2L23 6c0-1.1-.9-2-2-2zm-2 14H5V6h14v12z\"}}]})(props);\n};\nexport function MdTabletAndroid (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M18 0H6C4.34 0 3 1.34 3 3v18c0 1.66 1.34 3 3 3h12c1.66 0 3-1.34 3-3V3c0-1.66-1.34-3-3-3zm-4 22h-4v-1h4v1zm5.25-3H4.75V3h14.5v16z\"}}]})(props);\n};\nexport function MdTabletMac (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M18.5 0h-14C3.12 0 2 1.12 2 2.5v19C2 22.88 3.12 24 4.5 24h14c1.38 0 2.5-1.12 2.5-2.5v-19C21 1.12 19.88 0 18.5 0zm-7 23c-.83 0-1.5-.67-1.5-1.5s.67-1.5 1.5-1.5 1.5.67 1.5 1.5-.67 1.5-1.5 1.5zm7.5-4H4V3h15v16z\"}}]})(props);\n};\nexport function MdToys (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 12c0-3 2.5-5.5 5.5-5.5S23 9 23 12H12zm0 0c0 3-2.5 5.5-5.5 5.5S1 15 1 12h11zm0 0c-3 0-5.5-2.5-5.5-5.5S9 1 12 1v11zm0 0c3 0 5.5 2.5 5.5 5.5S15 23 12 23V12z\"}}]})(props);\n};\nexport function MdTv (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M21 3H3c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h5v2h8v-2h5c1.1 0 1.99-.9 1.99-2L23 5c0-1.1-.9-2-2-2zm0 14H3V5h18v12z\"}}]})(props);\n};\nexport function MdVideogameAsset (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M21 6H3c-1.1 0-2 .9-2 2v8c0 1.1.9 2 2 2h18c1.1 0 2-.9 2-2V8c0-1.1-.9-2-2-2zm-10 7H8v3H6v-3H3v-2h3V8h2v3h3v2zm4.5 2c-.83 0-1.5-.67-1.5-1.5s.67-1.5 1.5-1.5 1.5.67 1.5 1.5-.67 1.5-1.5 1.5zm4-3c-.83 0-1.5-.67-1.5-1.5S18.67 9 19.5 9s1.5.67 1.5 1.5-.67 1.5-1.5 1.5z\"}}]})(props);\n};\nexport function MdWatch (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M20 12c0-2.54-1.19-4.81-3.04-6.27L16 0H8l-.95 5.73C5.19 7.19 4 9.45 4 12s1.19 4.81 3.05 6.27L8 24h8l.96-5.73C18.81 16.81 20 14.54 20 12zM6 12c0-3.31 2.69-6 6-6s6 2.69 6 6-2.69 6-6 6-6-2.69-6-6z\"}}]})(props);\n};\nexport function MdAddAPhoto (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M3 4V1h2v3h3v2H5v3H3V6H0V4h3zm3 6V7h3V4h7l1.83 2H21c1.1 0 2 .9 2 2v12c0 1.1-.9 2-2 2H5c-1.1 0-2-.9-2-2V10h3zm7 9c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zm-3.2-5c0 1.77 1.43 3.2 3.2 3.2s3.2-1.43 3.2-3.2-1.43-3.2-3.2-3.2-3.2 1.43-3.2 3.2z\"}}]})(props);\n};\nexport function MdAddToPhotos (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M4 6H2v14c0 1.1.9 2 2 2h14v-2H4V6zm16-4H8c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm-1 9h-4v4h-2v-4H9V9h4V5h2v4h4v2z\"}}]})(props);\n};\nexport function MdAdjust (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 2C6.49 2 2 6.49 2 12s4.49 10 10 10 10-4.49 10-10S17.51 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm3-8c0 1.66-1.34 3-3 3s-3-1.34-3-3 1.34-3 3-3 3 1.34 3 3z\"}}]})(props);\n};\nexport function MdAssistant (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M19 2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h4l3 3 3-3h4c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm-5.12 10.88L12 17l-1.88-4.12L6 11l4.12-1.88L12 5l1.88 4.12L18 11l-4.12 1.88z\"}}]})(props);\n};\nexport function MdAssistantPhoto (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M14.4 6L14 4H5v17h2v-7h5.6l.4 2h7V6z\"}}]})(props);\n};\nexport function MdAudiotrack (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 3v9.28c-.47-.17-.97-.28-1.5-.28C8.01 12 6 14.01 6 16.5S8.01 21 10.5 21c2.31 0 4.2-1.75 4.45-4H15V6h4V3h-7z\"}}]})(props);\n};\nexport function MdBlurCircular (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M10 9c-.55 0-1 .45-1 1s.45 1 1 1 1-.45 1-1-.45-1-1-1zm0 4c-.55 0-1 .45-1 1s.45 1 1 1 1-.45 1-1-.45-1-1-1zM7 9.5c-.28 0-.5.22-.5.5s.22.5.5.5.5-.22.5-.5-.22-.5-.5-.5zm3 7c-.28 0-.5.22-.5.5s.22.5.5.5.5-.22.5-.5-.22-.5-.5-.5zm-3-3c-.28 0-.5.22-.5.5s.22.5.5.5.5-.22.5-.5-.22-.5-.5-.5zm3-6c.28 0 .5-.22.5-.5s-.22-.5-.5-.5-.5.22-.5.5.22.5.5.5zM14 9c-.55 0-1 .45-1 1s.45 1 1 1 1-.45 1-1-.45-1-1-1zm0-1.5c.28 0 .5-.22.5-.5s-.22-.5-.5-.5-.5.22-.5.5.22.5.5.5zm3 6c-.28 0-.5.22-.5.5s.22.5.5.5.5-.22.5-.5-.22-.5-.5-.5zm0-4c-.28 0-.5.22-.5.5s.22.5.5.5.5-.22.5-.5-.22-.5-.5-.5zM12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8zm2-3.5c-.28 0-.5.22-.5.5s.22.5.5.5.5-.22.5-.5-.22-.5-.5-.5zm0-3.5c-.55 0-1 .45-1 1s.45 1 1 1 1-.45 1-1-.45-1-1-1z\"}}]})(props);\n};\nexport function MdBlurLinear (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M5 17.5c.83 0 1.5-.67 1.5-1.5s-.67-1.5-1.5-1.5-1.5.67-1.5 1.5.67 1.5 1.5 1.5zM9 13c.55 0 1-.45 1-1s-.45-1-1-1-1 .45-1 1 .45 1 1 1zm0-4c.55 0 1-.45 1-1s-.45-1-1-1-1 .45-1 1 .45 1 1 1zM3 21h18v-2H3v2zM5 9.5c.83 0 1.5-.67 1.5-1.5S5.83 6.5 5 6.5 3.5 7.17 3.5 8 4.17 9.5 5 9.5zm0 4c.83 0 1.5-.67 1.5-1.5s-.67-1.5-1.5-1.5-1.5.67-1.5 1.5.67 1.5 1.5 1.5zM9 17c.55 0 1-.45 1-1s-.45-1-1-1-1 .45-1 1 .45 1 1 1zm8-.5c.28 0 .5-.22.5-.5s-.22-.5-.5-.5-.5.22-.5.5.22.5.5.5zM3 3v2h18V3H3zm14 5.5c.28 0 .5-.22.5-.5s-.22-.5-.5-.5-.5.22-.5.5.22.5.5.5zm0 4c.28 0 .5-.22.5-.5s-.22-.5-.5-.5-.5.22-.5.5.22.5.5.5zM13 9c.55 0 1-.45 1-1s-.45-1-1-1-1 .45-1 1 .45 1 1 1zm0 4c.55 0 1-.45 1-1s-.45-1-1-1-1 .45-1 1 .45 1 1 1zm0 4c.55 0 1-.45 1-1s-.45-1-1-1-1 .45-1 1 .45 1 1 1z\"}}]})(props);\n};\nexport function MdBlurOff (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M14 7c.55 0 1-.45 1-1s-.45-1-1-1-1 .45-1 1 .45 1 1 1zm-.2 4.48l.2.02c.83 0 1.5-.67 1.5-1.5s-.67-1.5-1.5-1.5-1.5.67-1.5 1.5l.02.2c.09.67.61 1.19 1.28 1.28zM14 3.5c.28 0 .5-.22.5-.5s-.22-.5-.5-.5-.5.22-.5.5.22.5.5.5zm-4 0c.28 0 .5-.22.5-.5s-.22-.5-.5-.5-.5.22-.5.5.22.5.5.5zm11 7c.28 0 .5-.22.5-.5s-.22-.5-.5-.5-.5.22-.5.5.22.5.5.5zM10 7c.55 0 1-.45 1-1s-.45-1-1-1-1 .45-1 1 .45 1 1 1zm8 8c.55 0 1-.45 1-1s-.45-1-1-1-1 .45-1 1 .45 1 1 1zm0-4c.55 0 1-.45 1-1s-.45-1-1-1-1 .45-1 1 .45 1 1 1zm0-4c.55 0 1-.45 1-1s-.45-1-1-1-1 .45-1 1 .45 1 1 1zm-4 13.5c-.28 0-.5.22-.5.5s.22.5.5.5.5-.22.5-.5-.22-.5-.5-.5zM2.5 5.27l3.78 3.78L6 9c-.55 0-1 .45-1 1s.45 1 1 1 1-.45 1-1c0-.1-.03-.19-.06-.28l2.81 2.81c-.71.11-1.25.73-1.25 1.47 0 .83.67 1.5 1.5 1.5.74 0 1.36-.54 1.47-1.25l2.81 2.81c-.09-.03-.18-.06-.28-.06-.55 0-1 .45-1 1s.45 1 1 1 1-.45 1-1c0-.1-.03-.19-.06-.28l3.78 3.78L20 20.23 3.77 4 2.5 5.27zM10 17c-.55 0-1 .45-1 1s.45 1 1 1 1-.45 1-1-.45-1-1-1zm11-3.5c-.28 0-.5.22-.5.5s.22.5.5.5.5-.22.5-.5-.22-.5-.5-.5zM6 13c-.55 0-1 .45-1 1s.45 1 1 1 1-.45 1-1-.45-1-1-1zM3 9.5c-.28 0-.5.22-.5.5s.22.5.5.5.5-.22.5-.5-.22-.5-.5-.5zm7 11c-.28 0-.5.22-.5.5s.22.5.5.5.5-.22.5-.5-.22-.5-.5-.5zM6 17c-.55 0-1 .45-1 1s.45 1 1 1 1-.45 1-1-.45-1-1-1zm-3-3.5c-.28 0-.5.22-.5.5s.22.5.5.5.5-.22.5-.5-.22-.5-.5-.5z\"}}]})(props);\n};\nexport function MdBlurOn (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M6 13c-.55 0-1 .45-1 1s.45 1 1 1 1-.45 1-1-.45-1-1-1zm0 4c-.55 0-1 .45-1 1s.45 1 1 1 1-.45 1-1-.45-1-1-1zm0-8c-.55 0-1 .45-1 1s.45 1 1 1 1-.45 1-1-.45-1-1-1zm-3 .5c-.28 0-.5.22-.5.5s.22.5.5.5.5-.22.5-.5-.22-.5-.5-.5zM6 5c-.55 0-1 .45-1 1s.45 1 1 1 1-.45 1-1-.45-1-1-1zm15 5.5c.28 0 .5-.22.5-.5s-.22-.5-.5-.5-.5.22-.5.5.22.5.5.5zM14 7c.55 0 1-.45 1-1s-.45-1-1-1-1 .45-1 1 .45 1 1 1zm0-3.5c.28 0 .5-.22.5-.5s-.22-.5-.5-.5-.5.22-.5.5.22.5.5.5zm-11 10c-.28 0-.5.22-.5.5s.22.5.5.5.5-.22.5-.5-.22-.5-.5-.5zm7 7c-.28 0-.5.22-.5.5s.22.5.5.5.5-.22.5-.5-.22-.5-.5-.5zm0-17c.28 0 .5-.22.5-.5s-.22-.5-.5-.5-.5.22-.5.5.22.5.5.5zM10 7c.55 0 1-.45 1-1s-.45-1-1-1-1 .45-1 1 .45 1 1 1zm0 5.5c-.83 0-1.5.67-1.5 1.5s.67 1.5 1.5 1.5 1.5-.67 1.5-1.5-.67-1.5-1.5-1.5zm8 .5c-.55 0-1 .45-1 1s.45 1 1 1 1-.45 1-1-.45-1-1-1zm0 4c-.55 0-1 .45-1 1s.45 1 1 1 1-.45 1-1-.45-1-1-1zm0-8c-.55 0-1 .45-1 1s.45 1 1 1 1-.45 1-1-.45-1-1-1zm0-4c-.55 0-1 .45-1 1s.45 1 1 1 1-.45 1-1-.45-1-1-1zm3 8.5c-.28 0-.5.22-.5.5s.22.5.5.5.5-.22.5-.5-.22-.5-.5-.5zM14 17c-.55 0-1 .45-1 1s.45 1 1 1 1-.45 1-1-.45-1-1-1zm0 3.5c-.28 0-.5.22-.5.5s.22.5.5.5.5-.22.5-.5-.22-.5-.5-.5zm-4-12c-.83 0-1.5.67-1.5 1.5s.67 1.5 1.5 1.5 1.5-.67 1.5-1.5-.67-1.5-1.5-1.5zm0 8.5c-.55 0-1 .45-1 1s.45 1 1 1 1-.45 1-1-.45-1-1-1zm4-4.5c-.83 0-1.5.67-1.5 1.5s.67 1.5 1.5 1.5 1.5-.67 1.5-1.5-.67-1.5-1.5-1.5zm0-4c-.83 0-1.5.67-1.5 1.5s.67 1.5 1.5 1.5 1.5-.67 1.5-1.5-.67-1.5-1.5-1.5z\"}}]})(props);\n};\nexport function MdBrightness1 (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"circle\",\"attr\":{\"cx\":\"12\",\"cy\":\"12\",\"r\":\"10\"}}]})(props);\n};\nexport function MdBrightness2 (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M10 2c-1.82 0-3.53.5-5 1.35C7.99 5.08 10 8.3 10 12s-2.01 6.92-5 8.65C6.47 21.5 8.18 22 10 22c5.52 0 10-4.48 10-10S15.52 2 10 2z\"}}]})(props);\n};\nexport function MdBrightness3 (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M9 2c-1.05 0-2.05.16-3 .46 4.06 1.27 7 5.06 7 9.54 0 4.48-2.94 8.27-7 9.54.95.3 1.95.46 3 .46 5.52 0 10-4.48 10-10S14.52 2 9 2z\"}}]})(props);\n};\nexport function MdBrightness4 (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M20 8.69V4h-4.69L12 .69 8.69 4H4v4.69L.69 12 4 15.31V20h4.69L12 23.31 15.31 20H20v-4.69L23.31 12 20 8.69zM12 18c-.89 0-1.74-.2-2.5-.55C11.56 16.5 13 14.42 13 12s-1.44-4.5-3.5-5.45C10.26 6.2 11.11 6 12 6c3.31 0 6 2.69 6 6s-2.69 6-6 6z\"}}]})(props);\n};\nexport function MdBrightness5 (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M20 15.31L23.31 12 20 8.69V4h-4.69L12 .69 8.69 4H4v4.69L.69 12 4 15.31V20h4.69L12 23.31 15.31 20H20v-4.69zM12 18c-3.31 0-6-2.69-6-6s2.69-6 6-6 6 2.69 6 6-2.69 6-6 6z\"}}]})(props);\n};\nexport function MdBrightness6 (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M20 15.31L23.31 12 20 8.69V4h-4.69L12 .69 8.69 4H4v4.69L.69 12 4 15.31V20h4.69L12 23.31 15.31 20H20v-4.69zM12 18V6c3.31 0 6 2.69 6 6s-2.69 6-6 6z\"}}]})(props);\n};\nexport function MdBrightness7 (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M20 8.69V4h-4.69L12 .69 8.69 4H4v4.69L.69 12 4 15.31V20h4.69L12 23.31 15.31 20H20v-4.69L23.31 12 20 8.69zM12 18c-3.31 0-6-2.69-6-6s2.69-6 6-6 6 2.69 6 6-2.69 6-6 6zm0-10c-2.21 0-4 1.79-4 4s1.79 4 4 4 4-1.79 4-4-1.79-4-4-4z\"}}]})(props);\n};\nexport function MdBrokenImage (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M21 5v6.59l-3-3.01-4 4.01-4-4-4 4-3-3.01V5c0-1.1.9-2 2-2h14c1.1 0 2 .9 2 2zm-3 6.42l3 3.01V19c0 1.1-.9 2-2 2H5c-1.1 0-2-.9-2-2v-6.58l3 2.99 4-4 4 4 4-3.99z\"}}]})(props);\n};\nexport function MdBrush (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M7 14c-1.66 0-3 1.34-3 3 0 1.31-1.16 2-2 2 .92 1.22 2.49 2 4 2 2.21 0 4-1.79 4-4 0-1.66-1.34-3-3-3zm13.71-9.37l-1.34-1.34c-.39-.39-1.02-.39-1.41 0L9 12.25 11.75 15l8.96-8.96c.39-.39.39-1.02 0-1.41z\"}}]})(props);\n};\nexport function MdBurstMode (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M1 5h2v14H1zm4 0h2v14H5zm17 0H10c-.55 0-1 .45-1 1v12c0 .55.45 1 1 1h12c.55 0 1-.45 1-1V6c0-.55-.45-1-1-1zM11 17l2.5-3.15L15.29 16l2.5-3.22L21 17H11z\"}}]})(props);\n};\nexport function MdCamera (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M9.4 10.5l4.77-8.26C13.47 2.09 12.75 2 12 2c-2.4 0-4.6.85-6.32 2.25l3.66 6.35.06-.1zM21.54 9c-.92-2.92-3.15-5.26-6-6.34L11.88 9h9.66zm.26 1h-7.49l.29.5 4.76 8.25C21 16.97 22 14.61 22 12c0-.69-.07-1.35-.2-2zM8.54 12l-3.9-6.75C3.01 7.03 2 9.39 2 12c0 .69.07 1.35.2 2h7.49l-1.15-2zm-6.08 3c.92 2.92 3.15 5.26 6 6.34L12.12 15H2.46zm11.27 0l-3.9 6.76c.7.15 1.42.24 2.17.24 2.4 0 4.6-.85 6.32-2.25l-3.66-6.35-.93 1.6z\"}}]})(props);\n};\nexport function MdCameraAlt (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"circle\",\"attr\":{\"cx\":\"12\",\"cy\":\"12\",\"r\":\"3.2\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M9 2L7.17 4H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2h-3.17L15 2H9zm3 15c-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5-2.24 5-5 5z\"}}]})(props);\n};\nexport function MdCameraFront (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M10 20H5v2h5v2l3-3-3-3v2zm4 0v2h5v-2h-5zM12 8c1.1 0 2-.9 2-2s-.9-2-2-2-1.99.9-1.99 2S10.9 8 12 8zm5-8H7C5.9 0 5 .9 5 2v14c0 1.1.9 2 2 2h10c1.1 0 2-.9 2-2V2c0-1.1-.9-2-2-2zM7 2h10v10.5c0-1.67-3.33-2.5-5-2.5s-5 .83-5 2.5V2z\"}}]})(props);\n};\nexport function MdCameraRear (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M10 20H5v2h5v2l3-3-3-3v2zm4 0v2h5v-2h-5zm3-20H7C5.9 0 5 .9 5 2v14c0 1.1.9 2 2 2h10c1.1 0 2-.9 2-2V2c0-1.1-.9-2-2-2zm-5 6c-1.11 0-2-.9-2-2s.89-2 1.99-2 2 .9 2 2C14 5.1 13.1 6 12 6z\"}}]})(props);\n};\nexport function MdCameraRoll (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M14 5c0-1.1-.9-2-2-2h-1V2c0-.55-.45-1-1-1H6c-.55 0-1 .45-1 1v1H4c-1.1 0-2 .9-2 2v15c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2h8V5h-8zm-2 13h-2v-2h2v2zm0-9h-2V7h2v2zm4 9h-2v-2h2v2zm0-9h-2V7h2v2zm4 9h-2v-2h2v2zm0-9h-2V7h2v2z\"}}]})(props);\n};\nexport function MdCenterFocusStrong (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 8c-2.21 0-4 1.79-4 4s1.79 4 4 4 4-1.79 4-4-1.79-4-4-4zm-7 7H3v4c0 1.1.9 2 2 2h4v-2H5v-4zM5 5h4V3H5c-1.1 0-2 .9-2 2v4h2V5zm14-2h-4v2h4v4h2V5c0-1.1-.9-2-2-2zm0 16h-4v2h4c1.1 0 2-.9 2-2v-4h-2v4z\"}}]})(props);\n};\nexport function MdCenterFocusWeak (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M5 15H3v4c0 1.1.9 2 2 2h4v-2H5v-4zM5 5h4V3H5c-1.1 0-2 .9-2 2v4h2V5zm14-2h-4v2h4v4h2V5c0-1.1-.9-2-2-2zm0 16h-4v2h4c1.1 0 2-.9 2-2v-4h-2v4zM12 8c-2.21 0-4 1.79-4 4s1.79 4 4 4 4-1.79 4-4-1.79-4-4-4zm0 6c-1.1 0-2-.9-2-2s.9-2 2-2 2 .9 2 2-.9 2-2 2z\"}}]})(props);\n};\nexport function MdCollections (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M22 16V4c0-1.1-.9-2-2-2H8c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2zm-11-4l2.03 2.71L16 11l4 5H8l3-4zM2 6v14c0 1.1.9 2 2 2h14v-2H4V6H2z\"}}]})(props);\n};\nexport function MdCollectionsBookmark (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M4 6H2v14c0 1.1.9 2 2 2h14v-2H4V6zm16-4H8c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm0 10l-2.5-1.5L15 12V4h5v8z\"}}]})(props);\n};\nexport function MdColorLens (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 3c-4.97 0-9 4.03-9 9s4.03 9 9 9c.83 0 1.5-.67 1.5-1.5 0-.39-.15-.74-.39-1.01-.23-.26-.38-.61-.38-.99 0-.83.67-1.5 1.5-1.5H16c2.76 0 5-2.24 5-5 0-4.42-4.03-8-9-8zm-5.5 9c-.83 0-1.5-.67-1.5-1.5S5.67 9 6.5 9 8 9.67 8 10.5 7.33 12 6.5 12zm3-4C8.67 8 8 7.33 8 6.5S8.67 5 9.5 5s1.5.67 1.5 1.5S10.33 8 9.5 8zm5 0c-.83 0-1.5-.67-1.5-1.5S13.67 5 14.5 5s1.5.67 1.5 1.5S15.33 8 14.5 8zm3 4c-.83 0-1.5-.67-1.5-1.5S16.67 9 17.5 9s1.5.67 1.5 1.5-.67 1.5-1.5 1.5z\"}}]})(props);\n};\nexport function MdColorize (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M20.71 5.63l-2.34-2.34c-.39-.39-1.02-.39-1.41 0l-3.12 3.12-1.93-1.91-1.41 1.41 1.42 1.42L3 16.25V21h4.75l8.92-8.92 1.42 1.42 1.41-1.41-1.92-1.92 3.12-3.12c.4-.4.4-1.03.01-1.42zM6.92 19L5 17.08l8.06-8.06 1.92 1.92L6.92 19z\"}}]})(props);\n};\nexport function MdCompare (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M10 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h5v2h2V1h-2v2zm0 15H5l5-6v6zm9-15h-5v2h5v13l-5-6v9h5c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z\"}}]})(props);\n};\nexport function MdControlPoint (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M13 7h-2v4H7v2h4v4h2v-4h4v-2h-4V7zm-1-5C6.49 2 2 6.49 2 12s4.49 10 10 10 10-4.49 10-10S17.51 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z\"}}]})(props);\n};\nexport function MdControlPointDuplicate (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M16 8h-2v3h-3v2h3v3h2v-3h3v-2h-3zM2 12c0-2.79 1.64-5.2 4.01-6.32V3.52C2.52 4.76 0 8.09 0 12s2.52 7.24 6.01 8.48v-2.16C3.64 17.2 2 14.79 2 12zm13-9c-4.96 0-9 4.04-9 9s4.04 9 9 9 9-4.04 9-9-4.04-9-9-9zm0 16c-3.86 0-7-3.14-7-7s3.14-7 7-7 7 3.14 7 7-3.14 7-7 7z\"}}]})(props);\n};\nexport function MdCrop169 (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M19 6H5c-1.1 0-2 .9-2 2v8c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V8c0-1.1-.9-2-2-2zm0 10H5V8h14v8z\"}}]})(props);\n};\nexport function MdCrop (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M17 15h2V7c0-1.1-.9-2-2-2H9v2h8v8zM7 17V1H5v4H1v2h4v10c0 1.1.9 2 2 2h10v4h2v-4h4v-2H7z\"}}]})(props);\n};\nexport function MdCrop32 (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M19 4H5c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm0 14H5V6h14v12z\"}}]})(props);\n};\nexport function MdCrop54 (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M19 5H5c-1.1 0-2 .9-2 2v10c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V7c0-1.1-.9-2-2-2zm0 12H5V7h14v10z\"}}]})(props);\n};\nexport function MdCrop75 (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M19 7H5c-1.1 0-2 .9-2 2v6c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V9c0-1.1-.9-2-2-2zm0 8H5V9h14v6z\"}}]})(props);\n};\nexport function MdCropDin (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H5V5h14v14z\"}}]})(props);\n};\nexport function MdCropFree (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M3 5v4h2V5h4V3H5c-1.1 0-2 .9-2 2zm2 10H3v4c0 1.1.9 2 2 2h4v-2H5v-4zm14 4h-4v2h4c1.1 0 2-.9 2-2v-4h-2v4zm0-16h-4v2h4v4h2V5c0-1.1-.9-2-2-2z\"}}]})(props);\n};\nexport function MdCropLandscape (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M19 5H5c-1.1 0-2 .9-2 2v10c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V7c0-1.1-.9-2-2-2zm0 12H5V7h14v10z\"}}]})(props);\n};\nexport function MdCropOriginal (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H5V5h14v14zm-5.04-6.71l-2.75 3.54-1.96-2.36L6.5 17h11l-3.54-4.71z\"}}]})(props);\n};\nexport function MdCropPortrait (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M17 3H7c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h10c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H7V5h10v14z\"}}]})(props);\n};\nexport function MdCropRotate (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M7.47 21.49C4.2 19.93 1.86 16.76 1.5 13H0c.51 6.16 5.66 11 11.95 11 .23 0 .44-.02.66-.03L8.8 20.15l-1.33 1.34zM12.05 0c-.23 0-.44.02-.66.04l3.81 3.81 1.33-1.33C19.8 4.07 22.14 7.24 22.5 11H24c-.51-6.16-5.66-11-11.95-11zM16 14h2V8c0-1.11-.9-2-2-2h-6v2h6v6zm-8 2V4H6v2H4v2h2v8c0 1.1.89 2 2 2h8v2h2v-2h2v-2H8z\"}}]})(props);\n};\nexport function MdCropSquare (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M18 4H6c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm0 14H6V6h12v12z\"}}]})(props);\n};\nexport function MdDehaze (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M2 15.5v2h20v-2H2zm0-5v2h20v-2H2zm0-5v2h20v-2H2z\"}}]})(props);\n};\nexport function MdDetails (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M3 4l9 16 9-16H3zm3.38 2h11.25L12 16 6.38 6z\"}}]})(props);\n};\nexport function MdEdit (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34c-.39-.39-1.02-.39-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z\"}}]})(props);\n};\nexport function MdExposure (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M15 17v2h2v-2h2v-2h-2v-2h-2v2h-2v2h2zm5-15H4c-1.1 0-2 .9-2 2v16c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zM5 5h6v2H5V5zm15 15H4L20 4v16z\"}}]})(props);\n};\nexport function MdExposureNeg1 (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M4 11v2h8v-2H4zm15 7h-2V7.38L14 8.4V6.7L18.7 5h.3v13z\"}}]})(props);\n};\nexport function MdExposureNeg2 (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M15.05 16.29l2.86-3.07c.38-.39.72-.79 1.04-1.18.32-.39.59-.78.82-1.17.23-.39.41-.78.54-1.17s.19-.79.19-1.18c0-.53-.09-1.02-.27-1.46-.18-.44-.44-.81-.78-1.11-.34-.31-.77-.54-1.26-.71-.51-.16-1.08-.24-1.72-.24-.69 0-1.31.11-1.85.32-.54.21-1 .51-1.36.88-.37.37-.65.8-.84 1.3-.18.47-.27.97-.28 1.5h2.14c.01-.31.05-.6.13-.87.09-.29.23-.54.4-.75.18-.21.41-.37.68-.49.27-.12.6-.18.96-.18.31 0 .58.05.81.15.23.1.43.25.59.43.16.18.28.4.37.65.08.25.13.52.13.81 0 .22-.03.43-.08.65-.06.22-.15.45-.29.7-.14.25-.32.53-.56.83-.23.3-.52.65-.88 1.03l-4.17 4.55V18H21v-1.71h-5.95zM2 11v2h8v-2H2z\"}}]})(props);\n};\nexport function MdExposurePlus1 (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M10 7H8v4H4v2h4v4h2v-4h4v-2h-4V7zm10 11h-2V7.38L15 8.4V6.7L19.7 5h.3v13z\"}}]})(props);\n};\nexport function MdExposurePlus2 (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M16.05 16.29l2.86-3.07c.38-.39.72-.79 1.04-1.18.32-.39.59-.78.82-1.17.23-.39.41-.78.54-1.17.13-.39.19-.79.19-1.18 0-.53-.09-1.02-.27-1.46-.18-.44-.44-.81-.78-1.11-.34-.31-.77-.54-1.26-.71-.51-.16-1.08-.24-1.72-.24-.69 0-1.31.11-1.85.32-.54.21-1 .51-1.36.88-.37.37-.65.8-.84 1.3-.18.47-.27.97-.28 1.5h2.14c.01-.31.05-.6.13-.87.09-.29.23-.54.4-.75.18-.21.41-.37.68-.49.27-.12.6-.18.96-.18.31 0 .58.05.81.15.23.1.43.25.59.43.16.18.28.4.37.65.08.25.13.52.13.81 0 .22-.03.43-.08.65-.06.22-.15.45-.29.7-.14.25-.32.53-.56.83-.23.3-.52.65-.88 1.03l-4.17 4.55V18H22v-1.71h-5.95zM8 7H6v4H2v2h4v4h2v-4h4v-2H8V7z\"}}]})(props);\n};\nexport function MdExposureZero (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M16.14 12.5c0 1-.1 1.85-.3 2.55-.2.7-.48 1.27-.83 1.7-.36.44-.79.75-1.3.95-.51.2-1.07.3-1.7.3-.62 0-1.18-.1-1.69-.3-.51-.2-.95-.51-1.31-.95-.36-.44-.65-1.01-.85-1.7-.2-.7-.3-1.55-.3-2.55v-2.04c0-1 .1-1.85.3-2.55.2-.7.48-1.26.84-1.69.36-.43.8-.74 1.31-.93C10.81 5.1 11.38 5 12 5c.63 0 1.19.1 1.7.29.51.19.95.5 1.31.93.36.43.64.99.84 1.69.2.7.3 1.54.3 2.55v2.04zm-2.11-2.36c0-.64-.05-1.18-.13-1.62-.09-.44-.22-.79-.4-1.06-.17-.27-.39-.46-.64-.58-.25-.13-.54-.19-.86-.19-.32 0-.61.06-.86.18s-.47.31-.64.58c-.17.27-.31.62-.4 1.06s-.13.98-.13 1.62v2.67c0 .64.05 1.18.14 1.62.09.45.23.81.4 1.09s.39.48.64.61.54.19.87.19c.33 0 .62-.06.87-.19s.46-.33.63-.61c.17-.28.3-.64.39-1.09.09-.45.13-.99.13-1.62v-2.66z\"}}]})(props);\n};\nexport function MdFilter1 (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M3 5H1v16c0 1.1.9 2 2 2h16v-2H3V5zm11 10h2V5h-4v2h2v8zm7-14H7c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V3c0-1.1-.9-2-2-2zm0 16H7V3h14v14z\"}}]})(props);\n};\nexport function MdFilter2 (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M3 5H1v16c0 1.1.9 2 2 2h16v-2H3V5zm18-4H7c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V3c0-1.1-.9-2-2-2zm0 16H7V3h14v14zm-4-4h-4v-2h2c1.1 0 2-.89 2-2V7c0-1.11-.9-2-2-2h-4v2h4v2h-2c-1.1 0-2 .89-2 2v4h6v-2z\"}}]})(props);\n};\nexport function MdFilter (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M15.96 10.29l-2.75 3.54-1.96-2.36L8.5 15h11l-3.54-4.71zM3 5H1v16c0 1.1.9 2 2 2h16v-2H3V5zm18-4H7c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V3c0-1.1-.9-2-2-2zm0 16H7V3h14v14z\"}}]})(props);\n};\nexport function MdFilter3 (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M21 1H7c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V3c0-1.1-.9-2-2-2zm0 16H7V3h14v14zM3 5H1v16c0 1.1.9 2 2 2h16v-2H3V5zm14 8v-1.5c0-.83-.67-1.5-1.5-1.5.83 0 1.5-.67 1.5-1.5V7c0-1.11-.9-2-2-2h-4v2h4v2h-2v2h2v2h-4v2h4c1.1 0 2-.89 2-2z\"}}]})(props);\n};\nexport function MdFilter4 (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M3 5H1v16c0 1.1.9 2 2 2h16v-2H3V5zm12 10h2V5h-2v4h-2V5h-2v6h4v4zm6-14H7c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V3c0-1.1-.9-2-2-2zm0 16H7V3h14v14z\"}}]})(props);\n};\nexport function MdFilter5 (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M21 1H7c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V3c0-1.1-.9-2-2-2zm0 16H7V3h14v14zM3 5H1v16c0 1.1.9 2 2 2h16v-2H3V5zm14 8v-2c0-1.11-.9-2-2-2h-2V7h4V5h-6v6h4v2h-4v2h4c1.1 0 2-.89 2-2z\"}}]})(props);\n};\nexport function MdFilter6 (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M3 5H1v16c0 1.1.9 2 2 2h16v-2H3V5zm18-4H7c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V3c0-1.1-.9-2-2-2zm0 16H7V3h14v14zm-8-2h2c1.1 0 2-.89 2-2v-2c0-1.11-.9-2-2-2h-2V7h4V5h-4c-1.1 0-2 .89-2 2v6c0 1.11.9 2 2 2zm0-4h2v2h-2v-2z\"}}]})(props);\n};\nexport function MdFilter7 (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M3 5H1v16c0 1.1.9 2 2 2h16v-2H3V5zm18-4H7c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V3c0-1.1-.9-2-2-2zm0 16H7V3h14v14zm-8-2l4-8V5h-6v2h4l-4 8h2z\"}}]})(props);\n};\nexport function MdFilter8 (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M3 5H1v16c0 1.1.9 2 2 2h16v-2H3V5zm18-4H7c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V3c0-1.1-.9-2-2-2zm0 16H7V3h14v14zm-8-2h2c1.1 0 2-.89 2-2v-1.5c0-.83-.67-1.5-1.5-1.5.83 0 1.5-.67 1.5-1.5V7c0-1.11-.9-2-2-2h-2c-1.1 0-2 .89-2 2v1.5c0 .83.67 1.5 1.5 1.5-.83 0-1.5.67-1.5 1.5V13c0 1.11.9 2 2 2zm0-8h2v2h-2V7zm0 4h2v2h-2v-2z\"}}]})(props);\n};\nexport function MdFilter9 (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M3 5H1v16c0 1.1.9 2 2 2h16v-2H3V5zm18-4H7c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V3c0-1.1-.9-2-2-2zm0 16H7V3h14v14zM15 5h-2c-1.1 0-2 .89-2 2v2c0 1.11.9 2 2 2h2v2h-4v2h4c1.1 0 2-.89 2-2V7c0-1.11-.9-2-2-2zm0 4h-2V7h2v2z\"}}]})(props);\n};\nexport function MdFilter9Plus (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M3 5H1v16c0 1.1.9 2 2 2h16v-2H3V5zm11 7V8c0-1.11-.9-2-2-2h-1c-1.1 0-2 .89-2 2v1c0 1.11.9 2 2 2h1v1H9v2h3c1.1 0 2-.89 2-2zm-3-3V8h1v1h-1zm10-8H7c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V3c0-1.1-.9-2-2-2zm0 8h-2V7h-2v2h-2v2h2v2h2v-2h2v6H7V3h14v6z\"}}]})(props);\n};\nexport function MdFilterBAndW (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16l-7-8v8H5l7-8V5h7v14z\"}}]})(props);\n};\nexport function MdFilterCenterFocus (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M5 15H3v4c0 1.1.9 2 2 2h4v-2H5v-4zM5 5h4V3H5c-1.1 0-2 .9-2 2v4h2V5zm14-2h-4v2h4v4h2V5c0-1.1-.9-2-2-2zm0 16h-4v2h4c1.1 0 2-.9 2-2v-4h-2v4zM12 9c-1.66 0-3 1.34-3 3s1.34 3 3 3 3-1.34 3-3-1.34-3-3-3z\"}}]})(props);\n};\nexport function MdFilterDrama (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M19.35 10.04C18.67 6.59 15.64 4 12 4 9.11 4 6.61 5.64 5.36 8.04 2.35 8.36 0 10.9 0 14c0 3.31 2.69 6 6 6h13c2.76 0 5-2.24 5-5 0-2.64-2.05-4.78-4.65-4.96zM19 18H6c-2.21 0-4-1.79-4-4s1.79-4 4-4 4 1.79 4 4h2c0-2.76-1.86-5.08-4.4-5.78C8.61 6.88 10.2 6 12 6c3.03 0 5.5 2.47 5.5 5.5v.5H19c1.65 0 3 1.35 3 3s-1.35 3-3 3z\"}}]})(props);\n};\nexport function MdFilterFrames (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M20 4h-4l-4-4-4 4H4c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm0 16H4V6h4.52l3.52-3.5L15.52 6H20v14zM18 8H6v10h12\"}}]})(props);\n};\nexport function MdFilterHdr (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M14 6l-3.75 5 2.85 3.8-1.6 1.2C9.81 13.75 7 10 7 10l-6 8h22L14 6z\"}}]})(props);\n};\nexport function MdFilterNone (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M3 5H1v16c0 1.1.9 2 2 2h16v-2H3V5zm18-4H7c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V3c0-1.1-.9-2-2-2zm0 16H7V3h14v14z\"}}]})(props);\n};\nexport function MdFilterTiltShift (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M11 4.07V2.05c-2.01.2-3.84 1-5.32 2.21L7.1 5.69c1.11-.86 2.44-1.44 3.9-1.62zm7.32.19C16.84 3.05 15.01 2.25 13 2.05v2.02c1.46.18 2.79.76 3.9 1.62l1.42-1.43zM19.93 11h2.02c-.2-2.01-1-3.84-2.21-5.32L18.31 7.1c.86 1.11 1.44 2.44 1.62 3.9zM5.69 7.1L4.26 5.68C3.05 7.16 2.25 8.99 2.05 11h2.02c.18-1.46.76-2.79 1.62-3.9zM4.07 13H2.05c.2 2.01 1 3.84 2.21 5.32l1.43-1.43c-.86-1.1-1.44-2.43-1.62-3.89zM15 12c0-1.66-1.34-3-3-3s-3 1.34-3 3 1.34 3 3 3 3-1.34 3-3zm3.31 4.9l1.43 1.43c1.21-1.48 2.01-3.32 2.21-5.32h-2.02c-.18 1.45-.76 2.78-1.62 3.89zM13 19.93v2.02c2.01-.2 3.84-1 5.32-2.21l-1.43-1.43c-1.1.86-2.43 1.44-3.89 1.62zm-7.32-.19C7.16 20.95 9 21.75 11 21.95v-2.02c-1.46-.18-2.79-.76-3.9-1.62l-1.42 1.43z\"}}]})(props);\n};\nexport function MdFilterVintage (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M18.7 12.4c-.28-.16-.57-.29-.86-.4.29-.11.58-.24.86-.4 1.92-1.11 2.99-3.12 3-5.19-1.79-1.03-4.07-1.11-6 0-.28.16-.54.35-.78.54.05-.31.08-.63.08-.95 0-2.22-1.21-4.15-3-5.19C10.21 1.85 9 3.78 9 6c0 .32.03.64.08.95-.24-.2-.5-.39-.78-.55-1.92-1.11-4.2-1.03-6 0 0 2.07 1.07 4.08 3 5.19.28.16.57.29.86.4-.29.11-.58.24-.86.4-1.92 1.11-2.99 3.12-3 5.19 1.79 1.03 4.07 1.11 6 0 .28-.16.54-.35.78-.54-.05.32-.08.64-.08.96 0 2.22 1.21 4.15 3 5.19 1.79-1.04 3-2.97 3-5.19 0-.32-.03-.64-.08-.95.24.2.5.38.78.54 1.92 1.11 4.2 1.03 6 0-.01-2.07-1.08-4.08-3-5.19zM12 16c-2.21 0-4-1.79-4-4s1.79-4 4-4 4 1.79 4 4-1.79 4-4 4z\"}}]})(props);\n};\nexport function MdFlare (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M7 11H1v2h6v-2zm2.17-3.24L7.05 5.64 5.64 7.05l2.12 2.12 1.41-1.41zM13 1h-2v6h2V1zm5.36 6.05l-1.41-1.41-2.12 2.12 1.41 1.41 2.12-2.12zM17 11v2h6v-2h-6zm-5-2c-1.66 0-3 1.34-3 3s1.34 3 3 3 3-1.34 3-3-1.34-3-3-3zm2.83 7.24l2.12 2.12 1.41-1.41-2.12-2.12-1.41 1.41zm-9.19.71l1.41 1.41 2.12-2.12-1.41-1.41-2.12 2.12zM11 23h2v-6h-2v6z\"}}]})(props);\n};\nexport function MdFlashAuto (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M3 2v12h3v9l7-12H9l4-9H3zm16 0h-2l-3.2 9h1.9l.7-2h3.2l.7 2h1.9L19 2zm-2.15 5.65L18 4l1.15 3.65h-2.3z\"}}]})(props);\n};\nexport function MdFlashOff (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M3.27 3L2 4.27l5 5V13h3v9l3.58-6.14L17.73 20 19 18.73 3.27 3zM17 10h-4l4-8H7v2.18l8.46 8.46L17 10z\"}}]})(props);\n};\nexport function MdFlashOn (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M7 2v11h3v9l7-12h-4l4-8z\"}}]})(props);\n};\nexport function MdFlip (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M15 21h2v-2h-2v2zm4-12h2V7h-2v2zM3 5v14c0 1.1.9 2 2 2h4v-2H5V5h4V3H5c-1.1 0-2 .9-2 2zm16-2v2h2c0-1.1-.9-2-2-2zm-8 20h2V1h-2v22zm8-6h2v-2h-2v2zM15 5h2V3h-2v2zm4 8h2v-2h-2v2zm0 8c1.1 0 2-.9 2-2h-2v2z\"}}]})(props);\n};\nexport function MdGradient (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M11 9h2v2h-2zm-2 2h2v2H9zm4 0h2v2h-2zm2-2h2v2h-2zM7 9h2v2H7zm12-6H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 18H7v-2h2v2zm4 0h-2v-2h2v2zm4 0h-2v-2h2v2zm2-7h-2v2h2v2h-2v-2h-2v2h-2v-2h-2v2H9v-2H7v2H5v-2h2v-2H5V5h14v6z\"}}]})(props);\n};\nexport function MdGrain (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M10 12c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zM6 8c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0 8c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm12-8c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm-4 8c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm4-4c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm-4-4c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm-4-4c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z\"}}]})(props);\n};\nexport function MdGridOff (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M8 4v1.45l2 2V4h4v4h-3.45l2 2H14v1.45l2 2V10h4v4h-3.45l2 2H20v1.45l2 2V4c0-1.1-.9-2-2-2H4.55l2 2H8zm8 0h4v4h-4V4zM1.27 1.27L0 2.55l2 2V20c0 1.1.9 2 2 2h15.46l2 2 1.27-1.27L1.27 1.27zM10 12.55L11.45 14H10v-1.45zm-6-6L5.45 8H4V6.55zM8 20H4v-4h4v4zm0-6H4v-4h3.45l.55.55V14zm6 6h-4v-4h3.45l.55.54V20zm2 0v-1.46L17.46 20H16z\"}}]})(props);\n};\nexport function MdGridOn (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M20 2H4c-1.1 0-2 .9-2 2v16c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zM8 20H4v-4h4v4zm0-6H4v-4h4v4zm0-6H4V4h4v4zm6 12h-4v-4h4v4zm0-6h-4v-4h4v4zm0-6h-4V4h4v4zm6 12h-4v-4h4v4zm0-6h-4v-4h4v4zm0-6h-4V4h4v4z\"}}]})(props);\n};\nexport function MdHdrOff (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M17.5 15v-2h1.1l.9 2H21l-.9-2.1c.5-.2.9-.8.9-1.4v-1c0-.8-.7-1.5-1.5-1.5H16v4.9l1.1 1.1h.4zm0-4.5h2v1h-2v-1zm-4.5 0v.4l1.5 1.5v-1.9c0-.8-.7-1.5-1.5-1.5h-1.9l1.5 1.5h.4zm-3.5-1l-7-7-1.1 1L6.9 9h-.4v2h-2V9H3v6h1.5v-2.5h2V15H8v-4.9l1.5 1.5V15h3.4l7.6 7.6 1.1-1.1-12.1-12z\"}}]})(props);\n};\nexport function MdHdrOn (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M21 11.5v-1c0-.8-.7-1.5-1.5-1.5H16v6h1.5v-2h1.1l.9 2H21l-.9-2.1c.5-.3.9-.8.9-1.4zm-1.5 0h-2v-1h2v1zm-13-.5h-2V9H3v6h1.5v-2.5h2V15H8V9H6.5v2zM13 9H9.5v6H13c.8 0 1.5-.7 1.5-1.5v-3c0-.8-.7-1.5-1.5-1.5zm0 4.5h-2v-3h2v3z\"}}]})(props);\n};\nexport function MdHdrStrong (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M17 6c-3.31 0-6 2.69-6 6s2.69 6 6 6 6-2.69 6-6-2.69-6-6-6zM5 8c-2.21 0-4 1.79-4 4s1.79 4 4 4 4-1.79 4-4-1.79-4-4-4zm0 6c-1.1 0-2-.9-2-2s.9-2 2-2 2 .9 2 2-.9 2-2 2z\"}}]})(props);\n};\nexport function MdHdrWeak (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M5 8c-2.21 0-4 1.79-4 4s1.79 4 4 4 4-1.79 4-4-1.79-4-4-4zm12-2c-3.31 0-6 2.69-6 6s2.69 6 6 6 6-2.69 6-6-2.69-6-6-6zm0 10c-2.21 0-4-1.79-4-4s1.79-4 4-4 4 1.79 4 4-1.79 4-4 4z\"}}]})(props);\n};\nexport function MdHealing (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M17.73 12.02l3.98-3.98c.39-.39.39-1.02 0-1.41l-4.34-4.34c-.39-.39-1.02-.39-1.41 0l-3.98 3.98L8 2.29C7.8 2.1 7.55 2 7.29 2c-.25 0-.51.1-.7.29L2.25 6.63c-.39.39-.39 1.02 0 1.41l3.98 3.98L2.25 16c-.39.39-.39 1.02 0 1.41l4.34 4.34c.39.39 1.02.39 1.41 0l3.98-3.98 3.98 3.98c.2.2.45.29.71.29.26 0 .51-.1.71-.29l4.34-4.34c.39-.39.39-1.02 0-1.41l-3.99-3.98zM12 9c.55 0 1 .45 1 1s-.45 1-1 1-1-.45-1-1 .45-1 1-1zm-4.71 1.96L3.66 7.34l3.63-3.63 3.62 3.62-3.62 3.63zM10 13c-.55 0-1-.45-1-1s.45-1 1-1 1 .45 1 1-.45 1-1 1zm2 2c-.55 0-1-.45-1-1s.45-1 1-1 1 .45 1 1-.45 1-1 1zm2-4c.55 0 1 .45 1 1s-.45 1-1 1-1-.45-1-1 .45-1 1-1zm2.66 9.34l-3.63-3.62 3.63-3.63 3.62 3.62-3.62 3.63z\"}}]})(props);\n};\nexport function MdImage (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M21 19V5c0-1.1-.9-2-2-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2zM8.5 13.5l2.5 3.01L14.5 12l4.5 6H5l3.5-4.5z\"}}]})(props);\n};\nexport function MdImageAspectRatio (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M16 10h-2v2h2v-2zm0 4h-2v2h2v-2zm-8-4H6v2h2v-2zm4 0h-2v2h2v-2zm8-6H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm0 14H4V6h16v12z\"}}]})(props);\n};\nexport function MdIso (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM5.5 7.5h2v-2H9v2h2V9H9v2H7.5V9h-2V7.5zM19 19H5L19 5v14zm-2-2v-1.5h-5V17h5z\"}}]})(props);\n};\nexport function MdLandscape (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M14 6l-3.75 5 2.85 3.8-1.6 1.2C9.81 13.75 7 10 7 10l-6 8h22L14 6z\"}}]})(props);\n};\nexport function MdLeakAdd (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M6 3H3v3c1.66 0 3-1.34 3-3zm8 0h-2c0 4.97-4.03 9-9 9v2c6.08 0 11-4.93 11-11zm-4 0H8c0 2.76-2.24 5-5 5v2c3.87 0 7-3.13 7-7zm0 18h2c0-4.97 4.03-9 9-9v-2c-6.07 0-11 4.93-11 11zm8 0h3v-3c-1.66 0-3 1.34-3 3zm-4 0h2c0-2.76 2.24-5 5-5v-2c-3.87 0-7 3.13-7 7z\"}}]})(props);\n};\nexport function MdLeakRemove (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M10 3H8c0 .37-.04.72-.12 1.06l1.59 1.59C9.81 4.84 10 3.94 10 3zM3 4.27l2.84 2.84C5.03 7.67 4.06 8 3 8v2c1.61 0 3.09-.55 4.27-1.46L8.7 9.97C7.14 11.24 5.16 12 3 12v2c2.71 0 5.19-.99 7.11-2.62l2.5 2.5C10.99 15.81 10 18.29 10 21h2c0-2.16.76-4.14 2.03-5.69l1.43 1.43C14.55 17.91 14 19.39 14 21h2c0-1.06.33-2.03.89-2.84L19.73 21 21 19.73 4.27 3 3 4.27zM14 3h-2c0 1.5-.37 2.91-1.02 4.16l1.46 1.46C13.42 6.98 14 5.06 14 3zm5.94 13.12c.34-.08.69-.12 1.06-.12v-2c-.94 0-1.84.19-2.66.52l1.6 1.6zm-4.56-4.56l1.46 1.46C18.09 12.37 19.5 12 21 12v-2c-2.06 0-3.98.58-5.62 1.56z\"}}]})(props);\n};\nexport function MdLens (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2z\"}}]})(props);\n};\nexport function MdLinkedCamera (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"circle\",\"attr\":{\"cx\":\"12\",\"cy\":\"14\",\"r\":\"3.2\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M16 3.33c2.58 0 4.67 2.09 4.67 4.67H22c0-3.31-2.69-6-6-6v1.33M16 6c1.11 0 2 .89 2 2h1.33c0-1.84-1.49-3.33-3.33-3.33V6\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M17 9c0-1.11-.89-2-2-2V4H9L7.17 6H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V9h-5zm-5 10c-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5-2.24 5-5 5z\"}}]})(props);\n};\nexport function MdLooks (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 10c-3.86 0-7 3.14-7 7h2c0-2.76 2.24-5 5-5s5 2.24 5 5h2c0-3.86-3.14-7-7-7zm0-4C5.93 6 1 10.93 1 17h2c0-4.96 4.04-9 9-9s9 4.04 9 9h2c0-6.07-4.93-11-11-11z\"}}]})(props);\n};\nexport function MdLooks3 (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M19.01 3h-14c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-4 7.5c0 .83-.67 1.5-1.5 1.5.83 0 1.5.67 1.5 1.5V15c0 1.11-.9 2-2 2h-4v-2h4v-2h-2v-2h2V9h-4V7h4c1.1 0 2 .89 2 2v1.5z\"}}]})(props);\n};\nexport function MdLooks4 (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-4 14h-2v-4H9V7h2v4h2V7h2v10z\"}}]})(props);\n};\nexport function MdLooks5 (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-4 6h-4v2h2c1.1 0 2 .89 2 2v2c0 1.11-.9 2-2 2H9v-2h4v-2H9V7h6v2z\"}}]})(props);\n};\nexport function MdLooks6 (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M11 15h2v-2h-2v2zm8-12H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-4 6h-4v2h2c1.1 0 2 .89 2 2v2c0 1.11-.9 2-2 2h-2c-1.1 0-2-.89-2-2V9c0-1.11.9-2 2-2h4v2z\"}}]})(props);\n};\nexport function MdLooksOne (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-5 14h-2V9h-2V7h4v10z\"}}]})(props);\n};\nexport function MdLooksTwo (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-4 8c0 1.11-.9 2-2 2h-2v2h4v2H9v-4c0-1.11.9-2 2-2h2V9H9V7h4c1.1 0 2 .89 2 2v2z\"}}]})(props);\n};\nexport function MdLoupe (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M13 7h-2v4H7v2h4v4h2v-4h4v-2h-4V7zm-1-5C6.49 2 2 6.49 2 12s4.49 10 10 10h8c1.1 0 2-.9 2-2v-8c0-5.51-4.49-10-10-10zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z\"}}]})(props);\n};\nexport function MdMonochromePhotos (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M20 5h-3.2L15 3H9L7.2 5H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V7c0-1.1-.9-2-2-2zm0 14h-8v-1c-2.8 0-5-2.2-5-5s2.2-5 5-5V7h8v12zm-3-6c0-2.8-2.2-5-5-5v1.8c1.8 0 3.2 1.4 3.2 3.2s-1.4 3.2-3.2 3.2V18c2.8 0 5-2.2 5-5zm-8.2 0c0 1.8 1.4 3.2 3.2 3.2V9.8c-1.8 0-3.2 1.4-3.2 3.2z\"}}]})(props);\n};\nexport function MdMovieCreation (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M18 4l2 4h-3l-2-4h-2l2 4h-3l-2-4H8l2 4H7L5 4H4c-1.1 0-1.99.9-1.99 2L2 18c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V4h-4z\"}}]})(props);\n};\nexport function MdMovieFilter (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M18 4l2 3h-3l-2-3h-2l2 3h-3l-2-3H8l2 3H7L5 4H4c-1.1 0-1.99.9-1.99 2L2 18c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V4h-4zm-6.75 11.25L10 18l-1.25-2.75L6 14l2.75-1.25L10 10l1.25 2.75L14 14l-2.75 1.25zm5.69-3.31L16 14l-.94-2.06L13 11l2.06-.94L16 8l.94 2.06L19 11l-2.06.94z\"}}]})(props);\n};\nexport function MdMusicNote (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 3v10.55c-.59-.34-1.27-.55-2-.55-2.21 0-4 1.79-4 4s1.79 4 4 4 4-1.79 4-4V7h4V3h-6z\"}}]})(props);\n};\nexport function MdNature (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M13 16.12c3.47-.41 6.17-3.36 6.17-6.95 0-3.87-3.13-7-7-7s-7 3.13-7 7c0 3.47 2.52 6.34 5.83 6.89V20H5v2h14v-2h-6v-3.88z\"}}]})(props);\n};\nexport function MdNaturePeople (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M22.17 9.17c0-3.87-3.13-7-7-7s-7 3.13-7 7c0 3.47 2.52 6.34 5.83 6.89V20H6v-3h1v-4c0-.55-.45-1-1-1H3c-.55 0-1 .45-1 1v4h1v5h16v-2h-3v-3.88c3.47-.41 6.17-3.36 6.17-6.95zM4.5 11c.83 0 1.5-.67 1.5-1.5S5.33 8 4.5 8 3 8.67 3 9.5 3.67 11 4.5 11z\"}}]})(props);\n};\nexport function MdNavigateBefore (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z\"}}]})(props);\n};\nexport function MdNavigateNext (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z\"}}]})(props);\n};\nexport function MdPalette (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 3c-4.97 0-9 4.03-9 9s4.03 9 9 9c.83 0 1.5-.67 1.5-1.5 0-.39-.15-.74-.39-1.01-.23-.26-.38-.61-.38-.99 0-.83.67-1.5 1.5-1.5H16c2.76 0 5-2.24 5-5 0-4.42-4.03-8-9-8zm-5.5 9c-.83 0-1.5-.67-1.5-1.5S5.67 9 6.5 9 8 9.67 8 10.5 7.33 12 6.5 12zm3-4C8.67 8 8 7.33 8 6.5S8.67 5 9.5 5s1.5.67 1.5 1.5S10.33 8 9.5 8zm5 0c-.83 0-1.5-.67-1.5-1.5S13.67 5 14.5 5s1.5.67 1.5 1.5S15.33 8 14.5 8zm3 4c-.83 0-1.5-.67-1.5-1.5S16.67 9 17.5 9s1.5.67 1.5 1.5-.67 1.5-1.5 1.5z\"}}]})(props);\n};\nexport function MdPanorama (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M23 18V6c0-1.1-.9-2-2-2H3c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h18c1.1 0 2-.9 2-2zM8.5 12.5l2.5 3.01L14.5 11l4.5 6H5l3.5-4.5z\"}}]})(props);\n};\nexport function MdPanoramaFishEye (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 2C6.47 2 2 6.47 2 12s4.47 10 10 10 10-4.47 10-10S17.53 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z\"}}]})(props);\n};\nexport function MdPanoramaHorizontal (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M20 6.54v10.91c-2.6-.77-5.28-1.16-8-1.16-2.72 0-5.4.39-8 1.16V6.54c2.6.77 5.28 1.16 8 1.16 2.72.01 5.4-.38 8-1.16M21.43 4c-.1 0-.2.02-.31.06C18.18 5.16 15.09 5.7 12 5.7c-3.09 0-6.18-.55-9.12-1.64-.11-.04-.22-.06-.31-.06-.34 0-.57.23-.57.63v14.75c0 .39.23.62.57.62.1 0 .2-.02.31-.06 2.94-1.1 6.03-1.64 9.12-1.64 3.09 0 6.18.55 9.12 1.64.11.04.21.06.31.06.33 0 .57-.23.57-.63V4.63c0-.4-.24-.63-.57-.63z\"}}]})(props);\n};\nexport function MdPanoramaVertical (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M19.94 21.12c-1.1-2.94-1.64-6.03-1.64-9.12 0-3.09.55-6.18 1.64-9.12.04-.11.06-.22.06-.31 0-.34-.23-.57-.63-.57H4.63c-.4 0-.63.23-.63.57 0 .1.02.2.06.31C5.16 5.82 5.71 8.91 5.71 12c0 3.09-.55 6.18-1.64 9.12-.05.11-.07.22-.07.31 0 .33.23.57.63.57h14.75c.39 0 .63-.24.63-.57-.01-.1-.03-.2-.07-.31zM6.54 20c.77-2.6 1.16-5.28 1.16-8 0-2.72-.39-5.4-1.16-8h10.91c-.77 2.6-1.16 5.28-1.16 8 0 2.72.39 5.4 1.16 8H6.54z\"}}]})(props);\n};\nexport function MdPanoramaWideAngle (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 6c2.45 0 4.71.2 7.29.64.47 1.78.71 3.58.71 5.36 0 1.78-.24 3.58-.71 5.36-2.58.44-4.84.64-7.29.64s-4.71-.2-7.29-.64C4.24 15.58 4 13.78 4 12c0-1.78.24-3.58.71-5.36C7.29 6.2 9.55 6 12 6m0-2c-2.73 0-5.22.24-7.95.72l-.93.16-.25.9C2.29 7.85 2 9.93 2 12s.29 4.15.87 6.22l.25.89.93.16c2.73.49 5.22.73 7.95.73s5.22-.24 7.95-.72l.93-.16.25-.89c.58-2.08.87-4.16.87-6.23s-.29-4.15-.87-6.22l-.25-.89-.93-.16C17.22 4.24 14.73 4 12 4z\"}}]})(props);\n};\nexport function MdPhoto (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M21 19V5c0-1.1-.9-2-2-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2zM8.5 13.5l2.5 3.01L14.5 12l4.5 6H5l3.5-4.5z\"}}]})(props);\n};\nexport function MdPhotoAlbum (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M18 2H6c-1.1 0-2 .9-2 2v16c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zM6 4h5v8l-2.5-1.5L6 12V4zm0 15l3-3.86 2.14 2.58 3-3.86L18 19H6z\"}}]})(props);\n};\nexport function MdPhotoCamera (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"circle\",\"attr\":{\"cx\":\"12\",\"cy\":\"12\",\"r\":\"3.2\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M9 2L7.17 4H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2h-3.17L15 2H9zm3 15c-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5-2.24 5-5 5z\"}}]})(props);\n};\nexport function MdPhotoFilter (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M19.02 10v9H5V5h9V3H5.02c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2v-9h-2zM17 10l.94-2.06L20 7l-2.06-.94L17 4l-.94 2.06L14 7l2.06.94zm-3.75.75L12 8l-1.25 2.75L8 12l2.75 1.25L12 16l1.25-2.75L16 12z\"}}]})(props);\n};\nexport function MdPhotoLibrary (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M22 16V4c0-1.1-.9-2-2-2H8c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2zm-11-4l2.03 2.71L16 11l4 5H8l3-4zM2 6v14c0 1.1.9 2 2 2h14v-2H4V6H2z\"}}]})(props);\n};\nexport function MdPhotoSizeSelectActual (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M21 3H3C2 3 1 4 1 5v14c0 1.1.9 2 2 2h18c1 0 2-1 2-2V5c0-1-1-2-2-2zM5 17l3.5-4.5 2.5 3.01L14.5 11l4.5 6H5z\"}}]})(props);\n};\nexport function MdPhotoSizeSelectLarge (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M21 15h2v2h-2v-2zm0-4h2v2h-2v-2zm2 8h-2v2c1 0 2-1 2-2zM13 3h2v2h-2V3zm8 4h2v2h-2V7zm0-4v2h2c0-1-1-2-2-2zM1 7h2v2H1V7zm16-4h2v2h-2V3zm0 16h2v2h-2v-2zM3 3C2 3 1 4 1 5h2V3zm6 0h2v2H9V3zM5 3h2v2H5V3zm-4 8v8c0 1.1.9 2 2 2h12V11H1zm2 8l2.5-3.21 1.79 2.15 2.5-3.22L13 19H3z\"}}]})(props);\n};\nexport function MdPhotoSizeSelectSmall (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M23 15h-2v2h2v-2zm0-4h-2v2h2v-2zm0 8h-2v2c1 0 2-1 2-2zM15 3h-2v2h2V3zm8 4h-2v2h2V7zm-2-4v2h2c0-1-1-2-2-2zM3 21h8v-6H1v4c0 1.1.9 2 2 2zM3 7H1v2h2V7zm12 12h-2v2h2v-2zm4-16h-2v2h2V3zm0 16h-2v2h2v-2zM3 3C2 3 1 4 1 5h2V3zm0 8H1v2h2v-2zm8-8H9v2h2V3zM7 3H5v2h2V3z\"}}]})(props);\n};\nexport function MdPictureAsPdf (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M20 2H8c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm-8.5 7.5c0 .83-.67 1.5-1.5 1.5H9v2H7.5V7H10c.83 0 1.5.67 1.5 1.5v1zm5 2c0 .83-.67 1.5-1.5 1.5h-2.5V7H15c.83 0 1.5.67 1.5 1.5v3zm4-3H19v1h1.5V11H19v2h-1.5V7h3v1.5zM9 9.5h1v-1H9v1zM4 6H2v14c0 1.1.9 2 2 2h14v-2H4V6zm10 5.5h1v-3h-1v3z\"}}]})(props);\n};\nexport function MdPortrait (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 12.25c1.24 0 2.25-1.01 2.25-2.25S13.24 7.75 12 7.75 9.75 8.76 9.75 10s1.01 2.25 2.25 2.25zm4.5 4c0-1.5-3-2.25-4.5-2.25s-4.5.75-4.5 2.25V17h9v-.75zM19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H5V5h14v14z\"}}]})(props);\n};\nexport function MdRemoveRedEye (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 4.5C7 4.5 2.73 7.61 1 12c1.73 4.39 6 7.5 11 7.5s9.27-3.11 11-7.5c-1.73-4.39-6-7.5-11-7.5zM12 17c-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5-2.24 5-5 5zm0-8c-1.66 0-3 1.34-3 3s1.34 3 3 3 3-1.34 3-3-1.34-3-3-3z\"}}]})(props);\n};\nexport function MdRotate90DegreesCcw (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M7.34 6.41L.86 12.9l6.49 6.48 6.49-6.48-6.5-6.49zM3.69 12.9l3.66-3.66L11 12.9l-3.66 3.66-3.65-3.66zm15.67-6.26C17.61 4.88 15.3 4 13 4V.76L8.76 5 13 9.24V6c1.79 0 3.58.68 4.95 2.05 2.73 2.73 2.73 7.17 0 9.9C16.58 19.32 14.79 20 13 20c-.97 0-1.94-.21-2.84-.61l-1.49 1.49C10.02 21.62 11.51 22 13 22c2.3 0 4.61-.88 6.36-2.64 3.52-3.51 3.52-9.21 0-12.72z\"}}]})(props);\n};\nexport function MdRotateLeft (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M7.11 8.53L5.7 7.11C4.8 8.27 4.24 9.61 4.07 11h2.02c.14-.87.49-1.72 1.02-2.47zM6.09 13H4.07c.17 1.39.72 2.73 1.62 3.89l1.41-1.42c-.52-.75-.87-1.59-1.01-2.47zm1.01 5.32c1.16.9 2.51 1.44 3.9 1.61V17.9c-.87-.15-1.71-.49-2.46-1.03L7.1 18.32zM13 4.07V1L8.45 5.55 13 10V6.09c2.84.48 5 2.94 5 5.91s-2.16 5.43-5 5.91v2.02c3.95-.49 7-3.85 7-7.93s-3.05-7.44-7-7.93z\"}}]})(props);\n};\nexport function MdRotateRight (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M15.55 5.55L11 1v3.07C7.06 4.56 4 7.92 4 12s3.05 7.44 7 7.93v-2.02c-2.84-.48-5-2.94-5-5.91s2.16-5.43 5-5.91V10l4.55-4.45zM19.93 11c-.17-1.39-.72-2.73-1.62-3.89l-1.42 1.42c.54.75.88 1.6 1.02 2.47h2.02zM13 17.9v2.02c1.39-.17 2.74-.71 3.9-1.61l-1.44-1.44c-.75.54-1.59.89-2.46 1.03zm3.89-2.42l1.42 1.41c.9-1.16 1.45-2.5 1.62-3.89h-2.02c-.14.87-.48 1.72-1.02 2.48z\"}}]})(props);\n};\nexport function MdSlideshow (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M10 8v8l5-4-5-4zm9-5H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H5V5h14v14z\"}}]})(props);\n};\nexport function MdStraighten (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M21 6H3c-1.1 0-2 .9-2 2v8c0 1.1.9 2 2 2h18c1.1 0 2-.9 2-2V8c0-1.1-.9-2-2-2zm0 10H3V8h2v4h2V8h2v4h2V8h2v4h2V8h2v4h2V8h2v8z\"}}]})(props);\n};\nexport function MdStyle (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M2.53 19.65l1.34.56v-9.03l-2.43 5.86c-.41 1.02.08 2.19 1.09 2.61zm19.5-3.7L17.07 3.98c-.31-.75-1.04-1.21-1.81-1.23-.26 0-.53.04-.79.15L7.1 5.95c-.75.31-1.21 1.03-1.23 1.8-.01.27.04.54.15.8l4.96 11.97c.31.76 1.05 1.22 1.83 1.23.26 0 .52-.05.77-.15l7.36-3.05c1.02-.42 1.51-1.59 1.09-2.6zM7.88 8.75c-.55 0-1-.45-1-1s.45-1 1-1 1 .45 1 1-.45 1-1 1zm-2 11c0 1.1.9 2 2 2h1.45l-3.45-8.34v6.34z\"}}]})(props);\n};\nexport function MdSwitchCamera (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M20 4h-3.17L15 2H9L7.17 4H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm-5 11.5V13H9v2.5L5.5 12 9 8.5V11h6V8.5l3.5 3.5-3.5 3.5z\"}}]})(props);\n};\nexport function MdSwitchVideo (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M18 9.5V6c0-.55-.45-1-1-1H3c-.55 0-1 .45-1 1v12c0 .55.45 1 1 1h14c.55 0 1-.45 1-1v-3.5l4 4v-13l-4 4zm-5 6V13H7v2.5L3.5 12 7 8.5V11h6V8.5l3.5 3.5-3.5 3.5z\"}}]})(props);\n};\nexport function MdTagFaces (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M11.99 2C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8zm3.5-9c.83 0 1.5-.67 1.5-1.5S16.33 8 15.5 8 14 8.67 14 9.5s.67 1.5 1.5 1.5zm-7 0c.83 0 1.5-.67 1.5-1.5S9.33 8 8.5 8 7 8.67 7 9.5 7.67 11 8.5 11zm3.5 6.5c2.33 0 4.31-1.46 5.11-3.5H6.89c.8 2.04 2.78 3.5 5.11 3.5z\"}}]})(props);\n};\nexport function MdTexture (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M19.51 3.08L3.08 19.51c.09.34.27.65.51.9.25.24.56.42.9.51L20.93 4.49c-.19-.69-.73-1.23-1.42-1.41zM11.88 3L3 11.88v2.83L14.71 3h-2.83zM5 3c-1.1 0-2 .9-2 2v2l4-4H5zm14 18c.55 0 1.05-.22 1.41-.59.37-.36.59-.86.59-1.41v-2l-4 4h2zm-9.71 0h2.83L21 12.12V9.29L9.29 21z\"}}]})(props);\n};\nexport function MdTimelapse (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M16.24 7.76C15.07 6.59 13.54 6 12 6v6l-4.24 4.24c2.34 2.34 6.14 2.34 8.49 0 2.34-2.34 2.34-6.14-.01-8.48zM12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z\"}}]})(props);\n};\nexport function MdTimer10 (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M0 7.72V9.4l3-1V18h2V6h-.25L0 7.72zm23.78 6.65c-.14-.28-.35-.53-.63-.74-.28-.21-.61-.39-1.01-.53s-.85-.27-1.35-.38c-.35-.07-.64-.15-.87-.23-.23-.08-.41-.16-.55-.25-.14-.09-.23-.19-.28-.3-.05-.11-.08-.24-.08-.39 0-.14.03-.28.09-.41.06-.13.15-.25.27-.34.12-.1.27-.18.45-.24s.4-.09.64-.09c.25 0 .47.04.66.11.19.07.35.17.48.29.13.12.22.26.29.42.06.16.1.32.1.49h1.95c0-.39-.08-.75-.24-1.09-.16-.34-.39-.63-.69-.88-.3-.25-.66-.44-1.09-.59C21.49 9.07 21 9 20.46 9c-.51 0-.98.07-1.39.21-.41.14-.77.33-1.06.57-.29.24-.51.52-.67.84-.16.32-.23.65-.23 1.01s.08.69.23.96c.15.28.36.52.64.73.27.21.6.38.98.53.38.14.81.26 1.27.36.39.08.71.17.95.26s.43.19.57.29c.13.1.22.22.27.34.05.12.07.25.07.39 0 .32-.13.57-.4.77-.27.2-.66.29-1.17.29-.22 0-.43-.02-.64-.08-.21-.05-.4-.13-.56-.24-.17-.11-.3-.26-.41-.44-.11-.18-.17-.41-.18-.67h-1.89c0 .36.08.71.24 1.05.16.34.39.65.7.93.31.27.69.49 1.15.66.46.17.98.25 1.58.25.53 0 1.01-.06 1.44-.19.43-.13.8-.31 1.11-.54.31-.23.54-.51.71-.83.17-.32.25-.67.25-1.06-.02-.4-.09-.74-.24-1.02zm-9.96-7.32c-.34-.4-.75-.7-1.23-.88-.47-.18-1.01-.27-1.59-.27-.58 0-1.11.09-1.59.27-.48.18-.89.47-1.23.88-.34.41-.6.93-.79 1.59-.18.65-.28 1.45-.28 2.39v1.92c0 .94.09 1.74.28 2.39.19.66.45 1.19.8 1.6.34.41.75.71 1.23.89.48.18 1.01.28 1.59.28.59 0 1.12-.09 1.59-.28.48-.18.88-.48 1.22-.89.34-.41.6-.94.78-1.6.18-.65.28-1.45.28-2.39v-1.92c0-.94-.09-1.74-.28-2.39-.18-.66-.44-1.19-.78-1.59zm-.92 6.17c0 .6-.04 1.11-.12 1.53-.08.42-.2.76-.36 1.02-.16.26-.36.45-.59.57-.23.12-.51.18-.82.18-.3 0-.58-.06-.82-.18s-.44-.31-.6-.57c-.16-.26-.29-.6-.38-1.02-.09-.42-.13-.93-.13-1.53v-2.5c0-.6.04-1.11.13-1.52.09-.41.21-.74.38-1 .16-.25.36-.43.6-.55.24-.11.51-.17.81-.17.31 0 .58.06.81.17.24.11.44.29.6.55.16.25.29.58.37.99.08.41.13.92.13 1.52v2.51z\"}}]})(props);\n};\nexport function MdTimer (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M15 1H9v2h6V1zm-4 13h2V8h-2v6zm8.03-6.61l1.42-1.42c-.43-.51-.9-.99-1.41-1.41l-1.42 1.42C16.07 4.74 14.12 4 12 4c-4.97 0-9 4.03-9 9s4.02 9 9 9 9-4.03 9-9c0-2.12-.74-4.07-1.97-5.61zM12 20c-3.87 0-7-3.13-7-7s3.13-7 7-7 7 3.13 7 7-3.13 7-7 7z\"}}]})(props);\n};\nexport function MdTimer3 (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M11.61 12.97c-.16-.24-.36-.46-.62-.65-.25-.19-.56-.35-.93-.48.3-.14.57-.3.8-.5.23-.2.42-.41.57-.64.15-.23.27-.46.34-.71.08-.24.11-.49.11-.73 0-.55-.09-1.04-.28-1.46-.18-.42-.44-.77-.78-1.06-.33-.28-.73-.5-1.2-.64-.45-.13-.97-.2-1.53-.2-.55 0-1.06.08-1.52.24-.47.17-.87.4-1.2.69-.33.29-.6.63-.78 1.03-.2.39-.29.83-.29 1.29h1.98c0-.26.05-.49.14-.69.09-.2.22-.38.38-.52.17-.14.36-.25.58-.33.22-.08.46-.12.73-.12.61 0 1.06.16 1.36.47.3.31.44.75.44 1.32 0 .27-.04.52-.12.74-.08.22-.21.41-.38.57-.17.16-.38.28-.63.37-.25.09-.55.13-.89.13H6.72v1.57H7.9c.34 0 .64.04.91.11.27.08.5.19.69.35.19.16.34.36.44.61.1.24.16.54.16.87 0 .62-.18 1.09-.53 1.42-.35.33-.84.49-1.45.49-.29 0-.56-.04-.8-.13-.24-.08-.44-.2-.61-.36-.17-.16-.3-.34-.39-.56-.09-.22-.14-.46-.14-.72H4.19c0 .55.11 1.03.32 1.45.21.42.5.77.86 1.05s.77.49 1.24.63.96.21 1.48.21c.57 0 1.09-.08 1.58-.23.49-.15.91-.38 1.26-.68.36-.3.64-.66.84-1.1.2-.43.3-.93.3-1.48 0-.29-.04-.58-.11-.86-.08-.25-.19-.51-.35-.76zm9.26 1.4c-.14-.28-.35-.53-.63-.74-.28-.21-.61-.39-1.01-.53s-.85-.27-1.35-.38c-.35-.07-.64-.15-.87-.23-.23-.08-.41-.16-.55-.25-.14-.09-.23-.19-.28-.3-.05-.11-.08-.24-.08-.39s.03-.28.09-.41c.06-.13.15-.25.27-.34.12-.1.27-.18.45-.24s.4-.09.64-.09c.25 0 .47.04.66.11.19.07.35.17.48.29.13.12.22.26.29.42.06.16.1.32.1.49h1.95c0-.39-.08-.75-.24-1.09-.16-.34-.39-.63-.69-.88-.3-.25-.66-.44-1.09-.59-.43-.15-.92-.22-1.46-.22-.51 0-.98.07-1.39.21-.41.14-.77.33-1.06.57-.29.24-.51.52-.67.84-.16.32-.23.65-.23 1.01s.08.68.23.96c.15.28.37.52.64.73.27.21.6.38.98.53.38.14.81.26 1.27.36.39.08.71.17.95.26s.43.19.57.29c.13.1.22.22.27.34.05.12.07.25.07.39 0 .32-.13.57-.4.77-.27.2-.66.29-1.17.29-.22 0-.43-.02-.64-.08-.21-.05-.4-.13-.56-.24-.17-.11-.3-.26-.41-.44-.11-.18-.17-.41-.18-.67h-1.89c0 .36.08.71.24 1.05.16.34.39.65.7.93.31.27.69.49 1.15.66.46.17.98.25 1.58.25.53 0 1.01-.06 1.44-.19.43-.13.8-.31 1.11-.54.31-.23.54-.51.71-.83.17-.32.25-.67.25-1.06-.02-.4-.09-.74-.24-1.02z\"}}]})(props);\n};\nexport function MdTimerOff (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M19.04 4.55l-1.42 1.42C16.07 4.74 14.12 4 12 4c-1.83 0-3.53.55-4.95 1.48l1.46 1.46C9.53 6.35 10.73 6 12 6c3.87 0 7 3.13 7 7 0 1.27-.35 2.47-.94 3.49l1.45 1.45C20.45 16.53 21 14.83 21 13c0-2.12-.74-4.07-1.97-5.61l1.42-1.42-1.41-1.42zM15 1H9v2h6V1zm-4 8.44l2 2V8h-2v1.44zM3.02 4L1.75 5.27 4.5 8.03C3.55 9.45 3 11.16 3 13c0 4.97 4.02 9 9 9 1.84 0 3.55-.55 4.98-1.5l2.5 2.5 1.27-1.27-7.71-7.71L3.02 4zM12 20c-3.87 0-7-3.13-7-7 0-1.28.35-2.48.95-3.52l9.56 9.56c-1.03.61-2.23.96-3.51.96z\"}}]})(props);\n};\nexport function MdTonality (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-1 17.93c-3.94-.49-7-3.85-7-7.93s3.05-7.44 7-7.93v15.86zm2-15.86c1.03.13 2 .45 2.87.93H13v-.93zM13 7h5.24c.25.31.48.65.68 1H13V7zm0 3h6.74c.08.33.15.66.19 1H13v-1zm0 9.93V19h2.87c-.87.48-1.84.8-2.87.93zM18.24 17H13v-1h5.92c-.2.35-.43.69-.68 1zm1.5-3H13v-1h6.93c-.04.34-.11.67-.19 1z\"}}]})(props);\n};\nexport function MdTransform (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M22 18v-2H8V4h2L7 1 4 4h2v2H2v2h4v8c0 1.1.9 2 2 2h8v2h-2l3 3 3-3h-2v-2h4zM10 8h6v6h2V8c0-1.1-.9-2-2-2h-6v2z\"}}]})(props);\n};\nexport function MdTune (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M3 17v2h6v-2H3zM3 5v2h10V5H3zm10 16v-2h8v-2h-8v-2h-2v6h2zM7 9v2H3v2h4v2h2V9H7zm14 4v-2H11v2h10zm-6-4h2V7h4V5h-4V3h-2v6z\"}}]})(props);\n};\nexport function MdViewComfy (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M3 9h4V5H3v4zm0 5h4v-4H3v4zm5 0h4v-4H8v4zm5 0h4v-4h-4v4zM8 9h4V5H8v4zm5-4v4h4V5h-4zm5 9h4v-4h-4v4zM3 19h4v-4H3v4zm5 0h4v-4H8v4zm5 0h4v-4h-4v4zm5 0h4v-4h-4v4zm0-14v4h4V5h-4z\"}}]})(props);\n};\nexport function MdViewCompact (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M3 19h6v-7H3v7zm7 0h12v-7H10v7zM3 5v6h19V5H3z\"}}]})(props);\n};\nexport function MdVignette (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M21 3H3c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h18c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-9 15c-4.42 0-8-2.69-8-6s3.58-6 8-6 8 2.69 8 6-3.58 6-8 6z\"}}]})(props);\n};\nexport function MdWbAuto (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M6.85 12.65h2.3L8 9l-1.15 3.65zM22 7l-1.2 6.29L19.3 7h-1.6l-1.49 6.29L15 7h-.76C12.77 5.17 10.53 4 8 4c-4.42 0-8 3.58-8 8s3.58 8 8 8c3.13 0 5.84-1.81 7.15-4.43l.1.43H17l1.5-6.1L20 16h1.75l2.05-9H22zm-11.7 9l-.7-2H6.4l-.7 2H3.8L7 7h2l3.2 9h-1.9z\"}}]})(props);\n};\nexport function MdWbCloudy (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M19.36 10.04C18.67 6.59 15.64 4 12 4 9.11 4 6.6 5.64 5.35 8.04 2.34 8.36 0 10.91 0 14c0 3.31 2.69 6 6 6h13c2.76 0 5-2.24 5-5 0-2.64-2.05-4.78-4.64-4.96z\"}}]})(props);\n};\nexport function MdWbIncandescent (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M3.55 18.54l1.41 1.41 1.79-1.8-1.41-1.41-1.79 1.8zM11 22.45h2V19.5h-2v2.95zM4 10.5H1v2h3v-2zm11-4.19V1.5H9v4.81C7.21 7.35 6 9.28 6 11.5c0 3.31 2.69 6 6 6s6-2.69 6-6c0-2.22-1.21-4.15-3-5.19zm5 4.19v2h3v-2h-3zm-2.76 7.66l1.79 1.8 1.41-1.41-1.8-1.79-1.4 1.4z\"}}]})(props);\n};\nexport function MdWbIridescent (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M5 14.5h14v-6H5v6zM11 .55V3.5h2V.55h-2zm8.04 2.5l-1.79 1.79 1.41 1.41 1.8-1.79-1.42-1.41zM13 22.45V19.5h-2v2.95h2zm7.45-3.91l-1.8-1.79-1.41 1.41 1.79 1.8 1.42-1.42zM3.55 4.46l1.79 1.79 1.41-1.41-1.79-1.79-1.41 1.41zm1.41 15.49l1.79-1.8-1.41-1.41-1.79 1.79 1.41 1.42z\"}}]})(props);\n};\nexport function MdWbSunny (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M6.76 4.84l-1.8-1.79-1.41 1.41 1.79 1.79 1.42-1.41zM4 10.5H1v2h3v-2zm9-9.95h-2V3.5h2V.55zm7.45 3.91l-1.41-1.41-1.79 1.79 1.41 1.41 1.79-1.79zm-3.21 13.7l1.79 1.8 1.41-1.41-1.8-1.79-1.4 1.4zM20 10.5v2h3v-2h-3zm-8-5c-3.31 0-6 2.69-6 6s2.69 6 6 6 6-2.69 6-6-2.69-6-6-6zm-1 16.95h2V19.5h-2v2.95zm-7.45-3.91l1.41 1.41 1.79-1.8-1.41-1.41-1.79 1.8z\"}}]})(props);\n};\nexport function MdAddLocation (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 2C8.14 2 5 5.14 5 9c0 5.25 7 13 7 13s7-7.75 7-13c0-3.86-3.14-7-7-7zm4 8h-3v3h-2v-3H8V8h3V5h2v3h3v2z\"}}]})(props);\n};\nexport function MdBeenhere (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M19 1H5c-1.1 0-1.99.9-1.99 2L3 15.93c0 .69.35 1.3.88 1.66L12 23l8.11-5.41c.53-.36.88-.97.88-1.66L21 3c0-1.1-.9-2-2-2zm-9 15l-5-5 1.41-1.41L10 13.17l7.59-7.59L19 7l-9 9z\"}}]})(props);\n};\nexport function MdDirections (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M21.71 11.29l-9-9c-.39-.39-1.02-.39-1.41 0l-9 9c-.39.39-.39 1.02 0 1.41l9 9c.39.39 1.02.39 1.41 0l9-9c.39-.38.39-1.01 0-1.41zM14 14.5V12h-4v3H8v-4c0-.55.45-1 1-1h5V7.5l3.5 3.5-3.5 3.5z\"}}]})(props);\n};\nexport function MdDirectionsBike (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M15.5 5.5c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zM5 12c-2.8 0-5 2.2-5 5s2.2 5 5 5 5-2.2 5-5-2.2-5-5-5zm0 8.5c-1.9 0-3.5-1.6-3.5-3.5s1.6-3.5 3.5-3.5 3.5 1.6 3.5 3.5-1.6 3.5-3.5 3.5zm5.8-10l2.4-2.4.8.8c1.3 1.3 3 2.1 5.1 2.1V9c-1.5 0-2.7-.6-3.6-1.5l-1.9-1.9c-.5-.4-1-.6-1.6-.6s-1.1.2-1.4.6L7.8 8.4c-.4.4-.6.9-.6 1.4 0 .6.2 1.1.6 1.4L11 14v5h2v-6.2l-2.2-2.3zM19 12c-2.8 0-5 2.2-5 5s2.2 5 5 5 5-2.2 5-5-2.2-5-5-5zm0 8.5c-1.9 0-3.5-1.6-3.5-3.5s1.6-3.5 3.5-3.5 3.5 1.6 3.5 3.5-1.6 3.5-3.5 3.5z\"}}]})(props);\n};\nexport function MdDirectionsBoat (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M20 21c-1.39 0-2.78-.47-4-1.32-2.44 1.71-5.56 1.71-8 0C6.78 20.53 5.39 21 4 21H2v2h2c1.38 0 2.74-.35 4-.99 2.52 1.29 5.48 1.29 8 0 1.26.65 2.62.99 4 .99h2v-2h-2zM3.95 19H4c1.6 0 3.02-.88 4-2 .98 1.12 2.4 2 4 2s3.02-.88 4-2c.98 1.12 2.4 2 4 2h.05l1.89-6.68c.08-.26.06-.54-.06-.78s-.34-.42-.6-.5L20 10.62V6c0-1.1-.9-2-2-2h-3V1H9v3H6c-1.1 0-2 .9-2 2v4.62l-1.29.42c-.26.08-.48.26-.6.5s-.15.52-.06.78L3.95 19zM6 6h12v3.97L12 8 6 9.97V6z\"}}]})(props);\n};\nexport function MdDirectionsBus (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M4 16c0 .88.39 1.67 1 2.22V20c0 .55.45 1 1 1h1c.55 0 1-.45 1-1v-1h8v1c0 .55.45 1 1 1h1c.55 0 1-.45 1-1v-1.78c.61-.55 1-1.34 1-2.22V6c0-3.5-3.58-4-8-4s-8 .5-8 4v10zm3.5 1c-.83 0-1.5-.67-1.5-1.5S6.67 14 7.5 14s1.5.67 1.5 1.5S8.33 17 7.5 17zm9 0c-.83 0-1.5-.67-1.5-1.5s.67-1.5 1.5-1.5 1.5.67 1.5 1.5-.67 1.5-1.5 1.5zm1.5-6H6V6h12v5z\"}}]})(props);\n};\nexport function MdDirectionsCar (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M18.92 6.01C18.72 5.42 18.16 5 17.5 5h-11c-.66 0-1.21.42-1.42 1.01L3 12v8c0 .55.45 1 1 1h1c.55 0 1-.45 1-1v-1h12v1c0 .55.45 1 1 1h1c.55 0 1-.45 1-1v-8l-2.08-5.99zM6.5 16c-.83 0-1.5-.67-1.5-1.5S5.67 13 6.5 13s1.5.67 1.5 1.5S7.33 16 6.5 16zm11 0c-.83 0-1.5-.67-1.5-1.5s.67-1.5 1.5-1.5 1.5.67 1.5 1.5-.67 1.5-1.5 1.5zM5 11l1.5-4.5h11L19 11H5z\"}}]})(props);\n};\nexport function MdDirectionsRailway (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M4 15.5C4 17.43 5.57 19 7.5 19L6 20.5v.5h12v-.5L16.5 19c1.93 0 3.5-1.57 3.5-3.5V5c0-3.5-3.58-4-8-4s-8 .5-8 4v10.5zm8 1.5c-1.1 0-2-.9-2-2s.9-2 2-2 2 .9 2 2-.9 2-2 2zm6-7H6V5h12v5z\"}}]})(props);\n};\nexport function MdDirectionsRun (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M13.49 5.48c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm-3.6 13.9l1-4.4 2.1 2v6h2v-7.5l-2.1-2 .6-3c1.3 1.5 3.3 2.5 5.5 2.5v-2c-1.9 0-3.5-1-4.3-2.4l-1-1.6c-.4-.6-1-1-1.7-1-.3 0-.5.1-.8.1l-5.2 2.2v4.7h2v-3.4l1.8-.7-1.6 8.1-4.9-1-.4 2 7 1.4z\"}}]})(props);\n};\nexport function MdDirectionsSubway (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 2c-4.42 0-8 .5-8 4v9.5C4 17.43 5.57 19 7.5 19L6 20.5v.5h12v-.5L16.5 19c1.93 0 3.5-1.57 3.5-3.5V6c0-3.5-3.58-4-8-4zM7.5 17c-.83 0-1.5-.67-1.5-1.5S6.67 14 7.5 14s1.5.67 1.5 1.5S8.33 17 7.5 17zm3.5-6H6V6h5v5zm5.5 6c-.83 0-1.5-.67-1.5-1.5s.67-1.5 1.5-1.5 1.5.67 1.5 1.5-.67 1.5-1.5 1.5zm1.5-6h-5V6h5v5z\"}}]})(props);\n};\nexport function MdDirectionsTransit (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 2c-4.42 0-8 .5-8 4v9.5C4 17.43 5.57 19 7.5 19L6 20.5v.5h12v-.5L16.5 19c1.93 0 3.5-1.57 3.5-3.5V6c0-3.5-3.58-4-8-4zM7.5 17c-.83 0-1.5-.67-1.5-1.5S6.67 14 7.5 14s1.5.67 1.5 1.5S8.33 17 7.5 17zm3.5-6H6V6h5v5zm5.5 6c-.83 0-1.5-.67-1.5-1.5s.67-1.5 1.5-1.5 1.5.67 1.5 1.5-.67 1.5-1.5 1.5zm1.5-6h-5V6h5v5z\"}}]})(props);\n};\nexport function MdDirectionsWalk (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M13.5 5.5c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zM9.8 8.9L7 23h2.1l1.8-8 2.1 2v6h2v-7.5l-2.1-2 .6-3C14.8 12 16.8 13 19 13v-2c-1.9 0-3.5-1-4.3-2.4l-1-1.6c-.4-.6-1-1-1.7-1-.3 0-.5.1-.8.1L6 8.3V13h2V9.6l1.8-.7\"}}]})(props);\n};\nexport function MdEditLocation (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 2C8.14 2 5 5.14 5 9c0 5.25 7 13 7 13s7-7.75 7-13c0-3.86-3.14-7-7-7zm-1.56 10H9v-1.44l3.35-3.34 1.43 1.43L10.44 12zm4.45-4.45l-.7.7-1.44-1.44.7-.7c.15-.15.39-.15.54 0l.9.9c.15.15.15.39 0 .54z\"}}]})(props);\n};\nexport function MdEvStation (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M19.77 7.23l.01-.01-3.72-3.72L15 4.56l2.11 2.11c-.94.36-1.61 1.26-1.61 2.33 0 1.38 1.12 2.5 2.5 2.5.36 0 .69-.08 1-.21v7.21c0 .55-.45 1-1 1s-1-.45-1-1V14c0-1.1-.9-2-2-2h-1V5c0-1.1-.9-2-2-2H6c-1.1 0-2 .9-2 2v16h10v-7.5h1.5v5c0 1.38 1.12 2.5 2.5 2.5s2.5-1.12 2.5-2.5V9c0-.69-.28-1.32-.73-1.77zM18 10c-.55 0-1-.45-1-1s.45-1 1-1 1 .45 1 1-.45 1-1 1zM8 18v-4.5H6L10 6v5h2l-4 7z\"}}]})(props);\n};\nexport function MdFlight (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M10.18 9\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M21 16v-2l-8-5V3.5c0-.83-.67-1.5-1.5-1.5S10 2.67 10 3.5V9l-8 5v2l8-2.5V19l-2 1.5V22l3.5-1 3.5 1v-1.5L13 19v-5.5l8 2.5z\"}}]})(props);\n};\nexport function MdHotel (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M7 13c1.66 0 3-1.34 3-3S8.66 7 7 7s-3 1.34-3 3 1.34 3 3 3zm12-6h-8v7H3V5H1v15h2v-3h18v3h2v-9c0-2.21-1.79-4-4-4z\"}}]})(props);\n};\nexport function MdLayers (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M11.99 18.54l-7.37-5.73L3 14.07l9 7 9-7-1.63-1.27-7.38 5.74zM12 16l7.36-5.73L21 9l-9-7-9 7 1.63 1.27L12 16z\"}}]})(props);\n};\nexport function MdLayersClear (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M19.81 14.99l1.19-.92-1.43-1.43-1.19.92 1.43 1.43zm-.45-4.72L21 9l-9-7-2.91 2.27 7.87 7.88 2.4-1.88zM3.27 1L2 2.27l4.22 4.22L3 9l1.63 1.27L12 16l2.1-1.63 1.43 1.43L12 18.54l-7.37-5.73L3 14.07l9 7 4.95-3.85L20.73 21 22 19.73 3.27 1z\"}}]})(props);\n};\nexport function MdLocalActivity (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M20 12c0-1.1.9-2 2-2V6c0-1.1-.9-2-2-2H4c-1.1 0-1.99.9-1.99 2v4c1.1 0 1.99.9 1.99 2s-.89 2-2 2v4c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2v-4c-1.1 0-2-.9-2-2zm-4.42 4.8L12 14.5l-3.58 2.3 1.08-4.12-3.29-2.69 4.24-.25L12 5.8l1.54 3.95 4.24.25-3.29 2.69 1.09 4.11z\"}}]})(props);\n};\nexport function MdLocalAirport (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M21 16v-2l-8-5V3.5c0-.83-.67-1.5-1.5-1.5S10 2.67 10 3.5V9l-8 5v2l8-2.5V19l-2 1.5V22l3.5-1 3.5 1v-1.5L13 19v-5.5l8 2.5z\"}}]})(props);\n};\nexport function MdLocalAtm (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M11 17h2v-1h1c.55 0 1-.45 1-1v-3c0-.55-.45-1-1-1h-3v-1h4V8h-2V7h-2v1h-1c-.55 0-1 .45-1 1v3c0 .55.45 1 1 1h3v1H9v2h2v1zm9-13H4c-1.11 0-1.99.89-1.99 2L2 18c0 1.11.89 2 2 2h16c1.11 0 2-.89 2-2V6c0-1.11-.89-2-2-2zm0 14H4V6h16v12z\"}}]})(props);\n};\nexport function MdLocalBar (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M21 5V3H3v2l8 9v5H6v2h12v-2h-5v-5l8-9zM7.43 7L5.66 5h12.69l-1.78 2H7.43z\"}}]})(props);\n};\nexport function MdLocalCafe (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M20 3H4v10c0 2.21 1.79 4 4 4h6c2.21 0 4-1.79 4-4v-3h2c1.11 0 2-.89 2-2V5c0-1.11-.89-2-2-2zm0 5h-2V5h2v3zM2 21h18v-2H2v2z\"}}]})(props);\n};\nexport function MdLocalCarWash (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M17 5c.83 0 1.5-.67 1.5-1.5 0-1-1.5-2.7-1.5-2.7s-1.5 1.7-1.5 2.7c0 .83.67 1.5 1.5 1.5zm-5 0c.83 0 1.5-.67 1.5-1.5 0-1-1.5-2.7-1.5-2.7s-1.5 1.7-1.5 2.7c0 .83.67 1.5 1.5 1.5zM7 5c.83 0 1.5-.67 1.5-1.5C8.5 2.5 7 .8 7 .8S5.5 2.5 5.5 3.5C5.5 4.33 6.17 5 7 5zm11.92 3.01C18.72 7.42 18.16 7 17.5 7h-11c-.66 0-1.21.42-1.42 1.01L3 14v8c0 .55.45 1 1 1h1c.55 0 1-.45 1-1v-1h12v1c0 .55.45 1 1 1h1c.55 0 1-.45 1-1v-8l-2.08-5.99zM6.5 18c-.83 0-1.5-.67-1.5-1.5S5.67 15 6.5 15s1.5.67 1.5 1.5S7.33 18 6.5 18zm11 0c-.83 0-1.5-.67-1.5-1.5s.67-1.5 1.5-1.5 1.5.67 1.5 1.5-.67 1.5-1.5 1.5zM5 13l1.5-4.5h11L19 13H5z\"}}]})(props);\n};\nexport function MdLocalConvenienceStore (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M19 7V4H5v3H2v13h8v-4h4v4h8V7h-3zm-8 3H9v1h2v1H8V9h2V8H8V7h3v3zm5 2h-1v-2h-2V7h1v2h1V7h1v5z\"}}]})(props);\n};\nexport function MdLocalDining (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M8.1 13.34l2.83-2.83L3.91 3.5c-1.56 1.56-1.56 4.09 0 5.66l4.19 4.18zm6.78-1.81c1.53.71 3.68.21 5.27-1.38 1.91-1.91 2.28-4.65.81-6.12-1.46-1.46-4.2-1.1-6.12.81-1.59 1.59-2.09 3.74-1.38 5.27L3.7 19.87l1.41 1.41L12 14.41l6.88 6.88 1.41-1.41L13.41 13l1.47-1.47z\"}}]})(props);\n};\nexport function MdLocalDrink (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M3 2l2.01 18.23C5.13 21.23 5.97 22 7 22h10c1.03 0 1.87-.77 1.99-1.77L21 2H3zm9 17c-1.66 0-3-1.34-3-3 0-2 3-5.4 3-5.4s3 3.4 3 5.4c0 1.66-1.34 3-3 3zm6.33-11H5.67l-.44-4h13.53l-.43 4z\"}}]})(props);\n};\nexport function MdLocalFlorist (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 22c4.97 0 9-4.03 9-9-4.97 0-9 4.03-9 9zM5.6 10.25c0 1.38 1.12 2.5 2.5 2.5.53 0 1.01-.16 1.42-.44l-.02.19c0 1.38 1.12 2.5 2.5 2.5s2.5-1.12 2.5-2.5l-.02-.19c.4.28.89.44 1.42.44 1.38 0 2.5-1.12 2.5-2.5 0-1-.59-1.85-1.43-2.25.84-.4 1.43-1.25 1.43-2.25 0-1.38-1.12-2.5-2.5-2.5-.53 0-1.01.16-1.42.44l.02-.19C14.5 2.12 13.38 1 12 1S9.5 2.12 9.5 3.5l.02.19c-.4-.28-.89-.44-1.42-.44-1.38 0-2.5 1.12-2.5 2.5 0 1 .59 1.85 1.43 2.25-.84.4-1.43 1.25-1.43 2.25zM12 5.5c1.38 0 2.5 1.12 2.5 2.5s-1.12 2.5-2.5 2.5S9.5 9.38 9.5 8s1.12-2.5 2.5-2.5zM3 13c0 4.97 4.03 9 9 9 0-4.97-4.03-9-9-9z\"}}]})(props);\n};\nexport function MdLocalGasStation (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M19.77 7.23l.01-.01-3.72-3.72L15 4.56l2.11 2.11c-.94.36-1.61 1.26-1.61 2.33 0 1.38 1.12 2.5 2.5 2.5.36 0 .69-.08 1-.21v7.21c0 .55-.45 1-1 1s-1-.45-1-1V14c0-1.1-.9-2-2-2h-1V5c0-1.1-.9-2-2-2H6c-1.1 0-2 .9-2 2v16h10v-7.5h1.5v5c0 1.38 1.12 2.5 2.5 2.5s2.5-1.12 2.5-2.5V9c0-.69-.28-1.32-.73-1.77zM12 10H6V5h6v5zm6 0c-.55 0-1-.45-1-1s.45-1 1-1 1 .45 1 1-.45 1-1 1z\"}}]})(props);\n};\nexport function MdLocalGroceryStore (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M7 18c-1.1 0-1.99.9-1.99 2S5.9 22 7 22s2-.9 2-2-.9-2-2-2zM1 2v2h2l3.6 7.59-1.35 2.45c-.16.28-.25.61-.25.96 0 1.1.9 2 2 2h12v-2H7.42c-.14 0-.25-.11-.25-.25l.03-.12.9-1.63h7.45c.75 0 1.41-.41 1.75-1.03l3.58-6.49c.08-.14.12-.31.12-.48 0-.55-.45-1-1-1H5.21l-.94-2H1zm16 16c-1.1 0-1.99.9-1.99 2s.89 2 1.99 2 2-.9 2-2-.9-2-2-2z\"}}]})(props);\n};\nexport function MdLocalHospital (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M19 3H5c-1.1 0-1.99.9-1.99 2L3 19c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-1 11h-4v4h-4v-4H6v-4h4V6h4v4h4v4z\"}}]})(props);\n};\nexport function MdLocalHotel (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M7 13c1.66 0 3-1.34 3-3S8.66 7 7 7s-3 1.34-3 3 1.34 3 3 3zm12-6h-8v7H3V5H1v15h2v-3h18v3h2v-9c0-2.21-1.79-4-4-4z\"}}]})(props);\n};\nexport function MdLocalLaundryService (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M9.17 16.83c1.56 1.56 4.1 1.56 5.66 0 1.56-1.56 1.56-4.1 0-5.66l-5.66 5.66zM18 2.01L6 2c-1.11 0-2 .89-2 2v16c0 1.11.89 2 2 2h12c1.11 0 2-.89 2-2V4c0-1.11-.89-1.99-2-1.99zM10 4c.55 0 1 .45 1 1s-.45 1-1 1-1-.45-1-1 .45-1 1-1zM7 4c.55 0 1 .45 1 1s-.45 1-1 1-1-.45-1-1 .45-1 1-1zm5 16c-3.31 0-6-2.69-6-6s2.69-6 6-6 6 2.69 6 6-2.69 6-6 6z\"}}]})(props);\n};\nexport function MdLocalLibrary (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 11.55C9.64 9.35 6.48 8 3 8v11c3.48 0 6.64 1.35 9 3.55 2.36-2.19 5.52-3.55 9-3.55V8c-3.48 0-6.64 1.35-9 3.55zM12 8c1.66 0 3-1.34 3-3s-1.34-3-3-3-3 1.34-3 3 1.34 3 3 3z\"}}]})(props);\n};\nexport function MdLocalMall (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M19 6h-2c0-2.76-2.24-5-5-5S7 3.24 7 6H5c-1.1 0-1.99.9-1.99 2L3 20c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V8c0-1.1-.9-2-2-2zm-7-3c1.66 0 3 1.34 3 3H9c0-1.66 1.34-3 3-3zm0 10c-2.76 0-5-2.24-5-5h2c0 1.66 1.34 3 3 3s3-1.34 3-3h2c0 2.76-2.24 5-5 5z\"}}]})(props);\n};\nexport function MdLocalMovies (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M18 3v2h-2V3H8v2H6V3H4v18h2v-2h2v2h8v-2h2v2h2V3h-2zM8 17H6v-2h2v2zm0-4H6v-2h2v2zm0-4H6V7h2v2zm10 8h-2v-2h2v2zm0-4h-2v-2h2v2zm0-4h-2V7h2v2z\"}}]})(props);\n};\nexport function MdLocalOffer (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M21.41 11.58l-9-9C12.05 2.22 11.55 2 11 2H4c-1.1 0-2 .9-2 2v7c0 .55.22 1.05.59 1.42l9 9c.36.36.86.58 1.41.58.55 0 1.05-.22 1.41-.59l7-7c.37-.36.59-.86.59-1.41 0-.55-.23-1.06-.59-1.42zM5.5 7C4.67 7 4 6.33 4 5.5S4.67 4 5.5 4 7 4.67 7 5.5 6.33 7 5.5 7z\"}}]})(props);\n};\nexport function MdLocalParking (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M13 3H6v18h4v-6h3c3.31 0 6-2.69 6-6s-2.69-6-6-6zm.2 8H10V7h3.2c1.1 0 2 .9 2 2s-.9 2-2 2z\"}}]})(props);\n};\nexport function MdLocalPharmacy (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M21 5h-2.64l1.14-3.14L17.15 1l-1.46 4H3v2l2 6-2 6v2h18v-2l-2-6 2-6V5zm-5 9h-3v3h-2v-3H8v-2h3V9h2v3h3v2z\"}}]})(props);\n};\nexport function MdLocalPhone (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M6.62 10.79c1.44 2.83 3.76 5.14 6.59 6.59l2.2-2.2c.27-.27.67-.36 1.02-.24 1.12.37 2.33.57 3.57.57.55 0 1 .45 1 1V20c0 .55-.45 1-1 1-9.39 0-17-7.61-17-17 0-.55.45-1 1-1h3.5c.55 0 1 .45 1 1 0 1.25.2 2.45.57 3.57.11.35.03.74-.25 1.02l-2.2 2.2z\"}}]})(props);\n};\nexport function MdLocalPizza (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 2C8.43 2 5.23 3.54 3.01 6L12 22l8.99-16C18.78 3.55 15.57 2 12 2zM7 7c0-1.1.9-2 2-2s2 .9 2 2-.9 2-2 2-2-.9-2-2zm5 8c-1.1 0-2-.9-2-2s.9-2 2-2 2 .9 2 2-.9 2-2 2z\"}}]})(props);\n};\nexport function MdLocalPlay (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M20 12c0-1.1.9-2 2-2V6c0-1.1-.9-2-2-2H4c-1.1 0-1.99.9-1.99 2v4c1.1 0 1.99.9 1.99 2s-.89 2-2 2v4c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2v-4c-1.1 0-2-.9-2-2zm-4.42 4.8L12 14.5l-3.58 2.3 1.08-4.12-3.29-2.69 4.24-.25L12 5.8l1.54 3.95 4.24.25-3.29 2.69 1.09 4.11z\"}}]})(props);\n};\nexport function MdLocalPostOffice (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M20 4H4c-1.1 0-1.99.9-1.99 2L2 18c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm0 4l-8 5-8-5V6l8 5 8-5v2z\"}}]})(props);\n};\nexport function MdLocalPrintshop (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M19 8H5c-1.66 0-3 1.34-3 3v6h4v4h12v-4h4v-6c0-1.66-1.34-3-3-3zm-3 11H8v-5h8v5zm3-7c-.55 0-1-.45-1-1s.45-1 1-1 1 .45 1 1-.45 1-1 1zm-1-9H6v4h12V3z\"}}]})(props);\n};\nexport function MdLocalSee (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"circle\",\"attr\":{\"cx\":\"12\",\"cy\":\"12\",\"r\":\"3.2\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M9 2L7.17 4H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2h-3.17L15 2H9zm3 15c-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5-2.24 5-5 5z\"}}]})(props);\n};\nexport function MdLocalShipping (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M20 8h-3V4H3c-1.1 0-2 .9-2 2v11h2c0 1.66 1.34 3 3 3s3-1.34 3-3h6c0 1.66 1.34 3 3 3s3-1.34 3-3h2v-5l-3-4zM6 18.5c-.83 0-1.5-.67-1.5-1.5s.67-1.5 1.5-1.5 1.5.67 1.5 1.5-.67 1.5-1.5 1.5zm13.5-9l1.96 2.5H17V9.5h2.5zm-1.5 9c-.83 0-1.5-.67-1.5-1.5s.67-1.5 1.5-1.5 1.5.67 1.5 1.5-.67 1.5-1.5 1.5z\"}}]})(props);\n};\nexport function MdLocalTaxi (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M18.92 6.01C18.72 5.42 18.16 5 17.5 5H15V3H9v2H6.5c-.66 0-1.21.42-1.42 1.01L3 12v8c0 .55.45 1 1 1h1c.55 0 1-.45 1-1v-1h12v1c0 .55.45 1 1 1h1c.55 0 1-.45 1-1v-8l-2.08-5.99zM6.5 16c-.83 0-1.5-.67-1.5-1.5S5.67 13 6.5 13s1.5.67 1.5 1.5S7.33 16 6.5 16zm11 0c-.83 0-1.5-.67-1.5-1.5s.67-1.5 1.5-1.5 1.5.67 1.5 1.5-.67 1.5-1.5 1.5zM5 11l1.5-4.5h11L19 11H5z\"}}]})(props);\n};\nexport function MdMap (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M20.5 3l-.16.03L15 5.1 9 3 3.36 4.9c-.21.07-.36.25-.36.48V20.5c0 .28.22.5.5.5l.16-.03L9 18.9l6 2.1 5.64-1.9c.21-.07.36-.25.36-.48V3.5c0-.28-.22-.5-.5-.5zM15 19l-6-2.11V5l6 2.11V19z\"}}]})(props);\n};\nexport function MdMyLocation (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 8c-2.21 0-4 1.79-4 4s1.79 4 4 4 4-1.79 4-4-1.79-4-4-4zm8.94 3c-.46-4.17-3.77-7.48-7.94-7.94V1h-2v2.06C6.83 3.52 3.52 6.83 3.06 11H1v2h2.06c.46 4.17 3.77 7.48 7.94 7.94V23h2v-2.06c4.17-.46 7.48-3.77 7.94-7.94H23v-2h-2.06zM12 19c-3.87 0-7-3.13-7-7s3.13-7 7-7 7 3.13 7 7-3.13 7-7 7z\"}}]})(props);\n};\nexport function MdNavigation (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 2L4.5 20.29l.71.71L12 18l6.79 3 .71-.71z\"}}]})(props);\n};\nexport function MdNearMe (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M21 3L3 10.53v.98l6.84 2.65L12.48 21h.98L21 3z\"}}]})(props);\n};\nexport function MdPersonPin (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M19 2H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h4l3 3 3-3h4c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm-7 3.3c1.49 0 2.7 1.21 2.7 2.7 0 1.49-1.21 2.7-2.7 2.7-1.49 0-2.7-1.21-2.7-2.7 0-1.49 1.21-2.7 2.7-2.7zM18 16H6v-.9c0-2 4-3.1 6-3.1s6 1.1 6 3.1v.9z\"}}]})(props);\n};\nexport function MdPersonPinCircle (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 2C8.14 2 5 5.14 5 9c0 5.25 7 13 7 13s7-7.75 7-13c0-3.86-3.14-7-7-7zm0 2c1.1 0 2 .9 2 2 0 1.11-.9 2-2 2s-2-.89-2-2c0-1.1.9-2 2-2zm0 10c-1.67 0-3.14-.85-4-2.15.02-1.32 2.67-2.05 4-2.05s3.98.73 4 2.05c-.86 1.3-2.33 2.15-4 2.15z\"}}]})(props);\n};\nexport function MdPinDrop (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M18 8c0-3.31-2.69-6-6-6S6 4.69 6 8c0 4.5 6 11 6 11s6-6.5 6-11zm-8 0c0-1.1.9-2 2-2s2 .9 2 2-.89 2-2 2c-1.1 0-2-.9-2-2zM5 20v2h14v-2H5z\"}}]})(props);\n};\nexport function MdPlace (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 2C8.13 2 5 5.13 5 9c0 5.25 7 13 7 13s7-7.75 7-13c0-3.87-3.13-7-7-7zm0 9.5c-1.38 0-2.5-1.12-2.5-2.5s1.12-2.5 2.5-2.5 2.5 1.12 2.5 2.5-1.12 2.5-2.5 2.5z\"}}]})(props);\n};\nexport function MdRateReview (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M20 2H4c-1.1 0-1.99.9-1.99 2L2 22l4-4h14c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zM6 14v-2.47l6.88-6.88c.2-.2.51-.2.71 0l1.77 1.77c.2.2.2.51 0 .71L8.47 14H6zm12 0h-7.5l2-2H18v2z\"}}]})(props);\n};\nexport function MdRestaurant (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M11 9H9V2H7v7H5V2H3v7c0 2.12 1.66 3.84 3.75 3.97V22h2.5v-9.03C11.34 12.84 13 11.12 13 9V2h-2v7zm5-3v8h2.5v8H21V2c-2.76 0-5 2.24-5 4z\"}}]})(props);\n};\nexport function MdRestaurantMenu (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M8.1 13.34l2.83-2.83L3.91 3.5c-1.56 1.56-1.56 4.09 0 5.66l4.19 4.18zm6.78-1.81c1.53.71 3.68.21 5.27-1.38 1.91-1.91 2.28-4.65.81-6.12-1.46-1.46-4.2-1.1-6.12.81-1.59 1.59-2.09 3.74-1.38 5.27L3.7 19.87l1.41 1.41L12 14.41l6.88 6.88 1.41-1.41L13.41 13l1.47-1.47z\"}}]})(props);\n};\nexport function MdSatellite (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM5 4.99h3C8 6.65 6.66 8 5 8V4.99zM5 12v-2c2.76 0 5-2.25 5-5.01h2C12 8.86 8.87 12 5 12zm0 6l3.5-4.5 2.5 3.01L14.5 12l4.5 6H5z\"}}]})(props);\n};\nexport function MdStoreMallDirectory (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M20 4H4v2h16V4zm1 10v-2l-1-5H4l-1 5v2h1v6h10v-6h4v6h2v-6h1zm-9 4H6v-4h6v4z\"}}]})(props);\n};\nexport function MdStreetview (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12.56 14.33c-.34.27-.56.7-.56 1.17V21h7c1.1 0 2-.9 2-2v-5.98c-.94-.33-1.95-.52-3-.52-2.03 0-3.93.7-5.44 1.83z\"}},{\"tag\":\"circle\",\"attr\":{\"cx\":\"18\",\"cy\":\"6\",\"r\":\"5\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M11.5 6c0-1.08.27-2.1.74-3H5c-1.1 0-2 .9-2 2v14c0 .55.23 1.05.59 1.41l9.82-9.82C12.23 9.42 11.5 7.8 11.5 6z\"}}]})(props);\n};\nexport function MdSubway (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"circle\",\"attr\":{\"cx\":\"15.5\",\"cy\":\"16\",\"r\":\"1\"}},{\"tag\":\"circle\",\"attr\":{\"cx\":\"8.5\",\"cy\":\"16\",\"r\":\"1\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M7.01 9h10v5h-10zM17.8 2.8C16 2.09 13.86 2 12 2c-1.86 0-4 .09-5.8.8C3.53 3.84 2 6.05 2 8.86V22h20V8.86c0-2.81-1.53-5.02-4.2-6.06zm.2 13.08c0 1.45-1.18 2.62-2.63 2.62l1.13 1.12V20H15l-1.5-1.5h-2.83L9.17 20H7.5v-.38l1.12-1.12C7.18 18.5 6 17.32 6 15.88V9c0-2.63 3-3 6-3 3.32 0 6 .38 6 3v6.88z\"}}]})(props);\n};\nexport function MdTerrain (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M14 6l-3.75 5 2.85 3.8-1.6 1.2C9.81 13.75 7 10 7 10l-6 8h22L14 6z\"}}]})(props);\n};\nexport function MdTraffic (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M20 10h-3V8.86c1.72-.45 3-2 3-3.86h-3V4c0-.55-.45-1-1-1H8c-.55 0-1 .45-1 1v1H4c0 1.86 1.28 3.41 3 3.86V10H4c0 1.86 1.28 3.41 3 3.86V15H4c0 1.86 1.28 3.41 3 3.86V20c0 .55.45 1 1 1h8c.55 0 1-.45 1-1v-1.14c1.72-.45 3-2 3-3.86h-3v-1.14c1.72-.45 3-2 3-3.86zm-8 9c-1.11 0-2-.9-2-2s.89-2 2-2c1.1 0 2 .9 2 2s-.89 2-2 2zm0-5c-1.11 0-2-.9-2-2s.89-2 2-2c1.1 0 2 .9 2 2s-.89 2-2 2zm0-5c-1.11 0-2-.9-2-2 0-1.11.89-2 2-2 1.1 0 2 .89 2 2 0 1.1-.89 2-2 2z\"}}]})(props);\n};\nexport function MdTrain (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 2c-4 0-8 .5-8 4v9.5C4 17.43 5.57 19 7.5 19L6 20.5v.5h2.23l2-2H14l2 2h2v-.5L16.5 19c1.93 0 3.5-1.57 3.5-3.5V6c0-3.5-3.58-4-8-4zM7.5 17c-.83 0-1.5-.67-1.5-1.5S6.67 14 7.5 14s1.5.67 1.5 1.5S8.33 17 7.5 17zm3.5-7H6V6h5v4zm2 0V6h5v4h-5zm3.5 7c-.83 0-1.5-.67-1.5-1.5s.67-1.5 1.5-1.5 1.5.67 1.5 1.5-.67 1.5-1.5 1.5z\"}}]})(props);\n};\nexport function MdTram (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M19 16.94V8.5c0-2.79-2.61-3.4-6.01-3.49l.76-1.51H17V2H7v1.5h4.75l-.76 1.52C7.86 5.11 5 5.73 5 8.5v8.44c0 1.45 1.19 2.66 2.59 2.97L6 21.5v.5h2.23l2-2H14l2 2h2v-.5L16.5 20h-.08c1.69 0 2.58-1.37 2.58-3.06zm-7 1.56c-.83 0-1.5-.67-1.5-1.5s.67-1.5 1.5-1.5 1.5.67 1.5 1.5-.67 1.5-1.5 1.5zm5-4.5H7V9h10v5z\"}}]})(props);\n};\nexport function MdTransferWithinAStation (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M16.49 15.5v-1.75L14 16.25l2.49 2.5V17H22v-1.5zm3.02 4.25H14v1.5h5.51V23L22 20.5 19.51 18zM9.5 5.5c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zM5.75 8.9L3 23h2.1l1.75-8L9 17v6h2v-7.55L8.95 13.4l.6-3C10.85 12 12.8 13 15 13v-2c-1.85 0-3.45-1-4.35-2.45l-.95-1.6C9.35 6.35 8.7 6 8 6c-.25 0-.5.05-.75.15L2 8.3V13h2V9.65l1.75-.75\"}}]})(props);\n};\nexport function MdZoomOutMap (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M15 3l2.3 2.3-2.89 2.87 1.42 1.42L18.7 6.7 21 9V3zM3 9l2.3-2.3 2.87 2.89 1.42-1.42L6.7 5.3 9 3H3zm6 12l-2.3-2.3 2.89-2.87-1.42-1.42L5.3 17.3 3 15v6zm12-6l-2.3 2.3-2.87-2.89-1.42 1.42 2.89 2.87L15 21h6z\"}}]})(props);\n};\nexport function MdApps (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M4 8h4V4H4v4zm6 12h4v-4h-4v4zm-6 0h4v-4H4v4zm0-6h4v-4H4v4zm6 0h4v-4h-4v4zm6-10v4h4V4h-4zm-6 4h4V4h-4v4zm6 6h4v-4h-4v4zm0 6h4v-4h-4v4z\"}}]})(props);\n};\nexport function MdArrowBack (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z\"}}]})(props);\n};\nexport function MdArrowDownward (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M20 12l-1.41-1.41L13 16.17V4h-2v12.17l-5.58-5.59L4 12l8 8 8-8z\"}}]})(props);\n};\nexport function MdArrowDropDown (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M7 10l5 5 5-5z\"}}]})(props);\n};\nexport function MdArrowDropDownCircle (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 12l-4-4h8l-4 4z\"}}]})(props);\n};\nexport function MdArrowDropUp (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M7 14l5-5 5 5z\"}}]})(props);\n};\nexport function MdArrowForward (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 4l-1.41 1.41L16.17 11H4v2h12.17l-5.58 5.59L12 20l8-8z\"}}]})(props);\n};\nexport function MdArrowUpward (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M4 12l1.41 1.41L11 7.83V20h2V7.83l5.58 5.59L20 12l-8-8-8 8z\"}}]})(props);\n};\nexport function MdCancel (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 2C6.47 2 2 6.47 2 12s4.47 10 10 10 10-4.47 10-10S17.53 2 12 2zm5 13.59L15.59 17 12 13.41 8.41 17 7 15.59 10.59 12 7 8.41 8.41 7 12 10.59 15.59 7 17 8.41 13.41 12 17 15.59z\"}}]})(props);\n};\nexport function MdCheck (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z\"}}]})(props);\n};\nexport function MdChevronLeft (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z\"}}]})(props);\n};\nexport function MdChevronRight (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z\"}}]})(props);\n};\nexport function MdClose (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\"}}]})(props);\n};\nexport function MdExpandLess (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 8l-6 6 1.41 1.41L12 10.83l4.59 4.58L18 14z\"}}]})(props);\n};\nexport function MdExpandMore (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6z\"}}]})(props);\n};\nexport function MdFirstPage (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M18.41 16.59L13.82 12l4.59-4.59L17 6l-6 6 6 6zM6 6h2v12H6z\"}}]})(props);\n};\nexport function MdFullscreen (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M7 14H5v5h5v-2H7v-3zm-2-4h2V7h3V5H5v5zm12 7h-3v2h5v-5h-2v3zM14 5v2h3v3h2V5h-5z\"}}]})(props);\n};\nexport function MdFullscreenExit (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M5 16h3v3h2v-5H5v2zm3-8H5v2h5V5H8v3zm6 11h2v-3h3v-2h-5v5zm2-11V5h-2v5h5V8h-3z\"}}]})(props);\n};\nexport function MdLastPage (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M5.59 7.41L10.18 12l-4.59 4.59L7 18l6-6-6-6zM16 6h2v12h-2z\"}}]})(props);\n};\nexport function MdMenu (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z\"}}]})(props);\n};\nexport function MdMoreHoriz (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M6 10c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm12 0c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm-6 0c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z\"}}]})(props);\n};\nexport function MdMoreVert (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 8c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm0 2c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0 6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z\"}}]})(props);\n};\nexport function MdRefresh (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M17.65 6.35C16.2 4.9 14.21 4 12 4c-4.42 0-7.99 3.58-7.99 8s3.57 8 7.99 8c3.73 0 6.84-2.55 7.73-6h-2.08c-.82 2.33-3.04 4-5.65 4-3.31 0-6-2.69-6-6s2.69-6 6-6c1.66 0 3.14.69 4.22 1.78L13 11h7V4l-2.35 2.35z\"}}]})(props);\n};\nexport function MdSubdirectoryArrowLeft (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M11 9l1.42 1.42L8.83 14H18V4h2v12H8.83l3.59 3.58L11 21l-6-6 6-6z\"}}]})(props);\n};\nexport function MdSubdirectoryArrowRight (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M19 15l-6 6-1.42-1.42L15.17 16H4V4h2v10h9.17l-3.59-3.58L13 9l6 6z\"}}]})(props);\n};\nexport function MdUnfoldLess (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M7.41 18.59L8.83 20 12 16.83 15.17 20l1.41-1.41L12 14l-4.59 4.59zm9.18-13.18L15.17 4 12 7.17 8.83 4 7.41 5.41 12 10l4.59-4.59z\"}}]})(props);\n};\nexport function MdUnfoldMore (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 5.83L15.17 9l1.41-1.41L12 3 7.41 7.59 8.83 9 12 5.83zm0 12.34L8.83 15l-1.41 1.41L12 21l4.59-4.59L15.17 15 12 18.17z\"}}]})(props);\n};\nexport function MdAdb (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M5 16c0 3.87 3.13 7 7 7s7-3.13 7-7v-4H5v4zM16.12 4.37l2.1-2.1-.82-.83-2.3 2.31C14.16 3.28 13.12 3 12 3s-2.16.28-3.09.75L6.6 1.44l-.82.83 2.1 2.1C6.14 5.64 5 7.68 5 10v1h14v-1c0-2.32-1.14-4.36-2.88-5.63zM9 9c-.55 0-1-.45-1-1s.45-1 1-1 1 .45 1 1-.45 1-1 1zm6 0c-.55 0-1-.45-1-1s.45-1 1-1 1 .45 1 1-.45 1-1 1z\"}}]})(props);\n};\nexport function MdAirlineSeatFlat (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M22 11v2H9V7h9c2.21 0 4 1.79 4 4zM2 14v2h6v2h8v-2h6v-2H2zm5.14-1.9c1.16-1.19 1.14-3.08-.04-4.24-1.19-1.16-3.08-1.14-4.24.04-1.16 1.19-1.14 3.08.04 4.24 1.19 1.16 3.08 1.14 4.24-.04z\"}}]})(props);\n};\nexport function MdAirlineSeatFlatAngled (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M22.25 14.29l-.69 1.89L9.2 11.71l2.08-5.66 8.56 3.09c2.1.76 3.18 3.06 2.41 5.15zM1.5 12.14L8 14.48V19h8v-1.63L20.52 19l.69-1.89-19.02-6.86-.69 1.89zm5.8-1.94c1.49-.72 2.12-2.51 1.41-4C7.99 4.71 6.2 4.08 4.7 4.8c-1.49.71-2.12 2.5-1.4 4 .71 1.49 2.5 2.12 4 1.4z\"}}]})(props);\n};\nexport function MdAirlineSeatIndividualSuite (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M7 13c1.65 0 3-1.35 3-3S8.65 7 7 7s-3 1.35-3 3 1.35 3 3 3zm12-6h-8v7H3V7H1v10h22v-6c0-2.21-1.79-4-4-4z\"}}]})(props);\n};\nexport function MdAirlineSeatLegroomExtra (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M4 12V3H2v9c0 2.76 2.24 5 5 5h6v-2H7c-1.66 0-3-1.34-3-3zm18.83 5.24c-.38-.72-1.29-.97-2.03-.63l-1.09.5-3.41-6.98c-.34-.68-1.03-1.12-1.79-1.12L11 9V3H5v8c0 1.66 1.34 3 3 3h7l3.41 7 3.72-1.7c.77-.36 1.1-1.3.7-2.06z\"}}]})(props);\n};\nexport function MdAirlineSeatLegroomNormal (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M5 12V3H3v9c0 2.76 2.24 5 5 5h6v-2H8c-1.66 0-3-1.34-3-3zm15.5 6H19v-7c0-1.1-.9-2-2-2h-5V3H6v8c0 1.65 1.35 3 3 3h7v7h4.5c.83 0 1.5-.67 1.5-1.5s-.67-1.5-1.5-1.5z\"}}]})(props);\n};\nexport function MdAirlineSeatLegroomReduced (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M19.97 19.2c.18.96-.55 1.8-1.47 1.8H14v-3l1-4H9c-1.65 0-3-1.35-3-3V3h6v6h5c1.1 0 2 .9 2 2l-2 7h1.44c.73 0 1.39.49 1.53 1.2zM5 12V3H3v9c0 2.76 2.24 5 5 5h4v-2H8c-1.66 0-3-1.34-3-3z\"}}]})(props);\n};\nexport function MdAirlineSeatReclineExtra (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M5.35 5.64c-.9-.64-1.12-1.88-.49-2.79.63-.9 1.88-1.12 2.79-.49.9.64 1.12 1.88.49 2.79-.64.9-1.88 1.12-2.79.49zM16 19H8.93c-1.48 0-2.74-1.08-2.96-2.54L4 7H2l1.99 9.76C4.37 19.2 6.47 21 8.94 21H16v-2zm.23-4h-4.88l-1.03-4.1c1.58.89 3.28 1.54 5.15 1.22V9.99c-1.63.31-3.44-.27-4.69-1.25L9.14 7.47c-.23-.18-.49-.3-.76-.38-.32-.09-.66-.12-.99-.06h-.02c-1.23.22-2.05 1.39-1.84 2.61l1.35 5.92C7.16 16.98 8.39 18 9.83 18h6.85l3.82 3 1.5-1.5-5.77-4.5z\"}}]})(props);\n};\nexport function MdAirlineSeatReclineNormal (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M7.59 5.41c-.78-.78-.78-2.05 0-2.83.78-.78 2.05-.78 2.83 0 .78.78.78 2.05 0 2.83-.79.79-2.05.79-2.83 0zM6 16V7H4v9c0 2.76 2.24 5 5 5h6v-2H9c-1.66 0-3-1.34-3-3zm14 4.07L14.93 15H11.5v-3.68c1.4 1.15 3.6 2.16 5.5 2.16v-2.16c-1.66.02-3.61-.87-4.67-2.04l-1.4-1.55c-.19-.21-.43-.38-.69-.5-.29-.14-.62-.23-.96-.23h-.03C8.01 7 7 8.01 7 9.25V15c0 1.66 1.34 3 3 3h5.07l3.5 3.5L20 20.07z\"}}]})(props);\n};\nexport function MdBluetoothAudio (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M14.24 12.01l2.32 2.32c.28-.72.44-1.51.44-2.33 0-.82-.16-1.59-.43-2.31l-2.33 2.32zm5.29-5.3l-1.26 1.26c.63 1.21.98 2.57.98 4.02s-.36 2.82-.98 4.02l1.2 1.2c.97-1.54 1.54-3.36 1.54-5.31-.01-1.89-.55-3.67-1.48-5.19zm-3.82 1L10 2H9v7.59L4.41 5 3 6.41 8.59 12 3 17.59 4.41 19 9 14.41V22h1l5.71-5.71-4.3-4.29 4.3-4.29zM11 5.83l1.88 1.88L11 9.59V5.83zm1.88 10.46L11 18.17v-3.76l1.88 1.88z\"}}]})(props);\n};\nexport function MdConfirmationNumber (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M22 10V6c0-1.11-.9-2-2-2H4c-1.1 0-1.99.89-1.99 2v4c1.1 0 1.99.9 1.99 2s-.89 2-2 2v4c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2v-4c-1.1 0-2-.9-2-2s.9-2 2-2zm-9 7.5h-2v-2h2v2zm0-4.5h-2v-2h2v2zm0-4.5h-2v-2h2v2z\"}}]})(props);\n};\nexport function MdDiscFull (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M20 16h2v-2h-2v2zm0-9v5h2V7h-2zM10 4c-4.42 0-8 3.58-8 8s3.58 8 8 8 8-3.58 8-8-3.58-8-8-8zm0 10c-1.1 0-2-.9-2-2s.9-2 2-2 2 .9 2 2-.9 2-2 2z\"}}]})(props);\n};\nexport function MdDoNotDisturb (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.42 0-8-3.58-8-8 0-1.85.63-3.55 1.69-4.9L16.9 18.31C15.55 19.37 13.85 20 12 20zm6.31-3.1L7.1 5.69C8.45 4.63 10.15 4 12 4c4.42 0 8 3.58 8 8 0 1.85-.63 3.55-1.69 4.9z\"}}]})(props);\n};\nexport function MdDoNotDisturbAlt (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 2C6.5 2 2 6.5 2 12s4.5 10 10 10 10-4.5 10-10S17.5 2 12 2zM4 12c0-4.4 3.6-8 8-8 1.8 0 3.5.6 4.9 1.7L5.7 16.9C4.6 15.5 4 13.8 4 12zm8 8c-1.8 0-3.5-.6-4.9-1.7L18.3 7.1C19.4 8.5 20 10.2 20 12c0 4.4-3.6 8-8 8z\"}}]})(props);\n};\nexport function MdDoNotDisturbOff (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M17 11v2h-1.46l4.68 4.68C21.34 16.07 22 14.11 22 12c0-5.52-4.48-10-10-10-2.11 0-4.07.66-5.68 1.78L13.54 11H17zM2.27 2.27L1 3.54l2.78 2.78C2.66 7.93 2 9.89 2 12c0 5.52 4.48 10 10 10 2.11 0 4.07-.66 5.68-1.78L20.46 23l1.27-1.27L11 11 2.27 2.27zM7 13v-2h1.46l2 2H7z\"}}]})(props);\n};\nexport function MdDoNotDisturbOn (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm5 11H7v-2h10v2z\"}}]})(props);\n};\nexport function MdDriveEta (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M18.92 5.01C18.72 4.42 18.16 4 17.5 4h-11c-.66 0-1.21.42-1.42 1.01L3 11v8c0 .55.45 1 1 1h1c.55 0 1-.45 1-1v-1h12v1c0 .55.45 1 1 1h1c.55 0 1-.45 1-1v-8l-2.08-5.99zM6.5 15c-.83 0-1.5-.67-1.5-1.5S5.67 12 6.5 12s1.5.67 1.5 1.5S7.33 15 6.5 15zm11 0c-.83 0-1.5-.67-1.5-1.5s.67-1.5 1.5-1.5 1.5.67 1.5 1.5-.67 1.5-1.5 1.5zM5 10l1.5-4.5h11L19 10H5z\"}}]})(props);\n};\nexport function MdEnhancedEncryption (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M18 8h-1V6c0-2.76-2.24-5-5-5S7 3.24 7 6v2H6c-1.1 0-2 .9-2 2v10c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V10c0-1.1-.9-2-2-2zM8.9 6c0-1.71 1.39-3.1 3.1-3.1s3.1 1.39 3.1 3.1v2H8.9V6zM16 16h-3v3h-2v-3H8v-2h3v-3h2v3h3v2z\"}}]})(props);\n};\nexport function MdEventAvailable (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M16.53 11.06L15.47 10l-4.88 4.88-2.12-2.12-1.06 1.06L10.59 17l5.94-5.94zM19 3h-1V1h-2v2H8V1H6v2H5c-1.11 0-1.99.9-1.99 2L3 19c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H5V8h14v11z\"}}]})(props);\n};\nexport function MdEventBusy (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M9.31 17l2.44-2.44L14.19 17l1.06-1.06-2.44-2.44 2.44-2.44L14.19 10l-2.44 2.44L9.31 10l-1.06 1.06 2.44 2.44-2.44 2.44L9.31 17zM19 3h-1V1h-2v2H8V1H6v2H5c-1.11 0-1.99.9-1.99 2L3 19c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H5V8h14v11z\"}}]})(props);\n};\nexport function MdEventNote (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M17 10H7v2h10v-2zm2-7h-1V1h-2v2H8V1H6v2H5c-1.11 0-1.99.9-1.99 2L3 19c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H5V8h14v11zm-5-5H7v2h7v-2z\"}}]})(props);\n};\nexport function MdFolderSpecial (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M20 6h-8l-2-2H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V8c0-1.1-.9-2-2-2zm-2.06 11L15 15.28 12.06 17l.78-3.33-2.59-2.24 3.41-.29L15 8l1.34 3.14 3.41.29-2.59 2.24.78 3.33z\"}}]})(props);\n};\nexport function MdLiveTv (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M21 6h-7.59l3.29-3.29L16 2l-4 4-4-4-.71.71L10.59 6H3c-1.1 0-2 .89-2 2v12c0 1.1.9 2 2 2h18c1.1 0 2-.9 2-2V8c0-1.11-.9-2-2-2zm0 14H3V8h18v12zM9 10v8l7-4z\"}}]})(props);\n};\nexport function MdMms (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M20 2H4c-1.1 0-1.99.9-1.99 2L2 22l4-4h14c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zM5 14l3.5-4.5 2.5 3.01L14.5 8l4.5 6H5z\"}}]})(props);\n};\nexport function MdMore (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M22 3H7c-.69 0-1.23.35-1.59.88L0 12l5.41 8.11c.36.53.97.89 1.66.89H22c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 13.5c-.83 0-1.5-.67-1.5-1.5s.67-1.5 1.5-1.5 1.5.67 1.5 1.5-.67 1.5-1.5 1.5zm5 0c-.83 0-1.5-.67-1.5-1.5s.67-1.5 1.5-1.5 1.5.67 1.5 1.5-.67 1.5-1.5 1.5zm5 0c-.83 0-1.5-.67-1.5-1.5s.67-1.5 1.5-1.5 1.5.67 1.5 1.5-.67 1.5-1.5 1.5z\"}}]})(props);\n};\nexport function MdNetworkCheck (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M15.9 5c-.17 0-.32.09-.41.23l-.07.15-5.18 11.65c-.16.29-.26.61-.26.96 0 1.11.9 2.01 2.01 2.01.96 0 1.77-.68 1.96-1.59l.01-.03L16.4 5.5c0-.28-.22-.5-.5-.5zM1 9l2 2c2.88-2.88 6.79-4.08 10.53-3.62l1.19-2.68C9.89 3.84 4.74 5.27 1 9zm20 2l2-2c-1.64-1.64-3.55-2.82-5.59-3.57l-.53 2.82c1.5.62 2.9 1.53 4.12 2.75zm-4 4l2-2c-.8-.8-1.7-1.42-2.66-1.89l-.55 2.92c.42.27.83.59 1.21.97zM5 13l2 2c1.13-1.13 2.56-1.79 4.03-2l1.28-2.88c-2.63-.08-5.3.87-7.31 2.88z\"}}]})(props);\n};\nexport function MdNetworkLocked (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M19.5 10c.17 0 .33.03.5.05V1L1 20h13v-3c0-.89.39-1.68 1-2.23v-.27c0-2.48 2.02-4.5 4.5-4.5zm2.5 6v-1.5c0-1.38-1.12-2.5-2.5-2.5S17 13.12 17 14.5V16c-.55 0-1 .45-1 1v4c0 .55.45 1 1 1h5c.55 0 1-.45 1-1v-4c0-.55-.45-1-1-1zm-1 0h-3v-1.5c0-.83.67-1.5 1.5-1.5s1.5.67 1.5 1.5V16z\"}}]})(props);\n};\nexport function MdNoEncryption (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M21 21.78L4.22 5 3 6.22l2.04 2.04C4.42 8.6 4 9.25 4 10v10c0 1.1.9 2 2 2h12c.23 0 .45-.05.66-.12L19.78 23 21 21.78zM8.9 6c0-1.71 1.39-3.1 3.1-3.1s3.1 1.39 3.1 3.1v2H9.66L20 18.34V10c0-1.1-.9-2-2-2h-1V6c0-2.76-2.24-5-5-5-2.56 0-4.64 1.93-4.94 4.4L8.9 7.24V6z\"}}]})(props);\n};\nexport function MdOndemandVideo (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M21 3H3c-1.11 0-2 .89-2 2v12c0 1.1.89 2 2 2h5v2h8v-2h5c1.1 0 1.99-.9 1.99-2L23 5c0-1.11-.9-2-2-2zm0 14H3V5h18v12zm-5-6l-7 4V7z\"}}]})(props);\n};\nexport function MdPersonalVideo (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M21 3H3c-1.11 0-2 .89-2 2v12c0 1.1.89 2 2 2h5v2h8v-2h5c1.1 0 1.99-.9 1.99-2L23 5c0-1.11-.9-2-2-2zm0 14H3V5h18v12z\"}}]})(props);\n};\nexport function MdPhoneBluetoothSpeaker (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M14.71 9.5L17 7.21V11h.5l2.85-2.85L18.21 6l2.15-2.15L17.5 1H17v3.79L14.71 2.5l-.71.71L16.79 6 14 8.79l.71.71zM18 2.91l.94.94-.94.94V2.91zm0 4.3l.94.94-.94.94V7.21zm2 8.29c-1.25 0-2.45-.2-3.57-.57-.35-.11-.74-.03-1.02.24l-2.2 2.2c-2.83-1.44-5.15-3.75-6.59-6.59l2.2-2.21c.28-.26.36-.65.25-1C8.7 6.45 8.5 5.25 8.5 4c0-.55-.45-1-1-1H4c-.55 0-1 .45-1 1 0 9.39 7.61 17 17 17 .55 0 1-.45 1-1v-3.5c0-.55-.45-1-1-1z\"}}]})(props);\n};\nexport function MdPhoneForwarded (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M18 11l5-5-5-5v3h-4v4h4v3zm2 4.5c-1.25 0-2.45-.2-3.57-.57-.35-.11-.74-.03-1.02.24l-2.2 2.2c-2.83-1.44-5.15-3.75-6.59-6.59l2.2-2.21c.28-.26.36-.65.25-1C8.7 6.45 8.5 5.25 8.5 4c0-.55-.45-1-1-1H4c-.55 0-1 .45-1 1 0 9.39 7.61 17 17 17 .55 0 1-.45 1-1v-3.5c0-.55-.45-1-1-1z\"}}]})(props);\n};\nexport function MdPhoneInTalk (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M20 15.5c-1.25 0-2.45-.2-3.57-.57-.35-.11-.74-.03-1.02.24l-2.2 2.2c-2.83-1.44-5.15-3.75-6.59-6.59l2.2-2.21c.28-.26.36-.65.25-1C8.7 6.45 8.5 5.25 8.5 4c0-.55-.45-1-1-1H4c-.55 0-1 .45-1 1 0 9.39 7.61 17 17 17 .55 0 1-.45 1-1v-3.5c0-.55-.45-1-1-1zM19 12h2c0-4.97-4.03-9-9-9v2c3.87 0 7 3.13 7 7zm-4 0h2c0-2.76-2.24-5-5-5v2c1.66 0 3 1.34 3 3z\"}}]})(props);\n};\nexport function MdPhoneLocked (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M20 15.5c-1.25 0-2.45-.2-3.57-.57-.35-.11-.74-.03-1.02.24l-2.2 2.2c-2.83-1.44-5.15-3.75-6.59-6.59l2.2-2.21c.28-.26.36-.65.25-1C8.7 6.45 8.5 5.25 8.5 4c0-.55-.45-1-1-1H4c-.55 0-1 .45-1 1 0 9.39 7.61 17 17 17 .55 0 1-.45 1-1v-3.5c0-.55-.45-1-1-1zM20 4v-.5C20 2.12 18.88 1 17.5 1S15 2.12 15 3.5V4c-.55 0-1 .45-1 1v4c0 .55.45 1 1 1h5c.55 0 1-.45 1-1V5c0-.55-.45-1-1-1zm-.8 0h-3.4v-.5c0-.94.76-1.7 1.7-1.7s1.7.76 1.7 1.7V4z\"}}]})(props);\n};\nexport function MdPhoneMissed (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M6.5 5.5L12 11l7-7-1-1-6 6-4.5-4.5H11V3H5v6h1.5V5.5zm17.21 11.17C20.66 13.78 16.54 12 12 12 7.46 12 3.34 13.78.29 16.67c-.18.18-.29.43-.29.71s.11.53.29.71l2.48 2.48c.18.18.43.29.71.29.27 0 .52-.11.7-.28.79-.74 1.69-1.36 2.66-1.85.33-.16.56-.5.56-.9v-3.1c1.45-.48 3-.73 4.6-.73 1.6 0 3.15.25 4.6.72v3.1c0 .39.23.74.56.9.98.49 1.87 1.12 2.67 1.85.18.18.43.28.7.28.28 0 .53-.11.71-.29l2.48-2.48c.18-.18.29-.43.29-.71s-.12-.52-.3-.7z\"}}]})(props);\n};\nexport function MdPhonePaused (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M17 3h-2v7h2V3zm3 12.5c-1.25 0-2.45-.2-3.57-.57-.35-.11-.74-.03-1.02.24l-2.2 2.2c-2.83-1.44-5.15-3.75-6.59-6.59l2.2-2.21c.28-.26.36-.65.25-1C8.7 6.45 8.5 5.25 8.5 4c0-.55-.45-1-1-1H4c-.55 0-1 .45-1 1 0 9.39 7.61 17 17 17 .55 0 1-.45 1-1v-3.5c0-.55-.45-1-1-1zM19 3v7h2V3h-2z\"}}]})(props);\n};\nexport function MdPower (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M16.01 7L16 3h-2v4h-4V3H8v4h-.01C7 6.99 6 7.99 6 8.99v5.49L9.5 18v3h5v-3l3.5-3.51v-5.5c0-1-1-2-1.99-1.99z\"}}]})(props);\n};\nexport function MdPriorityHigh (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"circle\",\"attr\":{\"cx\":\"12\",\"cy\":\"19\",\"r\":\"2\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M10 3h4v12h-4z\"}}]})(props);\n};\nexport function MdRvHookup (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M20 17v-6c0-1.1-.9-2-2-2H7V7l-3 3 3 3v-2h4v3H4v3c0 1.1.9 2 2 2h2c0 1.66 1.34 3 3 3s3-1.34 3-3h8v-2h-2zm-9 3c-.55 0-1-.45-1-1s.45-1 1-1 1 .45 1 1-.45 1-1 1zm7-6h-4v-3h4v3zM17 2v2H9v2h8v2l3-3z\"}}]})(props);\n};\nexport function MdSdCard (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M18 2h-8L4.02 8 4 20c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm-6 6h-2V4h2v4zm3 0h-2V4h2v4zm3 0h-2V4h2v4z\"}}]})(props);\n};\nexport function MdSimCardAlert (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M18 2h-8L4.02 8 4 20c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm-5 15h-2v-2h2v2zm0-4h-2V8h2v5z\"}}]})(props);\n};\nexport function MdSms (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M20 2H4c-1.1 0-1.99.9-1.99 2L2 22l4-4h14c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zM9 11H7V9h2v2zm4 0h-2V9h2v2zm4 0h-2V9h2v2z\"}}]})(props);\n};\nexport function MdSmsFailed (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M20 2H4c-1.1 0-1.99.9-1.99 2L2 22l4-4h14c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm-7 12h-2v-2h2v2zm0-4h-2V6h2v4z\"}}]})(props);\n};\nexport function MdSync (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 4V1L8 5l4 4V6c3.31 0 6 2.69 6 6 0 1.01-.25 1.97-.7 2.8l1.46 1.46C19.54 15.03 20 13.57 20 12c0-4.42-3.58-8-8-8zm0 14c-3.31 0-6-2.69-6-6 0-1.01.25-1.97.7-2.8L5.24 7.74C4.46 8.97 4 10.43 4 12c0 4.42 3.58 8 8 8v3l4-4-4-4v3z\"}}]})(props);\n};\nexport function MdSyncDisabled (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M10 6.35V4.26c-.8.21-1.55.54-2.23.96l1.46 1.46c.25-.12.5-.24.77-.33zm-7.14-.94l2.36 2.36C4.45 8.99 4 10.44 4 12c0 2.21.91 4.2 2.36 5.64L4 20h6v-6l-2.24 2.24C6.68 15.15 6 13.66 6 12c0-1 .25-1.94.68-2.77l8.08 8.08c-.25.13-.5.25-.77.34v2.09c.8-.21 1.55-.54 2.23-.96l2.36 2.36 1.27-1.27L4.14 4.14 2.86 5.41zM20 4h-6v6l2.24-2.24C17.32 8.85 18 10.34 18 12c0 1-.25 1.94-.68 2.77l1.46 1.46C19.55 15.01 20 13.56 20 12c0-2.21-.91-4.2-2.36-5.64L20 4z\"}}]})(props);\n};\nexport function MdSyncProblem (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M3 12c0 2.21.91 4.2 2.36 5.64L3 20h6v-6l-2.24 2.24C5.68 15.15 5 13.66 5 12c0-2.61 1.67-4.83 4-5.65V4.26C5.55 5.15 3 8.27 3 12zm8 5h2v-2h-2v2zM21 4h-6v6l2.24-2.24C18.32 8.85 19 10.34 19 12c0 2.61-1.67 4.83-4 5.65v2.09c3.45-.89 6-4.01 6-7.74 0-2.21-.91-4.2-2.36-5.64L21 4zm-10 9h2V7h-2v6z\"}}]})(props);\n};\nexport function MdSystemUpdate (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M17 1.01L7 1c-1.1 0-2 .9-2 2v18c0 1.1.9 2 2 2h10c1.1 0 2-.9 2-2V3c0-1.1-.9-1.99-2-1.99zM17 19H7V5h10v14zm-1-6h-3V8h-2v5H8l4 4 4-4z\"}}]})(props);\n};\nexport function MdTapAndPlay (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M2 16v2c2.76 0 5 2.24 5 5h2c0-3.87-3.13-7-7-7zm0 4v3h3c0-1.66-1.34-3-3-3zm0-8v2c4.97 0 9 4.03 9 9h2c0-6.08-4.92-11-11-11zM17 1.01L7 1c-1.1 0-2 .9-2 2v7.37c.69.16 1.36.37 2 .64V5h10v13h-3.03c.52 1.25.84 2.59.95 4H17c1.1 0 2-.9 2-2V3c0-1.1-.9-1.99-2-1.99z\"}}]})(props);\n};\nexport function MdTimeToLeave (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M18.92 5.01C18.72 4.42 18.16 4 17.5 4h-11c-.66 0-1.21.42-1.42 1.01L3 11v8c0 .55.45 1 1 1h1c.55 0 1-.45 1-1v-1h12v1c0 .55.45 1 1 1h1c.55 0 1-.45 1-1v-8l-2.08-5.99zM6.5 15c-.83 0-1.5-.67-1.5-1.5S5.67 12 6.5 12s1.5.67 1.5 1.5S7.33 15 6.5 15zm11 0c-.83 0-1.5-.67-1.5-1.5s.67-1.5 1.5-1.5 1.5.67 1.5 1.5-.67 1.5-1.5 1.5zM5 10l1.5-4.5h11L19 10H5z\"}}]})(props);\n};\nexport function MdVibration (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M0 15h2V9H0v6zm3 2h2V7H3v10zm19-8v6h2V9h-2zm-3 8h2V7h-2v10zM16.5 3h-9C6.67 3 6 3.67 6 4.5v15c0 .83.67 1.5 1.5 1.5h9c.83 0 1.5-.67 1.5-1.5v-15c0-.83-.67-1.5-1.5-1.5zM16 19H8V5h8v14z\"}}]})(props);\n};\nexport function MdVoiceChat (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M20 2H4c-1.1 0-1.99.9-1.99 2L2 22l4-4h14c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm-2 12l-4-3.2V14H6V6h8v3.2L18 6v8z\"}}]})(props);\n};\nexport function MdVpnLock (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M22 4v-.5C22 2.12 20.88 1 19.5 1S17 2.12 17 3.5V4c-.55 0-1 .45-1 1v4c0 .55.45 1 1 1h5c.55 0 1-.45 1-1V5c0-.55-.45-1-1-1zm-.8 0h-3.4v-.5c0-.94.76-1.7 1.7-1.7s1.7.76 1.7 1.7V4zm-2.28 8c.04.33.08.66.08 1 0 2.08-.8 3.97-2.1 5.39-.26-.81-1-1.39-1.9-1.39h-1v-3c0-.55-.45-1-1-1H7v-2h2c.55 0 1-.45 1-1V8h2c1.1 0 2-.9 2-2V3.46c-.95-.3-1.95-.46-3-.46C5.48 3 1 7.48 1 13s4.48 10 10 10 10-4.48 10-10c0-.34-.02-.67-.05-1h-2.03zM10 20.93c-3.95-.49-7-3.85-7-7.93 0-.62.08-1.21.21-1.79L8 16v1c0 1.1.9 2 2 2v1.93z\"}}]})(props);\n};\nexport function MdWc (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M5.5 22v-7.5H4V9c0-1.1.9-2 2-2h3c1.1 0 2 .9 2 2v5.5H9.5V22h-4zM18 22v-6h3l-2.54-7.63C18.18 7.55 17.42 7 16.56 7h-.12c-.86 0-1.63.55-1.9 1.37L12 16h3v6h3zM7.5 6c1.11 0 2-.89 2-2s-.89-2-2-2-2 .89-2 2 .89 2 2 2zm9 0c1.11 0 2-.89 2-2s-.89-2-2-2-2 .89-2 2 .89 2 2 2z\"}}]})(props);\n};\nexport function MdWifi (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M1 9l2 2c4.97-4.97 13.03-4.97 18 0l2-2C16.93 2.93 7.08 2.93 1 9zm8 8l3 3 3-3c-1.65-1.66-4.34-1.66-6 0zm-4-4l2 2c2.76-2.76 7.24-2.76 10 0l2-2C15.14 9.14 8.87 9.14 5 13z\"}}]})(props);\n};\nexport function MdAcUnit (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M22 11h-4.17l3.24-3.24-1.41-1.42L15 11h-2V9l4.66-4.66-1.42-1.41L13 6.17V2h-2v4.17L7.76 2.93 6.34 4.34 11 9v2H9L4.34 6.34 2.93 7.76 6.17 11H2v2h4.17l-3.24 3.24 1.41 1.42L9 13h2v2l-4.66 4.66 1.42 1.41L11 17.83V22h2v-4.17l3.24 3.24 1.42-1.41L13 15v-2h2l4.66 4.66 1.41-1.42L17.83 13H22z\"}}]})(props);\n};\nexport function MdAirportShuttle (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M17 5H3c-1.1 0-2 .89-2 2v9h2c0 1.65 1.34 3 3 3s3-1.35 3-3h5.5c0 1.65 1.34 3 3 3s3-1.35 3-3H23v-5l-6-6zM3 11V7h4v4H3zm3 6.5c-.83 0-1.5-.67-1.5-1.5s.67-1.5 1.5-1.5 1.5.67 1.5 1.5-.67 1.5-1.5 1.5zm7-6.5H9V7h4v4zm4.5 6.5c-.83 0-1.5-.67-1.5-1.5s.67-1.5 1.5-1.5 1.5.67 1.5 1.5-.67 1.5-1.5 1.5zM15 11V7h1l4 4h-5z\"}}]})(props);\n};\nexport function MdAllInclusive (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M18.6 6.62c-1.44 0-2.8.56-3.77 1.53L12 10.66 10.48 12h.01L7.8 14.39c-.64.64-1.49.99-2.4.99-1.87 0-3.39-1.51-3.39-3.38S3.53 8.62 5.4 8.62c.91 0 1.76.35 2.44 1.03l1.13 1 1.51-1.34L9.22 8.2C8.2 7.18 6.84 6.62 5.4 6.62 2.42 6.62 0 9.04 0 12s2.42 5.38 5.4 5.38c1.44 0 2.8-.56 3.77-1.53l2.83-2.5.01.01L13.52 12h-.01l2.69-2.39c.64-.64 1.49-.99 2.4-.99 1.87 0 3.39 1.51 3.39 3.38s-1.52 3.38-3.39 3.38c-.9 0-1.76-.35-2.44-1.03l-1.14-1.01-1.51 1.34 1.27 1.12c1.02 1.01 2.37 1.57 3.82 1.57 2.98 0 5.4-2.41 5.4-5.38s-2.42-5.37-5.4-5.37z\"}}]})(props);\n};\nexport function MdBeachAccess (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M13.127 14.56l1.43-1.43 6.44 6.443L19.57 21zm4.293-5.73l2.86-2.86c-3.95-3.95-10.35-3.96-14.3-.02 3.93-1.3 8.31-.25 11.44 2.88zM5.95 5.98c-3.94 3.95-3.93 10.35.02 14.3l2.86-2.86C5.7 14.29 4.65 9.91 5.95 5.98zm.02-.02l-.01.01c-.38 3.01 1.17 6.88 4.3 10.02l5.73-5.73c-3.13-3.13-7.01-4.68-10.02-4.3z\"}}]})(props);\n};\nexport function MdBusinessCenter (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M10 16v-1H3.01L3 19c0 1.11.89 2 2 2h14c1.11 0 2-.89 2-2v-4h-7v1h-4zm10-9h-4.01V5l-2-2h-4l-2 2v2H4c-1.1 0-2 .9-2 2v3c0 1.11.89 2 2 2h6v-2h4v2h6c1.1 0 2-.9 2-2V9c0-1.1-.9-2-2-2zm-6 0h-4V5h4v2z\"}}]})(props);\n};\nexport function MdCasino (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM7.5 18c-.83 0-1.5-.67-1.5-1.5S6.67 15 7.5 15s1.5.67 1.5 1.5S8.33 18 7.5 18zm0-9C6.67 9 6 8.33 6 7.5S6.67 6 7.5 6 9 6.67 9 7.5 8.33 9 7.5 9zm4.5 4.5c-.83 0-1.5-.67-1.5-1.5s.67-1.5 1.5-1.5 1.5.67 1.5 1.5-.67 1.5-1.5 1.5zm4.5 4.5c-.83 0-1.5-.67-1.5-1.5s.67-1.5 1.5-1.5 1.5.67 1.5 1.5-.67 1.5-1.5 1.5zm0-9c-.83 0-1.5-.67-1.5-1.5S15.67 6 16.5 6s1.5.67 1.5 1.5S17.33 9 16.5 9z\"}}]})(props);\n};\nexport function MdChildCare (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"circle\",\"attr\":{\"cx\":\"14.5\",\"cy\":\"10.5\",\"r\":\"1.25\"}},{\"tag\":\"circle\",\"attr\":{\"cx\":\"9.5\",\"cy\":\"10.5\",\"r\":\"1.25\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M22.94 12.66c.04-.21.06-.43.06-.66s-.02-.45-.06-.66c-.25-1.51-1.36-2.74-2.81-3.17-.53-1.12-1.28-2.1-2.19-2.91C16.36 3.85 14.28 3 12 3s-4.36.85-5.94 2.26c-.92.81-1.67 1.8-2.19 2.91-1.45.43-2.56 1.65-2.81 3.17-.04.21-.06.43-.06.66s.02.45.06.66c.25 1.51 1.36 2.74 2.81 3.17.52 1.11 1.27 2.09 2.17 2.89C7.62 20.14 9.71 21 12 21s4.38-.86 5.97-2.28c.9-.8 1.65-1.79 2.17-2.89 1.44-.43 2.55-1.65 2.8-3.17zM19 14c-.1 0-.19-.02-.29-.03-.2.67-.49 1.29-.86 1.86C16.6 17.74 14.45 19 12 19s-4.6-1.26-5.85-3.17c-.37-.57-.66-1.19-.86-1.86-.1.01-.19.03-.29.03-1.1 0-2-.9-2-2s.9-2 2-2c.1 0 .19.02.29.03.2-.67.49-1.29.86-1.86C7.4 6.26 9.55 5 12 5s4.6 1.26 5.85 3.17c.37.57.66 1.19.86 1.86.1-.01.19-.03.29-.03 1.1 0 2 .9 2 2s-.9 2-2 2zM7.5 14c.76 1.77 2.49 3 4.5 3s3.74-1.23 4.5-3h-9z\"}}]})(props);\n};\nexport function MdChildFriendly (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M13 2v8h8c0-4.42-3.58-8-8-8zm6.32 13.89C20.37 14.54 21 12.84 21 11H6.44l-.95-2H2v2h2.22s1.89 4.07 2.12 4.42c-1.1.59-1.84 1.75-1.84 3.08C4.5 20.43 6.07 22 8 22c1.76 0 3.22-1.3 3.46-3h2.08c.24 1.7 1.7 3 3.46 3 1.93 0 3.5-1.57 3.5-3.5 0-1.04-.46-1.97-1.18-2.61zM8 20c-.83 0-1.5-.67-1.5-1.5S7.17 17 8 17s1.5.67 1.5 1.5S8.83 20 8 20zm9 0c-.83 0-1.5-.67-1.5-1.5S16.17 17 17 17s1.5.67 1.5 1.5S17.83 20 17 20z\"}}]})(props);\n};\nexport function MdFitnessCenter (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M20.57 14.86L22 13.43 20.57 12 17 15.57 8.43 7 12 3.43 10.57 2 9.14 3.43 7.71 2 5.57 4.14 4.14 2.71 2.71 4.14l1.43 1.43L2 7.71l1.43 1.43L2 10.57 3.43 12 7 8.43 15.57 17 12 20.57 13.43 22l1.43-1.43L16.29 22l2.14-2.14 1.43 1.43 1.43-1.43-1.43-1.43L22 16.29z\"}}]})(props);\n};\nexport function MdFreeBreakfast (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M20 3H4v10c0 2.21 1.79 4 4 4h6c2.21 0 4-1.79 4-4v-3h2c1.11 0 2-.9 2-2V5c0-1.11-.89-2-2-2zm0 5h-2V5h2v3zM4 19h16v2H4z\"}}]})(props);\n};\nexport function MdGolfCourse (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"circle\",\"attr\":{\"cx\":\"19.5\",\"cy\":\"19.5\",\"r\":\"1.5\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M17 5.92L9 2v18H7v-1.73c-1.79.35-3 .99-3 1.73 0 1.1 2.69 2 6 2s6-.9 6-2c0-.99-2.16-1.81-5-1.97V8.98l6-3.06z\"}}]})(props);\n};\nexport function MdHotTub (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"circle\",\"attr\":{\"cx\":\"7\",\"cy\":\"6\",\"r\":\"2\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M11.15 12c-.31-.22-.59-.46-.82-.72l-1.4-1.55c-.19-.21-.43-.38-.69-.5-.29-.14-.62-.23-.96-.23h-.03C6.01 9 5 10.01 5 11.25V12H2v8c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2v-8H11.15zM7 20H5v-6h2v6zm4 0H9v-6h2v6zm4 0h-2v-6h2v6zm4 0h-2v-6h2v6zm-.35-14.14l-.07-.07c-.57-.62-.82-1.41-.67-2.2L18 3h-1.89l-.06.43c-.2 1.36.27 2.71 1.3 3.72l.07.06c.57.62.82 1.41.67 2.2l-.11.59h1.91l.06-.43c.21-1.36-.27-2.71-1.3-3.71zm-4 0l-.07-.07c-.57-.62-.82-1.41-.67-2.2L14 3h-1.89l-.06.43c-.2 1.36.27 2.71 1.3 3.72l.07.06c.57.62.82 1.41.67 2.2l-.11.59h1.91l.06-.43c.21-1.36-.27-2.71-1.3-3.71z\"}}]})(props);\n};\nexport function MdKitchen (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M18 2.01L6 2c-1.1 0-2 .89-2 2v16c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V4c0-1.11-.9-1.99-2-1.99zM18 20H6v-9.02h12V20zm0-11H6V4h12v5zM8 5h2v3H8zm0 7h2v5H8z\"}}]})(props);\n};\nexport function MdPool (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M22 21c-1.11 0-1.73-.37-2.18-.64-.37-.22-.6-.36-1.15-.36-.56 0-.78.13-1.15.36-.46.27-1.07.64-2.18.64s-1.73-.37-2.18-.64c-.37-.22-.6-.36-1.15-.36-.56 0-.78.13-1.15.36-.46.27-1.08.64-2.19.64-1.11 0-1.73-.37-2.18-.64-.37-.23-.6-.36-1.15-.36s-.78.13-1.15.36c-.46.27-1.08.64-2.19.64v-2c.56 0 .78-.13 1.15-.36.46-.27 1.08-.64 2.19-.64s1.73.37 2.18.64c.37.23.59.36 1.15.36.56 0 .78-.13 1.15-.36.46-.27 1.08-.64 2.19-.64 1.11 0 1.73.37 2.18.64.37.22.6.36 1.15.36s.78-.13 1.15-.36c.45-.27 1.07-.64 2.18-.64s1.73.37 2.18.64c.37.23.59.36 1.15.36v2zm0-4.5c-1.11 0-1.73-.37-2.18-.64-.37-.22-.6-.36-1.15-.36-.56 0-.78.13-1.15.36-.45.27-1.07.64-2.18.64s-1.73-.37-2.18-.64c-.37-.22-.6-.36-1.15-.36-.56 0-.78.13-1.15.36-.45.27-1.07.64-2.18.64s-1.73-.37-2.18-.64c-.37-.22-.6-.36-1.15-.36s-.78.13-1.15.36c-.47.27-1.09.64-2.2.64v-2c.56 0 .78-.13 1.15-.36.45-.27 1.07-.64 2.18-.64s1.73.37 2.18.64c.37.22.6.36 1.15.36.56 0 .78-.13 1.15-.36.45-.27 1.07-.64 2.18-.64s1.73.37 2.18.64c.37.22.6.36 1.15.36s.78-.13 1.15-.36c.45-.27 1.07-.64 2.18-.64s1.73.37 2.18.64c.37.22.6.36 1.15.36v2zM8.67 12c.56 0 .78-.13 1.15-.36.46-.27 1.08-.64 2.19-.64 1.11 0 1.73.37 2.18.64.37.22.6.36 1.15.36s.78-.13 1.15-.36c.12-.07.26-.15.41-.23L10.48 5C8.93 3.45 7.5 2.99 5 3v2.5c1.82-.01 2.89.39 4 1.5l1 1-3.25 3.25c.31.12.56.27.77.39.37.23.59.36 1.15.36z\"}},{\"tag\":\"circle\",\"attr\":{\"cx\":\"16.5\",\"cy\":\"5.5\",\"r\":\"2.5\"}}]})(props);\n};\nexport function MdRoomService (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M2 17h20v2H2zm11.84-9.21c.1-.24.16-.51.16-.79 0-1.1-.9-2-2-2s-2 .9-2 2c0 .28.06.55.16.79C6.25 8.6 3.27 11.93 3 16h18c-.27-4.07-3.25-7.4-7.16-8.21z\"}}]})(props);\n};\nexport function MdSmokeFree (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M2 6l6.99 7H2v3h9.99l7 7 1.26-1.25-17-17zm18.5 7H22v3h-1.5zM18 13h1.5v3H18zm.85-8.12c.62-.61 1-1.45 1-2.38h-1.5c0 1.02-.83 1.85-1.85 1.85v1.5c2.24 0 4 1.83 4 4.07V12H22V9.92c0-2.23-1.28-4.15-3.15-5.04zM14.5 8.7h1.53c1.05 0 1.97.74 1.97 2.05V12h1.5v-1.59c0-1.8-1.6-3.16-3.47-3.16H14.5c-1.02 0-1.85-.98-1.85-2s.83-1.75 1.85-1.75V2c-1.85 0-3.35 1.5-3.35 3.35s1.5 3.35 3.35 3.35zm2.5 7.23V13h-2.93z\"}}]})(props);\n};\nexport function MdSmokingRooms (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M2 16h15v3H2zm18.5 0H22v3h-1.5zM18 16h1.5v3H18zm.85-8.27c.62-.61 1-1.45 1-2.38C19.85 3.5 18.35 2 16.5 2v1.5c1.02 0 1.85.83 1.85 1.85S17.52 7.2 16.5 7.2v1.5c2.24 0 4 1.83 4 4.07V15H22v-2.24c0-2.22-1.28-4.14-3.15-5.03zm-2.82 2.47H14.5c-1.02 0-1.85-.98-1.85-2s.83-1.75 1.85-1.75v-1.5c-1.85 0-3.35 1.5-3.35 3.35s1.5 3.35 3.35 3.35h1.53c1.05 0 1.97.74 1.97 2.05V15h1.5v-1.64c0-1.81-1.6-3.16-3.47-3.16z\"}}]})(props);\n};\nexport function MdSpa (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M8.55 12c-1.07-.71-2.25-1.27-3.53-1.61 1.28.34 2.46.9 3.53 1.61zm10.43-1.61c-1.29.34-2.49.91-3.57 1.64 1.08-.73 2.28-1.3 3.57-1.64z\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M15.49 9.63c-.18-2.79-1.31-5.51-3.43-7.63-2.14 2.14-3.32 4.86-3.55 7.63 1.28.68 2.46 1.56 3.49 2.63 1.03-1.06 2.21-1.94 3.49-2.63zm-6.5 2.65c-.14-.1-.3-.19-.45-.29.15.11.31.19.45.29zm6.42-.25c-.13.09-.27.16-.4.26.13-.1.27-.17.4-.26zM12 15.45C9.85 12.17 6.18 10 2 10c0 5.32 3.36 9.82 8.03 11.49.63.23 1.29.4 1.97.51.68-.12 1.33-.29 1.97-.51C18.64 19.82 22 15.32 22 10c-4.18 0-7.85 2.17-10 5.45z\"}}]})(props);\n};\nexport function MdCake (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 6c1.11 0 2-.9 2-2 0-.38-.1-.73-.29-1.03L12 0l-1.71 2.97c-.19.3-.29.65-.29 1.03 0 1.1.9 2 2 2zm4.6 9.99l-1.07-1.07-1.08 1.07c-1.3 1.3-3.58 1.31-4.89 0l-1.07-1.07-1.09 1.07C6.75 16.64 5.88 17 4.96 17c-.73 0-1.4-.23-1.96-.61V21c0 .55.45 1 1 1h16c.55 0 1-.45 1-1v-4.61c-.56.38-1.23.61-1.96.61-.92 0-1.79-.36-2.44-1.01zM18 9h-5V7h-2v2H6c-1.66 0-3 1.34-3 3v1.54c0 1.08.88 1.96 1.96 1.96.52 0 1.02-.2 1.38-.57l2.14-2.13 2.13 2.13c.74.74 2.03.74 2.77 0l2.14-2.13 2.13 2.13c.37.37.86.57 1.38.57 1.08 0 1.96-.88 1.96-1.96V12C21 10.34 19.66 9 18 9z\"}}]})(props);\n};\nexport function MdDomain (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 7V3H2v18h20V7H12zM6 19H4v-2h2v2zm0-4H4v-2h2v2zm0-4H4V9h2v2zm0-4H4V5h2v2zm4 12H8v-2h2v2zm0-4H8v-2h2v2zm0-4H8V9h2v2zm0-4H8V5h2v2zm10 12h-8v-2h2v-2h-2v-2h2v-2h-2V9h8v10zm-2-8h-2v2h2v-2zm0 4h-2v2h2v-2z\"}}]})(props);\n};\nexport function MdGroup (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M16 11c1.66 0 2.99-1.34 2.99-3S17.66 5 16 5c-1.66 0-3 1.34-3 3s1.34 3 3 3zm-8 0c1.66 0 2.99-1.34 2.99-3S9.66 5 8 5C6.34 5 5 6.34 5 8s1.34 3 3 3zm0 2c-2.33 0-7 1.17-7 3.5V19h14v-2.5c0-2.33-4.67-3.5-7-3.5zm8 0c-.29 0-.62.02-.97.05 1.16.84 1.97 1.97 1.97 3.45V19h6v-2.5c0-2.33-4.67-3.5-7-3.5z\"}}]})(props);\n};\nexport function MdGroupAdd (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M8 10H5V7H3v3H0v2h3v3h2v-3h3v-2zm10 1c1.66 0 2.99-1.34 2.99-3S19.66 5 18 5c-.32 0-.63.05-.91.14.57.81.9 1.79.9 2.86s-.34 2.04-.9 2.86c.28.09.59.14.91.14zm-5 0c1.66 0 2.99-1.34 2.99-3S14.66 5 13 5c-1.66 0-3 1.34-3 3s1.34 3 3 3zm6.62 2.16c.83.73 1.38 1.66 1.38 2.84v2h3v-2c0-1.54-2.37-2.49-4.38-2.84zM13 13c-2 0-6 1-6 3v2h12v-2c0-2-4-3-6-3z\"}}]})(props);\n};\nexport function MdLocationCity (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M15 11V5l-3-3-3 3v2H3v14h18V11h-6zm-8 8H5v-2h2v2zm0-4H5v-2h2v2zm0-4H5V9h2v2zm6 8h-2v-2h2v2zm0-4h-2v-2h2v2zm0-4h-2V9h2v2zm0-4h-2V5h2v2zm6 12h-2v-2h2v2zm0-4h-2v-2h2v2z\"}}]})(props);\n};\nexport function MdMood (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M11.99 2C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8zm3.5-9c.83 0 1.5-.67 1.5-1.5S16.33 8 15.5 8 14 8.67 14 9.5s.67 1.5 1.5 1.5zm-7 0c.83 0 1.5-.67 1.5-1.5S9.33 8 8.5 8 7 8.67 7 9.5 7.67 11 8.5 11zm3.5 6.5c2.33 0 4.31-1.46 5.11-3.5H6.89c.8 2.04 2.78 3.5 5.11 3.5z\"}}]})(props);\n};\nexport function MdMoodBad (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M11.99 2C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8zm3.5-9c.83 0 1.5-.67 1.5-1.5S16.33 8 15.5 8 14 8.67 14 9.5s.67 1.5 1.5 1.5zm-7 0c.83 0 1.5-.67 1.5-1.5S9.33 8 8.5 8 7 8.67 7 9.5 7.67 11 8.5 11zm3.5 3c-2.33 0-4.31 1.46-5.11 3.5h10.22c-.8-2.04-2.78-3.5-5.11-3.5z\"}}]})(props);\n};\nexport function MdNotifications (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 22c1.1 0 2-.9 2-2h-4c0 1.1.89 2 2 2zm6-6v-5c0-3.07-1.64-5.64-4.5-6.32V4c0-.83-.67-1.5-1.5-1.5s-1.5.67-1.5 1.5v.68C7.63 5.36 6 7.92 6 11v5l-2 2v1h16v-1l-2-2z\"}}]})(props);\n};\nexport function MdNotificationsActive (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M7.58 4.08L6.15 2.65C3.75 4.48 2.17 7.3 2.03 10.5h2c.15-2.65 1.51-4.97 3.55-6.42zm12.39 6.42h2c-.15-3.2-1.73-6.02-4.12-7.85l-1.42 1.43c2.02 1.45 3.39 3.77 3.54 6.42zM18 11c0-3.07-1.64-5.64-4.5-6.32V4c0-.83-.67-1.5-1.5-1.5s-1.5.67-1.5 1.5v.68C7.63 5.36 6 7.92 6 11v5l-2 2v1h16v-1l-2-2v-5zm-6 11c.14 0 .27-.01.4-.04.65-.14 1.18-.58 1.44-1.18.1-.24.15-.5.15-.78h-4c.01 1.1.9 2 2.01 2z\"}}]})(props);\n};\nexport function MdNotificationsNone (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 22c1.1 0 2-.9 2-2h-4c0 1.1.9 2 2 2zm6-6v-5c0-3.07-1.63-5.64-4.5-6.32V4c0-.83-.67-1.5-1.5-1.5s-1.5.67-1.5 1.5v.68C7.64 5.36 6 7.92 6 11v5l-2 2v1h16v-1l-2-2zm-2 1H8v-6c0-2.48 1.51-4.5 4-4.5s4 2.02 4 4.5v6z\"}}]})(props);\n};\nexport function MdNotificationsOff (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M20 18.69L7.84 6.14 5.27 3.49 4 4.76l2.8 2.8v.01c-.52.99-.8 2.16-.8 3.42v5l-2 2v1h13.73l2 2L21 19.72l-1-1.03zM12 22c1.11 0 2-.89 2-2h-4c0 1.11.89 2 2 2zm6-7.32V11c0-3.08-1.64-5.64-4.5-6.32V4c0-.83-.67-1.5-1.5-1.5s-1.5.67-1.5 1.5v.68c-.15.03-.29.08-.42.12-.1.03-.2.07-.3.11h-.01c-.01 0-.01 0-.02.01-.23.09-.46.2-.68.31 0 0-.01 0-.01.01L18 14.68z\"}}]})(props);\n};\nexport function MdNotificationsPaused (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 22c1.1 0 2-.9 2-2h-4c0 1.1.89 2 2 2zm6-6v-5c0-3.07-1.64-5.64-4.5-6.32V4c0-.83-.67-1.5-1.5-1.5s-1.5.67-1.5 1.5v.68C7.63 5.36 6 7.93 6 11v5l-2 2v1h16v-1l-2-2zm-3.5-6.2l-2.8 3.4h2.8V15h-5v-1.8l2.8-3.4H9.5V8h5v1.8z\"}}]})(props);\n};\nexport function MdPages (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M3 5v6h5L7 7l4 1V3H5c-1.1 0-2 .9-2 2zm5 8H3v6c0 1.1.9 2 2 2h6v-5l-4 1 1-4zm9 4l-4-1v5h6c1.1 0 2-.9 2-2v-6h-5l1 4zm2-14h-6v5l4-1-1 4h5V5c0-1.1-.9-2-2-2z\"}}]})(props);\n};\nexport function MdPartyMode (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M20 4h-3.17L15 2H9L7.17 4H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm-8 3c1.63 0 3.06.79 3.98 2H12c-1.66 0-3 1.34-3 3 0 .35.07.69.18 1H7.1c-.06-.32-.1-.66-.1-1 0-2.76 2.24-5 5-5zm0 10c-1.63 0-3.06-.79-3.98-2H12c1.66 0 3-1.34 3-3 0-.35-.07-.69-.18-1h2.08c.07.32.1.66.1 1 0 2.76-2.24 5-5 5z\"}}]})(props);\n};\nexport function MdPeople (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M16 11c1.66 0 2.99-1.34 2.99-3S17.66 5 16 5c-1.66 0-3 1.34-3 3s1.34 3 3 3zm-8 0c1.66 0 2.99-1.34 2.99-3S9.66 5 8 5C6.34 5 5 6.34 5 8s1.34 3 3 3zm0 2c-2.33 0-7 1.17-7 3.5V19h14v-2.5c0-2.33-4.67-3.5-7-3.5zm8 0c-.29 0-.62.02-.97.05 1.16.84 1.97 1.97 1.97 3.45V19h6v-2.5c0-2.33-4.67-3.5-7-3.5z\"}}]})(props);\n};\nexport function MdPeopleOutline (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M16.5 13c-1.2 0-3.07.34-4.5 1-1.43-.67-3.3-1-4.5-1C5.33 13 1 14.08 1 16.25V19h22v-2.75c0-2.17-4.33-3.25-6.5-3.25zm-4 4.5h-10v-1.25c0-.54 2.56-1.75 5-1.75s5 1.21 5 1.75v1.25zm9 0H14v-1.25c0-.46-.2-.86-.52-1.22.88-.3 1.96-.53 3.02-.53 2.44 0 5 1.21 5 1.75v1.25zM7.5 12c1.93 0 3.5-1.57 3.5-3.5S9.43 5 7.5 5 4 6.57 4 8.5 5.57 12 7.5 12zm0-5.5c1.1 0 2 .9 2 2s-.9 2-2 2-2-.9-2-2 .9-2 2-2zm9 5.5c1.93 0 3.5-1.57 3.5-3.5S18.43 5 16.5 5 13 6.57 13 8.5s1.57 3.5 3.5 3.5zm0-5.5c1.1 0 2 .9 2 2s-.9 2-2 2-2-.9-2-2 .9-2 2-2z\"}}]})(props);\n};\nexport function MdPerson (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z\"}}]})(props);\n};\nexport function MdPersonAdd (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M15 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm-9-2V7H4v3H1v2h3v3h2v-3h3v-2H6zm9 4c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z\"}}]})(props);\n};\nexport function MdPersonOutline (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 5.9c1.16 0 2.1.94 2.1 2.1s-.94 2.1-2.1 2.1S9.9 9.16 9.9 8s.94-2.1 2.1-2.1m0 9c2.97 0 6.1 1.46 6.1 2.1v1.1H5.9V17c0-.64 3.13-2.1 6.1-2.1M12 4C9.79 4 8 5.79 8 8s1.79 4 4 4 4-1.79 4-4-1.79-4-4-4zm0 9c-2.67 0-8 1.34-8 4v3h16v-3c0-2.66-5.33-4-8-4z\"}}]})(props);\n};\nexport function MdPlusOne (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M10 8H8v4H4v2h4v4h2v-4h4v-2h-4zm4.5-1.92V7.9l2.5-.5V18h2V5z\"}}]})(props);\n};\nexport function MdPoll (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"}}]})(props);\n};\nexport function MdPublic (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-1 17.93c-3.95-.49-7-3.85-7-7.93 0-.62.08-1.21.21-1.79L9 15v1c0 1.1.9 2 2 2v1.93zm6.9-2.54c-.26-.81-1-1.39-1.9-1.39h-1v-3c0-.55-.45-1-1-1H8v-2h2c.55 0 1-.45 1-1V7h2c1.1 0 2-.9 2-2v-.41c2.93 1.19 5 4.06 5 7.41 0 2.08-.8 3.97-2.1 5.39z\"}}]})(props);\n};\nexport function MdSchool (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M5 13.18v4L12 21l7-3.82v-4L12 17l-7-3.82zM12 3L1 9l11 6 9-4.91V17h2V9L12 3z\"}}]})(props);\n};\nexport function MdSentimentDissatisfied (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"circle\",\"attr\":{\"cx\":\"15.5\",\"cy\":\"9.5\",\"r\":\"1.5\"}},{\"tag\":\"circle\",\"attr\":{\"cx\":\"8.5\",\"cy\":\"9.5\",\"r\":\"1.5\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M11.99 2C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8zm0-6c-2.33 0-4.32 1.45-5.12 3.5h1.67c.69-1.19 1.97-2 3.45-2s2.75.81 3.45 2h1.67c-.8-2.05-2.79-3.5-5.12-3.5z\"}}]})(props);\n};\nexport function MdSentimentNeutral (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M9 14h6v1.5H9z\"}},{\"tag\":\"circle\",\"attr\":{\"cx\":\"15.5\",\"cy\":\"9.5\",\"r\":\"1.5\"}},{\"tag\":\"circle\",\"attr\":{\"cx\":\"8.5\",\"cy\":\"9.5\",\"r\":\"1.5\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M11.99 2C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z\"}}]})(props);\n};\nexport function MdSentimentSatisfied (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"circle\",\"attr\":{\"cx\":\"15.5\",\"cy\":\"9.5\",\"r\":\"1.5\"}},{\"tag\":\"circle\",\"attr\":{\"cx\":\"8.5\",\"cy\":\"9.5\",\"r\":\"1.5\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M11.99 2C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8zm0-4c-1.48 0-2.75-.81-3.45-2H6.88c.8 2.05 2.79 3.5 5.12 3.5s4.32-1.45 5.12-3.5h-1.67c-.7 1.19-1.97 2-3.45 2z\"}}]})(props);\n};\nexport function MdSentimentVeryDissatisfied (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M11.99 2C6.47 2 2 6.47 2 12s4.47 10 9.99 10S22 17.53 22 12 17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8zm4.18-12.24l-1.06 1.06-1.06-1.06L13 8.82l1.06 1.06L13 10.94 14.06 12l1.06-1.06L16.18 12l1.06-1.06-1.06-1.06 1.06-1.06zM7.82 12l1.06-1.06L9.94 12 11 10.94 9.94 9.88 11 8.82 9.94 7.76 8.88 8.82 7.82 7.76 6.76 8.82l1.06 1.06-1.06 1.06zM12 14c-2.33 0-4.31 1.46-5.11 3.5h10.22c-.8-2.04-2.78-3.5-5.11-3.5z\"}}]})(props);\n};\nexport function MdSentimentVerySatisfied (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M11.99 2C6.47 2 2 6.47 2 12s4.47 10 9.99 10S22 17.53 22 12 17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8zm1-10.06L14.06 11l1.06-1.06L16.18 11l1.06-1.06-2.12-2.12zm-4.12 0L9.94 11 11 9.94 8.88 7.82 6.76 9.94 7.82 11zM12 17.5c2.33 0 4.31-1.46 5.11-3.5H6.89c.8 2.04 2.78 3.5 5.11 3.5z\"}}]})(props);\n};\nexport function MdShare (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M18 16.08c-.76 0-1.44.3-1.96.77L8.91 12.7c.05-.23.09-.46.09-.7s-.04-.47-.09-.7l7.05-4.11c.54.5 1.25.81 2.04.81 1.66 0 3-1.34 3-3s-1.34-3-3-3-3 1.34-3 3c0 .24.04.47.09.7L8.04 9.81C7.5 9.31 6.79 9 6 9c-1.66 0-3 1.34-3 3s1.34 3 3 3c.79 0 1.5-.31 2.04-.81l7.12 4.16c-.05.21-.08.43-.08.65 0 1.61 1.31 2.92 2.92 2.92 1.61 0 2.92-1.31 2.92-2.92s-1.31-2.92-2.92-2.92z\"}}]})(props);\n};\nexport function MdWhatshot (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M13.5.67s.74 2.65.74 4.8c0 2.06-1.35 3.73-3.41 3.73-2.07 0-3.63-1.67-3.63-3.73l.03-.36C5.21 7.51 4 10.62 4 14c0 4.42 3.58 8 8 8s8-3.58 8-8C20 8.61 17.41 3.8 13.5.67zM11.71 19c-1.78 0-3.22-1.4-3.22-3.14 0-1.62 1.05-2.76 2.81-3.12 1.77-.36 3.6-1.21 4.62-2.58.39 1.29.59 2.65.59 4.04 0 2.65-2.15 4.8-4.8 4.8z\"}}]})(props);\n};\nexport function MdCheckBox (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2zm-9 14l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z\"}}]})(props);\n};\nexport function MdCheckBoxOutlineBlank (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z\"}}]})(props);\n};\nexport function MdIndeterminateCheckBox (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-2 10H7v-2h10v2z\"}}]})(props);\n};\nexport function MdRadioButtonChecked (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 7c-2.76 0-5 2.24-5 5s2.24 5 5 5 5-2.24 5-5-2.24-5-5-5zm0-5C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z\"}}]})(props);\n};\nexport function MdRadioButtonUnchecked (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z\"}}]})(props);\n};\nexport function MdStar (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 17.27L18.18 21l-1.64-7.03L22 9.24l-7.19-.61L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21z\"}}]})(props);\n};\nexport function MdStarBorder (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M22 9.24l-7.19-.62L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21 12 17.27 18.18 21l-1.63-7.03L22 9.24zM12 15.4l-3.76 2.27 1-4.28-3.32-2.88 4.38-.38L12 6.1l1.71 4.04 4.38.38-3.32 2.88 1 4.28L12 15.4z\"}}]})(props);\n};\nexport function MdStarHalf (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M22 9.24l-7.19-.62L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21 12 17.27 18.18 21l-1.63-7.03L22 9.24zM12 15.4V6.1l1.71 4.04 4.38.38-3.32 2.88 1 4.28L12 15.4z\"}}]})(props);\n};\n","var HEADER_LENGTH = 44;\nvar MAX_AMPLITUDE = 0x7FFF;\n\nfunction encodeWav(audioBuffer, cb) {\n\tif (audioBuffer.sampleRate !== 44100) {\n\t\t// TODO: generalize encoder for different sample rates\n\t\tthrow new Error('Expecting 44100 Hz sample rate');\n\t}\n\n\tvar nChannels = audioBuffer.numberOfChannels;\n\n\tif (nChannels !== 1 && nChannels !== 2) {\n\t\tthrow new Error('Expecting mono or stereo audioBuffer');\n\t}\n\n\tvar bufferLength = audioBuffer.length;\n\n\t// Creating the array buffers (2 bytes per samples * 1 channel)\n\tvar arrayBuffer = new ArrayBuffer(HEADER_LENGTH + 2 * bufferLength * nChannels);\n\n\t// Creatiing views on the array buffer\n\tvar int16 = new Int16Array(arrayBuffer);\n\tvar uint8 = new Uint8Array(arrayBuffer);\n\n\n\t// WAV header\n\t// http://soundfile.sapp.org/doc/WaveFormat/\n\t// 52 49 46 46     R I F F\n\t// 24 08 00 00     chunk size\n\t// 57 41 56 45     W A V E\n\n\t// 66 6d 74 20     F T M █\n\t// 10 00 00 00     subchunk size\n\t// 01 00           audio format\n\t// 02 00           number of channels\n\t// 22 56 00 00     sample rate\n\t// 88 58 01 00     bitrate\n\t// 04 00           block align\n\t// 10 00           bit per sample\n\t// 64 61 74 61     d a t a\n\t// 00 08 00 00     subchunk2 size\n\n\tvar l2 = bufferLength * nChannels * 2; // subchunk2 = numSamples * numChannels * BitsPerSample / 8\n\tvar l1 = l2 + 36; // chunkSize = subchunk + 36\n\tvar br = 44100 * nChannels * 2 // bitrate = SampleRate * NumChannels * BitsPerSample / 8\n\n\tuint8.set([\n\t\t// \"RIFF\" chunk descriptor\n\t\t0x52, 0x49, 0x46, 0x46, // R I F F\n\t\tl1 & 255, (l1 >> 8) & 255, (l1 >> 16) & 255, (l1 >> 24) & 255, // chunk size\n\t\t0x57, 0x41, 0x56, 0x45, // W A V E\n\n\t\t// \"ftm\" sub-chunk\n\t\t0x66, 0x6D, 0x74, 0x20, // F T M █\n\t\t0x10, 0x00, 0x00, 0x00, // sub chunk size = 16\n\t\t0x01, 0x00, // audio format = 1 (PCM, linear quantization)\n\t\tnChannels, 0x00, // number of channels\n\t\t0x44, 0xAC, 0x00, 0x00, // sample rate = 44100\n\t\tbr & 255, (br >> 8) & 255, (br >> 16) & 255, (br >> 24) & 255, // byte rate\n\t\t0x04, 0x00, // block align = 4\n\t\t0x10, 0x00, // bit per sample = 16\n\n\t\t// data sub-chuk\n\t\t0x64, 0x61, 0x74, 0x61, // d a t a\n\t\tl2 & 255, (l2 >> 8) & 255, (l2 >> 16) & 255, (l2 >> 24) & 255 // sub chunk 2 size\n\t]);\n\n\t// Append sample data\n\tvar buffers = [];\n\n\tfor (var channel = 0; channel < nChannels; channel++) {\n\t\tbuffers.push(audioBuffer.getChannelData(channel));\n\t}\n\n\tfor (var i = 0, index = HEADER_LENGTH / 2; i < bufferLength; i++) {\n\t\tfor (var channel = 0; channel < nChannels; channel++) {\n\t\t\tvar sample = buffers[channel][i];\n\n\t\t\t// clamp and convert to 16bit number\n\t\t\tsample = Math.min(1, Math.max(-1, sample));\n\t\t\tsample = Math.round(sample * MAX_AMPLITUDE);\n\n\t\t\tint16[index++] = sample;\n\t\t}\n\t}\n\n\tvar blob = new Blob([uint8], { type: 'audio/x-wav' })\n\n\tsetTimeout(function () {\n\t\treturn cb(blob);\n\t}, 30);\n}\n\nmodule.exports = encodeWav;\n","function new_byte(count) {\n    return new Int8Array(count);\n}\n\nfunction new_short(count) {\n    return new Int16Array(count);\n}\n\nfunction new_int(count) {\n    return new Int32Array(count);\n}\n\nfunction new_float(count) {\n    return new Float32Array(count);\n}\n\nfunction new_double(count) {\n    return new Float64Array(count);\n}\n\nfunction new_float_n(args) {\n    if (args.length == 1) {\n        return new_float(args[0]);\n    }\n    var sz = args[0];\n    args = args.slice(1);\n    var A = [];\n    for (var i = 0; i < sz; i++) {\n        A.push(new_float_n(args));\n    }\n    return A;\n}\nfunction new_int_n(args) {\n    if (args.length == 1) {\n        return new_int(args[0]);\n    }\n    var sz = args[0];\n    args = args.slice(1);\n    var A = [];\n    for (var i = 0; i < sz; i++) {\n        A.push(new_int_n(args));\n    }\n    return A;\n}\n\nfunction new_short_n(args) {\n    if (args.length == 1) {\n        return new_short(args[0]);\n    }\n    var sz = args[0];\n    args = args.slice(1);\n    var A = [];\n    for (var i = 0; i < sz; i++) {\n        A.push(new_short_n(args));\n    }\n    return A;\n}\n\nfunction new_array_n(args) {\n    if (args.length == 1) {\n        return new Array(args[0]);\n    }\n    var sz = args[0];\n    args = args.slice(1);\n    var A = [];\n    for (var i = 0; i < sz; i++) {\n        A.push(new_array_n(args));\n    }\n    return A;\n}\n\n\nvar Arrays = {};\n\nArrays.fill = function (a, fromIndex, toIndex, val) {\n    if (arguments.length == 2) {\n        for (var i = 0; i < a.length; i++) {\n            a[i] = arguments[1];\n        }\n    } else {\n        for (var i = fromIndex; i < toIndex; i++) {\n            a[i] = val;\n        }\n    }\n};\n\nvar System = {};\n\nSystem.arraycopy = function (src, srcPos, dest, destPos, length) {\n    var srcEnd = srcPos + length;\n    while (srcPos < srcEnd)\n        dest[destPos++] = src[srcPos++];\n};\n\n\nvar Util = {};\nUtil.SQRT2 = 1.41421356237309504880;\nUtil.FAST_LOG10 = function (x) {\n    return Math.log10(x);\n};\n\nUtil.FAST_LOG10_X = function (x, y) {\n    return Math.log10(x) * y;\n};\n\nfunction ShortBlock(ordinal) {\n    this.ordinal = ordinal;\n}\n/**\n * LAME may use them, even different block types for L/R.\n */\nShortBlock.short_block_allowed = new ShortBlock(0);\n/**\n * LAME may use them, but always same block types in L/R.\n */\nShortBlock.short_block_coupled = new ShortBlock(1);\n/**\n * LAME will not use short blocks, long blocks only.\n */\nShortBlock.short_block_dispensed = new ShortBlock(2);\n/**\n * LAME will not use long blocks, short blocks only.\n */\nShortBlock.short_block_forced = new ShortBlock(3);\n\nvar Float = {};\nFloat.MAX_VALUE = 3.4028235e+38;\n\nfunction VbrMode(ordinal) {\n    this.ordinal = ordinal;\n}\nVbrMode.vbr_off = new VbrMode(0);\nVbrMode.vbr_mt = new VbrMode(1);\nVbrMode.vbr_rh = new VbrMode(2);\nVbrMode.vbr_abr = new VbrMode(3);\nVbrMode.vbr_mtrh = new VbrMode(4);\nVbrMode.vbr_default = VbrMode.vbr_mtrh;\n\nvar assert = function (x) {\n    //console.assert(x);\n};\n\nmodule.exports = {\n    \"System\": System,\n    \"VbrMode\": VbrMode,\n    \"Float\": Float,\n    \"ShortBlock\": ShortBlock,\n    \"Util\": Util,\n    \"Arrays\": Arrays,\n    \"new_array_n\": new_array_n,\n    \"new_byte\": new_byte,\n    \"new_double\": new_double,\n    \"new_float\": new_float,\n    \"new_float_n\": new_float_n,\n    \"new_int\": new_int,\n    \"new_int_n\": new_int_n,\n    \"new_short\": new_short,\n    \"new_short_n\": new_short_n,\n    \"assert\": assert\n};\n","/*\n *      MP3 window subband -> subband filtering -> mdct routine\n *\n *      Copyright (c) 1999-2000 Takehiro Tominaga\n *\n *\n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2 of the License, or (at your option) any later version.\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Library General Public License for more details.\n *\n * You should have received a copy of the GNU Library General Public\n * License along with this library; if not, write to the\n * Free Software Foundation, Inc., 59 Temple Place - Suite 330,\n * Boston, MA 02111-1307, USA.\n */\n/*\n *         Special Thanks to Patrick De Smet for your advices.\n */\n\n/* $Id: NewMDCT.java,v 1.11 2011/05/24 20:48:06 kenchis Exp $ */\n\n//package mp3;\n\n//import java.util.Arrays;\nvar common = require('./common.js');\nvar System = common.System;\nvar VbrMode = common.VbrMode;\nvar Float = common.Float;\nvar ShortBlock = common.ShortBlock;\nvar Util = common.Util;\nvar Arrays = common.Arrays;\nvar new_array_n = common.new_array_n;\nvar new_byte = common.new_byte;\nvar new_double = common.new_double;\nvar new_float = common.new_float;\nvar new_float_n = common.new_float_n;\nvar new_int = common.new_int;\nvar new_int_n = common.new_int_n;\nvar assert = common.assert;\n\nvar Encoder = require('./Encoder.js');\n\n\nfunction NewMDCT() {\n\n\tvar enwindow = [\n\t\t\t-4.77e-07 * 0.740951125354959 / 2.384e-06,\n\t\t\t1.03951e-04 * 0.740951125354959 / 2.384e-06,\n\t\t\t9.53674e-04 * 0.740951125354959 / 2.384e-06,\n\t\t\t2.841473e-03 * 0.740951125354959 / 2.384e-06,\n\t\t\t3.5758972e-02 * 0.740951125354959 / 2.384e-06,\n\t\t\t3.401756e-03 * 0.740951125354959 / 2.384e-06,\n\t\t\t9.83715e-04 * 0.740951125354959 / 2.384e-06,\n\t\t\t9.9182e-05 * 0.740951125354959 / 2.384e-06, /* 15 */\n\t\t\t1.2398e-05 * 0.740951125354959 / 2.384e-06,\n\t\t\t1.91212e-04 * 0.740951125354959 / 2.384e-06,\n\t\t\t2.283096e-03 * 0.740951125354959 / 2.384e-06,\n\t\t\t1.6994476e-02 * 0.740951125354959 / 2.384e-06,\n\t\t\t-1.8756866e-02 * 0.740951125354959 / 2.384e-06,\n\t\t\t-2.630711e-03 * 0.740951125354959 / 2.384e-06,\n\t\t\t-2.47478e-04 * 0.740951125354959 / 2.384e-06,\n\t\t\t-1.4782e-05 * 0.740951125354959 / 2.384e-06,\n\t\t\t9.063471690191471e-01, 1.960342806591213e-01,\n\n\t\t\t-4.77e-07 * 0.773010453362737 / 2.384e-06,\n\t\t\t1.05858e-04 * 0.773010453362737 / 2.384e-06,\n\t\t\t9.30786e-04 * 0.773010453362737 / 2.384e-06,\n\t\t\t2.521515e-03 * 0.773010453362737 / 2.384e-06,\n\t\t\t3.5694122e-02 * 0.773010453362737 / 2.384e-06,\n\t\t\t3.643036e-03 * 0.773010453362737 / 2.384e-06,\n\t\t\t9.91821e-04 * 0.773010453362737 / 2.384e-06,\n\t\t\t9.6321e-05 * 0.773010453362737 / 2.384e-06, /* 14 */\n\t\t\t1.1444e-05 * 0.773010453362737 / 2.384e-06,\n\t\t\t1.65462e-04 * 0.773010453362737 / 2.384e-06,\n\t\t\t2.110004e-03 * 0.773010453362737 / 2.384e-06,\n\t\t\t1.6112804e-02 * 0.773010453362737 / 2.384e-06,\n\t\t\t-1.9634247e-02 * 0.773010453362737 / 2.384e-06,\n\t\t\t-2.803326e-03 * 0.773010453362737 / 2.384e-06,\n\t\t\t-2.77042e-04 * 0.773010453362737 / 2.384e-06,\n\t\t\t-1.6689e-05 * 0.773010453362737 / 2.384e-06,\n\t\t\t8.206787908286602e-01, 3.901806440322567e-01,\n\n\t\t\t-4.77e-07 * 0.803207531480645 / 2.384e-06,\n\t\t\t1.07288e-04 * 0.803207531480645 / 2.384e-06,\n\t\t\t9.02653e-04 * 0.803207531480645 / 2.384e-06,\n\t\t\t2.174854e-03 * 0.803207531480645 / 2.384e-06,\n\t\t\t3.5586357e-02 * 0.803207531480645 / 2.384e-06,\n\t\t\t3.858566e-03 * 0.803207531480645 / 2.384e-06,\n\t\t\t9.95159e-04 * 0.803207531480645 / 2.384e-06,\n\t\t\t9.3460e-05 * 0.803207531480645 / 2.384e-06, /* 13 */\n\t\t\t1.0014e-05 * 0.803207531480645 / 2.384e-06,\n\t\t\t1.40190e-04 * 0.803207531480645 / 2.384e-06,\n\t\t\t1.937389e-03 * 0.803207531480645 / 2.384e-06,\n\t\t\t1.5233517e-02 * 0.803207531480645 / 2.384e-06,\n\t\t\t-2.0506859e-02 * 0.803207531480645 / 2.384e-06,\n\t\t\t-2.974033e-03 * 0.803207531480645 / 2.384e-06,\n\t\t\t-3.07560e-04 * 0.803207531480645 / 2.384e-06,\n\t\t\t-1.8120e-05 * 0.803207531480645 / 2.384e-06,\n\t\t\t7.416505462720353e-01, 5.805693545089249e-01,\n\n\t\t\t-4.77e-07 * 0.831469612302545 / 2.384e-06,\n\t\t\t1.08242e-04 * 0.831469612302545 / 2.384e-06,\n\t\t\t8.68797e-04 * 0.831469612302545 / 2.384e-06,\n\t\t\t1.800537e-03 * 0.831469612302545 / 2.384e-06,\n\t\t\t3.5435200e-02 * 0.831469612302545 / 2.384e-06,\n\t\t\t4.049301e-03 * 0.831469612302545 / 2.384e-06,\n\t\t\t9.94205e-04 * 0.831469612302545 / 2.384e-06,\n\t\t\t9.0599e-05 * 0.831469612302545 / 2.384e-06, /* 12 */\n\t\t\t9.060e-06 * 0.831469612302545 / 2.384e-06,\n\t\t\t1.16348e-04 * 0.831469612302545 / 2.384e-06,\n\t\t\t1.766682e-03 * 0.831469612302545 / 2.384e-06,\n\t\t\t1.4358521e-02 * 0.831469612302545 / 2.384e-06,\n\t\t\t-2.1372318e-02 * 0.831469612302545 / 2.384e-06,\n\t\t\t-3.14188e-03 * 0.831469612302545 / 2.384e-06,\n\t\t\t-3.39031e-04 * 0.831469612302545 / 2.384e-06,\n\t\t\t-1.9550e-05 * 0.831469612302545 / 2.384e-06,\n\t\t\t6.681786379192989e-01, 7.653668647301797e-01,\n\n\t\t\t-4.77e-07 * 0.857728610000272 / 2.384e-06,\n\t\t\t1.08719e-04 * 0.857728610000272 / 2.384e-06,\n\t\t\t8.29220e-04 * 0.857728610000272 / 2.384e-06,\n\t\t\t1.399517e-03 * 0.857728610000272 / 2.384e-06,\n\t\t\t3.5242081e-02 * 0.857728610000272 / 2.384e-06,\n\t\t\t4.215240e-03 * 0.857728610000272 / 2.384e-06,\n\t\t\t9.89437e-04 * 0.857728610000272 / 2.384e-06,\n\t\t\t8.7261e-05 * 0.857728610000272 / 2.384e-06, /* 11 */\n\t\t\t8.106e-06 * 0.857728610000272 / 2.384e-06,\n\t\t\t9.3937e-05 * 0.857728610000272 / 2.384e-06,\n\t\t\t1.597881e-03 * 0.857728610000272 / 2.384e-06,\n\t\t\t1.3489246e-02 * 0.857728610000272 / 2.384e-06,\n\t\t\t-2.2228718e-02 * 0.857728610000272 / 2.384e-06,\n\t\t\t-3.306866e-03 * 0.857728610000272 / 2.384e-06,\n\t\t\t-3.71456e-04 * 0.857728610000272 / 2.384e-06,\n\t\t\t-2.1458e-05 * 0.857728610000272 / 2.384e-06,\n\t\t\t5.993769336819237e-01, 9.427934736519954e-01,\n\n\t\t\t-4.77e-07 * 0.881921264348355 / 2.384e-06,\n\t\t\t1.08719e-04 * 0.881921264348355 / 2.384e-06,\n\t\t\t7.8392e-04 * 0.881921264348355 / 2.384e-06,\n\t\t\t9.71317e-04 * 0.881921264348355 / 2.384e-06,\n\t\t\t3.5007000e-02 * 0.881921264348355 / 2.384e-06,\n\t\t\t4.357815e-03 * 0.881921264348355 / 2.384e-06,\n\t\t\t9.80854e-04 * 0.881921264348355 / 2.384e-06,\n\t\t\t8.3923e-05 * 0.881921264348355 / 2.384e-06, /* 10 */\n\t\t\t7.629e-06 * 0.881921264348355 / 2.384e-06,\n\t\t\t7.2956e-05 * 0.881921264348355 / 2.384e-06,\n\t\t\t1.432419e-03 * 0.881921264348355 / 2.384e-06,\n\t\t\t1.2627602e-02 * 0.881921264348355 / 2.384e-06,\n\t\t\t-2.3074150e-02 * 0.881921264348355 / 2.384e-06,\n\t\t\t-3.467083e-03 * 0.881921264348355 / 2.384e-06,\n\t\t\t-4.04358e-04 * 0.881921264348355 / 2.384e-06,\n\t\t\t-2.3365e-05 * 0.881921264348355 / 2.384e-06,\n\t\t\t5.345111359507916e-01, 1.111140466039205e+00,\n\n\t\t\t-9.54e-07 * 0.903989293123443 / 2.384e-06,\n\t\t\t1.08242e-04 * 0.903989293123443 / 2.384e-06,\n\t\t\t7.31945e-04 * 0.903989293123443 / 2.384e-06,\n\t\t\t5.15938e-04 * 0.903989293123443 / 2.384e-06,\n\t\t\t3.4730434e-02 * 0.903989293123443 / 2.384e-06,\n\t\t\t4.477024e-03 * 0.903989293123443 / 2.384e-06,\n\t\t\t9.68933e-04 * 0.903989293123443 / 2.384e-06,\n\t\t\t8.0585e-05 * 0.903989293123443 / 2.384e-06, /* 9 */\n\t\t\t6.676e-06 * 0.903989293123443 / 2.384e-06,\n\t\t\t5.2929e-05 * 0.903989293123443 / 2.384e-06,\n\t\t\t1.269817e-03 * 0.903989293123443 / 2.384e-06,\n\t\t\t1.1775017e-02 * 0.903989293123443 / 2.384e-06,\n\t\t\t-2.3907185e-02 * 0.903989293123443 / 2.384e-06,\n\t\t\t-3.622532e-03 * 0.903989293123443 / 2.384e-06,\n\t\t\t-4.38213e-04 * 0.903989293123443 / 2.384e-06,\n\t\t\t-2.5272e-05 * 0.903989293123443 / 2.384e-06,\n\t\t\t4.729647758913199e-01, 1.268786568327291e+00,\n\n\t\t\t-9.54e-07 * 0.92387953251128675613 / 2.384e-06,\n\t\t\t1.06812e-04 * 0.92387953251128675613 / 2.384e-06,\n\t\t\t6.74248e-04 * 0.92387953251128675613 / 2.384e-06,\n\t\t\t3.3379e-05 * 0.92387953251128675613 / 2.384e-06,\n\t\t\t3.4412861e-02 * 0.92387953251128675613 / 2.384e-06,\n\t\t\t4.573822e-03 * 0.92387953251128675613 / 2.384e-06,\n\t\t\t9.54151e-04 * 0.92387953251128675613 / 2.384e-06,\n\t\t\t7.6771e-05 * 0.92387953251128675613 / 2.384e-06,\n\t\t\t6.199e-06 * 0.92387953251128675613 / 2.384e-06,\n\t\t\t3.4332e-05 * 0.92387953251128675613 / 2.384e-06,\n\t\t\t1.111031e-03 * 0.92387953251128675613 / 2.384e-06,\n\t\t\t1.0933399e-02 * 0.92387953251128675613 / 2.384e-06,\n\t\t\t-2.4725437e-02 * 0.92387953251128675613 / 2.384e-06,\n\t\t\t-3.771782e-03 * 0.92387953251128675613 / 2.384e-06,\n\t\t\t-4.72546e-04 * 0.92387953251128675613 / 2.384e-06,\n\t\t\t-2.7657e-05 * 0.92387953251128675613 / 2.384e-06,\n\t\t\t4.1421356237309504879e-01, /* tan(PI/8) */\n\t\t\t1.414213562373095e+00,\n\n\t\t\t-9.54e-07 * 0.941544065183021 / 2.384e-06,\n\t\t\t1.05381e-04 * 0.941544065183021 / 2.384e-06,\n\t\t\t6.10352e-04 * 0.941544065183021 / 2.384e-06,\n\t\t\t-4.75883e-04 * 0.941544065183021 / 2.384e-06,\n\t\t\t3.4055710e-02 * 0.941544065183021 / 2.384e-06,\n\t\t\t4.649162e-03 * 0.941544065183021 / 2.384e-06,\n\t\t\t9.35555e-04 * 0.941544065183021 / 2.384e-06,\n\t\t\t7.3433e-05 * 0.941544065183021 / 2.384e-06, /* 7 */\n\t\t\t5.245e-06 * 0.941544065183021 / 2.384e-06,\n\t\t\t1.7166e-05 * 0.941544065183021 / 2.384e-06,\n\t\t\t9.56535e-04 * 0.941544065183021 / 2.384e-06,\n\t\t\t1.0103703e-02 * 0.941544065183021 / 2.384e-06,\n\t\t\t-2.5527000e-02 * 0.941544065183021 / 2.384e-06,\n\t\t\t-3.914356e-03 * 0.941544065183021 / 2.384e-06,\n\t\t\t-5.07355e-04 * 0.941544065183021 / 2.384e-06,\n\t\t\t-3.0041e-05 * 0.941544065183021 / 2.384e-06,\n\t\t\t3.578057213145241e-01, 1.546020906725474e+00,\n\n\t\t\t-9.54e-07 * 0.956940335732209 / 2.384e-06,\n\t\t\t1.02520e-04 * 0.956940335732209 / 2.384e-06,\n\t\t\t5.39303e-04 * 0.956940335732209 / 2.384e-06,\n\t\t\t-1.011848e-03 * 0.956940335732209 / 2.384e-06,\n\t\t\t3.3659935e-02 * 0.956940335732209 / 2.384e-06,\n\t\t\t4.703045e-03 * 0.956940335732209 / 2.384e-06,\n\t\t\t9.15051e-04 * 0.956940335732209 / 2.384e-06,\n\t\t\t7.0095e-05 * 0.956940335732209 / 2.384e-06, /* 6 */\n\t\t\t4.768e-06 * 0.956940335732209 / 2.384e-06,\n\t\t\t9.54e-07 * 0.956940335732209 / 2.384e-06,\n\t\t\t8.06808e-04 * 0.956940335732209 / 2.384e-06,\n\t\t\t9.287834e-03 * 0.956940335732209 / 2.384e-06,\n\t\t\t-2.6310921e-02 * 0.956940335732209 / 2.384e-06,\n\t\t\t-4.048824e-03 * 0.956940335732209 / 2.384e-06,\n\t\t\t-5.42164e-04 * 0.956940335732209 / 2.384e-06,\n\t\t\t-3.2425e-05 * 0.956940335732209 / 2.384e-06,\n\t\t\t3.033466836073424e-01, 1.662939224605090e+00,\n\n\t\t\t-1.431e-06 * 0.970031253194544 / 2.384e-06,\n\t\t\t9.9182e-05 * 0.970031253194544 / 2.384e-06,\n\t\t\t4.62532e-04 * 0.970031253194544 / 2.384e-06,\n\t\t\t-1.573563e-03 * 0.970031253194544 / 2.384e-06,\n\t\t\t3.3225536e-02 * 0.970031253194544 / 2.384e-06,\n\t\t\t4.737377e-03 * 0.970031253194544 / 2.384e-06,\n\t\t\t8.91685e-04 * 0.970031253194544 / 2.384e-06,\n\t\t\t6.6280e-05 * 0.970031253194544 / 2.384e-06, /* 5 */\n\t\t\t4.292e-06 * 0.970031253194544 / 2.384e-06,\n\t\t\t-1.3828e-05 * 0.970031253194544 / 2.384e-06,\n\t\t\t6.61850e-04 * 0.970031253194544 / 2.384e-06,\n\t\t\t8.487225e-03 * 0.970031253194544 / 2.384e-06,\n\t\t\t-2.7073860e-02 * 0.970031253194544 / 2.384e-06,\n\t\t\t-4.174709e-03 * 0.970031253194544 / 2.384e-06,\n\t\t\t-5.76973e-04 * 0.970031253194544 / 2.384e-06,\n\t\t\t-3.4809e-05 * 0.970031253194544 / 2.384e-06,\n\t\t\t2.504869601913055e-01, 1.763842528696710e+00,\n\n\t\t\t-1.431e-06 * 0.98078528040323 / 2.384e-06,\n\t\t\t9.5367e-05 * 0.98078528040323 / 2.384e-06,\n\t\t\t3.78609e-04 * 0.98078528040323 / 2.384e-06,\n\t\t\t-2.161503e-03 * 0.98078528040323 / 2.384e-06,\n\t\t\t3.2754898e-02 * 0.98078528040323 / 2.384e-06,\n\t\t\t4.752159e-03 * 0.98078528040323 / 2.384e-06,\n\t\t\t8.66413e-04 * 0.98078528040323 / 2.384e-06,\n\t\t\t6.2943e-05 * 0.98078528040323 / 2.384e-06, /* 4 */\n\t\t\t3.815e-06 * 0.98078528040323 / 2.384e-06,\n\t\t\t-2.718e-05 * 0.98078528040323 / 2.384e-06,\n\t\t\t5.22137e-04 * 0.98078528040323 / 2.384e-06,\n\t\t\t7.703304e-03 * 0.98078528040323 / 2.384e-06,\n\t\t\t-2.7815342e-02 * 0.98078528040323 / 2.384e-06,\n\t\t\t-4.290581e-03 * 0.98078528040323 / 2.384e-06,\n\t\t\t-6.11782e-04 * 0.98078528040323 / 2.384e-06,\n\t\t\t-3.7670e-05 * 0.98078528040323 / 2.384e-06,\n\t\t\t1.989123673796580e-01, 1.847759065022573e+00,\n\n\t\t\t-1.907e-06 * 0.989176509964781 / 2.384e-06,\n\t\t\t9.0122e-05 * 0.989176509964781 / 2.384e-06,\n\t\t\t2.88486e-04 * 0.989176509964781 / 2.384e-06,\n\t\t\t-2.774239e-03 * 0.989176509964781 / 2.384e-06,\n\t\t\t3.2248020e-02 * 0.989176509964781 / 2.384e-06,\n\t\t\t4.748821e-03 * 0.989176509964781 / 2.384e-06,\n\t\t\t8.38757e-04 * 0.989176509964781 / 2.384e-06,\n\t\t\t5.9605e-05 * 0.989176509964781 / 2.384e-06, /* 3 */\n\t\t\t3.338e-06 * 0.989176509964781 / 2.384e-06,\n\t\t\t-3.9577e-05 * 0.989176509964781 / 2.384e-06,\n\t\t\t3.88145e-04 * 0.989176509964781 / 2.384e-06,\n\t\t\t6.937027e-03 * 0.989176509964781 / 2.384e-06,\n\t\t\t-2.8532982e-02 * 0.989176509964781 / 2.384e-06,\n\t\t\t-4.395962e-03 * 0.989176509964781 / 2.384e-06,\n\t\t\t-6.46591e-04 * 0.989176509964781 / 2.384e-06,\n\t\t\t-4.0531e-05 * 0.989176509964781 / 2.384e-06,\n\t\t\t1.483359875383474e-01, 1.913880671464418e+00,\n\n\t\t\t-1.907e-06 * 0.995184726672197 / 2.384e-06,\n\t\t\t8.4400e-05 * 0.995184726672197 / 2.384e-06,\n\t\t\t1.91689e-04 * 0.995184726672197 / 2.384e-06,\n\t\t\t-3.411293e-03 * 0.995184726672197 / 2.384e-06,\n\t\t\t3.1706810e-02 * 0.995184726672197 / 2.384e-06,\n\t\t\t4.728317e-03 * 0.995184726672197 / 2.384e-06,\n\t\t\t8.09669e-04 * 0.995184726672197 / 2.384e-06,\n\t\t\t5.579e-05 * 0.995184726672197 / 2.384e-06,\n\t\t\t3.338e-06 * 0.995184726672197 / 2.384e-06,\n\t\t\t-5.0545e-05 * 0.995184726672197 / 2.384e-06,\n\t\t\t2.59876e-04 * 0.995184726672197 / 2.384e-06,\n\t\t\t6.189346e-03 * 0.995184726672197 / 2.384e-06,\n\t\t\t-2.9224873e-02 * 0.995184726672197 / 2.384e-06,\n\t\t\t-4.489899e-03 * 0.995184726672197 / 2.384e-06,\n\t\t\t-6.80923e-04 * 0.995184726672197 / 2.384e-06,\n\t\t\t-4.3392e-05 * 0.995184726672197 / 2.384e-06,\n\t\t\t9.849140335716425e-02, 1.961570560806461e+00,\n\n\t\t\t-2.384e-06 * 0.998795456205172 / 2.384e-06,\n\t\t\t7.7724e-05 * 0.998795456205172 / 2.384e-06,\n\t\t\t8.8215e-05 * 0.998795456205172 / 2.384e-06,\n\t\t\t-4.072189e-03 * 0.998795456205172 / 2.384e-06,\n\t\t\t3.1132698e-02 * 0.998795456205172 / 2.384e-06,\n\t\t\t4.691124e-03 * 0.998795456205172 / 2.384e-06,\n\t\t\t7.79152e-04 * 0.998795456205172 / 2.384e-06,\n\t\t\t5.2929e-05 * 0.998795456205172 / 2.384e-06,\n\t\t\t2.861e-06 * 0.998795456205172 / 2.384e-06,\n\t\t\t-6.0558e-05 * 0.998795456205172 / 2.384e-06,\n\t\t\t1.37329e-04 * 0.998795456205172 / 2.384e-06,\n\t\t\t5.462170e-03 * 0.998795456205172 / 2.384e-06,\n\t\t\t-2.9890060e-02 * 0.998795456205172 / 2.384e-06,\n\t\t\t-4.570484e-03 * 0.998795456205172 / 2.384e-06,\n\t\t\t-7.14302e-04 * 0.998795456205172 / 2.384e-06,\n\t\t\t-4.6253e-05 * 0.998795456205172 / 2.384e-06,\n\t\t\t4.912684976946725e-02, 1.990369453344394e+00,\n\n\t\t\t3.5780907e-02 * Util.SQRT2 * 0.5 / 2.384e-06,\n\t\t\t1.7876148e-02 * Util.SQRT2 * 0.5 / 2.384e-06,\n\t\t\t3.134727e-03 * Util.SQRT2 * 0.5 / 2.384e-06,\n\t\t\t2.457142e-03 * Util.SQRT2 * 0.5 / 2.384e-06,\n\t\t\t9.71317e-04 * Util.SQRT2 * 0.5 / 2.384e-06,\n\t\t\t2.18868e-04 * Util.SQRT2 * 0.5 / 2.384e-06,\n\t\t\t1.01566e-04 * Util.SQRT2 * 0.5 / 2.384e-06,\n\t\t\t1.3828e-05 * Util.SQRT2 * 0.5 / 2.384e-06,\n\n\t\t\t3.0526638e-02 / 2.384e-06, 4.638195e-03 / 2.384e-06,\n\t\t\t7.47204e-04 / 2.384e-06, 4.9591e-05 / 2.384e-06,\n\t\t\t4.756451e-03 / 2.384e-06, 2.1458e-05 / 2.384e-06,\n\t\t\t-6.9618e-05 / 2.384e-06, /* 2.384e-06/2.384e-06 */\n\t];\n\n\tvar NS = 12;\n\tvar NL = 36;\n\n\tvar win = [\n\t    [\n\t     2.382191739347913e-13,\n\t     6.423305872147834e-13,\n\t     9.400849094049688e-13,\n\t     1.122435026096556e-12,\n\t     1.183840321267481e-12,\n\t     1.122435026096556e-12,\n\t     9.400849094049690e-13,\n\t     6.423305872147839e-13,\n\t     2.382191739347918e-13,\n\n\t     5.456116108943412e-12,\n\t     4.878985199565852e-12,\n\t     4.240448995017367e-12,\n\t     3.559909094758252e-12,\n\t     2.858043359288075e-12,\n\t     2.156177623817898e-12,\n\t     1.475637723558783e-12,\n\t     8.371015190102974e-13,\n\t     2.599706096327376e-13,\n\n\t     -5.456116108943412e-12,\n\t     -4.878985199565852e-12,\n\t     -4.240448995017367e-12,\n\t     -3.559909094758252e-12,\n\t     -2.858043359288076e-12,\n\t     -2.156177623817898e-12,\n\t     -1.475637723558783e-12,\n\t     -8.371015190102975e-13,\n\t     -2.599706096327376e-13,\n\n\t     -2.382191739347923e-13,\n\t     -6.423305872147843e-13,\n\t     -9.400849094049696e-13,\n\t     -1.122435026096556e-12,\n\t     -1.183840321267481e-12,\n\t     -1.122435026096556e-12,\n\t     -9.400849094049694e-13,\n\t     -6.423305872147840e-13,\n\t     -2.382191739347918e-13,\n\t     ],\n\t    [\n\t     2.382191739347913e-13,\n\t     6.423305872147834e-13,\n\t     9.400849094049688e-13,\n\t     1.122435026096556e-12,\n\t     1.183840321267481e-12,\n\t     1.122435026096556e-12,\n\t     9.400849094049688e-13,\n\t     6.423305872147841e-13,\n\t     2.382191739347918e-13,\n\n\t     5.456116108943413e-12,\n\t     4.878985199565852e-12,\n\t     4.240448995017367e-12,\n\t     3.559909094758253e-12,\n\t     2.858043359288075e-12,\n\t     2.156177623817898e-12,\n\t     1.475637723558782e-12,\n\t     8.371015190102975e-13,\n\t     2.599706096327376e-13,\n\n\t     -5.461314069809755e-12,\n\t     -4.921085770524055e-12,\n\t     -4.343405037091838e-12,\n\t     -3.732668368707687e-12,\n\t     -3.093523840190885e-12,\n\t     -2.430835727329465e-12,\n\t     -1.734679010007751e-12,\n\t     -9.748253656609281e-13,\n\t     -2.797435120168326e-13,\n\n\t     0.000000000000000e+00,\n\t     0.000000000000000e+00,\n\t     0.000000000000000e+00,\n\t     0.000000000000000e+00,\n\t     0.000000000000000e+00,\n\t     0.000000000000000e+00,\n\t     -2.283748241799531e-13,\n\t     -4.037858874020686e-13,\n\t     -2.146547464825323e-13,\n\t     ],\n\t    [\n\t     1.316524975873958e-01, /* win[SHORT_TYPE] */\n\t     4.142135623730950e-01,\n\t     7.673269879789602e-01,\n\n\t     1.091308501069271e+00, /* tantab_l */\n\t     1.303225372841206e+00,\n\t     1.569685577117490e+00,\n\t     1.920982126971166e+00,\n\t     2.414213562373094e+00,\n\t     3.171594802363212e+00,\n\t     4.510708503662055e+00,\n\t     7.595754112725146e+00,\n\t     2.290376554843115e+01,\n\n\t     0.98480775301220802032, /* cx */\n\t     0.64278760968653936292,\n\t     0.34202014332566882393,\n\t     0.93969262078590842791,\n\t     -0.17364817766693030343,\n\t     -0.76604444311897790243,\n\t     0.86602540378443870761,\n\t     0.500000000000000e+00,\n\n\t     -5.144957554275265e-01, /* ca */\n\t     -4.717319685649723e-01,\n\t     -3.133774542039019e-01,\n\t     -1.819131996109812e-01,\n\t     -9.457419252642064e-02,\n\t     -4.096558288530405e-02,\n\t     -1.419856857247115e-02,\n\t     -3.699974673760037e-03,\n\n\t     8.574929257125442e-01, /* cs */\n\t     8.817419973177052e-01,\n\t     9.496286491027329e-01,\n\t     9.833145924917901e-01,\n\t     9.955178160675857e-01,\n\t     9.991605581781475e-01,\n\t     9.998991952444470e-01,\n\t     9.999931550702802e-01,\n\t     ],\n\t    [\n\t     0.000000000000000e+00,\n\t     0.000000000000000e+00,\n\t     0.000000000000000e+00,\n\t     0.000000000000000e+00,\n\t     0.000000000000000e+00,\n\t     0.000000000000000e+00,\n\t     2.283748241799531e-13,\n\t     4.037858874020686e-13,\n\t     2.146547464825323e-13,\n\n\t     5.461314069809755e-12,\n\t     4.921085770524055e-12,\n\t     4.343405037091838e-12,\n\t     3.732668368707687e-12,\n\t     3.093523840190885e-12,\n\t     2.430835727329466e-12,\n\t     1.734679010007751e-12,\n\t     9.748253656609281e-13,\n\t     2.797435120168326e-13,\n\n\t     -5.456116108943413e-12,\n\t     -4.878985199565852e-12,\n\t     -4.240448995017367e-12,\n\t     -3.559909094758253e-12,\n\t     -2.858043359288075e-12,\n\t     -2.156177623817898e-12,\n\t     -1.475637723558782e-12,\n\t     -8.371015190102975e-13,\n\t     -2.599706096327376e-13,\n\n\t     -2.382191739347913e-13,\n\t     -6.423305872147834e-13,\n\t     -9.400849094049688e-13,\n\t     -1.122435026096556e-12,\n\t     -1.183840321267481e-12,\n\t     -1.122435026096556e-12,\n\t     -9.400849094049688e-13,\n\t     -6.423305872147841e-13,\n\t     -2.382191739347918e-13,\n\t     ]\n\t];\n\n\tvar tantab_l = win[Encoder.SHORT_TYPE];\n\tvar cx = win[Encoder.SHORT_TYPE];\n\tvar ca = win[Encoder.SHORT_TYPE];\n\tvar cs = win[Encoder.SHORT_TYPE];\n\n\t/**\n\t * new IDCT routine written by Takehiro TOMINAGA\n\t *\n\t * PURPOSE: Overlapping window on PCM samples<BR>\n\t *\n\t * SEMANTICS:<BR>\n\t * 32 16-bit pcm samples are scaled to fractional 2's complement and\n\t * concatenated to the end of the window buffer #x#. The updated window\n\t * buffer #x# is then windowed by the analysis window #c# to produce the\n\t * windowed sample #z#\n\t */\n\tvar order = [\n\t    0, 1, 16, 17, 8, 9, 24, 25, 4, 5, 20, 21, 12, 13, 28, 29,\n\t    2, 3, 18, 19, 10, 11, 26, 27, 6, 7, 22, 23, 14, 15, 30, 31\n\t];\n\n\t/**\n\t * returns sum_j=0^31 a[j]*cos(PI*j*(k+1/2)/32), 0<=k<32\n\t */\n\tfunction window_subband(x1, x1Pos, a) {\n\t\tvar wp = 10;\n\n\t\tvar x2 = x1Pos + 238 - 14 - 286;\n\n\t\tfor (var i = -15; i < 0; i++) {\n\t\t\tvar w, s, t;\n\n\t\t\tw = enwindow[wp + -10];\n\t\t\ts = x1[x2 + -224] * w;\n\t\t\tt = x1[x1Pos + 224] * w;\n\t\t\tw = enwindow[wp + -9];\n\t\t\ts += x1[x2 + -160] * w;\n\t\t\tt += x1[x1Pos + 160] * w;\n\t\t\tw = enwindow[wp + -8];\n\t\t\ts += x1[x2 + -96] * w;\n\t\t\tt += x1[x1Pos + 96] * w;\n\t\t\tw = enwindow[wp + -7];\n\t\t\ts += x1[x2 + -32] * w;\n\t\t\tt += x1[x1Pos + 32] * w;\n\t\t\tw = enwindow[wp + -6];\n\t\t\ts += x1[x2 + 32] * w;\n\t\t\tt += x1[x1Pos + -32] * w;\n\t\t\tw = enwindow[wp + -5];\n\t\t\ts += x1[x2 + 96] * w;\n\t\t\tt += x1[x1Pos + -96] * w;\n\t\t\tw = enwindow[wp + -4];\n\t\t\ts += x1[x2 + 160] * w;\n\t\t\tt += x1[x1Pos + -160] * w;\n\t\t\tw = enwindow[wp + -3];\n\t\t\ts += x1[x2 + 224] * w;\n\t\t\tt += x1[x1Pos + -224] * w;\n\n\t\t\tw = enwindow[wp + -2];\n\t\t\ts += x1[x1Pos + -256] * w;\n\t\t\tt -= x1[x2 + 256] * w;\n\t\t\tw = enwindow[wp + -1];\n\t\t\ts += x1[x1Pos + -192] * w;\n\t\t\tt -= x1[x2 + 192] * w;\n\t\t\tw = enwindow[wp + 0];\n\t\t\ts += x1[x1Pos + -128] * w;\n\t\t\tt -= x1[x2 + 128] * w;\n\t\t\tw = enwindow[wp + 1];\n\t\t\ts += x1[x1Pos + -64] * w;\n\t\t\tt -= x1[x2 + 64] * w;\n\t\t\tw = enwindow[wp + 2];\n\t\t\ts += x1[x1Pos + 0] * w;\n\t\t\tt -= x1[x2 + 0] * w;\n\t\t\tw = enwindow[wp + 3];\n\t\t\ts += x1[x1Pos + 64] * w;\n\t\t\tt -= x1[x2 + -64] * w;\n\t\t\tw = enwindow[wp + 4];\n\t\t\ts += x1[x1Pos + 128] * w;\n\t\t\tt -= x1[x2 + -128] * w;\n\t\t\tw = enwindow[wp + 5];\n\t\t\ts += x1[x1Pos + 192] * w;\n\t\t\tt -= x1[x2 + -192] * w;\n\n\t\t\t/*\n\t\t\t * this multiplyer could be removed, but it needs more 256 FLOAT\n\t\t\t * data. thinking about the data cache performance, I think we\n\t\t\t * should not use such a huge table. tt 2000/Oct/25\n\t\t\t */\n\t\t\ts *= enwindow[wp + 6];\n\t\t\tw = t - s;\n\t\t\ta[30 + i * 2] = t + s;\n\t\t\ta[31 + i * 2] = enwindow[wp + 7] * w;\n\t\t\twp += 18;\n\t\t\tx1Pos--;\n\t\t\tx2++;\n\t\t}\n\t\t{\n\t\t\tvar s, t, u, v;\n\t\t\tt = x1[x1Pos + -16] * enwindow[wp + -10];\n\t\t\ts = x1[x1Pos + -32] * enwindow[wp + -2];\n\t\t\tt += (x1[x1Pos + -48] - x1[x1Pos + 16]) * enwindow[wp + -9];\n\t\t\ts += x1[x1Pos + -96] * enwindow[wp + -1];\n\t\t\tt += (x1[x1Pos + -80] + x1[x1Pos + 48]) * enwindow[wp + -8];\n\t\t\ts += x1[x1Pos + -160] * enwindow[wp + 0];\n\t\t\tt += (x1[x1Pos + -112] - x1[x1Pos + 80]) * enwindow[wp + -7];\n\t\t\ts += x1[x1Pos + -224] * enwindow[wp + 1];\n\t\t\tt += (x1[x1Pos + -144] + x1[x1Pos + 112]) * enwindow[wp + -6];\n\t\t\ts -= x1[x1Pos + 32] * enwindow[wp + 2];\n\t\t\tt += (x1[x1Pos + -176] - x1[x1Pos + 144]) * enwindow[wp + -5];\n\t\t\ts -= x1[x1Pos + 96] * enwindow[wp + 3];\n\t\t\tt += (x1[x1Pos + -208] + x1[x1Pos + 176]) * enwindow[wp + -4];\n\t\t\ts -= x1[x1Pos + 160] * enwindow[wp + 4];\n\t\t\tt += (x1[x1Pos + -240] - x1[x1Pos + 208]) * enwindow[wp + -3];\n\t\t\ts -= x1[x1Pos + 224];\n\n\t\t\tu = s - t;\n\t\t\tv = s + t;\n\n\t\t\tt = a[14];\n\t\t\ts = a[15] - t;\n\n\t\t\ta[31] = v + t; /* A0 */\n\t\t\ta[30] = u + s; /* A1 */\n\t\t\ta[15] = u - s; /* A2 */\n\t\t\ta[14] = v - t; /* A3 */\n\t\t}\n\t\t{\n\t\t\tvar xr;\n\t\t\txr = a[28] - a[0];\n\t\t\ta[0] += a[28];\n\t\t\ta[28] = xr * enwindow[wp + -2 * 18 + 7];\n\t\t\txr = a[29] - a[1];\n\t\t\ta[1] += a[29];\n\t\t\ta[29] = xr * enwindow[wp + -2 * 18 + 7];\n\n\t\t\txr = a[26] - a[2];\n\t\t\ta[2] += a[26];\n\t\t\ta[26] = xr * enwindow[wp + -4 * 18 + 7];\n\t\t\txr = a[27] - a[3];\n\t\t\ta[3] += a[27];\n\t\t\ta[27] = xr * enwindow[wp + -4 * 18 + 7];\n\n\t\t\txr = a[24] - a[4];\n\t\t\ta[4] += a[24];\n\t\t\ta[24] = xr * enwindow[wp + -6 * 18 + 7];\n\t\t\txr = a[25] - a[5];\n\t\t\ta[5] += a[25];\n\t\t\ta[25] = xr * enwindow[wp + -6 * 18 + 7];\n\n\t\t\txr = a[22] - a[6];\n\t\t\ta[6] += a[22];\n\t\t\ta[22] = xr * Util.SQRT2;\n\t\t\txr = a[23] - a[7];\n\t\t\ta[7] += a[23];\n\t\t\ta[23] = xr * Util.SQRT2 - a[7];\n\t\t\ta[7] -= a[6];\n\t\t\ta[22] -= a[7];\n\t\t\ta[23] -= a[22];\n\n\t\t\txr = a[6];\n\t\t\ta[6] = a[31] - xr;\n\t\t\ta[31] = a[31] + xr;\n\t\t\txr = a[7];\n\t\t\ta[7] = a[30] - xr;\n\t\t\ta[30] = a[30] + xr;\n\t\t\txr = a[22];\n\t\t\ta[22] = a[15] - xr;\n\t\t\ta[15] = a[15] + xr;\n\t\t\txr = a[23];\n\t\t\ta[23] = a[14] - xr;\n\t\t\ta[14] = a[14] + xr;\n\n\t\t\txr = a[20] - a[8];\n\t\t\ta[8] += a[20];\n\t\t\ta[20] = xr * enwindow[wp + -10 * 18 + 7];\n\t\t\txr = a[21] - a[9];\n\t\t\ta[9] += a[21];\n\t\t\ta[21] = xr * enwindow[wp + -10 * 18 + 7];\n\n\t\t\txr = a[18] - a[10];\n\t\t\ta[10] += a[18];\n\t\t\ta[18] = xr * enwindow[wp + -12 * 18 + 7];\n\t\t\txr = a[19] - a[11];\n\t\t\ta[11] += a[19];\n\t\t\ta[19] = xr * enwindow[wp + -12 * 18 + 7];\n\n\t\t\txr = a[16] - a[12];\n\t\t\ta[12] += a[16];\n\t\t\ta[16] = xr * enwindow[wp + -14 * 18 + 7];\n\t\t\txr = a[17] - a[13];\n\t\t\ta[13] += a[17];\n\t\t\ta[17] = xr * enwindow[wp + -14 * 18 + 7];\n\n\t\t\txr = -a[20] + a[24];\n\t\t\ta[20] += a[24];\n\t\t\ta[24] = xr * enwindow[wp + -12 * 18 + 7];\n\t\t\txr = -a[21] + a[25];\n\t\t\ta[21] += a[25];\n\t\t\ta[25] = xr * enwindow[wp + -12 * 18 + 7];\n\n\t\t\txr = a[4] - a[8];\n\t\t\ta[4] += a[8];\n\t\t\ta[8] = xr * enwindow[wp + -12 * 18 + 7];\n\t\t\txr = a[5] - a[9];\n\t\t\ta[5] += a[9];\n\t\t\ta[9] = xr * enwindow[wp + -12 * 18 + 7];\n\n\t\t\txr = a[0] - a[12];\n\t\t\ta[0] += a[12];\n\t\t\ta[12] = xr * enwindow[wp + -4 * 18 + 7];\n\t\t\txr = a[1] - a[13];\n\t\t\ta[1] += a[13];\n\t\t\ta[13] = xr * enwindow[wp + -4 * 18 + 7];\n\t\t\txr = a[16] - a[28];\n\t\t\ta[16] += a[28];\n\t\t\ta[28] = xr * enwindow[wp + -4 * 18 + 7];\n\t\t\txr = -a[17] + a[29];\n\t\t\ta[17] += a[29];\n\t\t\ta[29] = xr * enwindow[wp + -4 * 18 + 7];\n\n\t\t\txr = Util.SQRT2 * (a[2] - a[10]);\n\t\t\ta[2] += a[10];\n\t\t\ta[10] = xr;\n\t\t\txr = Util.SQRT2 * (a[3] - a[11]);\n\t\t\ta[3] += a[11];\n\t\t\ta[11] = xr;\n\t\t\txr = Util.SQRT2 * (-a[18] + a[26]);\n\t\t\ta[18] += a[26];\n\t\t\ta[26] = xr - a[18];\n\t\t\txr = Util.SQRT2 * (-a[19] + a[27]);\n\t\t\ta[19] += a[27];\n\t\t\ta[27] = xr - a[19];\n\n\t\t\txr = a[2];\n\t\t\ta[19] -= a[3];\n\t\t\ta[3] -= xr;\n\t\t\ta[2] = a[31] - xr;\n\t\t\ta[31] += xr;\n\t\t\txr = a[3];\n\t\t\ta[11] -= a[19];\n\t\t\ta[18] -= xr;\n\t\t\ta[3] = a[30] - xr;\n\t\t\ta[30] += xr;\n\t\t\txr = a[18];\n\t\t\ta[27] -= a[11];\n\t\t\ta[19] -= xr;\n\t\t\ta[18] = a[15] - xr;\n\t\t\ta[15] += xr;\n\n\t\t\txr = a[19];\n\t\t\ta[10] -= xr;\n\t\t\ta[19] = a[14] - xr;\n\t\t\ta[14] += xr;\n\t\t\txr = a[10];\n\t\t\ta[11] -= xr;\n\t\t\ta[10] = a[23] - xr;\n\t\t\ta[23] += xr;\n\t\t\txr = a[11];\n\t\t\ta[26] -= xr;\n\t\t\ta[11] = a[22] - xr;\n\t\t\ta[22] += xr;\n\t\t\txr = a[26];\n\t\t\ta[27] -= xr;\n\t\t\ta[26] = a[7] - xr;\n\t\t\ta[7] += xr;\n\n\t\t\txr = a[27];\n\t\t\ta[27] = a[6] - xr;\n\t\t\ta[6] += xr;\n\n\t\t\txr = Util.SQRT2 * (a[0] - a[4]);\n\t\t\ta[0] += a[4];\n\t\t\ta[4] = xr;\n\t\t\txr = Util.SQRT2 * (a[1] - a[5]);\n\t\t\ta[1] += a[5];\n\t\t\ta[5] = xr;\n\t\t\txr = Util.SQRT2 * (a[16] - a[20]);\n\t\t\ta[16] += a[20];\n\t\t\ta[20] = xr;\n\t\t\txr = Util.SQRT2 * (a[17] - a[21]);\n\t\t\ta[17] += a[21];\n\t\t\ta[21] = xr;\n\n\t\t\txr = -Util.SQRT2 * (a[8] - a[12]);\n\t\t\ta[8] += a[12];\n\t\t\ta[12] = xr - a[8];\n\t\t\txr = -Util.SQRT2 * (a[9] - a[13]);\n\t\t\ta[9] += a[13];\n\t\t\ta[13] = xr - a[9];\n\t\t\txr = -Util.SQRT2 * (a[25] - a[29]);\n\t\t\ta[25] += a[29];\n\t\t\ta[29] = xr - a[25];\n\t\t\txr = -Util.SQRT2 * (a[24] + a[28]);\n\t\t\ta[24] -= a[28];\n\t\t\ta[28] = xr - a[24];\n\n\t\t\txr = a[24] - a[16];\n\t\t\ta[24] = xr;\n\t\t\txr = a[20] - xr;\n\t\t\ta[20] = xr;\n\t\t\txr = a[28] - xr;\n\t\t\ta[28] = xr;\n\n\t\t\txr = a[25] - a[17];\n\t\t\ta[25] = xr;\n\t\t\txr = a[21] - xr;\n\t\t\ta[21] = xr;\n\t\t\txr = a[29] - xr;\n\t\t\ta[29] = xr;\n\n\t\t\txr = a[17] - a[1];\n\t\t\ta[17] = xr;\n\t\t\txr = a[9] - xr;\n\t\t\ta[9] = xr;\n\t\t\txr = a[25] - xr;\n\t\t\ta[25] = xr;\n\t\t\txr = a[5] - xr;\n\t\t\ta[5] = xr;\n\t\t\txr = a[21] - xr;\n\t\t\ta[21] = xr;\n\t\t\txr = a[13] - xr;\n\t\t\ta[13] = xr;\n\t\t\txr = a[29] - xr;\n\t\t\ta[29] = xr;\n\n\t\t\txr = a[1] - a[0];\n\t\t\ta[1] = xr;\n\t\t\txr = a[16] - xr;\n\t\t\ta[16] = xr;\n\t\t\txr = a[17] - xr;\n\t\t\ta[17] = xr;\n\t\t\txr = a[8] - xr;\n\t\t\ta[8] = xr;\n\t\t\txr = a[9] - xr;\n\t\t\ta[9] = xr;\n\t\t\txr = a[24] - xr;\n\t\t\ta[24] = xr;\n\t\t\txr = a[25] - xr;\n\t\t\ta[25] = xr;\n\t\t\txr = a[4] - xr;\n\t\t\ta[4] = xr;\n\t\t\txr = a[5] - xr;\n\t\t\ta[5] = xr;\n\t\t\txr = a[20] - xr;\n\t\t\ta[20] = xr;\n\t\t\txr = a[21] - xr;\n\t\t\ta[21] = xr;\n\t\t\txr = a[12] - xr;\n\t\t\ta[12] = xr;\n\t\t\txr = a[13] - xr;\n\t\t\ta[13] = xr;\n\t\t\txr = a[28] - xr;\n\t\t\ta[28] = xr;\n\t\t\txr = a[29] - xr;\n\t\t\ta[29] = xr;\n\n\t\t\txr = a[0];\n\t\t\ta[0] += a[31];\n\t\t\ta[31] -= xr;\n\t\t\txr = a[1];\n\t\t\ta[1] += a[30];\n\t\t\ta[30] -= xr;\n\t\t\txr = a[16];\n\t\t\ta[16] += a[15];\n\t\t\ta[15] -= xr;\n\t\t\txr = a[17];\n\t\t\ta[17] += a[14];\n\t\t\ta[14] -= xr;\n\t\t\txr = a[8];\n\t\t\ta[8] += a[23];\n\t\t\ta[23] -= xr;\n\t\t\txr = a[9];\n\t\t\ta[9] += a[22];\n\t\t\ta[22] -= xr;\n\t\t\txr = a[24];\n\t\t\ta[24] += a[7];\n\t\t\ta[7] -= xr;\n\t\t\txr = a[25];\n\t\t\ta[25] += a[6];\n\t\t\ta[6] -= xr;\n\t\t\txr = a[4];\n\t\t\ta[4] += a[27];\n\t\t\ta[27] -= xr;\n\t\t\txr = a[5];\n\t\t\ta[5] += a[26];\n\t\t\ta[26] -= xr;\n\t\t\txr = a[20];\n\t\t\ta[20] += a[11];\n\t\t\ta[11] -= xr;\n\t\t\txr = a[21];\n\t\t\ta[21] += a[10];\n\t\t\ta[10] -= xr;\n\t\t\txr = a[12];\n\t\t\ta[12] += a[19];\n\t\t\ta[19] -= xr;\n\t\t\txr = a[13];\n\t\t\ta[13] += a[18];\n\t\t\ta[18] -= xr;\n\t\t\txr = a[28];\n\t\t\ta[28] += a[3];\n\t\t\ta[3] -= xr;\n\t\t\txr = a[29];\n\t\t\ta[29] += a[2];\n\t\t\ta[2] -= xr;\n\t\t}\n\t}\n\n\t/**\n\t * Function: Calculation of the MDCT In the case of long blocks (type 0,1,3)\n\t * there are 36 coefficents in the time domain and 18 in the frequency\n\t * domain.<BR>\n\t * In the case of short blocks (type 2) there are 3 transformations with\n\t * short length. This leads to 12 coefficents in the time and 6 in the\n\t * frequency domain. In this case the results are stored side by side in the\n\t * vector out[].\n\t *\n\t * New layer3\n\t */\n\tfunction mdct_short(inout, inoutPos) {\n\t\tfor (var l = 0; l < 3; l++) {\n\t\t\tvar tc0, tc1, tc2, ts0, ts1, ts2;\n\n\t\t\tts0 = inout[inoutPos + 2 * 3] * win[Encoder.SHORT_TYPE][0]\n\t\t\t\t\t- inout[inoutPos + 5 * 3];\n\t\t\ttc0 = inout[inoutPos + 0 * 3] * win[Encoder.SHORT_TYPE][2]\n\t\t\t\t\t- inout[inoutPos + 3 * 3];\n\t\t\ttc1 = ts0 + tc0;\n\t\t\ttc2 = ts0 - tc0;\n\n\t\t\tts0 = inout[inoutPos + 5 * 3] * win[Encoder.SHORT_TYPE][0]\n\t\t\t\t\t+ inout[inoutPos + 2 * 3];\n\t\t\ttc0 = inout[inoutPos + 3 * 3] * win[Encoder.SHORT_TYPE][2]\n\t\t\t\t\t+ inout[inoutPos + 0 * 3];\n\t\t\tts1 = ts0 + tc0;\n\t\t\tts2 = -ts0 + tc0;\n\n\t\t\ttc0 = (inout[inoutPos + 1 * 3] * win[Encoder.SHORT_TYPE][1] - inout[inoutPos + 4 * 3]) * 2.069978111953089e-11;\n\t\t\t/*\n\t\t\t * tritab_s [ 1 ]\n\t\t\t */\n\t\t\tts0 = (inout[inoutPos + 4 * 3] * win[Encoder.SHORT_TYPE][1] + inout[inoutPos + 1 * 3]) * 2.069978111953089e-11;\n\t\t\t/*\n\t\t\t * tritab_s [ 1 ]\n\t\t\t */\n\t\t\tinout[inoutPos + 3 * 0] = tc1 * 1.907525191737280e-11 + tc0;\n\t\t\t/*\n\t\t\t * tritab_s[ 2 ]\n\t\t\t */\n\t\t\tinout[inoutPos + 3 * 5] = -ts1 * 1.907525191737280e-11 + ts0;\n\t\t\t/*\n\t\t\t * tritab_s[0 ]\n\t\t\t */\n\t\t\ttc2 = tc2 * 0.86602540378443870761 * 1.907525191737281e-11;\n\t\t\t/*\n\t\t\t * tritab_s[ 2]\n\t\t\t */\n\t\t\tts1 = ts1 * 0.5 * 1.907525191737281e-11 + ts0;\n\t\t\tinout[inoutPos + 3 * 1] = tc2 - ts1;\n\t\t\tinout[inoutPos + 3 * 2] = tc2 + ts1;\n\n\t\t\ttc1 = tc1 * 0.5 * 1.907525191737281e-11 - tc0;\n\t\t\tts2 = ts2 * 0.86602540378443870761 * 1.907525191737281e-11;\n\t\t\t/*\n\t\t\t * tritab_s[ 0]\n\t\t\t */\n\t\t\tinout[inoutPos + 3 * 3] = tc1 + ts2;\n\t\t\tinout[inoutPos + 3 * 4] = tc1 - ts2;\n\n\t\t\tinoutPos++;\n\t\t}\n\t}\n\n\tfunction mdct_long(out, outPos, _in) {\n\t\tvar ct, st;\n\t\t{\n\t\t\tvar tc1, tc2, tc3, tc4, ts5, ts6, ts7, ts8;\n\t\t\t/* 1,2, 5,6, 9,10, 13,14, 17 */\n\t\t\ttc1 = _in[17] - _in[9];\n\t\t\ttc3 = _in[15] - _in[11];\n\t\t\ttc4 = _in[14] - _in[12];\n\t\t\tts5 = _in[0] + _in[8];\n\t\t\tts6 = _in[1] + _in[7];\n\t\t\tts7 = _in[2] + _in[6];\n\t\t\tts8 = _in[3] + _in[5];\n\n\t\t\tout[outPos + 17] = (ts5 + ts7 - ts8) - (ts6 - _in[4]);\n\t\t\tst = (ts5 + ts7 - ts8) * cx[12 + 7] + (ts6 - _in[4]);\n\t\t\tct = (tc1 - tc3 - tc4) * cx[12 + 6];\n\t\t\tout[outPos + 5] = ct + st;\n\t\t\tout[outPos + 6] = ct - st;\n\n\t\t\ttc2 = (_in[16] - _in[10]) * cx[12 + 6];\n\t\t\tts6 = ts6 * cx[12 + 7] + _in[4];\n\t\t\tct = tc1 * cx[12 + 0] + tc2 + tc3 * cx[12 + 1] + tc4 * cx[12 + 2];\n\t\t\tst = -ts5 * cx[12 + 4] + ts6 - ts7 * cx[12 + 5] + ts8 * cx[12 + 3];\n\t\t\tout[outPos + 1] = ct + st;\n\t\t\tout[outPos + 2] = ct - st;\n\n\t\t\tct = tc1 * cx[12 + 1] - tc2 - tc3 * cx[12 + 2] + tc4 * cx[12 + 0];\n\t\t\tst = -ts5 * cx[12 + 5] + ts6 - ts7 * cx[12 + 3] + ts8 * cx[12 + 4];\n\t\t\tout[outPos + 9] = ct + st;\n\t\t\tout[outPos + 10] = ct - st;\n\n\t\t\tct = tc1 * cx[12 + 2] - tc2 + tc3 * cx[12 + 0] - tc4 * cx[12 + 1];\n\t\t\tst = ts5 * cx[12 + 3] - ts6 + ts7 * cx[12 + 4] - ts8 * cx[12 + 5];\n\t\t\tout[outPos + 13] = ct + st;\n\t\t\tout[outPos + 14] = ct - st;\n\t\t}\n\t\t{\n\t\t\tvar ts1, ts2, ts3, ts4, tc5, tc6, tc7, tc8;\n\n\t\t\tts1 = _in[8] - _in[0];\n\t\t\tts3 = _in[6] - _in[2];\n\t\t\tts4 = _in[5] - _in[3];\n\t\t\ttc5 = _in[17] + _in[9];\n\t\t\ttc6 = _in[16] + _in[10];\n\t\t\ttc7 = _in[15] + _in[11];\n\t\t\ttc8 = _in[14] + _in[12];\n\n\t\t\tout[outPos + 0] = (tc5 + tc7 + tc8) + (tc6 + _in[13]);\n\t\t\tct = (tc5 + tc7 + tc8) * cx[12 + 7] - (tc6 + _in[13]);\n\t\t\tst = (ts1 - ts3 + ts4) * cx[12 + 6];\n\t\t\tout[outPos + 11] = ct + st;\n\t\t\tout[outPos + 12] = ct - st;\n\n\t\t\tts2 = (_in[7] - _in[1]) * cx[12 + 6];\n\t\t\ttc6 = _in[13] - tc6 * cx[12 + 7];\n\t\t\tct = tc5 * cx[12 + 3] - tc6 + tc7 * cx[12 + 4] + tc8 * cx[12 + 5];\n\t\t\tst = ts1 * cx[12 + 2] + ts2 + ts3 * cx[12 + 0] + ts4 * cx[12 + 1];\n\t\t\tout[outPos + 3] = ct + st;\n\t\t\tout[outPos + 4] = ct - st;\n\n\t\t\tct = -tc5 * cx[12 + 5] + tc6 - tc7 * cx[12 + 3] - tc8 * cx[12 + 4];\n\t\t\tst = ts1 * cx[12 + 1] + ts2 - ts3 * cx[12 + 2] - ts4 * cx[12 + 0];\n\t\t\tout[outPos + 7] = ct + st;\n\t\t\tout[outPos + 8] = ct - st;\n\n\t\t\tct = -tc5 * cx[12 + 4] + tc6 - tc7 * cx[12 + 5] - tc8 * cx[12 + 3];\n\t\t\tst = ts1 * cx[12 + 0] - ts2 + ts3 * cx[12 + 1] - ts4 * cx[12 + 2];\n\t\t\tout[outPos + 15] = ct + st;\n\t\t\tout[outPos + 16] = ct - st;\n\t\t}\n\t}\n\n\tthis.mdct_sub48 = function(gfc, w0, w1) {\n\t\tvar wk = w0;\n\t\tvar wkPos = 286;\n\t\t/* thinking cache performance, ch->gr loop is better than gr->ch loop */\n\t\tfor (var ch = 0; ch < gfc.channels_out; ch++) {\n\t\t\tfor (var gr = 0; gr < gfc.mode_gr; gr++) {\n\t\t\t\tvar band;\n\t\t\t\tvar gi = (gfc.l3_side.tt[gr][ch]);\n\t\t\t\tvar mdct_enc = gi.xr;\n\t\t\t\tvar mdct_encPos = 0;\n\t\t\t\tvar samp = gfc.sb_sample[ch][1 - gr];\n\t\t\t\tvar sampPos = 0;\n\n\t\t\t\tfor (var k = 0; k < 18 / 2; k++) {\n\t\t\t\t\twindow_subband(wk, wkPos, samp[sampPos]);\n\t\t\t\t\twindow_subband(wk, wkPos + 32, samp[sampPos + 1]);\n\t\t\t\t\tsampPos += 2;\n\t\t\t\t\twkPos += 64;\n\t\t\t\t\t/*\n\t\t\t\t\t * Compensate for inversion in the analysis filter\n\t\t\t\t\t */\n\t\t\t\t\tfor (band = 1; band < 32; band += 2) {\n\t\t\t\t\t\tsamp[sampPos - 1][band] *= -1;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t/*\n\t\t\t\t * Perform imdct of 18 previous subband samples + 18 current\n\t\t\t\t * subband samples\n\t\t\t\t */\n\t\t\t\tfor (band = 0; band < 32; band++, mdct_encPos += 18) {\n\t\t\t\t\tvar type = gi.block_type;\n\t\t\t\t\tvar band0 = gfc.sb_sample[ch][gr];\n\t\t\t\t\tvar band1 = gfc.sb_sample[ch][1 - gr];\n\t\t\t\t\tif (gi.mixed_block_flag != 0 && band < 2)\n\t\t\t\t\t\ttype = 0;\n\t\t\t\t\tif (gfc.amp_filter[band] < 1e-12) {\n\t\t\t\t\t\tArrays.fill(mdct_enc, mdct_encPos + 0,\n\t\t\t\t\t\t\t\tmdct_encPos + 18, 0);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (gfc.amp_filter[band] < 1.0) {\n\t\t\t\t\t\t\tfor (var k = 0; k < 18; k++)\n\t\t\t\t\t\t\t\tband1[k][order[band]] *= gfc.amp_filter[band];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (type == Encoder.SHORT_TYPE) {\n\t\t\t\t\t\t\tfor (var k = -NS / 4; k < 0; k++) {\n\t\t\t\t\t\t\t\tvar w = win[Encoder.SHORT_TYPE][k + 3];\n\t\t\t\t\t\t\t\tmdct_enc[mdct_encPos + k * 3 + 9] = band0[9 + k][order[band]]\n\t\t\t\t\t\t\t\t\t\t* w - band0[8 - k][order[band]];\n\t\t\t\t\t\t\t\tmdct_enc[mdct_encPos + k * 3 + 18] = band0[14 - k][order[band]]\n\t\t\t\t\t\t\t\t\t\t* w + band0[15 + k][order[band]];\n\t\t\t\t\t\t\t\tmdct_enc[mdct_encPos + k * 3 + 10] = band0[15 + k][order[band]]\n\t\t\t\t\t\t\t\t\t\t* w - band0[14 - k][order[band]];\n\t\t\t\t\t\t\t\tmdct_enc[mdct_encPos + k * 3 + 19] = band1[2 - k][order[band]]\n\t\t\t\t\t\t\t\t\t\t* w + band1[3 + k][order[band]];\n\t\t\t\t\t\t\t\tmdct_enc[mdct_encPos + k * 3 + 11] = band1[3 + k][order[band]]\n\t\t\t\t\t\t\t\t\t\t* w - band1[2 - k][order[band]];\n\t\t\t\t\t\t\t\tmdct_enc[mdct_encPos + k * 3 + 20] = band1[8 - k][order[band]]\n\t\t\t\t\t\t\t\t\t\t* w + band1[9 + k][order[band]];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tmdct_short(mdct_enc, mdct_encPos);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tvar work = new_float(18);\n\t\t\t\t\t\t\tfor (var k = -NL / 4; k < 0; k++) {\n\t\t\t\t\t\t\t\tvar a, b;\n\t\t\t\t\t\t\t\ta = win[type][k + 27]\n\t\t\t\t\t\t\t\t\t\t* band1[k + 9][order[band]]\n\t\t\t\t\t\t\t\t\t\t+ win[type][k + 36]\n\t\t\t\t\t\t\t\t\t\t* band1[8 - k][order[band]];\n\t\t\t\t\t\t\t\tb = win[type][k + 9]\n\t\t\t\t\t\t\t\t\t\t* band0[k + 9][order[band]]\n\t\t\t\t\t\t\t\t\t\t- win[type][k + 18]\n\t\t\t\t\t\t\t\t\t\t* band0[8 - k][order[band]];\n\t\t\t\t\t\t\t\twork[k + 9] = a - b * tantab_l[3 + k + 9];\n\t\t\t\t\t\t\t\twork[k + 18] = a * tantab_l[3 + k + 9] + b;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tmdct_long(mdct_enc, mdct_encPos, work);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t/*\n\t\t\t\t\t * Perform aliasing reduction butterfly\n\t\t\t\t\t */\n\t\t\t\t\tif (type != Encoder.SHORT_TYPE && band != 0) {\n\t\t\t\t\t\tfor (var k = 7; k >= 0; --k) {\n\t\t\t\t\t\t\tvar bu, bd;\n\t\t\t\t\t\t\tbu = mdct_enc[mdct_encPos + k] * ca[20 + k]\n\t\t\t\t\t\t\t\t\t+ mdct_enc[mdct_encPos + -1 - k]\n\t\t\t\t\t\t\t\t\t* cs[28 + k];\n\t\t\t\t\t\t\tbd = mdct_enc[mdct_encPos + k] * cs[28 + k]\n\t\t\t\t\t\t\t\t\t- mdct_enc[mdct_encPos + -1 - k]\n\t\t\t\t\t\t\t\t\t* ca[20 + k];\n\n\t\t\t\t\t\t\tmdct_enc[mdct_encPos + -1 - k] = bu;\n\t\t\t\t\t\t\tmdct_enc[mdct_encPos + k] = bd;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\twk = w1;\n\t\t\twkPos = 286;\n\t\t\tif (gfc.mode_gr == 1) {\n\t\t\t\tfor (var i = 0; i < 18; i++) {\n\t\t\t\t\tSystem.arraycopy(gfc.sb_sample[ch][1][i], 0,\n\t\t\t\t\t\t\tgfc.sb_sample[ch][0][i], 0, 32);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\nmodule.exports = NewMDCT;\n","var Encoder = require('./Encoder.js');\nvar common = require('./common.js');\nvar System = common.System;\nvar VbrMode = common.VbrMode;\nvar Float = common.Float;\nvar ShortBlock = common.ShortBlock;\nvar Util = common.Util;\nvar Arrays = common.Arrays;\nvar new_array_n = common.new_array_n;\nvar new_byte = common.new_byte;\nvar new_double = common.new_double;\nvar new_float = common.new_float;\nvar new_float_n = common.new_float_n;\nvar new_int = common.new_int;\nvar new_int_n = common.new_int_n;\nvar assert = common.assert;\n\nfunction III_psy_xmin() {\n    this.l = new_float(Encoder.SBMAX_l);\n    this.s = new_float_n([Encoder.SBMAX_s, 3]);\n\n    var self = this;\n    this.assign = function (iii_psy_xmin) {\n        System.arraycopy(iii_psy_xmin.l, 0, self.l, 0, Encoder.SBMAX_l);\n        for (var i = 0; i < Encoder.SBMAX_s; i++) {\n            for (var j = 0; j < 3; j++) {\n                self.s[i][j] = iii_psy_xmin.s[i][j];\n            }\n        }\n    }\n}\n\nmodule.exports = III_psy_xmin;\n","//package mp3;\n\nvar III_psy_xmin = require('./III_psy_xmin.js');\n\nfunction III_psy_ratio() {\n\tthis.thm = new III_psy_xmin();\n\tthis.en = new III_psy_xmin();\n}\n\nmodule.exports = III_psy_ratio;\n","var common = require('./common.js');\nvar System = common.System;\nvar VbrMode = common.VbrMode;\nvar Float = common.Float;\nvar ShortBlock = common.ShortBlock;\nvar Util = common.Util;\nvar Arrays = common.Arrays;\nvar new_array_n = common.new_array_n;\nvar new_byte = common.new_byte;\nvar new_double = common.new_double;\nvar new_float = common.new_float;\nvar new_float_n = common.new_float_n;\nvar new_int = common.new_int;\nvar new_int_n = common.new_int_n;\nvar assert = common.assert;\n\n/**\n * ENCDELAY The encoder delay.\n *\n * Minimum allowed is MDCTDELAY (see below)\n *\n * The first 96 samples will be attenuated, so using a value less than 96\n * will result in corrupt data for the first 96-ENCDELAY samples.\n *\n * suggested: 576 set to 1160 to sync with FhG.\n */\nEncoder.ENCDELAY = 576;\n/**\n * make sure there is at least one complete frame after the last frame\n * containing real data\n *\n * Using a value of 288 would be sufficient for a a very sophisticated\n * decoder that can decode granule-by-granule instead of frame by frame. But\n * lets not assume this, and assume the decoder will not decode frame N\n * unless it also has data for frame N+1\n */\nEncoder.POSTDELAY = 1152;\n\n/**\n * delay of the MDCT used in mdct.c original ISO routines had a delay of\n * 528! Takehiro's routines:\n */\nEncoder.MDCTDELAY = 48;\nEncoder.FFTOFFSET = (224 + Encoder.MDCTDELAY);\n\n/**\n * Most decoders, including the one we use, have a delay of 528 samples.\n */\nEncoder.DECDELAY = 528;\n\n/**\n * number of subbands\n */\nEncoder.SBLIMIT = 32;\n\n/**\n * parition bands bands\n */\nEncoder.CBANDS = 64;\n\n/**\n * number of critical bands/scale factor bands where masking is computed\n */\nEncoder.SBPSY_l = 21;\nEncoder.SBPSY_s = 12;\n\n/**\n * total number of scalefactor bands encoded\n */\nEncoder.SBMAX_l = 22;\nEncoder.SBMAX_s = 13;\nEncoder.PSFB21 = 6;\nEncoder.PSFB12 = 6;\n\n/**\n * FFT sizes\n */\nEncoder.BLKSIZE = 1024;\nEncoder.HBLKSIZE = (Encoder.BLKSIZE / 2 + 1);\nEncoder.BLKSIZE_s = 256;\nEncoder.HBLKSIZE_s = (Encoder.BLKSIZE_s / 2 + 1);\n\nEncoder.NORM_TYPE = 0;\nEncoder.START_TYPE = 1;\nEncoder.SHORT_TYPE = 2;\nEncoder.STOP_TYPE = 3;\n\n/**\n * <PRE>\n * Mode Extention:\n * When we are in stereo mode, there are 4 possible methods to store these\n * two channels. The stereo modes -m? are using a subset of them.\n *\n *  -ms: MPG_MD_LR_LR\n *  -mj: MPG_MD_LR_LR and MPG_MD_MS_LR\n *  -mf: MPG_MD_MS_LR\n *  -mi: all\n * </PRE>\n */\nEncoder.MPG_MD_LR_LR = 0;\nEncoder.MPG_MD_LR_I = 1;\nEncoder.MPG_MD_MS_LR = 2;\nEncoder.MPG_MD_MS_I = 3;\n\nEncoder.fircoef = [-0.0207887 * 5, -0.0378413 * 5,\n    -0.0432472 * 5, -0.031183 * 5, 7.79609e-18 * 5, 0.0467745 * 5,\n    0.10091 * 5, 0.151365 * 5, 0.187098 * 5];\n\nfunction Encoder() {\n    var NewMDCT = require('./NewMDCT.js');\n    var III_psy_ratio = require('./III_psy_ratio.js');\n\n    var FFTOFFSET = Encoder.FFTOFFSET;\n    var MPG_MD_MS_LR = Encoder.MPG_MD_MS_LR;\n    //BitStream bs;\n    //PsyModel psy;\n    //VBRTag vbr;\n    //QuantizePVT qupvt;\n    var bs = null;\n    this.psy = null;\n    var psy = null;\n    var vbr = null;\n    var qupvt = null;\n\n    //public final void setModules(BitStream bs, PsyModel psy, QuantizePVT qupvt,\n    //    VBRTag vbr) {\n    this.setModules = function (_bs, _psy, _qupvt, _vbr) {\n        bs = _bs;\n        this.psy = _psy;\n        psy = _psy;\n        vbr = _vbr;\n        qupvt = _qupvt;\n    };\n\n    var newMDCT = new NewMDCT();\n\n    /***********************************************************************\n     *\n     * encoder and decoder delays\n     *\n     ***********************************************************************/\n\n    /**\n     * <PRE>\n     * layer III enc->dec delay:  1056 (1057?)   (observed)\n     * layer  II enc->dec delay:   480  (481?)   (observed)\n     *\n     * polyphase 256-16             (dec or enc)        = 240\n     * mdct      256+32  (9*32)     (dec or enc)        = 288\n     * total:    512+16\n     *\n     * My guess is that delay of polyphase filterbank is actualy 240.5\n     * (there are technical reasons for this, see postings in mp3encoder).\n     * So total Encode+Decode delay = ENCDELAY + 528 + 1\n     * </PRE>\n     */\n\n\n    /**\n     * auto-adjust of ATH, useful for low volume Gabriel Bouvigne 3 feb 2001\n     *\n     * modifies some values in gfp.internal_flags.ATH (gfc.ATH)\n     */\n//private void adjust_ATH(final LameInternalFlags gfc) {\n    function adjust_ATH(gfc) {\n        var gr2_max, max_pow;\n\n        if (gfc.ATH.useAdjust == 0) {\n            gfc.ATH.adjust = 1.0;\n            /* no adjustment */\n            return;\n        }\n\n        /* jd - 2001 mar 12, 27, jun 30 */\n        /* loudness based on equal loudness curve; */\n        /* use granule with maximum combined loudness */\n        max_pow = gfc.loudness_sq[0][0];\n        gr2_max = gfc.loudness_sq[1][0];\n        if (gfc.channels_out == 2) {\n            max_pow += gfc.loudness_sq[0][1];\n            gr2_max += gfc.loudness_sq[1][1];\n        } else {\n            max_pow += max_pow;\n            gr2_max += gr2_max;\n        }\n        if (gfc.mode_gr == 2) {\n            max_pow = Math.max(max_pow, gr2_max);\n        }\n        max_pow *= 0.5;\n        /* max_pow approaches 1.0 for full band noise */\n\n        /* jd - 2001 mar 31, jun 30 */\n        /* user tuning of ATH adjustment region */\n        max_pow *= gfc.ATH.aaSensitivityP;\n\n        /*\n         * adjust ATH depending on range of maximum value\n         */\n\n        /* jd - 2001 feb27, mar12,20, jun30, jul22 */\n        /* continuous curves based on approximation */\n        /* to GB's original values. */\n        /* For an increase in approximate loudness, */\n        /* set ATH adjust to adjust_limit immediately */\n        /* after a delay of one frame. */\n        /* For a loudness decrease, reduce ATH adjust */\n        /* towards adjust_limit gradually. */\n        /* max_pow is a loudness squared or a power. */\n        if (max_pow > 0.03125) { /* ((1 - 0.000625)/ 31.98) from curve below */\n            if (gfc.ATH.adjust >= 1.0) {\n                gfc.ATH.adjust = 1.0;\n            } else {\n                /* preceding frame has lower ATH adjust; */\n                /* ascend only to the preceding adjust_limit */\n                /* in case there is leading low volume */\n                if (gfc.ATH.adjust < gfc.ATH.adjustLimit) {\n                    gfc.ATH.adjust = gfc.ATH.adjustLimit;\n                }\n            }\n            gfc.ATH.adjustLimit = 1.0;\n        } else { /* adjustment curve */\n            /* about 32 dB maximum adjust (0.000625) */\n            var adj_lim_new = 31.98 * max_pow + 0.000625;\n            if (gfc.ATH.adjust >= adj_lim_new) { /* descend gradually */\n                gfc.ATH.adjust *= adj_lim_new * 0.075 + 0.925;\n                if (gfc.ATH.adjust < adj_lim_new) { /* stop descent */\n                    gfc.ATH.adjust = adj_lim_new;\n                }\n            } else { /* ascend */\n                if (gfc.ATH.adjustLimit >= adj_lim_new) {\n                    gfc.ATH.adjust = adj_lim_new;\n                } else {\n                    /* preceding frame has lower ATH adjust; */\n                    /* ascend only to the preceding adjust_limit */\n                    if (gfc.ATH.adjust < gfc.ATH.adjustLimit) {\n                        gfc.ATH.adjust = gfc.ATH.adjustLimit;\n                    }\n                }\n            }\n            gfc.ATH.adjustLimit = adj_lim_new;\n        }\n    }\n\n    /**\n     * <PRE>\n     *  some simple statistics\n     *\n     *  bitrate index 0: free bitrate . not allowed in VBR mode\n     *  : bitrates, kbps depending on MPEG version\n     *  bitrate index 15: forbidden\n     *\n     *  mode_ext:\n     *  0:  LR\n     *  1:  LR-i\n     *  2:  MS\n     *  3:  MS-i\n     * </PRE>\n     */\n    function updateStats(gfc) {\n        var gr, ch;\n        assert(0 <= gfc.bitrate_index && gfc.bitrate_index < 16);\n        assert(0 <= gfc.mode_ext && gfc.mode_ext < 4);\n\n        /* count bitrate indices */\n        gfc.bitrate_stereoMode_Hist[gfc.bitrate_index][4]++;\n        gfc.bitrate_stereoMode_Hist[15][4]++;\n\n        /* count 'em for every mode extension in case of 2 channel encoding */\n        if (gfc.channels_out == 2) {\n            gfc.bitrate_stereoMode_Hist[gfc.bitrate_index][gfc.mode_ext]++;\n            gfc.bitrate_stereoMode_Hist[15][gfc.mode_ext]++;\n        }\n        for (gr = 0; gr < gfc.mode_gr; ++gr) {\n            for (ch = 0; ch < gfc.channels_out; ++ch) {\n                var bt = gfc.l3_side.tt[gr][ch].block_type | 0;\n                if (gfc.l3_side.tt[gr][ch].mixed_block_flag != 0)\n                    bt = 4;\n                gfc.bitrate_blockType_Hist[gfc.bitrate_index][bt]++;\n                gfc.bitrate_blockType_Hist[gfc.bitrate_index][5]++;\n                gfc.bitrate_blockType_Hist[15][bt]++;\n                gfc.bitrate_blockType_Hist[15][5]++;\n            }\n        }\n    }\n\n    function lame_encode_frame_init(gfp, inbuf) {\n        var gfc = gfp.internal_flags;\n\n        var ch, gr;\n\n        if (gfc.lame_encode_frame_init == 0) {\n            /* prime the MDCT/polyphase filterbank with a short block */\n            var i, j;\n            var primebuff0 = new_float(286 + 1152 + 576);\n            var primebuff1 = new_float(286 + 1152 + 576);\n            gfc.lame_encode_frame_init = 1;\n            for (i = 0, j = 0; i < 286 + 576 * (1 + gfc.mode_gr); ++i) {\n                if (i < 576 * gfc.mode_gr) {\n                    primebuff0[i] = 0;\n                    if (gfc.channels_out == 2)\n                        primebuff1[i] = 0;\n                } else {\n                    primebuff0[i] = inbuf[0][j];\n                    if (gfc.channels_out == 2)\n                        primebuff1[i] = inbuf[1][j];\n                    ++j;\n                }\n            }\n            /* polyphase filtering / mdct */\n            for (gr = 0; gr < gfc.mode_gr; gr++) {\n                for (ch = 0; ch < gfc.channels_out; ch++) {\n                    gfc.l3_side.tt[gr][ch].block_type = Encoder.SHORT_TYPE;\n                }\n            }\n            newMDCT.mdct_sub48(gfc, primebuff0, primebuff1);\n\n            /* check FFT will not use a negative starting offset */\n            assert(576 >= Encoder.FFTOFFSET);\n            /* check if we have enough data for FFT */\n            assert(gfc.mf_size >= (Encoder.BLKSIZE + gfp.framesize - Encoder.FFTOFFSET));\n            /* check if we have enough data for polyphase filterbank */\n            assert(gfc.mf_size >= (512 + gfp.framesize - 32));\n        }\n\n    }\n\n    /**\n     * <PRE>\n     * encodeframe()           Layer 3\n     *\n     * encode a single frame\n     *\n     *\n     *    lame_encode_frame()\n     *\n     *\n     *                           gr 0            gr 1\n     *    inbuf:           |--------------|--------------|--------------|\n     *\n     *\n     *    Polyphase (18 windows, each shifted 32)\n     *    gr 0:\n     *    window1          <----512---.\n     *    window18                 <----512---.\n     *\n     *    gr 1:\n     *    window1                         <----512---.\n     *    window18                                <----512---.\n     *\n     *\n     *\n     *    MDCT output:  |--------------|--------------|--------------|\n     *\n     *    FFT's                    <---------1024---------.\n     *                                             <---------1024-------.\n     *\n     *\n     *\n     *        inbuf = buffer of PCM data size=MP3 framesize\n     *        encoder acts on inbuf[ch][0], but output is delayed by MDCTDELAY\n     *        so the MDCT coefficints are from inbuf[ch][-MDCTDELAY]\n     *\n     *        psy-model FFT has a 1 granule delay, so we feed it data for the\n     *        next granule.\n     *        FFT is centered over granule:  224+576+224\n     *        So FFT starts at:   576-224-MDCTDELAY\n     *\n     *        MPEG2:  FFT ends at:  BLKSIZE+576-224-MDCTDELAY      (1328)\n     *        MPEG1:  FFT ends at:  BLKSIZE+2*576-224-MDCTDELAY    (1904)\n     *\n     *        MPEG2:  polyphase first window:  [0..511]\n     *                          18th window:   [544..1055]          (1056)\n     *        MPEG1:            36th window:   [1120..1631]         (1632)\n     *                data needed:  512+framesize-32\n     *\n     *        A close look newmdct.c shows that the polyphase filterbank\n     *        only uses data from [0..510] for each window.  Perhaps because the window\n     *        used by the filterbank is zero for the last point, so Takehiro's\n     *        code doesn't bother to compute with it.\n     *\n     *        FFT starts at 576-224-MDCTDELAY (304)  = 576-FFTOFFSET\n     *\n     * </PRE>\n     */\n\n\n    this.lame_encode_mp3_frame = function (gfp, inbuf_l, inbuf_r, mp3buf, mp3bufPos, mp3buf_size) {\n        var mp3count;\n        var masking_LR = new_array_n([2, 2]);\n        /*\n         * LR masking &\n         * energy\n         */\n        masking_LR[0][0] = new III_psy_ratio();\n        masking_LR[0][1] = new III_psy_ratio();\n        masking_LR[1][0] = new III_psy_ratio();\n        masking_LR[1][1] = new III_psy_ratio();\n        var masking_MS = new_array_n([2, 2]);\n        /* MS masking & energy */\n        masking_MS[0][0] = new III_psy_ratio();\n        masking_MS[0][1] = new III_psy_ratio();\n        masking_MS[1][0] = new III_psy_ratio();\n        masking_MS[1][1] = new III_psy_ratio();\n        //III_psy_ratio masking[][];\n        var masking;\n        /* pointer to selected maskings */\n        var inbuf = [null, null];\n        var gfc = gfp.internal_flags;\n\n        var tot_ener = new_float_n([2, 4]);\n        var ms_ener_ratio = [.5, .5];\n        var pe = [[0., 0.], [0., 0.]];\n        var pe_MS = [[0., 0.], [0., 0.]];\n\n//float[][] pe_use;\n        var pe_use;\n\n        var ch, gr;\n\n        inbuf[0] = inbuf_l;\n        inbuf[1] = inbuf_r;\n\n        if (gfc.lame_encode_frame_init == 0) {\n            /* first run? */\n            lame_encode_frame_init(gfp, inbuf);\n\n        }\n\n        /********************** padding *****************************/\n        /**\n         * <PRE>\n         * padding method as described in\n         * \"MPEG-Layer3 / Bitstream Syntax and Decoding\"\n         * by Martin Sieler, Ralph Sperschneider\n         *\n         * note: there is no padding for the very first frame\n         *\n         * Robert Hegemann 2000-06-22\n         * </PRE>\n         */\n        gfc.padding = 0;\n        if ((gfc.slot_lag -= gfc.frac_SpF) < 0) {\n            gfc.slot_lag += gfp.out_samplerate;\n            gfc.padding = 1;\n        }\n\n        /****************************************\n         * Stage 1: psychoacoustic model *\n         ****************************************/\n\n        if (gfc.psymodel != 0) {\n            /*\n             * psychoacoustic model psy model has a 1 granule (576) delay that\n             * we must compensate for (mt 6/99).\n             */\n            var ret;\n            var bufp = [null, null];\n            /* address of beginning of left & right granule */\n            var bufpPos = 0;\n            /* address of beginning of left & right granule */\n            var blocktype = new_int(2);\n\n            for (gr = 0; gr < gfc.mode_gr; gr++) {\n\n                for (ch = 0; ch < gfc.channels_out; ch++) {\n                    bufp[ch] = inbuf[ch];\n                    bufpPos = 576 + gr * 576 - Encoder.FFTOFFSET;\n                }\n                if (gfp.VBR == VbrMode.vbr_mtrh || gfp.VBR == VbrMode.vbr_mt) {\n                    ret = psy.L3psycho_anal_vbr(gfp, bufp, bufpPos, gr,\n                        masking_LR, masking_MS, pe[gr], pe_MS[gr],\n                        tot_ener[gr], blocktype);\n                } else {\n                    ret = psy.L3psycho_anal_ns(gfp, bufp, bufpPos, gr,\n                        masking_LR, masking_MS, pe[gr], pe_MS[gr],\n                        tot_ener[gr], blocktype);\n                }\n                if (ret != 0)\n                    return -4;\n\n                if (gfp.mode == MPEGMode.JOINT_STEREO) {\n                    ms_ener_ratio[gr] = tot_ener[gr][2] + tot_ener[gr][3];\n                    if (ms_ener_ratio[gr] > 0)\n                        ms_ener_ratio[gr] = tot_ener[gr][3] / ms_ener_ratio[gr];\n                }\n\n                /* block type flags */\n                for (ch = 0; ch < gfc.channels_out; ch++) {\n                    var cod_info = gfc.l3_side.tt[gr][ch];\n                    cod_info.block_type = blocktype[ch];\n                    cod_info.mixed_block_flag = 0;\n                }\n            }\n        } else {\n            /* no psy model */\n            for (gr = 0; gr < gfc.mode_gr; gr++)\n                for (ch = 0; ch < gfc.channels_out; ch++) {\n                    gfc.l3_side.tt[gr][ch].block_type = Encoder.NORM_TYPE;\n                    gfc.l3_side.tt[gr][ch].mixed_block_flag = 0;\n                    pe_MS[gr][ch] = pe[gr][ch] = 700;\n                }\n        }\n\n        /* auto-adjust of ATH, useful for low volume */\n        adjust_ATH(gfc);\n\n        /****************************************\n         * Stage 2: MDCT *\n         ****************************************/\n\n        /* polyphase filtering / mdct */\n        newMDCT.mdct_sub48(gfc, inbuf[0], inbuf[1]);\n\n        /****************************************\n         * Stage 3: MS/LR decision *\n         ****************************************/\n\n        /* Here will be selected MS or LR coding of the 2 stereo channels */\n        gfc.mode_ext = Encoder.MPG_MD_LR_LR;\n\n        if (gfp.force_ms) {\n            gfc.mode_ext = Encoder.MPG_MD_MS_LR;\n        } else if (gfp.mode == MPEGMode.JOINT_STEREO) {\n            /*\n             * ms_ratio = is scaled, for historical reasons, to look like a\n             * ratio of side_channel / total. 0 = signal is 100% mono .5 = L & R\n             * uncorrelated\n             */\n\n            /**\n             * <PRE>\n             * [0] and [1] are the results for the two granules in MPEG-1,\n             * in MPEG-2 it's only a faked averaging of the same value\n             * _prev is the value of the last granule of the previous frame\n             * _next is the value of the first granule of the next frame\n             * </PRE>\n             */\n\n            var sum_pe_MS = 0.;\n            var sum_pe_LR = 0.;\n            for (gr = 0; gr < gfc.mode_gr; gr++) {\n                for (ch = 0; ch < gfc.channels_out; ch++) {\n                    sum_pe_MS += pe_MS[gr][ch];\n                    sum_pe_LR += pe[gr][ch];\n                }\n            }\n\n            /* based on PE: M/S coding would not use much more bits than L/R */\n            if (sum_pe_MS <= 1.00 * sum_pe_LR) {\n\n                var gi0 = gfc.l3_side.tt[0];\n                var gi1 = gfc.l3_side.tt[gfc.mode_gr - 1];\n\n                if (gi0[0].block_type == gi0[1].block_type\n                    && gi1[0].block_type == gi1[1].block_type) {\n\n                    gfc.mode_ext = Encoder.MPG_MD_MS_LR;\n                }\n            }\n        }\n\n        /* bit and noise allocation */\n        if (gfc.mode_ext == MPG_MD_MS_LR) {\n            masking = masking_MS;\n            /* use MS masking */\n            pe_use = pe_MS;\n        } else {\n            masking = masking_LR;\n            /* use LR masking */\n            pe_use = pe;\n        }\n\n        /* copy data for MP3 frame analyzer */\n        if (gfp.analysis && gfc.pinfo != null) {\n            for (gr = 0; gr < gfc.mode_gr; gr++) {\n                for (ch = 0; ch < gfc.channels_out; ch++) {\n                    gfc.pinfo.ms_ratio[gr] = gfc.ms_ratio[gr];\n                    gfc.pinfo.ms_ener_ratio[gr] = ms_ener_ratio[gr];\n                    gfc.pinfo.blocktype[gr][ch] = gfc.l3_side.tt[gr][ch].block_type;\n                    gfc.pinfo.pe[gr][ch] = pe_use[gr][ch];\n                    System.arraycopy(gfc.l3_side.tt[gr][ch].xr, 0,\n                        gfc.pinfo.xr[gr][ch], 0, 576);\n                    /*\n                     * in psymodel, LR and MS data was stored in pinfo. switch\n                     * to MS data:\n                     */\n                    if (gfc.mode_ext == MPG_MD_MS_LR) {\n                        gfc.pinfo.ers[gr][ch] = gfc.pinfo.ers[gr][ch + 2];\n                        System.arraycopy(gfc.pinfo.energy[gr][ch + 2], 0,\n                            gfc.pinfo.energy[gr][ch], 0,\n                            gfc.pinfo.energy[gr][ch].length);\n                    }\n                }\n            }\n        }\n\n        /****************************************\n         * Stage 4: quantization loop *\n         ****************************************/\n\n        if (gfp.VBR == VbrMode.vbr_off || gfp.VBR == VbrMode.vbr_abr) {\n\n            var i;\n            var f;\n\n            for (i = 0; i < 18; i++)\n                gfc.nsPsy.pefirbuf[i] = gfc.nsPsy.pefirbuf[i + 1];\n\n            f = 0.0;\n            for (gr = 0; gr < gfc.mode_gr; gr++)\n                for (ch = 0; ch < gfc.channels_out; ch++)\n                    f += pe_use[gr][ch];\n            gfc.nsPsy.pefirbuf[18] = f;\n\n            f = gfc.nsPsy.pefirbuf[9];\n            for (i = 0; i < 9; i++)\n                f += (gfc.nsPsy.pefirbuf[i] + gfc.nsPsy.pefirbuf[18 - i])\n                    * Encoder.fircoef[i];\n\n            f = (670 * 5 * gfc.mode_gr * gfc.channels_out) / f;\n            for (gr = 0; gr < gfc.mode_gr; gr++) {\n                for (ch = 0; ch < gfc.channels_out; ch++) {\n                    pe_use[gr][ch] *= f;\n                }\n            }\n        }\n        gfc.iteration_loop.iteration_loop(gfp, pe_use, ms_ener_ratio, masking);\n\n        /****************************************\n         * Stage 5: bitstream formatting *\n         ****************************************/\n\n        /* write the frame to the bitstream */\n        bs.format_bitstream(gfp);\n\n        /* copy mp3 bit buffer into array */\n        mp3count = bs.copy_buffer(gfc, mp3buf, mp3bufPos, mp3buf_size, 1);\n\n        if (gfp.bWriteVbrTag)\n            vbr.addVbrFrame(gfp);\n\n        if (gfp.analysis && gfc.pinfo != null) {\n            for (ch = 0; ch < gfc.channels_out; ch++) {\n                var j;\n                for (j = 0; j < FFTOFFSET; j++)\n                    gfc.pinfo.pcmdata[ch][j] = gfc.pinfo.pcmdata[ch][j\n                    + gfp.framesize];\n                for (j = FFTOFFSET; j < 1600; j++) {\n                    gfc.pinfo.pcmdata[ch][j] = inbuf[ch][j - FFTOFFSET];\n                }\n            }\n            qupvt.set_frame_pinfo(gfp, masking);\n        }\n\n        updateStats(gfc);\n\n        return mp3count;\n    }\n}\n\n\nmodule.exports = Encoder;\n","var common = require('./common.js');\nvar System = common.System;\nvar VbrMode = common.VbrMode;\nvar Float = common.Float;\nvar ShortBlock = common.ShortBlock;\nvar Util = common.Util;\nvar Arrays = common.Arrays;\nvar new_array_n = common.new_array_n;\nvar new_byte = common.new_byte;\nvar new_double = common.new_double;\nvar new_float = common.new_float;\nvar new_float_n = common.new_float_n;\nvar new_int = common.new_int;\nvar new_int_n = common.new_int_n;\nvar assert = common.assert;\n\nvar Encoder = require('./Encoder.js');\n\nfunction FFT() {\n\n    var window = new_float(Encoder.BLKSIZE);\n    var window_s = new_float(Encoder.BLKSIZE_s / 2);\n\n    var costab = [\n        9.238795325112867e-01, 3.826834323650898e-01,\n        9.951847266721969e-01, 9.801714032956060e-02,\n        9.996988186962042e-01, 2.454122852291229e-02,\n        9.999811752826011e-01, 6.135884649154475e-03\n    ];\n\n    function fht(fz, fzPos, n) {\n        var tri = 0;\n        var k4;\n        var fi;\n        var gi;\n\n        n <<= 1;\n        /* to get BLKSIZE, because of 3DNow! ASM routine */\n        var fn = fzPos + n;\n        k4 = 4;\n        do {\n            var s1, c1;\n            var i, k1, k2, k3, kx;\n            kx = k4 >> 1;\n            k1 = k4;\n            k2 = k4 << 1;\n            k3 = k2 + k1;\n            k4 = k2 << 1;\n            fi = fzPos;\n            gi = fi + kx;\n            do {\n                var f0, f1, f2, f3;\n                f1 = fz[fi + 0] - fz[fi + k1];\n                f0 = fz[fi + 0] + fz[fi + k1];\n                f3 = fz[fi + k2] - fz[fi + k3];\n                f2 = fz[fi + k2] + fz[fi + k3];\n                fz[fi + k2] = f0 - f2;\n                fz[fi + 0] = f0 + f2;\n                fz[fi + k3] = f1 - f3;\n                fz[fi + k1] = f1 + f3;\n                f1 = fz[gi + 0] - fz[gi + k1];\n                f0 = fz[gi + 0] + fz[gi + k1];\n                f3 = (Util.SQRT2 * fz[gi + k3]);\n                f2 = (Util.SQRT2 * fz[gi + k2]);\n                fz[gi + k2] = f0 - f2;\n                fz[gi + 0] = f0 + f2;\n                fz[gi + k3] = f1 - f3;\n                fz[gi + k1] = f1 + f3;\n                gi += k4;\n                fi += k4;\n            } while (fi < fn);\n            c1 = costab[tri + 0];\n            s1 = costab[tri + 1];\n            for (i = 1; i < kx; i++) {\n                var c2, s2;\n                c2 = 1 - (2 * s1) * s1;\n                s2 = (2 * s1) * c1;\n                fi = fzPos + i;\n                gi = fzPos + k1 - i;\n                do {\n                    var a, b, g0, f0, f1, g1, f2, g2, f3, g3;\n                    b = s2 * fz[fi + k1] - c2 * fz[gi + k1];\n                    a = c2 * fz[fi + k1] + s2 * fz[gi + k1];\n                    f1 = fz[fi + 0] - a;\n                    f0 = fz[fi + 0] + a;\n                    g1 = fz[gi + 0] - b;\n                    g0 = fz[gi + 0] + b;\n                    b = s2 * fz[fi + k3] - c2 * fz[gi + k3];\n                    a = c2 * fz[fi + k3] + s2 * fz[gi + k3];\n                    f3 = fz[fi + k2] - a;\n                    f2 = fz[fi + k2] + a;\n                    g3 = fz[gi + k2] - b;\n                    g2 = fz[gi + k2] + b;\n                    b = s1 * f2 - c1 * g3;\n                    a = c1 * f2 + s1 * g3;\n                    fz[fi + k2] = f0 - a;\n                    fz[fi + 0] = f0 + a;\n                    fz[gi + k3] = g1 - b;\n                    fz[gi + k1] = g1 + b;\n                    b = c1 * g2 - s1 * f3;\n                    a = s1 * g2 + c1 * f3;\n                    fz[gi + k2] = g0 - a;\n                    fz[gi + 0] = g0 + a;\n                    fz[fi + k3] = f1 - b;\n                    fz[fi + k1] = f1 + b;\n                    gi += k4;\n                    fi += k4;\n                } while (fi < fn);\n                c2 = c1;\n                c1 = c2 * costab[tri + 0] - s1 * costab[tri + 1];\n                s1 = c2 * costab[tri + 1] + s1 * costab[tri + 0];\n            }\n            tri += 2;\n        } while (k4 < n);\n    }\n\n    var rv_tbl = [0x00, 0x80, 0x40,\n        0xc0, 0x20, 0xa0, 0x60, 0xe0, 0x10,\n        0x90, 0x50, 0xd0, 0x30, 0xb0, 0x70,\n        0xf0, 0x08, 0x88, 0x48, 0xc8, 0x28,\n        0xa8, 0x68, 0xe8, 0x18, 0x98, 0x58,\n        0xd8, 0x38, 0xb8, 0x78, 0xf8, 0x04,\n        0x84, 0x44, 0xc4, 0x24, 0xa4, 0x64,\n        0xe4, 0x14, 0x94, 0x54, 0xd4, 0x34,\n        0xb4, 0x74, 0xf4, 0x0c, 0x8c, 0x4c,\n        0xcc, 0x2c, 0xac, 0x6c, 0xec, 0x1c,\n        0x9c, 0x5c, 0xdc, 0x3c, 0xbc, 0x7c,\n        0xfc, 0x02, 0x82, 0x42, 0xc2, 0x22,\n        0xa2, 0x62, 0xe2, 0x12, 0x92, 0x52,\n        0xd2, 0x32, 0xb2, 0x72, 0xf2, 0x0a,\n        0x8a, 0x4a, 0xca, 0x2a, 0xaa, 0x6a,\n        0xea, 0x1a, 0x9a, 0x5a, 0xda, 0x3a,\n        0xba, 0x7a, 0xfa, 0x06, 0x86, 0x46,\n        0xc6, 0x26, 0xa6, 0x66, 0xe6, 0x16,\n        0x96, 0x56, 0xd6, 0x36, 0xb6, 0x76,\n        0xf6, 0x0e, 0x8e, 0x4e, 0xce, 0x2e,\n        0xae, 0x6e, 0xee, 0x1e, 0x9e, 0x5e,\n        0xde, 0x3e, 0xbe, 0x7e, 0xfe];\n\n    this.fft_short = function (gfc, x_real, chn, buffer, bufPos) {\n        for (var b = 0; b < 3; b++) {\n            var x = Encoder.BLKSIZE_s / 2;\n            var k = 0xffff & ((576 / 3) * (b + 1));\n            var j = Encoder.BLKSIZE_s / 8 - 1;\n            do {\n                var f0, f1, f2, f3, w;\n                var i = rv_tbl[j << 2] & 0xff;\n\n                f0 = window_s[i] * buffer[chn][bufPos + i + k];\n                w = window_s[0x7f - i] * buffer[chn][bufPos + i + k + 0x80];\n                f1 = f0 - w;\n                f0 = f0 + w;\n                f2 = window_s[i + 0x40] * buffer[chn][bufPos + i + k + 0x40];\n                w = window_s[0x3f - i] * buffer[chn][bufPos + i + k + 0xc0];\n                f3 = f2 - w;\n                f2 = f2 + w;\n\n                x -= 4;\n                x_real[b][x + 0] = f0 + f2;\n                x_real[b][x + 2] = f0 - f2;\n                x_real[b][x + 1] = f1 + f3;\n                x_real[b][x + 3] = f1 - f3;\n\n                f0 = window_s[i + 0x01] * buffer[chn][bufPos + i + k + 0x01];\n                w = window_s[0x7e - i] * buffer[chn][bufPos + i + k + 0x81];\n                f1 = f0 - w;\n                f0 = f0 + w;\n                f2 = window_s[i + 0x41] * buffer[chn][bufPos + i + k + 0x41];\n                w = window_s[0x3e - i] * buffer[chn][bufPos + i + k + 0xc1];\n                f3 = f2 - w;\n                f2 = f2 + w;\n\n                x_real[b][x + Encoder.BLKSIZE_s / 2 + 0] = f0 + f2;\n                x_real[b][x + Encoder.BLKSIZE_s / 2 + 2] = f0 - f2;\n                x_real[b][x + Encoder.BLKSIZE_s / 2 + 1] = f1 + f3;\n                x_real[b][x + Encoder.BLKSIZE_s / 2 + 3] = f1 - f3;\n            } while (--j >= 0);\n\n            fht(x_real[b], x, Encoder.BLKSIZE_s / 2);\n            /* BLKSIZE_s/2 because of 3DNow! ASM routine */\n            /* BLKSIZE/2 because of 3DNow! ASM routine */\n        }\n    }\n\n    this.fft_long = function (gfc, y, chn, buffer, bufPos) {\n        var jj = Encoder.BLKSIZE / 8 - 1;\n        var x = Encoder.BLKSIZE / 2;\n\n        do {\n            var f0, f1, f2, f3, w;\n            var i = rv_tbl[jj] & 0xff;\n            f0 = window[i] * buffer[chn][bufPos + i];\n            w = window[i + 0x200] * buffer[chn][bufPos + i + 0x200];\n            f1 = f0 - w;\n            f0 = f0 + w;\n            f2 = window[i + 0x100] * buffer[chn][bufPos + i + 0x100];\n            w = window[i + 0x300] * buffer[chn][bufPos + i + 0x300];\n            f3 = f2 - w;\n            f2 = f2 + w;\n\n            x -= 4;\n            y[x + 0] = f0 + f2;\n            y[x + 2] = f0 - f2;\n            y[x + 1] = f1 + f3;\n            y[x + 3] = f1 - f3;\n\n            f0 = window[i + 0x001] * buffer[chn][bufPos + i + 0x001];\n            w = window[i + 0x201] * buffer[chn][bufPos + i + 0x201];\n            f1 = f0 - w;\n            f0 = f0 + w;\n            f2 = window[i + 0x101] * buffer[chn][bufPos + i + 0x101];\n            w = window[i + 0x301] * buffer[chn][bufPos + i + 0x301];\n            f3 = f2 - w;\n            f2 = f2 + w;\n\n            y[x + Encoder.BLKSIZE / 2 + 0] = f0 + f2;\n            y[x + Encoder.BLKSIZE / 2 + 2] = f0 - f2;\n            y[x + Encoder.BLKSIZE / 2 + 1] = f1 + f3;\n            y[x + Encoder.BLKSIZE / 2 + 3] = f1 - f3;\n        } while (--jj >= 0);\n\n        fht(y, x, Encoder.BLKSIZE / 2);\n        /* BLKSIZE/2 because of 3DNow! ASM routine */\n    }\n\n    this.init_fft = function (gfc) {\n        /* The type of window used here will make no real difference, but */\n        /*\n         * in the interest of merging nspsytune stuff - switch to blackman\n         * window\n         */\n        for (var i = 0; i < Encoder.BLKSIZE; i++)\n            /* blackman window */\n            window[i] = (0.42 - 0.5 * Math.cos(2 * Math.PI * (i + .5)\n                / Encoder.BLKSIZE) + 0.08 * Math.cos(4 * Math.PI * (i + .5)\n                / Encoder.BLKSIZE));\n\n        for (var i = 0; i < Encoder.BLKSIZE_s / 2; i++)\n            window_s[i] = (0.5 * (1.0 - Math.cos(2.0 * Math.PI\n                * (i + 0.5) / Encoder.BLKSIZE_s)));\n\n    }\n\n}\n\nmodule.exports = FFT;\n","/*\n *      psymodel.c\n *\n *      Copyright (c) 1999-2000 Mark Taylor\n *      Copyright (c) 2001-2002 Naoki Shibata\n *      Copyright (c) 2000-2003 Takehiro Tominaga\n *      Copyright (c) 2000-2008 Robert Hegemann\n *      Copyright (c) 2000-2005 Gabriel Bouvigne\n *      Copyright (c) 2000-2005 Alexander Leidinger\n *\n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2 of the License, or (at your option) any later version.\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Library General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the\n * Free Software Foundation, Inc., 59 Temple Place - Suite 330,\n * Boston, MA 02111-1307, USA.\n */\n\n/* $Id: PsyModel.java,v 1.27 2011/05/24 20:48:06 kenchis Exp $ */\n\n\n/*\n PSYCHO ACOUSTICS\n\n\n This routine computes the psycho acoustics, delayed by one granule.\n\n Input: buffer of PCM data (1024 samples).\n\n This window should be centered over the 576 sample granule window.\n The routine will compute the psycho acoustics for\n this granule, but return the psycho acoustics computed\n for the *previous* granule.  This is because the block\n type of the previous granule can only be determined\n after we have computed the psycho acoustics for the following\n granule.\n\n Output:  maskings and energies for each scalefactor band.\n block type, PE, and some correlation measures.\n The PE is used by CBR modes to determine if extra bits\n from the bit reservoir should be used.  The correlation\n measures are used to determine mid/side or regular stereo.\n */\n/*\n Notation:\n\n barks:  a non-linear frequency scale.  Mapping from frequency to\n barks is given by freq2bark()\n\n scalefactor bands: The spectrum (frequencies) are broken into\n SBMAX \"scalefactor bands\".  Thes bands\n are determined by the MPEG ISO spec.  In\n the noise shaping/quantization code, we allocate\n bits among the partition bands to achieve the\n best possible quality\n\n partition bands:   The spectrum is also broken into about\n 64 \"partition bands\".  Each partition\n band is about .34 barks wide.  There are about 2-5\n partition bands for each scalefactor band.\n\n LAME computes all psycho acoustic information for each partition\n band.  Then at the end of the computations, this information\n is mapped to scalefactor bands.  The energy in each scalefactor\n band is taken as the sum of the energy in all partition bands\n which overlap the scalefactor band.  The maskings can be computed\n in the same way (and thus represent the average masking in that band)\n or by taking the minmum value multiplied by the number of\n partition bands used (which represents a minimum masking in that band).\n */\n/*\n The general outline is as follows:\n\n 1. compute the energy in each partition band\n 2. compute the tonality in each partition band\n 3. compute the strength of each partion band \"masker\"\n 4. compute the masking (via the spreading function applied to each masker)\n 5. Modifications for mid/side masking.\n\n Each partition band is considiered a \"masker\".  The strength\n of the i'th masker in band j is given by:\n\n s3(bark(i)-bark(j))*strength(i)\n\n The strength of the masker is a function of the energy and tonality.\n The more tonal, the less masking.  LAME uses a simple linear formula\n (controlled by NMT and TMN) which says the strength is given by the\n energy divided by a linear function of the tonality.\n */\n/*\n s3() is the \"spreading function\".  It is given by a formula\n determined via listening tests.\n\n The total masking in the j'th partition band is the sum over\n all maskings i.  It is thus given by the convolution of\n the strength with s3(), the \"spreading function.\"\n\n masking(j) = sum_over_i  s3(i-j)*strength(i)  = s3 o strength\n\n where \"o\" = convolution operator.  s3 is given by a formula determined\n via listening tests.  It is normalized so that s3 o 1 = 1.\n\n Note: instead of a simple convolution, LAME also has the\n option of using \"additive masking\"\n\n The most critical part is step 2, computing the tonality of each\n partition band.  LAME has two tonality estimators.  The first\n is based on the ISO spec, and measures how predictiable the\n signal is over time.  The more predictable, the more tonal.\n The second measure is based on looking at the spectrum of\n a single granule.  The more peaky the spectrum, the more\n tonal.  By most indications, the latter approach is better.\n\n Finally, in step 5, the maskings for the mid and side\n channel are possibly increased.  Under certain circumstances,\n noise in the mid & side channels is assumed to also\n be masked by strong maskers in the L or R channels.\n\n\n Other data computed by the psy-model:\n\n ms_ratio        side-channel / mid-channel masking ratio (for previous granule)\n ms_ratio_next   side-channel / mid-channel masking ratio for this granule\n\n percep_entropy[2]     L and R values (prev granule) of PE - A measure of how\n much pre-echo is in the previous granule\n percep_entropy_MS[2]  mid and side channel values (prev granule) of percep_entropy\n energy[4]             L,R,M,S energy in each channel, prev granule\n blocktype_d[2]        block type to use for previous granule\n */\n//package mp3;\n\n//import java.util.Arrays;\nvar common = require('./common.js');\nvar System = common.System;\nvar VbrMode = common.VbrMode;\nvar Float = common.Float;\nvar ShortBlock = common.ShortBlock;\nvar Util = common.Util;\nvar Arrays = common.Arrays;\nvar new_array_n = common.new_array_n;\nvar new_byte = common.new_byte;\nvar new_double = common.new_double;\nvar new_float = common.new_float;\nvar new_float_n = common.new_float_n;\nvar new_int = common.new_int;\nvar new_int_n = common.new_int_n;\nvar assert = common.assert;\n\nvar FFT = require(\"./FFT.js\");\nvar Encoder = require(\"./Encoder.js\");\n\nfunction PsyModel() {\n\n    var fft = new FFT();\n\n    var LOG10 = 2.30258509299404568402;\n\n    var rpelev = 2;\n    var rpelev2 = 16;\n    var rpelev_s = 2;\n    var rpelev2_s = 16;\n\n    /* size of each partition band, in barks: */\n    var DELBARK = .34;\n\n    /* tuned for output level (sensitive to energy scale) */\n    var VO_SCALE = (1. / (14752 * 14752) / (Encoder.BLKSIZE / 2));\n\n    var temporalmask_sustain_sec = 0.01;\n\n    var NS_PREECHO_ATT0 = 0.8;\n    var NS_PREECHO_ATT1 = 0.6;\n    var NS_PREECHO_ATT2 = 0.3;\n\n    var NS_MSFIX = 3.5;\n\n    var NSATTACKTHRE = 4.4;\n    var NSATTACKTHRE_S = 25;\n\n    var NSFIRLEN = 21;\n\n    /* size of each partition band, in barks: */\n    var LN_TO_LOG10 = 0.2302585093;\n\n    function NON_LINEAR_SCALE_ENERGY(x) {\n        return x;\n    }\n\n    /**\n     * <PRE>\n     *       L3psycho_anal.  Compute psycho acoustics.\n     *\n     *       Data returned to the calling program must be delayed by one\n     *       granule.\n     *\n     *       This is done in two places.\n     *       If we do not need to know the blocktype, the copying\n     *       can be done here at the top of the program: we copy the data for\n     *       the last granule (computed during the last call) before it is\n     *       overwritten with the new data.  It looks like this:\n     *\n     *       0. static psymodel_data\n     *       1. calling_program_data = psymodel_data\n     *       2. compute psymodel_data\n     *\n     *       For data which needs to know the blocktype, the copying must be\n     *       done at the end of this loop, and the old values must be saved:\n     *\n     *       0. static psymodel_data_old\n     *       1. compute psymodel_data\n     *       2. compute possible block type of this granule\n     *       3. compute final block type of previous granule based on #2.\n     *       4. calling_program_data = psymodel_data_old\n     *       5. psymodel_data_old = psymodel_data\n     *     psycho_loudness_approx\n     *       jd - 2001 mar 12\n     *    in:  energy   - BLKSIZE/2 elements of frequency magnitudes ^ 2\n     *         gfp      - uses out_samplerate, ATHtype (also needed for ATHformula)\n     *    returns: loudness^2 approximation, a positive value roughly tuned for a value\n     *             of 1.0 for signals near clipping.\n     *    notes:   When calibrated, feeding this function binary white noise at sample\n     *             values +32767 or -32768 should return values that approach 3.\n     *             ATHformula is used to approximate an equal loudness curve.\n     *    future:  Data indicates that the shape of the equal loudness curve varies\n     *             with intensity.  This function might be improved by using an equal\n     *             loudness curve shaped for typical playback levels (instead of the\n     *             ATH, that is shaped for the threshold).  A flexible realization might\n     *             simply bend the existing ATH curve to achieve the desired shape.\n     *             However, the potential gain may not be enough to justify an effort.\n     * </PRE>\n     */\n    function psycho_loudness_approx(energy, gfc) {\n        var loudness_power = 0.0;\n        /* apply weights to power in freq. bands */\n        for (var i = 0; i < Encoder.BLKSIZE / 2; ++i)\n            loudness_power += energy[i] * gfc.ATH.eql_w[i];\n        loudness_power *= VO_SCALE;\n\n        return loudness_power;\n    }\n\n    function compute_ffts(gfp, fftenergy, fftenergy_s, wsamp_l, wsamp_lPos, wsamp_s, wsamp_sPos, gr_out, chn, buffer, bufPos) {\n        var gfc = gfp.internal_flags;\n        if (chn < 2) {\n            fft.fft_long(gfc, wsamp_l[wsamp_lPos], chn, buffer, bufPos);\n            fft.fft_short(gfc, wsamp_s[wsamp_sPos], chn, buffer, bufPos);\n        }\n        /* FFT data for mid and side channel is derived from L & R */\n        else if (chn == 2) {\n            for (var j = Encoder.BLKSIZE - 1; j >= 0; --j) {\n                var l = wsamp_l[wsamp_lPos + 0][j];\n                var r = wsamp_l[wsamp_lPos + 1][j];\n                wsamp_l[wsamp_lPos + 0][j] = (l + r) * Util.SQRT2 * 0.5;\n                wsamp_l[wsamp_lPos + 1][j] = (l - r) * Util.SQRT2 * 0.5;\n            }\n            for (var b = 2; b >= 0; --b) {\n                for (var j = Encoder.BLKSIZE_s - 1; j >= 0; --j) {\n                    var l = wsamp_s[wsamp_sPos + 0][b][j];\n                    var r = wsamp_s[wsamp_sPos + 1][b][j];\n                    wsamp_s[wsamp_sPos + 0][b][j] = (l + r) * Util.SQRT2 * 0.5;\n                    wsamp_s[wsamp_sPos + 1][b][j] = (l - r) * Util.SQRT2 * 0.5;\n                }\n            }\n        }\n\n        /*********************************************************************\n         * compute energies\n         *********************************************************************/\n        fftenergy[0] = NON_LINEAR_SCALE_ENERGY(wsamp_l[wsamp_lPos + 0][0]);\n        fftenergy[0] *= fftenergy[0];\n\n        for (var j = Encoder.BLKSIZE / 2 - 1; j >= 0; --j) {\n            var re = (wsamp_l[wsamp_lPos + 0])[Encoder.BLKSIZE / 2 - j];\n            var im = (wsamp_l[wsamp_lPos + 0])[Encoder.BLKSIZE / 2 + j];\n            fftenergy[Encoder.BLKSIZE / 2 - j] = NON_LINEAR_SCALE_ENERGY((re\n                * re + im * im) * 0.5);\n        }\n        for (var b = 2; b >= 0; --b) {\n            fftenergy_s[b][0] = (wsamp_s[wsamp_sPos + 0])[b][0];\n            fftenergy_s[b][0] *= fftenergy_s[b][0];\n            for (var j = Encoder.BLKSIZE_s / 2 - 1; j >= 0; --j) {\n                var re = (wsamp_s[wsamp_sPos + 0])[b][Encoder.BLKSIZE_s\n                / 2 - j];\n                var im = (wsamp_s[wsamp_sPos + 0])[b][Encoder.BLKSIZE_s\n                / 2 + j];\n                fftenergy_s[b][Encoder.BLKSIZE_s / 2 - j] = NON_LINEAR_SCALE_ENERGY((re\n                    * re + im * im) * 0.5);\n            }\n        }\n        /* total energy */\n        {\n            var totalenergy = 0.0;\n            for (var j = 11; j < Encoder.HBLKSIZE; j++)\n                totalenergy += fftenergy[j];\n\n            gfc.tot_ener[chn] = totalenergy;\n        }\n\n        if (gfp.analysis) {\n            for (var j = 0; j < Encoder.HBLKSIZE; j++) {\n                gfc.pinfo.energy[gr_out][chn][j] = gfc.pinfo.energy_save[chn][j];\n                gfc.pinfo.energy_save[chn][j] = fftenergy[j];\n            }\n            gfc.pinfo.pe[gr_out][chn] = gfc.pe[chn];\n        }\n\n        /*********************************************************************\n         * compute loudness approximation (used for ATH auto-level adjustment)\n         *********************************************************************/\n        if (gfp.athaa_loudapprox == 2 && chn < 2) {\n            // no loudness for mid/side ch\n            gfc.loudness_sq[gr_out][chn] = gfc.loudness_sq_save[chn];\n            gfc.loudness_sq_save[chn] = psycho_loudness_approx(fftenergy, gfc);\n        }\n    }\n\n    /* mask_add optimization */\n    /* init the limit values used to avoid computing log in mask_add when it is not necessary */\n\n    /**\n     * <PRE>\n     *  For example, with i = 10*log10(m2/m1)/10*16         (= log10(m2/m1)*16)\n     *\n     * abs(i)>8 is equivalent (as i is an integer) to\n     * abs(i)>=9\n     * i>=9 || i<=-9\n     * equivalent to (as i is the biggest integer smaller than log10(m2/m1)*16\n     * or the smallest integer bigger than log10(m2/m1)*16 depending on the sign of log10(m2/m1)*16)\n     * log10(m2/m1)>=9/16 || log10(m2/m1)<=-9/16\n     * exp10 is strictly increasing thus this is equivalent to\n     * m2/m1 >= 10^(9/16) || m2/m1<=10^(-9/16) which are comparisons to constants\n     * </PRE>\n     */\n\n    /**\n     * as in if(i>8)\n     */\n    var I1LIMIT = 8;\n    /**\n     * as in if(i>24) . changed 23\n     */\n    var I2LIMIT = 23;\n    /**\n     * as in if(m<15)\n     */\n    var MLIMIT = 15;\n\n    var ma_max_i1;\n    var ma_max_i2;\n    var ma_max_m;\n\n    /**\n     * This is the masking table:<BR>\n     * According to tonality, values are going from 0dB (TMN) to 9.3dB (NMT).<BR>\n     * After additive masking computation, 8dB are added, so final values are\n     * going from 8dB to 17.3dB\n     *\n     * pow(10, -0.0..-0.6)\n     */\n    var tab = [1.0, 0.79433, 0.63096, 0.63096,\n        0.63096, 0.63096, 0.63096, 0.25119, 0.11749];\n\n    function init_mask_add_max_values() {\n        ma_max_i1 = Math.pow(10, (I1LIMIT + 1) / 16.0);\n        ma_max_i2 = Math.pow(10, (I2LIMIT + 1) / 16.0);\n        ma_max_m = Math.pow(10, (MLIMIT) / 10.0);\n    }\n\n    var table1 = [3.3246 * 3.3246,\n        3.23837 * 3.23837, 3.15437 * 3.15437, 3.00412 * 3.00412,\n        2.86103 * 2.86103, 2.65407 * 2.65407, 2.46209 * 2.46209,\n        2.284 * 2.284, 2.11879 * 2.11879, 1.96552 * 1.96552,\n        1.82335 * 1.82335, 1.69146 * 1.69146, 1.56911 * 1.56911,\n        1.46658 * 1.46658, 1.37074 * 1.37074, 1.31036 * 1.31036,\n        1.25264 * 1.25264, 1.20648 * 1.20648, 1.16203 * 1.16203,\n        1.12765 * 1.12765, 1.09428 * 1.09428, 1.0659 * 1.0659,\n        1.03826 * 1.03826, 1.01895 * 1.01895, 1];\n\n    var table2 = [1.33352 * 1.33352,\n        1.35879 * 1.35879, 1.38454 * 1.38454, 1.39497 * 1.39497,\n        1.40548 * 1.40548, 1.3537 * 1.3537, 1.30382 * 1.30382,\n        1.22321 * 1.22321, 1.14758 * 1.14758, 1];\n\n    var table3 = [2.35364 * 2.35364,\n        2.29259 * 2.29259, 2.23313 * 2.23313, 2.12675 * 2.12675,\n        2.02545 * 2.02545, 1.87894 * 1.87894, 1.74303 * 1.74303,\n        1.61695 * 1.61695, 1.49999 * 1.49999, 1.39148 * 1.39148,\n        1.29083 * 1.29083, 1.19746 * 1.19746, 1.11084 * 1.11084,\n        1.03826 * 1.03826];\n\n    /**\n     * addition of simultaneous masking Naoki Shibata 2000/7\n     */\n    function mask_add(m1, m2, kk, b, gfc, shortblock) {\n        var ratio;\n\n        if (m2 > m1) {\n            if (m2 < (m1 * ma_max_i2))\n                ratio = m2 / m1;\n            else\n                return (m1 + m2);\n        } else {\n            if (m1 >= (m2 * ma_max_i2))\n                return (m1 + m2);\n            ratio = m1 / m2;\n        }\n\n        /* Should always be true, just checking */\n        assert(m1 >= 0);\n        assert(m2 >= 0);\n\n        m1 += m2;\n        //if (((long)(b + 3) & 0xffffffff) <= 3 + 3) {\n        if ((b + 3) <= 3 + 3) {\n            /* approximately, 1 bark = 3 partitions */\n            /* 65% of the cases */\n            /* originally 'if(i > 8)' */\n            if (ratio >= ma_max_i1) {\n                /* 43% of the total */\n                return m1;\n            }\n\n            /* 22% of the total */\n            var i = 0 | (Util.FAST_LOG10_X(ratio, 16.0));\n            return m1 * table2[i];\n        }\n\n        /**\n         * <PRE>\n         * m<15 equ log10((m1+m2)/gfc.ATH.cb[k])<1.5\n         * equ (m1+m2)/gfc.ATH.cb[k]<10^1.5\n         * equ (m1+m2)<10^1.5 * gfc.ATH.cb[k]\n         * </PRE>\n         */\n        var i = 0 | Util.FAST_LOG10_X(ratio, 16.0);\n        if (shortblock != 0) {\n            m2 = gfc.ATH.cb_s[kk] * gfc.ATH.adjust;\n        } else {\n            m2 = gfc.ATH.cb_l[kk] * gfc.ATH.adjust;\n        }\n        assert(m2 >= 0);\n        if (m1 < ma_max_m * m2) {\n            /* 3% of the total */\n            /* Originally if (m > 0) { */\n            if (m1 > m2) {\n                var f, r;\n\n                f = 1.0;\n                if (i <= 13)\n                    f = table3[i];\n\n                r = Util.FAST_LOG10_X(m1 / m2, 10.0 / 15.0);\n                return m1 * ((table1[i] - f) * r + f);\n            }\n\n            if (i > 13)\n                return m1;\n\n            return m1 * table3[i];\n        }\n\n        /* 10% of total */\n        return m1 * table1[i];\n    }\n\n    var table2_ = [1.33352 * 1.33352,\n        1.35879 * 1.35879, 1.38454 * 1.38454, 1.39497 * 1.39497,\n        1.40548 * 1.40548, 1.3537 * 1.3537, 1.30382 * 1.30382,\n        1.22321 * 1.22321, 1.14758 * 1.14758, 1];\n\n    /**\n     * addition of simultaneous masking Naoki Shibata 2000/7\n     */\n    function vbrpsy_mask_add(m1, m2, b) {\n        var ratio;\n\n        if (m1 < 0) {\n            m1 = 0;\n        }\n        if (m2 < 0) {\n            m2 = 0;\n        }\n        if (m1 <= 0) {\n            return m2;\n        }\n        if (m2 <= 0) {\n            return m1;\n        }\n        if (m2 > m1) {\n            ratio = m2 / m1;\n        } else {\n            ratio = m1 / m2;\n        }\n        if (-2 <= b && b <= 2) {\n            /* approximately, 1 bark = 3 partitions */\n            /* originally 'if(i > 8)' */\n            if (ratio >= ma_max_i1) {\n                return m1 + m2;\n            } else {\n                var i = 0 | (Util.FAST_LOG10_X(ratio, 16.0));\n                return (m1 + m2) * table2_[i];\n            }\n        }\n        if (ratio < ma_max_i2) {\n            return m1 + m2;\n        }\n        if (m1 < m2) {\n            m1 = m2;\n        }\n        return m1;\n    }\n\n    /**\n     * compute interchannel masking effects\n     */\n    function calc_interchannel_masking(gfp, ratio) {\n        var gfc = gfp.internal_flags;\n        if (gfc.channels_out > 1) {\n            for (var sb = 0; sb < Encoder.SBMAX_l; sb++) {\n                var l = gfc.thm[0].l[sb];\n                var r = gfc.thm[1].l[sb];\n                gfc.thm[0].l[sb] += r * ratio;\n                gfc.thm[1].l[sb] += l * ratio;\n            }\n            for (var sb = 0; sb < Encoder.SBMAX_s; sb++) {\n                for (var sblock = 0; sblock < 3; sblock++) {\n                    var l = gfc.thm[0].s[sb][sblock];\n                    var r = gfc.thm[1].s[sb][sblock];\n                    gfc.thm[0].s[sb][sblock] += r * ratio;\n                    gfc.thm[1].s[sb][sblock] += l * ratio;\n                }\n            }\n        }\n    }\n\n    /**\n     * compute M/S thresholds from Johnston & Ferreira 1992 ICASSP paper\n     */\n    function msfix1(gfc) {\n        for (var sb = 0; sb < Encoder.SBMAX_l; sb++) {\n            /* use this fix if L & R masking differs by 2db or less */\n            /* if db = 10*log10(x2/x1) < 2 */\n            /* if (x2 < 1.58*x1) { */\n            if (gfc.thm[0].l[sb] > 1.58 * gfc.thm[1].l[sb]\n                || gfc.thm[1].l[sb] > 1.58 * gfc.thm[0].l[sb])\n                continue;\n            var mld = gfc.mld_l[sb] * gfc.en[3].l[sb];\n            var rmid = Math.max(gfc.thm[2].l[sb],\n                Math.min(gfc.thm[3].l[sb], mld));\n\n            mld = gfc.mld_l[sb] * gfc.en[2].l[sb];\n            var rside = Math.max(gfc.thm[3].l[sb],\n                Math.min(gfc.thm[2].l[sb], mld));\n            gfc.thm[2].l[sb] = rmid;\n            gfc.thm[3].l[sb] = rside;\n        }\n\n        for (var sb = 0; sb < Encoder.SBMAX_s; sb++) {\n            for (var sblock = 0; sblock < 3; sblock++) {\n                if (gfc.thm[0].s[sb][sblock] > 1.58 * gfc.thm[1].s[sb][sblock]\n                    || gfc.thm[1].s[sb][sblock] > 1.58 * gfc.thm[0].s[sb][sblock])\n                    continue;\n                var mld = gfc.mld_s[sb] * gfc.en[3].s[sb][sblock];\n                var rmid = Math.max(gfc.thm[2].s[sb][sblock],\n                    Math.min(gfc.thm[3].s[sb][sblock], mld));\n\n                mld = gfc.mld_s[sb] * gfc.en[2].s[sb][sblock];\n                var rside = Math.max(gfc.thm[3].s[sb][sblock],\n                    Math.min(gfc.thm[2].s[sb][sblock], mld));\n\n                gfc.thm[2].s[sb][sblock] = rmid;\n                gfc.thm[3].s[sb][sblock] = rside;\n            }\n        }\n    }\n\n    /**\n     * Adjust M/S maskings if user set \"msfix\"\n     *\n     * Naoki Shibata 2000\n     */\n    function ns_msfix(gfc, msfix, athadjust) {\n        var msfix2 = msfix;\n        var athlower = Math.pow(10, athadjust);\n\n        msfix *= 2.0;\n        msfix2 *= 2.0;\n        for (var sb = 0; sb < Encoder.SBMAX_l; sb++) {\n            var thmLR, thmM, thmS, ath;\n            ath = (gfc.ATH.cb_l[gfc.bm_l[sb]]) * athlower;\n            thmLR = Math.min(Math.max(gfc.thm[0].l[sb], ath),\n                Math.max(gfc.thm[1].l[sb], ath));\n            thmM = Math.max(gfc.thm[2].l[sb], ath);\n            thmS = Math.max(gfc.thm[3].l[sb], ath);\n            if (thmLR * msfix < thmM + thmS) {\n                var f = thmLR * msfix2 / (thmM + thmS);\n                thmM *= f;\n                thmS *= f;\n                assert(thmM + thmS > 0);\n            }\n            gfc.thm[2].l[sb] = Math.min(thmM, gfc.thm[2].l[sb]);\n            gfc.thm[3].l[sb] = Math.min(thmS, gfc.thm[3].l[sb]);\n        }\n\n        athlower *= ( Encoder.BLKSIZE_s / Encoder.BLKSIZE);\n        for (var sb = 0; sb < Encoder.SBMAX_s; sb++) {\n            for (var sblock = 0; sblock < 3; sblock++) {\n                var thmLR, thmM, thmS, ath;\n                ath = (gfc.ATH.cb_s[gfc.bm_s[sb]]) * athlower;\n                thmLR = Math.min(Math.max(gfc.thm[0].s[sb][sblock], ath),\n                    Math.max(gfc.thm[1].s[sb][sblock], ath));\n                thmM = Math.max(gfc.thm[2].s[sb][sblock], ath);\n                thmS = Math.max(gfc.thm[3].s[sb][sblock], ath);\n\n                if (thmLR * msfix < thmM + thmS) {\n                    var f = thmLR * msfix / (thmM + thmS);\n                    thmM *= f;\n                    thmS *= f;\n                    assert(thmM + thmS > 0);\n                }\n                gfc.thm[2].s[sb][sblock] = Math.min(gfc.thm[2].s[sb][sblock],\n                    thmM);\n                gfc.thm[3].s[sb][sblock] = Math.min(gfc.thm[3].s[sb][sblock],\n                    thmS);\n            }\n        }\n    }\n\n    /**\n     * short block threshold calculation (part 2)\n     *\n     * partition band bo_s[sfb] is at the transition from scalefactor band sfb\n     * to the next one sfb+1; enn and thmm have to be split between them\n     */\n    function convert_partition2scalefac_s(gfc, eb, thr, chn, sblock) {\n        var sb, b;\n        var enn = 0.0;\n        var thmm = 0.0;\n        for (sb = b = 0; sb < Encoder.SBMAX_s; ++b, ++sb) {\n            var bo_s_sb = gfc.bo_s[sb];\n            var npart_s = gfc.npart_s;\n            var b_lim = bo_s_sb < npart_s ? bo_s_sb : npart_s;\n            while (b < b_lim) {\n                assert(eb[b] >= 0);\n                // iff failed, it may indicate some index error elsewhere\n                assert(thr[b] >= 0);\n                enn += eb[b];\n                thmm += thr[b];\n                b++;\n            }\n            gfc.en[chn].s[sb][sblock] = enn;\n            gfc.thm[chn].s[sb][sblock] = thmm;\n\n            if (b >= npart_s) {\n                ++sb;\n                break;\n            }\n            assert(eb[b] >= 0);\n            // iff failed, it may indicate some index error elsewhere\n            assert(thr[b] >= 0);\n            {\n                /* at transition sfb . sfb+1 */\n                var w_curr = gfc.PSY.bo_s_weight[sb];\n                var w_next = 1.0 - w_curr;\n                enn = w_curr * eb[b];\n                thmm = w_curr * thr[b];\n                gfc.en[chn].s[sb][sblock] += enn;\n                gfc.thm[chn].s[sb][sblock] += thmm;\n                enn = w_next * eb[b];\n                thmm = w_next * thr[b];\n            }\n        }\n        /* zero initialize the rest */\n        for (; sb < Encoder.SBMAX_s; ++sb) {\n            gfc.en[chn].s[sb][sblock] = 0;\n            gfc.thm[chn].s[sb][sblock] = 0;\n        }\n    }\n\n    /**\n     * longblock threshold calculation (part 2)\n     */\n    function convert_partition2scalefac_l(gfc, eb, thr, chn) {\n        var sb, b;\n        var enn = 0.0;\n        var thmm = 0.0;\n        for (sb = b = 0; sb < Encoder.SBMAX_l; ++b, ++sb) {\n            var bo_l_sb = gfc.bo_l[sb];\n            var npart_l = gfc.npart_l;\n            var b_lim = bo_l_sb < npart_l ? bo_l_sb : npart_l;\n            while (b < b_lim) {\n                assert(eb[b] >= 0);\n                // iff failed, it may indicate some index error elsewhere\n                assert(thr[b] >= 0);\n                enn += eb[b];\n                thmm += thr[b];\n                b++;\n            }\n            gfc.en[chn].l[sb] = enn;\n            gfc.thm[chn].l[sb] = thmm;\n\n            if (b >= npart_l) {\n                ++sb;\n                break;\n            }\n            assert(eb[b] >= 0);\n            assert(thr[b] >= 0);\n            {\n                /* at transition sfb . sfb+1 */\n                var w_curr = gfc.PSY.bo_l_weight[sb];\n                var w_next = 1.0 - w_curr;\n                enn = w_curr * eb[b];\n                thmm = w_curr * thr[b];\n                gfc.en[chn].l[sb] += enn;\n                gfc.thm[chn].l[sb] += thmm;\n                enn = w_next * eb[b];\n                thmm = w_next * thr[b];\n            }\n        }\n        /* zero initialize the rest */\n        for (; sb < Encoder.SBMAX_l; ++sb) {\n            gfc.en[chn].l[sb] = 0;\n            gfc.thm[chn].l[sb] = 0;\n        }\n    }\n\n    function compute_masking_s(gfp, fftenergy_s, eb, thr, chn, sblock) {\n        var gfc = gfp.internal_flags;\n        var j, b;\n\n        for (b = j = 0; b < gfc.npart_s; ++b) {\n            var ebb = 0, m = 0;\n            var n = gfc.numlines_s[b];\n            for (var i = 0; i < n; ++i, ++j) {\n                var el = fftenergy_s[sblock][j];\n                ebb += el;\n                if (m < el)\n                    m = el;\n            }\n            eb[b] = ebb;\n        }\n        assert(b == gfc.npart_s);\n        assert(j == 129);\n        for (j = b = 0; b < gfc.npart_s; b++) {\n            var kk = gfc.s3ind_s[b][0];\n            var ecb = gfc.s3_ss[j++] * eb[kk];\n            ++kk;\n            while (kk <= gfc.s3ind_s[b][1]) {\n                ecb += gfc.s3_ss[j] * eb[kk];\n                ++j;\n                ++kk;\n            }\n\n            { /* limit calculated threshold by previous granule */\n                var x = rpelev_s * gfc.nb_s1[chn][b];\n                thr[b] = Math.min(ecb, x);\n            }\n            if (gfc.blocktype_old[chn & 1] == Encoder.SHORT_TYPE) {\n                /* limit calculated threshold by even older granule */\n                var x = rpelev2_s * gfc.nb_s2[chn][b];\n                var y = thr[b];\n                thr[b] = Math.min(x, y);\n            }\n\n            gfc.nb_s2[chn][b] = gfc.nb_s1[chn][b];\n            gfc.nb_s1[chn][b] = ecb;\n            assert(thr[b] >= 0);\n        }\n        for (; b <= Encoder.CBANDS; ++b) {\n            eb[b] = 0;\n            thr[b] = 0;\n        }\n    }\n\n    function block_type_set(gfp, uselongblock, blocktype_d, blocktype) {\n        var gfc = gfp.internal_flags;\n\n        if (gfp.short_blocks == ShortBlock.short_block_coupled\n                /* force both channels to use the same block type */\n                /* this is necessary if the frame is to be encoded in ms_stereo. */\n                /* But even without ms_stereo, FhG does this */\n            && !(uselongblock[0] != 0 && uselongblock[1] != 0))\n            uselongblock[0] = uselongblock[1] = 0;\n\n        /*\n         * update the blocktype of the previous granule, since it depends on\n         * what happend in this granule\n         */\n        for (var chn = 0; chn < gfc.channels_out; chn++) {\n            blocktype[chn] = Encoder.NORM_TYPE;\n            /* disable short blocks */\n            if (gfp.short_blocks == ShortBlock.short_block_dispensed)\n                uselongblock[chn] = 1;\n            if (gfp.short_blocks == ShortBlock.short_block_forced)\n                uselongblock[chn] = 0;\n\n            if (uselongblock[chn] != 0) {\n                /* no attack : use long blocks */\n                assert(gfc.blocktype_old[chn] != Encoder.START_TYPE);\n                if (gfc.blocktype_old[chn] == Encoder.SHORT_TYPE)\n                    blocktype[chn] = Encoder.STOP_TYPE;\n            } else {\n                /* attack : use short blocks */\n                blocktype[chn] = Encoder.SHORT_TYPE;\n                if (gfc.blocktype_old[chn] == Encoder.NORM_TYPE) {\n                    gfc.blocktype_old[chn] = Encoder.START_TYPE;\n                }\n                if (gfc.blocktype_old[chn] == Encoder.STOP_TYPE)\n                    gfc.blocktype_old[chn] = Encoder.SHORT_TYPE;\n            }\n\n            blocktype_d[chn] = gfc.blocktype_old[chn];\n            // value returned to calling program\n            gfc.blocktype_old[chn] = blocktype[chn];\n            // save for next call to l3psy_anal\n        }\n    }\n\n    function NS_INTERP(x, y, r) {\n        /* was pow((x),(r))*pow((y),1-(r)) */\n        if (r >= 1.0) {\n            /* 99.7% of the time */\n            return x;\n        }\n        if (r <= 0.0)\n            return y;\n        if (y > 0.0) {\n            /* rest of the time */\n            return (Math.pow(x / y, r) * y);\n        }\n        /* never happens */\n        return 0.0;\n    }\n\n    /**\n     * these values are tuned only for 44.1kHz...\n     */\n    var regcoef_s = [11.8, 13.6, 17.2, 32, 46.5,\n        51.3, 57.5, 67.1, 71.5, 84.6, 97.6, 130,\n        /* 255.8 */\n    ];\n\n    function pecalc_s(mr, masking_lower) {\n        var pe_s = 1236.28 / 4;\n        for (var sb = 0; sb < Encoder.SBMAX_s - 1; sb++) {\n            for (var sblock = 0; sblock < 3; sblock++) {\n                var thm = mr.thm.s[sb][sblock];\n                assert(sb < regcoef_s.length);\n                if (thm > 0.0) {\n                    var x = thm * masking_lower;\n                    var en = mr.en.s[sb][sblock];\n                    if (en > x) {\n                        if (en > x * 1e10) {\n                            pe_s += regcoef_s[sb] * (10.0 * LOG10);\n                        } else {\n                            assert(x > 0);\n                            pe_s += regcoef_s[sb] * Util.FAST_LOG10(en / x);\n                        }\n                    }\n                }\n            }\n        }\n\n        return pe_s;\n    }\n\n    /**\n     * these values are tuned only for 44.1kHz...\n     */\n    var regcoef_l = [6.8, 5.8, 5.8, 6.4, 6.5, 9.9,\n        12.1, 14.4, 15, 18.9, 21.6, 26.9, 34.2, 40.2, 46.8, 56.5,\n        60.7, 73.9, 85.7, 93.4, 126.1,\n        /* 241.3 */\n    ];\n\n    function pecalc_l(mr, masking_lower) {\n        var pe_l = 1124.23 / 4;\n        for (var sb = 0; sb < Encoder.SBMAX_l - 1; sb++) {\n            var thm = mr.thm.l[sb];\n            assert(sb < regcoef_l.length);\n            if (thm > 0.0) {\n                var x = thm * masking_lower;\n                var en = mr.en.l[sb];\n                if (en > x) {\n                    if (en > x * 1e10) {\n                        pe_l += regcoef_l[sb] * (10.0 * LOG10);\n                    } else {\n                        assert(x > 0);\n                        pe_l += regcoef_l[sb] * Util.FAST_LOG10(en / x);\n                    }\n                }\n            }\n        }\n        return pe_l;\n    }\n\n    function calc_energy(gfc, fftenergy, eb, max, avg) {\n        var b, j;\n\n        for (b = j = 0; b < gfc.npart_l; ++b) {\n            var ebb = 0, m = 0;\n            var i;\n            for (i = 0; i < gfc.numlines_l[b]; ++i, ++j) {\n                var el = fftenergy[j];\n                assert(el >= 0);\n                ebb += el;\n                if (m < el)\n                    m = el;\n            }\n            eb[b] = ebb;\n            max[b] = m;\n            avg[b] = ebb * gfc.rnumlines_l[b];\n            assert(gfc.rnumlines_l[b] >= 0);\n            assert(ebb >= 0);\n            assert(eb[b] >= 0);\n            assert(max[b] >= 0);\n            assert(avg[b] >= 0);\n        }\n    }\n\n    function calc_mask_index_l(gfc, max, avg, mask_idx) {\n        var last_tab_entry = tab.length - 1;\n        var b = 0;\n        var a = avg[b] + avg[b + 1];\n        assert(a >= 0);\n        if (a > 0.0) {\n            var m = max[b];\n            if (m < max[b + 1])\n                m = max[b + 1];\n            assert((gfc.numlines_l[b] + gfc.numlines_l[b + 1] - 1) > 0);\n            a = 20.0 * (m * 2.0 - a)\n                / (a * (gfc.numlines_l[b] + gfc.numlines_l[b + 1] - 1));\n            var k = 0 | a;\n            if (k > last_tab_entry)\n                k = last_tab_entry;\n            mask_idx[b] = k;\n        } else {\n            mask_idx[b] = 0;\n        }\n\n        for (b = 1; b < gfc.npart_l - 1; b++) {\n            a = avg[b - 1] + avg[b] + avg[b + 1];\n            assert(a >= 0);\n            if (a > 0.0) {\n                var m = max[b - 1];\n                if (m < max[b])\n                    m = max[b];\n                if (m < max[b + 1])\n                    m = max[b + 1];\n                assert((gfc.numlines_l[b - 1] + gfc.numlines_l[b] + gfc.numlines_l[b + 1] - 1) > 0);\n                a = 20.0\n                    * (m * 3.0 - a)\n                    / (a * (gfc.numlines_l[b - 1] + gfc.numlines_l[b]\n                    + gfc.numlines_l[b + 1] - 1));\n                var k = 0 | a;\n                if (k > last_tab_entry)\n                    k = last_tab_entry;\n                mask_idx[b] = k;\n            } else {\n                mask_idx[b] = 0;\n            }\n        }\n        assert(b > 0);\n        assert(b == gfc.npart_l - 1);\n\n        a = avg[b - 1] + avg[b];\n        assert(a >= 0);\n        if (a > 0.0) {\n            var m = max[b - 1];\n            if (m < max[b])\n                m = max[b];\n            assert((gfc.numlines_l[b - 1] + gfc.numlines_l[b] - 1) > 0);\n            a = 20.0 * (m * 2.0 - a)\n                / (a * (gfc.numlines_l[b - 1] + gfc.numlines_l[b] - 1));\n            var k = 0 | a;\n            if (k > last_tab_entry)\n                k = last_tab_entry;\n            mask_idx[b] = k;\n        } else {\n            mask_idx[b] = 0;\n        }\n        assert(b == (gfc.npart_l - 1));\n    }\n\n    var fircoef = [\n        -8.65163e-18 * 2, -0.00851586 * 2, -6.74764e-18 * 2, 0.0209036 * 2,\n        -3.36639e-17 * 2, -0.0438162 * 2, -1.54175e-17 * 2, 0.0931738 * 2,\n        -5.52212e-17 * 2, -0.313819 * 2\n    ];\n\n    this.L3psycho_anal_ns = function (gfp, buffer, bufPos, gr_out, masking_ratio, masking_MS_ratio, percep_entropy, percep_MS_entropy, energy, blocktype_d) {\n        /*\n         * to get a good cache performance, one has to think about the sequence,\n         * in which the variables are used.\n         */\n        var gfc = gfp.internal_flags;\n\n        /* fft and energy calculation */\n        var wsamp_L = new_float_n([2, Encoder.BLKSIZE]);\n        var wsamp_S = new_float_n([2, 3, Encoder.BLKSIZE_s]);\n\n        /* convolution */\n        var eb_l = new_float(Encoder.CBANDS + 1);\n        var eb_s = new_float(Encoder.CBANDS + 1);\n        var thr = new_float(Encoder.CBANDS + 2);\n\n        /* block type */\n        var blocktype = new_int(2), uselongblock = new_int(2);\n\n        /* usual variables like loop indices, etc.. */\n        var numchn, chn;\n        var b, i, j, k;\n        var sb, sblock;\n\n        /* variables used for --nspsytune */\n        var ns_hpfsmpl = new_float_n([2, 576]);\n        var pcfact;\n        var mask_idx_l = new_int(Encoder.CBANDS + 2), mask_idx_s = new_int(Encoder.CBANDS + 2);\n\n        Arrays.fill(mask_idx_s, 0);\n\n        numchn = gfc.channels_out;\n        /* chn=2 and 3 = Mid and Side channels */\n        if (gfp.mode == MPEGMode.JOINT_STEREO)\n            numchn = 4;\n\n        if (gfp.VBR == VbrMode.vbr_off)\n            pcfact = gfc.ResvMax == 0 ? 0 : ( gfc.ResvSize)\n            / gfc.ResvMax * 0.5;\n        else if (gfp.VBR == VbrMode.vbr_rh || gfp.VBR == VbrMode.vbr_mtrh\n            || gfp.VBR == VbrMode.vbr_mt) {\n            pcfact = 0.6;\n        } else\n            pcfact = 1.0;\n\n        /**********************************************************************\n         * Apply HPF of fs/4 to the input signal. This is used for attack\n         * detection / handling.\n         **********************************************************************/\n        /* Don't copy the input buffer into a temporary buffer */\n        /* unroll the loop 2 times */\n        for (chn = 0; chn < gfc.channels_out; chn++) {\n            /* apply high pass filter of fs/4 */\n            var firbuf = buffer[chn];\n            var firbufPos = bufPos + 576 - 350 - NSFIRLEN + 192;\n            assert(fircoef.length == ((NSFIRLEN - 1) / 2));\n            for (i = 0; i < 576; i++) {\n                var sum1, sum2;\n                sum1 = firbuf[firbufPos + i + 10];\n                sum2 = 0.0;\n                for (j = 0; j < ((NSFIRLEN - 1) / 2) - 1; j += 2) {\n                    sum1 += fircoef[j]\n                        * (firbuf[firbufPos + i + j] + firbuf[firbufPos + i\n                        + NSFIRLEN - j]);\n                    sum2 += fircoef[j + 1]\n                        * (firbuf[firbufPos + i + j + 1] + firbuf[firbufPos\n                        + i + NSFIRLEN - j - 1]);\n                }\n                ns_hpfsmpl[chn][i] = sum1 + sum2;\n            }\n            masking_ratio[gr_out][chn].en.assign(gfc.en[chn]);\n            masking_ratio[gr_out][chn].thm.assign(gfc.thm[chn]);\n            if (numchn > 2) {\n                /* MS maskings */\n                /* percep_MS_entropy [chn-2] = gfc . pe [chn]; */\n                masking_MS_ratio[gr_out][chn].en.assign(gfc.en[chn + 2]);\n                masking_MS_ratio[gr_out][chn].thm.assign(gfc.thm[chn + 2]);\n            }\n        }\n\n        for (chn = 0; chn < numchn; chn++) {\n            var wsamp_l;\n            var wsamp_s;\n            var en_subshort = new_float(12);\n            var en_short = [0, 0, 0, 0];\n            var attack_intensity = new_float(12);\n            var ns_uselongblock = 1;\n            var attackThreshold;\n            var max = new_float(Encoder.CBANDS), avg = new_float(Encoder.CBANDS);\n            var ns_attacks = [0, 0, 0, 0];\n            var fftenergy = new_float(Encoder.HBLKSIZE);\n            var fftenergy_s = new_float_n([3, Encoder.HBLKSIZE_s]);\n\n            /*\n             * rh 20040301: the following loops do access one off the limits so\n             * I increase the array dimensions by one and initialize the\n             * accessed values to zero\n             */\n            assert(gfc.npart_s <= Encoder.CBANDS);\n            assert(gfc.npart_l <= Encoder.CBANDS);\n\n            /***************************************************************\n             * determine the block type (window type)\n             ***************************************************************/\n            /* calculate energies of each sub-shortblocks */\n            for (i = 0; i < 3; i++) {\n                en_subshort[i] = gfc.nsPsy.last_en_subshort[chn][i + 6];\n                assert(gfc.nsPsy.last_en_subshort[chn][i + 4] > 0);\n                attack_intensity[i] = en_subshort[i]\n                    / gfc.nsPsy.last_en_subshort[chn][i + 4];\n                en_short[0] += en_subshort[i];\n            }\n\n            if (chn == 2) {\n                for (i = 0; i < 576; i++) {\n                    var l, r;\n                    l = ns_hpfsmpl[0][i];\n                    r = ns_hpfsmpl[1][i];\n                    ns_hpfsmpl[0][i] = l + r;\n                    ns_hpfsmpl[1][i] = l - r;\n                }\n            }\n            {\n                var pf = ns_hpfsmpl[chn & 1];\n                var pfPos = 0;\n                for (i = 0; i < 9; i++) {\n                    var pfe = pfPos + 576 / 9;\n                    var p = 1.;\n                    for (; pfPos < pfe; pfPos++)\n                        if (p < Math.abs(pf[pfPos]))\n                            p = Math.abs(pf[pfPos]);\n\n                    gfc.nsPsy.last_en_subshort[chn][i] = en_subshort[i + 3] = p;\n                    en_short[1 + i / 3] += p;\n                    if (p > en_subshort[i + 3 - 2]) {\n                        assert(en_subshort[i + 3 - 2] > 0);\n                        p = p / en_subshort[i + 3 - 2];\n                    } else if (en_subshort[i + 3 - 2] > p * 10.0) {\n                        assert(p > 0);\n                        p = en_subshort[i + 3 - 2] / (p * 10.0);\n                    } else\n                        p = 0.0;\n                    attack_intensity[i + 3] = p;\n                }\n            }\n\n            if (gfp.analysis) {\n                var x = attack_intensity[0];\n                for (i = 1; i < 12; i++)\n                    if (x < attack_intensity[i])\n                        x = attack_intensity[i];\n                gfc.pinfo.ers[gr_out][chn] = gfc.pinfo.ers_save[chn];\n                gfc.pinfo.ers_save[chn] = x;\n            }\n\n            /* compare energies between sub-shortblocks */\n            attackThreshold = (chn == 3) ? gfc.nsPsy.attackthre_s\n                : gfc.nsPsy.attackthre;\n            for (i = 0; i < 12; i++)\n                if (0 == ns_attacks[i / 3]\n                    && attack_intensity[i] > attackThreshold)\n                    ns_attacks[i / 3] = (i % 3) + 1;\n\n            /*\n             * should have energy change between short blocks, in order to avoid\n             * periodic signals\n             */\n            for (i = 1; i < 4; i++) {\n                var ratio;\n                if (en_short[i - 1] > en_short[i]) {\n                    assert(en_short[i] > 0);\n                    ratio = en_short[i - 1] / en_short[i];\n                } else {\n                    assert(en_short[i - 1] > 0);\n                    ratio = en_short[i] / en_short[i - 1];\n                }\n                if (ratio < 1.7) {\n                    ns_attacks[i] = 0;\n                    if (i == 1)\n                        ns_attacks[0] = 0;\n                }\n            }\n\n            if (ns_attacks[0] != 0 && gfc.nsPsy.lastAttacks[chn] != 0)\n                ns_attacks[0] = 0;\n\n            if (gfc.nsPsy.lastAttacks[chn] == 3\n                || (ns_attacks[0] + ns_attacks[1] + ns_attacks[2] + ns_attacks[3]) != 0) {\n                ns_uselongblock = 0;\n\n                if (ns_attacks[1] != 0 && ns_attacks[0] != 0)\n                    ns_attacks[1] = 0;\n                if (ns_attacks[2] != 0 && ns_attacks[1] != 0)\n                    ns_attacks[2] = 0;\n                if (ns_attacks[3] != 0 && ns_attacks[2] != 0)\n                    ns_attacks[3] = 0;\n            }\n\n            if (chn < 2) {\n                uselongblock[chn] = ns_uselongblock;\n            } else {\n                if (ns_uselongblock == 0) {\n                    uselongblock[0] = uselongblock[1] = 0;\n                }\n            }\n\n            /*\n             * there is a one granule delay. Copy maskings computed last call\n             * into masking_ratio to return to calling program.\n             */\n            energy[chn] = gfc.tot_ener[chn];\n\n            /*********************************************************************\n             * compute FFTs\n             *********************************************************************/\n            wsamp_s = wsamp_S;\n            wsamp_l = wsamp_L;\n            compute_ffts(gfp, fftenergy, fftenergy_s, wsamp_l, (chn & 1),\n                wsamp_s, (chn & 1), gr_out, chn, buffer, bufPos);\n\n            /*********************************************************************\n             * Calculate the energy and the tonality of each partition.\n             *********************************************************************/\n            calc_energy(gfc, fftenergy, eb_l, max, avg);\n            calc_mask_index_l(gfc, max, avg, mask_idx_l);\n            /* compute masking thresholds for short blocks */\n            for (sblock = 0; sblock < 3; sblock++) {\n                var enn, thmm;\n                compute_masking_s(gfp, fftenergy_s, eb_s, thr, chn, sblock);\n                convert_partition2scalefac_s(gfc, eb_s, thr, chn, sblock);\n                /**** short block pre-echo control ****/\n                for (sb = 0; sb < Encoder.SBMAX_s; sb++) {\n                    thmm = gfc.thm[chn].s[sb][sblock];\n\n                    thmm *= NS_PREECHO_ATT0;\n                    if (ns_attacks[sblock] >= 2 || ns_attacks[sblock + 1] == 1) {\n                        var idx = (sblock != 0) ? sblock - 1 : 2;\n                        var p = NS_INTERP(gfc.thm[chn].s[sb][idx], thmm,\n                            NS_PREECHO_ATT1 * pcfact);\n                        thmm = Math.min(thmm, p);\n                    }\n\n                    if (ns_attacks[sblock] == 1) {\n                        var idx = (sblock != 0) ? sblock - 1 : 2;\n                        var p = NS_INTERP(gfc.thm[chn].s[sb][idx], thmm,\n                            NS_PREECHO_ATT2 * pcfact);\n                        thmm = Math.min(thmm, p);\n                    } else if ((sblock != 0 && ns_attacks[sblock - 1] == 3)\n                        || (sblock == 0 && gfc.nsPsy.lastAttacks[chn] == 3)) {\n                        var idx = (sblock != 2) ? sblock + 1 : 0;\n                        var p = NS_INTERP(gfc.thm[chn].s[sb][idx], thmm,\n                            NS_PREECHO_ATT2 * pcfact);\n                        thmm = Math.min(thmm, p);\n                    }\n\n                    /* pulse like signal detection for fatboy.wav and so on */\n                    enn = en_subshort[sblock * 3 + 3]\n                        + en_subshort[sblock * 3 + 4]\n                        + en_subshort[sblock * 3 + 5];\n                    if (en_subshort[sblock * 3 + 5] * 6 < enn) {\n                        thmm *= 0.5;\n                        if (en_subshort[sblock * 3 + 4] * 6 < enn)\n                            thmm *= 0.5;\n                    }\n\n                    gfc.thm[chn].s[sb][sblock] = thmm;\n                }\n            }\n            gfc.nsPsy.lastAttacks[chn] = ns_attacks[2];\n\n            /*********************************************************************\n             * convolve the partitioned energy and unpredictability with the\n             * spreading function, s3_l[b][k]\n             ********************************************************************/\n            k = 0;\n            {\n                for (b = 0; b < gfc.npart_l; b++) {\n                    /*\n                     * convolve the partitioned energy with the spreading\n                     * function\n                     */\n                    var kk = gfc.s3ind[b][0];\n                    var eb2 = eb_l[kk] * tab[mask_idx_l[kk]];\n                    var ecb = gfc.s3_ll[k++] * eb2;\n                    while (++kk <= gfc.s3ind[b][1]) {\n                        eb2 = eb_l[kk] * tab[mask_idx_l[kk]];\n                        ecb = mask_add(ecb, gfc.s3_ll[k++] * eb2, kk, kk - b,\n                            gfc, 0);\n                    }\n                    ecb *= 0.158489319246111;\n                    /* pow(10,-0.8) */\n\n                    /**** long block pre-echo control ****/\n                    /**\n                     * <PRE>\n                     * dont use long block pre-echo control if previous granule was\n                     * a short block.  This is to avoid the situation:\n                     * frame0:  quiet (very low masking)\n                     * frame1:  surge  (triggers short blocks)\n                     * frame2:  regular frame.  looks like pre-echo when compared to\n                     *          frame0, but all pre-echo was in frame1.\n                     * </PRE>\n                     */\n                    /*\n                     * chn=0,1 L and R channels\n                     *\n                     * chn=2,3 S and M channels.\n                     */\n\n                    if (gfc.blocktype_old[chn & 1] == Encoder.SHORT_TYPE)\n                        thr[b] = ecb;\n                    else\n                        thr[b] = NS_INTERP(\n                            Math.min(ecb, Math.min(rpelev\n                                * gfc.nb_1[chn][b], rpelev2\n                                * gfc.nb_2[chn][b])), ecb, pcfact);\n\n                    gfc.nb_2[chn][b] = gfc.nb_1[chn][b];\n                    gfc.nb_1[chn][b] = ecb;\n                }\n            }\n            for (; b <= Encoder.CBANDS; ++b) {\n                eb_l[b] = 0;\n                thr[b] = 0;\n            }\n            /* compute masking thresholds for long blocks */\n            convert_partition2scalefac_l(gfc, eb_l, thr, chn);\n        }\n        /* end loop over chn */\n\n        if (gfp.mode == MPEGMode.STEREO || gfp.mode == MPEGMode.JOINT_STEREO) {\n            if (gfp.interChRatio > 0.0) {\n                calc_interchannel_masking(gfp, gfp.interChRatio);\n            }\n        }\n\n        if (gfp.mode == MPEGMode.JOINT_STEREO) {\n            var msfix;\n            msfix1(gfc);\n            msfix = gfp.msfix;\n            if (Math.abs(msfix) > 0.0)\n                ns_msfix(gfc, msfix, gfp.ATHlower * gfc.ATH.adjust);\n        }\n\n        /***************************************************************\n         * determine final block type\n         ***************************************************************/\n        block_type_set(gfp, uselongblock, blocktype_d, blocktype);\n\n        /*********************************************************************\n         * compute the value of PE to return ... no delay and advance\n         *********************************************************************/\n        for (chn = 0; chn < numchn; chn++) {\n            var ppe;\n            var ppePos = 0;\n            var type;\n            var mr;\n\n            if (chn > 1) {\n                ppe = percep_MS_entropy;\n                ppePos = -2;\n                type = Encoder.NORM_TYPE;\n                if (blocktype_d[0] == Encoder.SHORT_TYPE\n                    || blocktype_d[1] == Encoder.SHORT_TYPE)\n                    type = Encoder.SHORT_TYPE;\n                mr = masking_MS_ratio[gr_out][chn - 2];\n            } else {\n                ppe = percep_entropy;\n                ppePos = 0;\n                type = blocktype_d[chn];\n                mr = masking_ratio[gr_out][chn];\n            }\n\n            if (type == Encoder.SHORT_TYPE)\n                ppe[ppePos + chn] = pecalc_s(mr, gfc.masking_lower);\n            else\n                ppe[ppePos + chn] = pecalc_l(mr, gfc.masking_lower);\n\n            if (gfp.analysis)\n                gfc.pinfo.pe[gr_out][chn] = ppe[ppePos + chn];\n\n        }\n        return 0;\n    }\n\n    function vbrpsy_compute_fft_l(gfp, buffer, bufPos, chn, gr_out, fftenergy, wsamp_l, wsamp_lPos) {\n        var gfc = gfp.internal_flags;\n        if (chn < 2) {\n            fft.fft_long(gfc, wsamp_l[wsamp_lPos], chn, buffer, bufPos);\n        } else if (chn == 2) {\n            /* FFT data for mid and side channel is derived from L & R */\n            for (var j = Encoder.BLKSIZE - 1; j >= 0; --j) {\n                var l = wsamp_l[wsamp_lPos + 0][j];\n                var r = wsamp_l[wsamp_lPos + 1][j];\n                wsamp_l[wsamp_lPos + 0][j] = (l + r) * Util.SQRT2 * 0.5;\n                wsamp_l[wsamp_lPos + 1][j] = (l - r) * Util.SQRT2 * 0.5;\n            }\n        }\n\n        /*********************************************************************\n         * compute energies\n         *********************************************************************/\n        fftenergy[0] = NON_LINEAR_SCALE_ENERGY(wsamp_l[wsamp_lPos + 0][0]);\n        fftenergy[0] *= fftenergy[0];\n\n        for (var j = Encoder.BLKSIZE / 2 - 1; j >= 0; --j) {\n            var re = wsamp_l[wsamp_lPos + 0][Encoder.BLKSIZE / 2 - j];\n            var im = wsamp_l[wsamp_lPos + 0][Encoder.BLKSIZE / 2 + j];\n            fftenergy[Encoder.BLKSIZE / 2 - j] = NON_LINEAR_SCALE_ENERGY((re\n                * re + im * im) * 0.5);\n        }\n        /* total energy */\n        {\n            var totalenergy = 0.0;\n            for (var j = 11; j < Encoder.HBLKSIZE; j++)\n                totalenergy += fftenergy[j];\n\n            gfc.tot_ener[chn] = totalenergy;\n        }\n\n        if (gfp.analysis) {\n            for (var j = 0; j < Encoder.HBLKSIZE; j++) {\n                gfc.pinfo.energy[gr_out][chn][j] = gfc.pinfo.energy_save[chn][j];\n                gfc.pinfo.energy_save[chn][j] = fftenergy[j];\n            }\n            gfc.pinfo.pe[gr_out][chn] = gfc.pe[chn];\n        }\n    }\n\n    function vbrpsy_compute_fft_s(gfp, buffer, bufPos, chn, sblock, fftenergy_s, wsamp_s, wsamp_sPos) {\n        var gfc = gfp.internal_flags;\n\n        if (sblock == 0 && chn < 2) {\n            fft.fft_short(gfc, wsamp_s[wsamp_sPos], chn, buffer, bufPos);\n        }\n        if (chn == 2) {\n            /* FFT data for mid and side channel is derived from L & R */\n            for (var j = Encoder.BLKSIZE_s - 1; j >= 0; --j) {\n                var l = wsamp_s[wsamp_sPos + 0][sblock][j];\n                var r = wsamp_s[wsamp_sPos + 1][sblock][j];\n                wsamp_s[wsamp_sPos + 0][sblock][j] = (l + r) * Util.SQRT2 * 0.5;\n                wsamp_s[wsamp_sPos + 1][sblock][j] = (l - r) * Util.SQRT2 * 0.5;\n            }\n        }\n\n        /*********************************************************************\n         * compute energies\n         *********************************************************************/\n        fftenergy_s[sblock][0] = wsamp_s[wsamp_sPos + 0][sblock][0];\n        fftenergy_s[sblock][0] *= fftenergy_s[sblock][0];\n        for (var j = Encoder.BLKSIZE_s / 2 - 1; j >= 0; --j) {\n            var re = wsamp_s[wsamp_sPos + 0][sblock][Encoder.BLKSIZE_s / 2 - j];\n            var im = wsamp_s[wsamp_sPos + 0][sblock][Encoder.BLKSIZE_s / 2 + j];\n            fftenergy_s[sblock][Encoder.BLKSIZE_s / 2 - j] = NON_LINEAR_SCALE_ENERGY((re\n                * re + im * im) * 0.5);\n        }\n    }\n\n    /**\n     * compute loudness approximation (used for ATH auto-level adjustment)\n     */\n    function vbrpsy_compute_loudness_approximation_l(gfp, gr_out, chn, fftenergy) {\n        var gfc = gfp.internal_flags;\n        if (gfp.athaa_loudapprox == 2 && chn < 2) {\n            // no loudness for mid/side ch\n            gfc.loudness_sq[gr_out][chn] = gfc.loudness_sq_save[chn];\n            gfc.loudness_sq_save[chn] = psycho_loudness_approx(fftenergy, gfc);\n        }\n    }\n\n    var fircoef_ = [-8.65163e-18 * 2,\n        -0.00851586 * 2, -6.74764e-18 * 2, 0.0209036 * 2,\n        -3.36639e-17 * 2, -0.0438162 * 2, -1.54175e-17 * 2,\n        0.0931738 * 2, -5.52212e-17 * 2, -0.313819 * 2];\n\n    /**\n     * Apply HPF of fs/4 to the input signal. This is used for attack detection\n     * / handling.\n     */\n    function vbrpsy_attack_detection(gfp, buffer, bufPos, gr_out, masking_ratio, masking_MS_ratio, energy, sub_short_factor, ns_attacks, uselongblock) {\n        var ns_hpfsmpl = new_float_n([2, 576]);\n        var gfc = gfp.internal_flags;\n        var n_chn_out = gfc.channels_out;\n        /* chn=2 and 3 = Mid and Side channels */\n        var n_chn_psy = (gfp.mode == MPEGMode.JOINT_STEREO) ? 4 : n_chn_out;\n        /* Don't copy the input buffer into a temporary buffer */\n        /* unroll the loop 2 times */\n        for (var chn = 0; chn < n_chn_out; chn++) {\n            /* apply high pass filter of fs/4 */\n            firbuf = buffer[chn];\n            var firbufPos = bufPos + 576 - 350 - NSFIRLEN + 192;\n            assert(fircoef_.length == ((NSFIRLEN - 1) / 2));\n            for (var i = 0; i < 576; i++) {\n                var sum1, sum2;\n                sum1 = firbuf[firbufPos + i + 10];\n                sum2 = 0.0;\n                for (var j = 0; j < ((NSFIRLEN - 1) / 2) - 1; j += 2) {\n                    sum1 += fircoef_[j]\n                        * (firbuf[firbufPos + i + j] + firbuf[firbufPos + i\n                        + NSFIRLEN - j]);\n                    sum2 += fircoef_[j + 1]\n                        * (firbuf[firbufPos + i + j + 1] + firbuf[firbufPos\n                        + i + NSFIRLEN - j - 1]);\n                }\n                ns_hpfsmpl[chn][i] = sum1 + sum2;\n            }\n            masking_ratio[gr_out][chn].en.assign(gfc.en[chn]);\n            masking_ratio[gr_out][chn].thm.assign(gfc.thm[chn]);\n            if (n_chn_psy > 2) {\n                /* MS maskings */\n                /* percep_MS_entropy [chn-2] = gfc . pe [chn]; */\n                masking_MS_ratio[gr_out][chn].en.assign(gfc.en[chn + 2]);\n                masking_MS_ratio[gr_out][chn].thm.assign(gfc.thm[chn + 2]);\n            }\n        }\n        for (var chn = 0; chn < n_chn_psy; chn++) {\n            var attack_intensity = new_float(12);\n            var en_subshort = new_float(12);\n            var en_short = [0, 0, 0, 0];\n            var pf = ns_hpfsmpl[chn & 1];\n            var pfPos = 0;\n            var attackThreshold = (chn == 3) ? gfc.nsPsy.attackthre_s\n                : gfc.nsPsy.attackthre;\n            var ns_uselongblock = 1;\n\n            if (chn == 2) {\n                for (var i = 0, j = 576; j > 0; ++i, --j) {\n                    var l = ns_hpfsmpl[0][i];\n                    var r = ns_hpfsmpl[1][i];\n                    ns_hpfsmpl[0][i] = l + r;\n                    ns_hpfsmpl[1][i] = l - r;\n                }\n            }\n            /***************************************************************\n             * determine the block type (window type)\n             ***************************************************************/\n            /* calculate energies of each sub-shortblocks */\n            for (var i = 0; i < 3; i++) {\n                en_subshort[i] = gfc.nsPsy.last_en_subshort[chn][i + 6];\n                assert(gfc.nsPsy.last_en_subshort[chn][i + 4] > 0);\n                attack_intensity[i] = en_subshort[i]\n                    / gfc.nsPsy.last_en_subshort[chn][i + 4];\n                en_short[0] += en_subshort[i];\n            }\n\n            for (var i = 0; i < 9; i++) {\n                var pfe = pfPos + 576 / 9;\n                var p = 1.;\n                for (; pfPos < pfe; pfPos++)\n                    if (p < Math.abs(pf[pfPos]))\n                        p = Math.abs(pf[pfPos]);\n\n                gfc.nsPsy.last_en_subshort[chn][i] = en_subshort[i + 3] = p;\n                en_short[1 + i / 3] += p;\n                if (p > en_subshort[i + 3 - 2]) {\n                    assert(en_subshort[i + 3 - 2] > 0);\n                    p = p / en_subshort[i + 3 - 2];\n                } else if (en_subshort[i + 3 - 2] > p * 10.0) {\n                    assert(p > 0);\n                    p = en_subshort[i + 3 - 2] / (p * 10.0);\n                } else {\n                    p = 0.0;\n                }\n                attack_intensity[i + 3] = p;\n            }\n            /* pulse like signal detection for fatboy.wav and so on */\n            for (var i = 0; i < 3; ++i) {\n                var enn = en_subshort[i * 3 + 3]\n                    + en_subshort[i * 3 + 4] + en_subshort[i * 3 + 5];\n                var factor = 1.;\n                if (en_subshort[i * 3 + 5] * 6 < enn) {\n                    factor *= 0.5;\n                    if (en_subshort[i * 3 + 4] * 6 < enn) {\n                        factor *= 0.5;\n                    }\n                }\n                sub_short_factor[chn][i] = factor;\n            }\n\n            if (gfp.analysis) {\n                var x = attack_intensity[0];\n                for (var i = 1; i < 12; i++) {\n                    if (x < attack_intensity[i]) {\n                        x = attack_intensity[i];\n                    }\n                }\n                gfc.pinfo.ers[gr_out][chn] = gfc.pinfo.ers_save[chn];\n                gfc.pinfo.ers_save[chn] = x;\n            }\n\n            /* compare energies between sub-shortblocks */\n            for (var i = 0; i < 12; i++) {\n                if (0 == ns_attacks[chn][i / 3]\n                    && attack_intensity[i] > attackThreshold) {\n                    ns_attacks[chn][i / 3] = (i % 3) + 1;\n                }\n            }\n\n            /*\n             * should have energy change between short blocks, in order to avoid\n             * periodic signals\n             */\n            /* Good samples to show the effect are Trumpet test songs */\n            /*\n             * GB: tuned (1) to avoid too many short blocks for test sample\n             * TRUMPET\n             */\n            /*\n             * RH: tuned (2) to let enough short blocks through for test sample\n             * FSOL and SNAPS\n             */\n            for (var i = 1; i < 4; i++) {\n                var u = en_short[i - 1];\n                var v = en_short[i];\n                var m = Math.max(u, v);\n                if (m < 40000) { /* (2) */\n                    if (u < 1.7 * v && v < 1.7 * u) { /* (1) */\n                        if (i == 1 && ns_attacks[chn][0] <= ns_attacks[chn][i]) {\n                            ns_attacks[chn][0] = 0;\n                        }\n                        ns_attacks[chn][i] = 0;\n                    }\n                }\n            }\n\n            if (ns_attacks[chn][0] <= gfc.nsPsy.lastAttacks[chn]) {\n                ns_attacks[chn][0] = 0;\n            }\n\n            if (gfc.nsPsy.lastAttacks[chn] == 3\n                || (ns_attacks[chn][0] + ns_attacks[chn][1]\n                + ns_attacks[chn][2] + ns_attacks[chn][3]) != 0) {\n                ns_uselongblock = 0;\n\n                if (ns_attacks[chn][1] != 0 && ns_attacks[chn][0] != 0) {\n                    ns_attacks[chn][1] = 0;\n                }\n                if (ns_attacks[chn][2] != 0 && ns_attacks[chn][1] != 0) {\n                    ns_attacks[chn][2] = 0;\n                }\n                if (ns_attacks[chn][3] != 0 && ns_attacks[chn][2] != 0) {\n                    ns_attacks[chn][3] = 0;\n                }\n            }\n            if (chn < 2) {\n                uselongblock[chn] = ns_uselongblock;\n            } else {\n                if (ns_uselongblock == 0) {\n                    uselongblock[0] = uselongblock[1] = 0;\n                }\n            }\n\n            /*\n             * there is a one granule delay. Copy maskings computed last call\n             * into masking_ratio to return to calling program.\n             */\n            energy[chn] = gfc.tot_ener[chn];\n        }\n    }\n\n    function vbrpsy_skip_masking_s(gfc, chn, sblock) {\n        if (sblock == 0) {\n            for (var b = 0; b < gfc.npart_s; b++) {\n                gfc.nb_s2[chn][b] = gfc.nb_s1[chn][b];\n                gfc.nb_s1[chn][b] = 0;\n            }\n        }\n    }\n\n    function vbrpsy_skip_masking_l(gfc, chn) {\n        for (var b = 0; b < gfc.npart_l; b++) {\n            gfc.nb_2[chn][b] = gfc.nb_1[chn][b];\n            gfc.nb_1[chn][b] = 0;\n        }\n    }\n\n    function psyvbr_calc_mask_index_s(gfc, max, avg, mask_idx) {\n        var last_tab_entry = tab.length - 1;\n        var b = 0;\n        var a = avg[b] + avg[b + 1];\n        assert(a >= 0);\n        if (a > 0.0) {\n            var m = max[b];\n            if (m < max[b + 1])\n                m = max[b + 1];\n            assert((gfc.numlines_s[b] + gfc.numlines_s[b + 1] - 1) > 0);\n            a = 20.0 * (m * 2.0 - a)\n                / (a * (gfc.numlines_s[b] + gfc.numlines_s[b + 1] - 1));\n            var k = 0 | a;\n            if (k > last_tab_entry)\n                k = last_tab_entry;\n            mask_idx[b] = k;\n        } else {\n            mask_idx[b] = 0;\n        }\n\n        for (b = 1; b < gfc.npart_s - 1; b++) {\n            a = avg[b - 1] + avg[b] + avg[b + 1];\n            assert(b + 1 < gfc.npart_s);\n            assert(a >= 0);\n            if (a > 0.0) {\n                var m = max[b - 1];\n                if (m < max[b])\n                    m = max[b];\n                if (m < max[b + 1])\n                    m = max[b + 1];\n                assert((gfc.numlines_s[b - 1] + gfc.numlines_s[b] + gfc.numlines_s[b + 1] - 1) > 0);\n                a = 20.0\n                    * (m * 3.0 - a)\n                    / (a * (gfc.numlines_s[b - 1] + gfc.numlines_s[b]\n                    + gfc.numlines_s[b + 1] - 1));\n                var k = 0 | a;\n                if (k > last_tab_entry)\n                    k = last_tab_entry;\n                mask_idx[b] = k;\n            } else {\n                mask_idx[b] = 0;\n            }\n        }\n        assert(b > 0);\n        assert(b == gfc.npart_s - 1);\n\n        a = avg[b - 1] + avg[b];\n        assert(a >= 0);\n        if (a > 0.0) {\n            var m = max[b - 1];\n            if (m < max[b])\n                m = max[b];\n            assert((gfc.numlines_s[b - 1] + gfc.numlines_s[b] - 1) > 0);\n            a = 20.0 * (m * 2.0 - a)\n                / (a * (gfc.numlines_s[b - 1] + gfc.numlines_s[b] - 1));\n            var k = 0 | a;\n            if (k > last_tab_entry)\n                k = last_tab_entry;\n            mask_idx[b] = k;\n        } else {\n            mask_idx[b] = 0;\n        }\n        assert(b == (gfc.npart_s - 1));\n    }\n\n    function vbrpsy_compute_masking_s(gfp, fftenergy_s, eb, thr, chn, sblock) {\n        var gfc = gfp.internal_flags;\n        var max = new float[Encoder.CBANDS], avg = new_float(Encoder.CBANDS);\n        var i, j, b;\n        var mask_idx_s = new int[Encoder.CBANDS];\n\n        for (b = j = 0; b < gfc.npart_s; ++b) {\n            var ebb = 0, m = 0;\n            var n = gfc.numlines_s[b];\n            for (i = 0; i < n; ++i, ++j) {\n                var el = fftenergy_s[sblock][j];\n                ebb += el;\n                if (m < el)\n                    m = el;\n            }\n            eb[b] = ebb;\n            assert(ebb >= 0);\n            max[b] = m;\n            assert(n > 0);\n            avg[b] = ebb / n;\n            assert(avg[b] >= 0);\n        }\n        assert(b == gfc.npart_s);\n        assert(j == 129);\n        for (; b < Encoder.CBANDS; ++b) {\n            max[b] = 0;\n            avg[b] = 0;\n        }\n        psyvbr_calc_mask_index_s(gfc, max, avg, mask_idx_s);\n        for (j = b = 0; b < gfc.npart_s; b++) {\n            var kk = gfc.s3ind_s[b][0];\n            var last = gfc.s3ind_s[b][1];\n            var dd, dd_n;\n            var x, ecb, avg_mask;\n            dd = mask_idx_s[kk];\n            dd_n = 1;\n            ecb = gfc.s3_ss[j] * eb[kk] * tab[mask_idx_s[kk]];\n            ++j;\n            ++kk;\n            while (kk <= last) {\n                dd += mask_idx_s[kk];\n                dd_n += 1;\n                x = gfc.s3_ss[j] * eb[kk] * tab[mask_idx_s[kk]];\n                ecb = vbrpsy_mask_add(ecb, x, kk - b);\n                ++j;\n                ++kk;\n            }\n            dd = (1 + 2 * dd) / (2 * dd_n);\n            avg_mask = tab[dd] * 0.5;\n            ecb *= avg_mask;\n            thr[b] = ecb;\n            gfc.nb_s2[chn][b] = gfc.nb_s1[chn][b];\n            gfc.nb_s1[chn][b] = ecb;\n            {\n                /*\n                 * if THR exceeds EB, the quantization routines will take the\n                 * difference from other bands. in case of strong tonal samples\n                 * (tonaltest.wav) this leads to heavy distortions. that's why\n                 * we limit THR here.\n                 */\n                x = max[b];\n                x *= gfc.minval_s[b];\n                x *= avg_mask;\n                if (thr[b] > x) {\n                    thr[b] = x;\n                }\n            }\n            if (gfc.masking_lower > 1) {\n                thr[b] *= gfc.masking_lower;\n            }\n            if (thr[b] > eb[b]) {\n                thr[b] = eb[b];\n            }\n            if (gfc.masking_lower < 1) {\n                thr[b] *= gfc.masking_lower;\n            }\n\n            assert(thr[b] >= 0);\n        }\n        for (; b < Encoder.CBANDS; ++b) {\n            eb[b] = 0;\n            thr[b] = 0;\n        }\n    }\n\n    function vbrpsy_compute_masking_l(gfc, fftenergy, eb_l, thr, chn) {\n        var max = new_float(Encoder.CBANDS), avg = new_float(Encoder.CBANDS);\n        var mask_idx_l = new_int(Encoder.CBANDS + 2);\n        var b;\n\n        /*********************************************************************\n         * Calculate the energy and the tonality of each partition.\n         *********************************************************************/\n        calc_energy(gfc, fftenergy, eb_l, max, avg);\n        calc_mask_index_l(gfc, max, avg, mask_idx_l);\n\n        /*********************************************************************\n         * convolve the partitioned energy and unpredictability with the\n         * spreading function, s3_l[b][k]\n         ********************************************************************/\n        var k = 0;\n        for (b = 0; b < gfc.npart_l; b++) {\n            var x, ecb, avg_mask, t;\n            /* convolve the partitioned energy with the spreading function */\n            var kk = gfc.s3ind[b][0];\n            var last = gfc.s3ind[b][1];\n            var dd = 0, dd_n = 0;\n            dd = mask_idx_l[kk];\n            dd_n += 1;\n            ecb = gfc.s3_ll[k] * eb_l[kk] * tab[mask_idx_l[kk]];\n            ++k;\n            ++kk;\n            while (kk <= last) {\n                dd += mask_idx_l[kk];\n                dd_n += 1;\n                x = gfc.s3_ll[k] * eb_l[kk] * tab[mask_idx_l[kk]];\n                t = vbrpsy_mask_add(ecb, x, kk - b);\n                ecb = t;\n                ++k;\n                ++kk;\n            }\n            dd = (1 + 2 * dd) / (2 * dd_n);\n            avg_mask = tab[dd] * 0.5;\n            ecb *= avg_mask;\n\n            /**** long block pre-echo control ****/\n            /**\n             * <PRE>\n             * dont use long block pre-echo control if previous granule was\n             * a short block.  This is to avoid the situation:\n             * frame0:  quiet (very low masking)\n             * frame1:  surge  (triggers short blocks)\n             * frame2:  regular frame.  looks like pre-echo when compared to\n             *          frame0, but all pre-echo was in frame1.\n             * </PRE>\n             */\n            /*\n             * chn=0,1 L and R channels chn=2,3 S and M channels.\n             */\n            if (gfc.blocktype_old[chn & 0x01] == Encoder.SHORT_TYPE) {\n                var ecb_limit = rpelev * gfc.nb_1[chn][b];\n                if (ecb_limit > 0) {\n                    thr[b] = Math.min(ecb, ecb_limit);\n                } else {\n                    /**\n                     * <PRE>\n                     * Robert 071209:\n                     * Because we don't calculate long block psy when we know a granule\n                     * should be of short blocks, we don't have any clue how the granule\n                     * before would have looked like as a long block. So we have to guess\n                     * a little bit for this END_TYPE block.\n                     * Most of the time we get away with this sloppyness. (fingers crossed :)\n                     * The speed increase is worth it.\n                     * </PRE>\n                     */\n                    thr[b] = Math.min(ecb, eb_l[b] * NS_PREECHO_ATT2);\n                }\n            } else {\n                var ecb_limit_2 = rpelev2 * gfc.nb_2[chn][b];\n                var ecb_limit_1 = rpelev * gfc.nb_1[chn][b];\n                var ecb_limit;\n                if (ecb_limit_2 <= 0) {\n                    ecb_limit_2 = ecb;\n                }\n                if (ecb_limit_1 <= 0) {\n                    ecb_limit_1 = ecb;\n                }\n                if (gfc.blocktype_old[chn & 0x01] == Encoder.NORM_TYPE) {\n                    ecb_limit = Math.min(ecb_limit_1, ecb_limit_2);\n                } else {\n                    ecb_limit = ecb_limit_1;\n                }\n                thr[b] = Math.min(ecb, ecb_limit);\n            }\n            gfc.nb_2[chn][b] = gfc.nb_1[chn][b];\n            gfc.nb_1[chn][b] = ecb;\n            {\n                /*\n                 * if THR exceeds EB, the quantization routines will take the\n                 * difference from other bands. in case of strong tonal samples\n                 * (tonaltest.wav) this leads to heavy distortions. that's why\n                 * we limit THR here.\n                 */\n                x = max[b];\n                x *= gfc.minval_l[b];\n                x *= avg_mask;\n                if (thr[b] > x) {\n                    thr[b] = x;\n                }\n            }\n            if (gfc.masking_lower > 1) {\n                thr[b] *= gfc.masking_lower;\n            }\n            if (thr[b] > eb_l[b]) {\n                thr[b] = eb_l[b];\n            }\n            if (gfc.masking_lower < 1) {\n                thr[b] *= gfc.masking_lower;\n            }\n            assert(thr[b] >= 0);\n        }\n        for (; b < Encoder.CBANDS; ++b) {\n            eb_l[b] = 0;\n            thr[b] = 0;\n        }\n    }\n\n    function vbrpsy_compute_block_type(gfp, uselongblock) {\n        var gfc = gfp.internal_flags;\n\n        if (gfp.short_blocks == ShortBlock.short_block_coupled\n                /* force both channels to use the same block type */\n                /* this is necessary if the frame is to be encoded in ms_stereo. */\n                /* But even without ms_stereo, FhG does this */\n            && !(uselongblock[0] != 0 && uselongblock[1] != 0))\n            uselongblock[0] = uselongblock[1] = 0;\n\n        for (var chn = 0; chn < gfc.channels_out; chn++) {\n            /* disable short blocks */\n            if (gfp.short_blocks == ShortBlock.short_block_dispensed) {\n                uselongblock[chn] = 1;\n            }\n            if (gfp.short_blocks == ShortBlock.short_block_forced) {\n                uselongblock[chn] = 0;\n            }\n        }\n    }\n\n    function vbrpsy_apply_block_type(gfp, uselongblock, blocktype_d) {\n        var gfc = gfp.internal_flags;\n\n        /*\n         * update the blocktype of the previous granule, since it depends on\n         * what happend in this granule\n         */\n        for (var chn = 0; chn < gfc.channels_out; chn++) {\n            var blocktype = Encoder.NORM_TYPE;\n            /* disable short blocks */\n\n            if (uselongblock[chn] != 0) {\n                /* no attack : use long blocks */\n                assert(gfc.blocktype_old[chn] != Encoder.START_TYPE);\n                if (gfc.blocktype_old[chn] == Encoder.SHORT_TYPE)\n                    blocktype = Encoder.STOP_TYPE;\n            } else {\n                /* attack : use short blocks */\n                blocktype = Encoder.SHORT_TYPE;\n                if (gfc.blocktype_old[chn] == Encoder.NORM_TYPE) {\n                    gfc.blocktype_old[chn] = Encoder.START_TYPE;\n                }\n                if (gfc.blocktype_old[chn] == Encoder.STOP_TYPE)\n                    gfc.blocktype_old[chn] = Encoder.SHORT_TYPE;\n            }\n\n            blocktype_d[chn] = gfc.blocktype_old[chn];\n            // value returned to calling program\n            gfc.blocktype_old[chn] = blocktype;\n            // save for next call to l3psy_anal\n        }\n    }\n\n    /**\n     * compute M/S thresholds from Johnston & Ferreira 1992 ICASSP paper\n     */\n    function vbrpsy_compute_MS_thresholds(eb, thr, cb_mld, ath_cb, athadjust, msfix, n) {\n        var msfix2 = msfix * 2;\n        var athlower = msfix > 0 ? Math.pow(10, athadjust) : 1;\n        var rside, rmid;\n        for (var b = 0; b < n; ++b) {\n            var ebM = eb[2][b];\n            var ebS = eb[3][b];\n            var thmL = thr[0][b];\n            var thmR = thr[1][b];\n            var thmM = thr[2][b];\n            var thmS = thr[3][b];\n\n            /* use this fix if L & R masking differs by 2db or less */\n            if (thmL <= 1.58 * thmR && thmR <= 1.58 * thmL) {\n                var mld_m = cb_mld[b] * ebS;\n                var mld_s = cb_mld[b] * ebM;\n                rmid = Math.max(thmM, Math.min(thmS, mld_m));\n                rside = Math.max(thmS, Math.min(thmM, mld_s));\n            } else {\n                rmid = thmM;\n                rside = thmS;\n            }\n            if (msfix > 0) {\n                /***************************************************************/\n                /* Adjust M/S maskings if user set \"msfix\" */\n                /***************************************************************/\n                /* Naoki Shibata 2000 */\n                var thmLR, thmMS;\n                var ath = ath_cb[b] * athlower;\n                thmLR = Math.min(Math.max(thmL, ath), Math.max(thmR, ath));\n                thmM = Math.max(rmid, ath);\n                thmS = Math.max(rside, ath);\n                thmMS = thmM + thmS;\n                if (thmMS > 0 && (thmLR * msfix2) < thmMS) {\n                    var f = thmLR * msfix2 / thmMS;\n                    thmM *= f;\n                    thmS *= f;\n                    assert(thmMS > 0);\n                }\n                rmid = Math.min(thmM, rmid);\n                rside = Math.min(thmS, rside);\n            }\n            if (rmid > ebM) {\n                rmid = ebM;\n            }\n            if (rside > ebS) {\n                rside = ebS;\n            }\n            thr[2][b] = rmid;\n            thr[3][b] = rside;\n        }\n    }\n\n    this.L3psycho_anal_vbr = function (gfp, buffer, bufPos, gr_out, masking_ratio, masking_MS_ratio, percep_entropy, percep_MS_entropy, energy, blocktype_d) {\n        var gfc = gfp.internal_flags;\n\n        /* fft and energy calculation */\n        var wsamp_l;\n        var wsamp_s;\n        var fftenergy = new_float(Encoder.HBLKSIZE);\n        var fftenergy_s = new_float_n([3, Encoder.HBLKSIZE_s]);\n        var wsamp_L = new_float_n([2, Encoder.BLKSIZE]);\n        var wsamp_S = new_float_n([2, 3, Encoder.BLKSIZE_s]);\n        var eb = new_float_n([4, Encoder.CBANDS]), thr = new_float_n([4, Encoder.CBANDS]);\n        var sub_short_factor = new_float_n([4, 3]);\n        var pcfact = 0.6;\n\n        /* block type */\n        var ns_attacks = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0],\n            [0, 0, 0, 0]];\n        var uselongblock = new_int(2);\n\n        /* usual variables like loop indices, etc.. */\n\n        /* chn=2 and 3 = Mid and Side channels */\n        var n_chn_psy = (gfp.mode == MPEGMode.JOINT_STEREO) ? 4\n            : gfc.channels_out;\n\n        vbrpsy_attack_detection(gfp, buffer, bufPos, gr_out, masking_ratio,\n            masking_MS_ratio, energy, sub_short_factor, ns_attacks,\n            uselongblock);\n\n        vbrpsy_compute_block_type(gfp, uselongblock);\n\n        /* LONG BLOCK CASE */\n        {\n            for (var chn = 0; chn < n_chn_psy; chn++) {\n                var ch01 = chn & 0x01;\n                wsamp_l = wsamp_L;\n                vbrpsy_compute_fft_l(gfp, buffer, bufPos, chn, gr_out,\n                    fftenergy, wsamp_l, ch01);\n\n                vbrpsy_compute_loudness_approximation_l(gfp, gr_out, chn,\n                    fftenergy);\n\n                if (uselongblock[ch01] != 0) {\n                    vbrpsy_compute_masking_l(gfc, fftenergy, eb[chn], thr[chn],\n                        chn);\n                } else {\n                    vbrpsy_skip_masking_l(gfc, chn);\n                }\n            }\n            if ((uselongblock[0] + uselongblock[1]) == 2) {\n                /* M/S channel */\n                if (gfp.mode == MPEGMode.JOINT_STEREO) {\n                    vbrpsy_compute_MS_thresholds(eb, thr, gfc.mld_cb_l,\n                        gfc.ATH.cb_l, gfp.ATHlower * gfc.ATH.adjust,\n                        gfp.msfix, gfc.npart_l);\n                }\n            }\n            /* TODO: apply adaptive ATH masking here ?? */\n            for (var chn = 0; chn < n_chn_psy; chn++) {\n                var ch01 = chn & 0x01;\n                if (uselongblock[ch01] != 0) {\n                    convert_partition2scalefac_l(gfc, eb[chn], thr[chn], chn);\n                }\n            }\n        }\n\n        /* SHORT BLOCKS CASE */\n        {\n            for (var sblock = 0; sblock < 3; sblock++) {\n                for (var chn = 0; chn < n_chn_psy; ++chn) {\n                    var ch01 = chn & 0x01;\n\n                    if (uselongblock[ch01] != 0) {\n                        vbrpsy_skip_masking_s(gfc, chn, sblock);\n                    } else {\n                        /* compute masking thresholds for short blocks */\n                        wsamp_s = wsamp_S;\n                        vbrpsy_compute_fft_s(gfp, buffer, bufPos, chn, sblock,\n                            fftenergy_s, wsamp_s, ch01);\n                        vbrpsy_compute_masking_s(gfp, fftenergy_s, eb[chn],\n                            thr[chn], chn, sblock);\n                    }\n                }\n                if ((uselongblock[0] + uselongblock[1]) == 0) {\n                    /* M/S channel */\n                    if (gfp.mode == MPEGMode.JOINT_STEREO) {\n                        vbrpsy_compute_MS_thresholds(eb, thr, gfc.mld_cb_s,\n                            gfc.ATH.cb_s, gfp.ATHlower * gfc.ATH.adjust,\n                            gfp.msfix, gfc.npart_s);\n                    }\n                    /* L/R channel */\n                }\n                /* TODO: apply adaptive ATH masking here ?? */\n                for (var chn = 0; chn < n_chn_psy; ++chn) {\n                    var ch01 = chn & 0x01;\n                    if (0 == uselongblock[ch01]) {\n                        convert_partition2scalefac_s(gfc, eb[chn], thr[chn],\n                            chn, sblock);\n                    }\n                }\n            }\n\n            /**** short block pre-echo control ****/\n            for (var chn = 0; chn < n_chn_psy; chn++) {\n                var ch01 = chn & 0x01;\n\n                if (uselongblock[ch01] != 0) {\n                    continue;\n                }\n                for (var sb = 0; sb < Encoder.SBMAX_s; sb++) {\n                    var new_thmm = new_float(3);\n                    for (var sblock = 0; sblock < 3; sblock++) {\n                        var thmm = gfc.thm[chn].s[sb][sblock];\n                        thmm *= NS_PREECHO_ATT0;\n\n                        if (ns_attacks[chn][sblock] >= 2\n                            || ns_attacks[chn][sblock + 1] == 1) {\n                            var idx = (sblock != 0) ? sblock - 1 : 2;\n                            var p = NS_INTERP(gfc.thm[chn].s[sb][idx], thmm,\n                                NS_PREECHO_ATT1 * pcfact);\n                            thmm = Math.min(thmm, p);\n                        } else if (ns_attacks[chn][sblock] == 1) {\n                            var idx = (sblock != 0) ? sblock - 1 : 2;\n                            var p = NS_INTERP(gfc.thm[chn].s[sb][idx], thmm,\n                                NS_PREECHO_ATT2 * pcfact);\n                            thmm = Math.min(thmm, p);\n                        } else if ((sblock != 0 && ns_attacks[chn][sblock - 1] == 3)\n                            || (sblock == 0 && gfc.nsPsy.lastAttacks[chn] == 3)) {\n                            var idx = (sblock != 2) ? sblock + 1 : 0;\n                            var p = NS_INTERP(gfc.thm[chn].s[sb][idx], thmm,\n                                NS_PREECHO_ATT2 * pcfact);\n                            thmm = Math.min(thmm, p);\n                        }\n\n                        /* pulse like signal detection for fatboy.wav and so on */\n                        thmm *= sub_short_factor[chn][sblock];\n\n                        new_thmm[sblock] = thmm;\n                    }\n                    for (var sblock = 0; sblock < 3; sblock++) {\n                        gfc.thm[chn].s[sb][sblock] = new_thmm[sblock];\n                    }\n                }\n            }\n        }\n        for (var chn = 0; chn < n_chn_psy; chn++) {\n            gfc.nsPsy.lastAttacks[chn] = ns_attacks[chn][2];\n        }\n\n        /***************************************************************\n         * determine final block type\n         ***************************************************************/\n        vbrpsy_apply_block_type(gfp, uselongblock, blocktype_d);\n\n        /*********************************************************************\n         * compute the value of PE to return ... no delay and advance\n         *********************************************************************/\n        for (var chn = 0; chn < n_chn_psy; chn++) {\n            var ppe;\n            var ppePos;\n            var type;\n            var mr;\n\n            if (chn > 1) {\n                ppe = percep_MS_entropy;\n                ppePos = -2;\n                type = Encoder.NORM_TYPE;\n                if (blocktype_d[0] == Encoder.SHORT_TYPE\n                    || blocktype_d[1] == Encoder.SHORT_TYPE)\n                    type = Encoder.SHORT_TYPE;\n                mr = masking_MS_ratio[gr_out][chn - 2];\n            } else {\n                ppe = percep_entropy;\n                ppePos = 0;\n                type = blocktype_d[chn];\n                mr = masking_ratio[gr_out][chn];\n            }\n\n            if (type == Encoder.SHORT_TYPE) {\n                ppe[ppePos + chn] = pecalc_s(mr, gfc.masking_lower);\n            } else {\n                ppe[ppePos + chn] = pecalc_l(mr, gfc.masking_lower);\n            }\n\n            if (gfp.analysis) {\n                gfc.pinfo.pe[gr_out][chn] = ppe[ppePos + chn];\n            }\n        }\n        return 0;\n    }\n\n    function s3_func_x(bark, hf_slope) {\n        var tempx = bark, tempy;\n\n        if (tempx >= 0) {\n            tempy = -tempx * 27;\n        } else {\n            tempy = tempx * hf_slope;\n        }\n        if (tempy <= -72.0) {\n            return 0;\n        }\n        return Math.exp(tempy * LN_TO_LOG10);\n    }\n\n    function norm_s3_func_x(hf_slope) {\n        var lim_a = 0, lim_b = 0;\n        {\n            var x = 0, l, h;\n            for (x = 0; s3_func_x(x, hf_slope) > 1e-20; x -= 1)\n                ;\n            l = x;\n            h = 0;\n            while (Math.abs(h - l) > 1e-12) {\n                x = (h + l) / 2;\n                if (s3_func_x(x, hf_slope) > 0) {\n                    h = x;\n                } else {\n                    l = x;\n                }\n            }\n            lim_a = l;\n        }\n        {\n            var x = 0, l, h;\n            for (x = 0; s3_func_x(x, hf_slope) > 1e-20; x += 1)\n                ;\n            l = 0;\n            h = x;\n            while (Math.abs(h - l) > 1e-12) {\n                x = (h + l) / 2;\n                if (s3_func_x(x, hf_slope) > 0) {\n                    l = x;\n                } else {\n                    h = x;\n                }\n            }\n            lim_b = h;\n        }\n        {\n            var sum = 0;\n            var m = 1000;\n            var i;\n            for (i = 0; i <= m; ++i) {\n                var x = lim_a + i * (lim_b - lim_a) / m;\n                var y = s3_func_x(x, hf_slope);\n                sum += y;\n            }\n            {\n                var norm = (m + 1) / (sum * (lim_b - lim_a));\n                /* printf( \"norm = %lf\\n\",norm); */\n                return norm;\n            }\n        }\n    }\n\n    /**\n     *   The spreading function.  Values returned in units of energy\n     */\n    function s3_func(bark) {\n        var tempx, x, tempy, temp;\n        tempx = bark;\n        if (tempx >= 0)\n            tempx *= 3;\n        else\n            tempx *= 1.5;\n\n        if (tempx >= 0.5 && tempx <= 2.5) {\n            temp = tempx - 0.5;\n            x = 8.0 * (temp * temp - 2.0 * temp);\n        } else\n            x = 0.0;\n        tempx += 0.474;\n        tempy = 15.811389 + 7.5 * tempx - 17.5\n            * Math.sqrt(1.0 + tempx * tempx);\n\n        if (tempy <= -60.0)\n            return 0.0;\n\n        tempx = Math.exp((x + tempy) * LN_TO_LOG10);\n\n        /**\n         * <PRE>\n         * Normalization.  The spreading function should be normalized so that:\n         * +inf\n         * /\n         * |  s3 [ bark ]  d(bark)   =  1\n         * /\n         * -inf\n         * </PRE>\n         */\n        tempx /= .6609193;\n        return tempx;\n    }\n\n    /**\n     * see for example \"Zwicker: Psychoakustik, 1982; ISBN 3-540-11401-7\n     */\n    function freq2bark(freq) {\n        /* input: freq in hz output: barks */\n        if (freq < 0)\n            freq = 0;\n        freq = freq * 0.001;\n        return 13.0 * Math.atan(.76 * freq) + 3.5\n            * Math.atan(freq * freq / (7.5 * 7.5));\n    }\n\n    function init_numline(numlines, bo, bm, bval, bval_width, mld, bo_w, sfreq, blksize, scalepos, deltafreq, sbmax) {\n        var b_frq = new_float(Encoder.CBANDS + 1);\n        var sample_freq_frac = sfreq / (sbmax > 15 ? 2 * 576 : 2 * 192);\n        var partition = new_int(Encoder.HBLKSIZE);\n        var i;\n        sfreq /= blksize;\n        var j = 0;\n        var ni = 0;\n        /* compute numlines, the number of spectral lines in each partition band */\n        /* each partition band should be about DELBARK wide. */\n        for (i = 0; i < Encoder.CBANDS; i++) {\n            var bark1;\n            var j2;\n            bark1 = freq2bark(sfreq * j);\n\n            b_frq[i] = sfreq * j;\n\n            for (j2 = j; freq2bark(sfreq * j2) - bark1 < DELBARK\n            && j2 <= blksize / 2; j2++)\n                ;\n\n            numlines[i] = j2 - j;\n            ni = i + 1;\n\n            while (j < j2) {\n                assert(j < Encoder.HBLKSIZE);\n                partition[j++] = i;\n            }\n            if (j > blksize / 2) {\n                j = blksize / 2;\n                ++i;\n                break;\n            }\n        }\n        assert(i < Encoder.CBANDS);\n        b_frq[i] = sfreq * j;\n\n        for (var sfb = 0; sfb < sbmax; sfb++) {\n            var i1, i2, start, end;\n            var arg;\n            start = scalepos[sfb];\n            end = scalepos[sfb + 1];\n\n            i1 = 0 | Math.floor(.5 + deltafreq * (start - .5));\n            if (i1 < 0)\n                i1 = 0;\n            i2 = 0 | Math.floor(.5 + deltafreq * (end - .5));\n\n            if (i2 > blksize / 2)\n                i2 = blksize / 2;\n\n            bm[sfb] = (partition[i1] + partition[i2]) / 2;\n            bo[sfb] = partition[i2];\n            var f_tmp = sample_freq_frac * end;\n            /*\n             * calculate how much of this band belongs to current scalefactor\n             * band\n             */\n            bo_w[sfb] = (f_tmp - b_frq[bo[sfb]])\n                / (b_frq[bo[sfb] + 1] - b_frq[bo[sfb]]);\n            if (bo_w[sfb] < 0) {\n                bo_w[sfb] = 0;\n            } else {\n                if (bo_w[sfb] > 1) {\n                    bo_w[sfb] = 1;\n                }\n            }\n            /* setup stereo demasking thresholds */\n            /* formula reverse enginerred from plot in paper */\n            arg = freq2bark(sfreq * scalepos[sfb] * deltafreq);\n            arg = ( Math.min(arg, 15.5) / 15.5);\n\n            mld[sfb] = Math.pow(10.0,\n                1.25 * (1 - Math.cos(Math.PI * arg)) - 2.5);\n        }\n\n        /* compute bark values of each critical band */\n        j = 0;\n        for (var k = 0; k < ni; k++) {\n            var w = numlines[k];\n            var bark1, bark2;\n\n            bark1 = freq2bark(sfreq * (j));\n            bark2 = freq2bark(sfreq * (j + w - 1));\n            bval[k] = .5 * (bark1 + bark2);\n\n            bark1 = freq2bark(sfreq * (j - .5));\n            bark2 = freq2bark(sfreq * (j + w - .5));\n            bval_width[k] = bark2 - bark1;\n            j += w;\n        }\n\n        return ni;\n    }\n\n    function init_s3_values(s3ind, npart, bval, bval_width, norm, use_old_s3) {\n        var s3 = new_float_n([Encoder.CBANDS, Encoder.CBANDS]);\n        /*\n         * The s3 array is not linear in the bark scale.\n         *\n         * bval[x] should be used to get the bark value.\n         */\n        var j;\n        var numberOfNoneZero = 0;\n\n        /**\n         * <PRE>\n         * s[i][j], the value of the spreading function,\n         * centered at band j (masker), for band i (maskee)\n         *\n         * i.e.: sum over j to spread into signal barkval=i\n         * NOTE: i and j are used opposite as in the ISO docs\n         * </PRE>\n         */\n        if (use_old_s3) {\n            for (var i = 0; i < npart; i++) {\n                for (j = 0; j < npart; j++) {\n                    var v = s3_func(bval[i] - bval[j]) * bval_width[j];\n                    s3[i][j] = v * norm[i];\n                }\n            }\n        } else {\n            for (j = 0; j < npart; j++) {\n                var hf_slope = 15 + Math.min(21 / bval[j], 12);\n                var s3_x_norm = norm_s3_func_x(hf_slope);\n                for (var i = 0; i < npart; i++) {\n                    var v = s3_x_norm\n                        * s3_func_x(bval[i] - bval[j], hf_slope)\n                        * bval_width[j];\n                    s3[i][j] = v * norm[i];\n                }\n            }\n        }\n        for (var i = 0; i < npart; i++) {\n            for (j = 0; j < npart; j++) {\n                if (s3[i][j] > 0.0)\n                    break;\n            }\n            s3ind[i][0] = j;\n\n            for (j = npart - 1; j > 0; j--) {\n                if (s3[i][j] > 0.0)\n                    break;\n            }\n            s3ind[i][1] = j;\n            numberOfNoneZero += (s3ind[i][1] - s3ind[i][0] + 1);\n        }\n\n        var p = new_float(numberOfNoneZero);\n        var k = 0;\n        for (var i = 0; i < npart; i++)\n            for (j = s3ind[i][0]; j <= s3ind[i][1]; j++)\n                p[k++] = s3[i][j];\n\n        return p;\n    }\n\n    function stereo_demask(f) {\n        /* setup stereo demasking thresholds */\n        /* formula reverse enginerred from plot in paper */\n        var arg = freq2bark(f);\n        arg = (Math.min(arg, 15.5) / 15.5);\n\n        return Math.pow(10.0,\n            1.25 * (1 - Math.cos(Math.PI * arg)) - 2.5);\n    }\n\n    /**\n     * NOTE: the bitrate reduction from the inter-channel masking effect is low\n     * compared to the chance of getting annyoing artefacts. L3psycho_anal_vbr\n     * does not use this feature. (Robert 071216)\n     */\n    this.psymodel_init = function (gfp) {\n        var gfc = gfp.internal_flags;\n        var i;\n        var useOldS3 = true;\n        var bvl_a = 13, bvl_b = 24;\n        var snr_l_a = 0, snr_l_b = 0;\n        var snr_s_a = -8.25, snr_s_b = -4.5;\n        var bval = new_float(Encoder.CBANDS);\n        var bval_width = new_float(Encoder.CBANDS);\n        var norm = new_float(Encoder.CBANDS);\n        var sfreq = gfp.out_samplerate;\n\n        switch (gfp.experimentalZ) {\n            default:\n            case 0:\n                useOldS3 = true;\n                break;\n            case 1:\n                useOldS3 = (gfp.VBR == VbrMode.vbr_mtrh || gfp.VBR == VbrMode.vbr_mt) ? false\n                    : true;\n                break;\n            case 2:\n                useOldS3 = false;\n                break;\n            case 3:\n                bvl_a = 8;\n                snr_l_a = -1.75;\n                snr_l_b = -0.0125;\n                snr_s_a = -8.25;\n                snr_s_b = -2.25;\n                break;\n        }\n        gfc.ms_ener_ratio_old = .25;\n        gfc.blocktype_old[0] = gfc.blocktype_old[1] = Encoder.NORM_TYPE;\n        // the vbr header is long blocks\n\n        for (i = 0; i < 4; ++i) {\n            for (var j = 0; j < Encoder.CBANDS; ++j) {\n                gfc.nb_1[i][j] = 1e20;\n                gfc.nb_2[i][j] = 1e20;\n                gfc.nb_s1[i][j] = gfc.nb_s2[i][j] = 1.0;\n            }\n            for (var sb = 0; sb < Encoder.SBMAX_l; sb++) {\n                gfc.en[i].l[sb] = 1e20;\n                gfc.thm[i].l[sb] = 1e20;\n            }\n            for (var j = 0; j < 3; ++j) {\n                for (var sb = 0; sb < Encoder.SBMAX_s; sb++) {\n                    gfc.en[i].s[sb][j] = 1e20;\n                    gfc.thm[i].s[sb][j] = 1e20;\n                }\n                gfc.nsPsy.lastAttacks[i] = 0;\n            }\n            for (var j = 0; j < 9; j++)\n                gfc.nsPsy.last_en_subshort[i][j] = 10.;\n        }\n\n        /* init. for loudness approx. -jd 2001 mar 27 */\n        gfc.loudness_sq_save[0] = gfc.loudness_sq_save[1] = 0.0;\n\n        /*************************************************************************\n         * now compute the psychoacoustic model specific constants\n         ************************************************************************/\n        /* compute numlines, bo, bm, bval, bval_width, mld */\n\n        gfc.npart_l = init_numline(gfc.numlines_l, gfc.bo_l, gfc.bm_l, bval,\n            bval_width, gfc.mld_l, gfc.PSY.bo_l_weight, sfreq,\n            Encoder.BLKSIZE, gfc.scalefac_band.l, Encoder.BLKSIZE\n            / (2.0 * 576), Encoder.SBMAX_l);\n        assert(gfc.npart_l < Encoder.CBANDS);\n        /* compute the spreading function */\n        for (i = 0; i < gfc.npart_l; i++) {\n            var snr = snr_l_a;\n            if (bval[i] >= bvl_a) {\n                snr = snr_l_b * (bval[i] - bvl_a) / (bvl_b - bvl_a) + snr_l_a\n                    * (bvl_b - bval[i]) / (bvl_b - bvl_a);\n            }\n            norm[i] = Math.pow(10.0, snr / 10.0);\n            if (gfc.numlines_l[i] > 0) {\n                gfc.rnumlines_l[i] = 1.0 / gfc.numlines_l[i];\n            } else {\n                gfc.rnumlines_l[i] = 0;\n            }\n        }\n        gfc.s3_ll = init_s3_values(gfc.s3ind, gfc.npart_l, bval, bval_width,\n            norm, useOldS3);\n\n        /* compute long block specific values, ATH and MINVAL */\n        var j = 0;\n        for (i = 0; i < gfc.npart_l; i++) {\n            var x;\n\n            /* ATH */\n            x = Float.MAX_VALUE;\n            for (var k = 0; k < gfc.numlines_l[i]; k++, j++) {\n                var freq = sfreq * j / (1000.0 * Encoder.BLKSIZE);\n                var level;\n                /*\n                 * ATH below 100 Hz constant, not further climbing\n                 */\n                level = this.ATHformula(freq * 1000, gfp) - 20;\n                // scale to FFT units; returned value is in dB\n                level = Math.pow(10., 0.1 * level);\n                // convert from dB . energy\n                level *= gfc.numlines_l[i];\n                if (x > level)\n                    x = level;\n            }\n            gfc.ATH.cb_l[i] = x;\n\n            /*\n             * MINVAL. For low freq, the strength of the masking is limited by\n             * minval this is an ISO MPEG1 thing, dont know if it is really\n             * needed\n             */\n            /*\n             * FIXME: it does work to reduce low-freq problems in S53-Wind-Sax\n             * and lead-voice samples, but introduces some 3 kbps bit bloat too.\n             * TODO: Further refinement of the shape of this hack.\n             */\n            x = -20 + bval[i] * 20 / 10;\n            if (x > 6) {\n                x = 100;\n            }\n            if (x < -15) {\n                x = -15;\n            }\n            x -= 8.;\n            gfc.minval_l[i] = (Math.pow(10.0, x / 10.) * gfc.numlines_l[i]);\n        }\n\n        /************************************************************************\n         * do the same things for short blocks\n         ************************************************************************/\n        gfc.npart_s = init_numline(gfc.numlines_s, gfc.bo_s, gfc.bm_s, bval,\n            bval_width, gfc.mld_s, gfc.PSY.bo_s_weight, sfreq,\n            Encoder.BLKSIZE_s, gfc.scalefac_band.s, Encoder.BLKSIZE_s\n            / (2.0 * 192), Encoder.SBMAX_s);\n        assert(gfc.npart_s < Encoder.CBANDS);\n\n        /* SNR formula. short block is normalized by SNR. is it still right ? */\n        j = 0;\n        for (i = 0; i < gfc.npart_s; i++) {\n            var x;\n            var snr = snr_s_a;\n            if (bval[i] >= bvl_a) {\n                snr = snr_s_b * (bval[i] - bvl_a) / (bvl_b - bvl_a) + snr_s_a\n                    * (bvl_b - bval[i]) / (bvl_b - bvl_a);\n            }\n            norm[i] = Math.pow(10.0, snr / 10.0);\n\n            /* ATH */\n            x = Float.MAX_VALUE;\n            for (var k = 0; k < gfc.numlines_s[i]; k++, j++) {\n                var freq = sfreq * j / (1000.0 * Encoder.BLKSIZE_s);\n                var level;\n                /* freq = Min(.1,freq); */\n                /*\n                 * ATH below 100 Hz constant, not\n                 * further climbing\n                 */\n                level = this.ATHformula(freq * 1000, gfp) - 20;\n                // scale to FFT units; returned value is in dB\n                level = Math.pow(10., 0.1 * level);\n                // convert from dB . energy\n                level *= gfc.numlines_s[i];\n                if (x > level)\n                    x = level;\n            }\n            gfc.ATH.cb_s[i] = x;\n\n            /*\n             * MINVAL. For low freq, the strength of the masking is limited by\n             * minval this is an ISO MPEG1 thing, dont know if it is really\n             * needed\n             */\n            x = (-7.0 + bval[i] * 7.0 / 12.0);\n            if (bval[i] > 12) {\n                x *= 1 + Math.log(1 + x) * 3.1;\n            }\n            if (bval[i] < 12) {\n                x *= 1 + Math.log(1 - x) * 2.3;\n            }\n            if (x < -15) {\n                x = -15;\n            }\n            x -= 8;\n            gfc.minval_s[i] = Math.pow(10.0, x / 10)\n                * gfc.numlines_s[i];\n        }\n\n        gfc.s3_ss = init_s3_values(gfc.s3ind_s, gfc.npart_s, bval, bval_width,\n            norm, useOldS3);\n\n        init_mask_add_max_values();\n        fft.init_fft(gfc);\n\n        /* setup temporal masking */\n        gfc.decay = Math.exp(-1.0 * LOG10\n            / (temporalmask_sustain_sec * sfreq / 192.0));\n\n        {\n            var msfix;\n            msfix = NS_MSFIX;\n            if ((gfp.exp_nspsytune & 2) != 0)\n                msfix = 1.0;\n            if (Math.abs(gfp.msfix) > 0.0)\n                msfix = gfp.msfix;\n            gfp.msfix = msfix;\n\n            /*\n             * spread only from npart_l bands. Normally, we use the spreading\n             * function to convolve from npart_l down to npart_l bands\n             */\n            for (var b = 0; b < gfc.npart_l; b++)\n                if (gfc.s3ind[b][1] > gfc.npart_l - 1)\n                    gfc.s3ind[b][1] = gfc.npart_l - 1;\n        }\n\n        /*\n         * prepare for ATH auto adjustment: we want to decrease the ATH by 12 dB\n         * per second\n         */\n        var frame_duration = (576. * gfc.mode_gr / sfreq);\n        gfc.ATH.decay = Math.pow(10., -12. / 10. * frame_duration);\n        gfc.ATH.adjust = 0.01;\n        /* minimum, for leading low loudness */\n        gfc.ATH.adjustLimit = 1.0;\n        /* on lead, allow adjust up to maximum */\n\n        assert(gfc.bo_l[Encoder.SBMAX_l - 1] <= gfc.npart_l);\n        assert(gfc.bo_s[Encoder.SBMAX_s - 1] <= gfc.npart_s);\n\n        if (gfp.ATHtype != -1) {\n            /* compute equal loudness weights (eql_w) */\n            var freq;\n            var freq_inc = gfp.out_samplerate\n                / (Encoder.BLKSIZE);\n            var eql_balance = 0.0;\n            freq = 0.0;\n            for (i = 0; i < Encoder.BLKSIZE / 2; ++i) {\n                /* convert ATH dB to relative power (not dB) */\n                /* to determine eql_w */\n                freq += freq_inc;\n                gfc.ATH.eql_w[i] = 1. / Math.pow(10, this.ATHformula(freq, gfp) / 10);\n                eql_balance += gfc.ATH.eql_w[i];\n            }\n            eql_balance = 1.0 / eql_balance;\n            for (i = Encoder.BLKSIZE / 2; --i >= 0;) { /* scale weights */\n                gfc.ATH.eql_w[i] *= eql_balance;\n            }\n        }\n        {\n            for (var b = j = 0; b < gfc.npart_s; ++b) {\n                for (i = 0; i < gfc.numlines_s[b]; ++i) {\n                    ++j;\n                }\n            }\n            assert(j == 129);\n            for (var b = j = 0; b < gfc.npart_l; ++b) {\n                for (i = 0; i < gfc.numlines_l[b]; ++i) {\n                    ++j;\n                }\n            }\n            assert(j == 513);\n        }\n        j = 0;\n        for (i = 0; i < gfc.npart_l; i++) {\n            var freq = sfreq * (j + gfc.numlines_l[i] / 2) / (1.0 * Encoder.BLKSIZE);\n            gfc.mld_cb_l[i] = stereo_demask(freq);\n            j += gfc.numlines_l[i];\n        }\n        for (; i < Encoder.CBANDS; ++i) {\n            gfc.mld_cb_l[i] = 1;\n        }\n        j = 0;\n        for (i = 0; i < gfc.npart_s; i++) {\n            var freq = sfreq * (j + gfc.numlines_s[i] / 2) / (1.0 * Encoder.BLKSIZE_s);\n            gfc.mld_cb_s[i] = stereo_demask(freq);\n            j += gfc.numlines_s[i];\n        }\n        for (; i < Encoder.CBANDS; ++i) {\n            gfc.mld_cb_s[i] = 1;\n        }\n        return 0;\n    }\n\n    /**\n     * Those ATH formulas are returning their minimum value for input = -1\n     */\n    function ATHformula_GB(f, value) {\n        /**\n         * <PRE>\n         *  from Painter & Spanias\n         *           modified by Gabriel Bouvigne to better fit the reality\n         *           ath =    3.640 * pow(f,-0.8)\n         *           - 6.800 * exp(-0.6*pow(f-3.4,2.0))\n         *           + 6.000 * exp(-0.15*pow(f-8.7,2.0))\n         *           + 0.6* 0.001 * pow(f,4.0);\n         *\n         *\n         *           In the past LAME was using the Painter &Spanias formula.\n         *           But we had some recurrent problems with HF content.\n         *           We measured real ATH values, and found the older formula\n         *           to be inaccurate in the higher part. So we made this new\n         *           formula and this solved most of HF problematic test cases.\n         *           The tradeoff is that in VBR mode it increases a lot the\n         *           bitrate.\n         * </PRE>\n         */\n\n        /*\n         * This curve can be adjusted according to the VBR scale: it adjusts\n         * from something close to Painter & Spanias on V9 up to Bouvigne's\n         * formula for V0. This way the VBR bitrate is more balanced according\n         * to the -V value.\n         */\n\n        // the following Hack allows to ask for the lowest value\n        if (f < -.3)\n            f = 3410;\n\n        // convert to khz\n        f /= 1000;\n        f = Math.max(0.1, f);\n        var ath = 3.640 * Math.pow(f, -0.8) - 6.800\n            * Math.exp(-0.6 * Math.pow(f - 3.4, 2.0)) + 6.000\n            * Math.exp(-0.15 * Math.pow(f - 8.7, 2.0))\n            + (0.6 + 0.04 * value) * 0.001 * Math.pow(f, 4.0);\n        return ath;\n    }\n\n    this.ATHformula = function (f, gfp) {\n        var ath;\n        switch (gfp.ATHtype) {\n            case 0:\n                ath = ATHformula_GB(f, 9);\n                break;\n            case 1:\n                // over sensitive, should probably be removed\n                ath = ATHformula_GB(f, -1);\n                break;\n            case 2:\n                ath = ATHformula_GB(f, 0);\n                break;\n            case 3:\n                // modification of GB formula by Roel\n                ath = ATHformula_GB(f, 1) + 6;\n                break;\n            case 4:\n                ath = ATHformula_GB(f, gfp.ATHcurve);\n                break;\n            default:\n                ath = ATHformula_GB(f, 0);\n                break;\n        }\n        return ath;\n    }\n\n}\n\nmodule.exports = PsyModel;\n","//package mp3;\n\n/* MPEG modes */\nfunction MPEGMode(ordinal) {\n    var _ordinal = ordinal;\n    this.ordinal = function () {\n        return _ordinal;\n    }\n}\n\nMPEGMode.STEREO = new MPEGMode(0);\nMPEGMode.JOINT_STEREO = new MPEGMode(1);\nMPEGMode.DUAL_CHANNEL = new MPEGMode(2);\nMPEGMode.MONO = new MPEGMode(3);\nMPEGMode.NOT_SET = new MPEGMode(4);\n\nmodule.exports = MPEGMode;\n","var MPEGMode = require('./MPEGMode.js');\n\nfunction LameGlobalFlags() {\n\n    this.class_id = 0;\n\n    /* input description */\n\n    /**\n     * number of samples. default=-1\n     */\n    this.num_samples = 0;\n    /**\n     * input number of channels. default=2\n     */\n    this.num_channels = 0;\n    /**\n     * input_samp_rate in Hz. default=44.1 kHz\n     */\n    this.in_samplerate = 0;\n    /**\n     * output_samp_rate. default: LAME picks best value at least not used for\n     * MP3 decoding: Remember 44.1 kHz MP3s and AC97\n     */\n    this.out_samplerate = 0;\n    /**\n     * scale input by this amount before encoding at least not used for MP3\n     * decoding\n     */\n    this.scale = 0.;\n    /**\n     * scale input of channel 0 (left) by this amount before encoding\n     */\n    this.scale_left = 0.;\n    /**\n     * scale input of channel 1 (right) by this amount before encoding\n     */\n    this.scale_right = 0.;\n\n    /* general control params */\n    /**\n     * collect data for a MP3 frame analyzer?\n     */\n    this.analysis = false;\n    /**\n     * add Xing VBR tag?\n     */\n    this.bWriteVbrTag = false;\n\n    /**\n     * use lame/mpglib to convert mp3 to wav\n     */\n    this.decode_only = false;\n    /**\n     * quality setting 0=best, 9=worst default=5\n     */\n    this.quality = 0;\n    /**\n     * see enum default = LAME picks best value\n     */\n    this.mode = MPEGMode.STEREO;\n    /**\n     * force M/S mode. requires mode=1\n     */\n    this.force_ms = false;\n    /**\n     * use free format? default=0\n     */\n    this.free_format = false;\n    /**\n     * find the RG value? default=0\n     */\n    this.findReplayGain = false;\n    /**\n     * decode on the fly? default=0\n     */\n    this.decode_on_the_fly = false;\n    /**\n     * 1 (default) writes ID3 tags, 0 not\n     */\n    this.write_id3tag_automatic = false;\n\n    /*\n     * set either brate>0 or compression_ratio>0, LAME will compute the value of\n     * the variable not set. Default is compression_ratio = 11.025\n     */\n    /**\n     * bitrate\n     */\n    this.brate = 0;\n    /**\n     * sizeof(wav file)/sizeof(mp3 file)\n     */\n    this.compression_ratio = 0.;\n\n    /* frame params */\n    /**\n     * mark as copyright. default=0\n     */\n    this.copyright = 0;\n    /**\n     * mark as original. default=1\n     */\n    this.original = 0;\n    /**\n     * the MP3 'private extension' bit. Meaningless\n     */\n    this.extension = 0;\n    /**\n     * Input PCM is emphased PCM (for instance from one of the rarely emphased\n     * CDs), it is STRONGLY not recommended to use this, because psycho does not\n     * take it into account, and last but not least many decoders don't care\n     * about these bits\n     */\n    this.emphasis = 0;\n    /**\n     * use 2 bytes per frame for a CRC checksum. default=0\n     */\n    this.error_protection = 0;\n    /**\n     * enforce ISO spec as much as possible\n     */\n    this.strict_ISO = false;\n\n    /**\n     * use bit reservoir?\n     */\n    this.disable_reservoir = false;\n\n    /* quantization/noise shaping */\n    this.quant_comp = 0;\n    this.quant_comp_short = 0;\n    this.experimentalY = false;\n    this.experimentalZ = 0;\n    this.exp_nspsytune = 0;\n\n    this.preset = 0;\n\n    /* VBR control */\n    this.VBR = null;\n    /**\n     * Range [0,...,1[\n     */\n    this.VBR_q_frac = 0.;\n    /**\n     * Range [0,...,9]\n     */\n    this.VBR_q = 0;\n    this.VBR_mean_bitrate_kbps = 0;\n    this.VBR_min_bitrate_kbps = 0;\n    this.VBR_max_bitrate_kbps = 0;\n    /**\n     * strictly enforce VBR_min_bitrate normaly, it will be violated for analog\n     * silence\n     */\n    this.VBR_hard_min = 0;\n\n    /* resampling and filtering */\n\n    /**\n     * freq in Hz. 0=lame choses. -1=no filter\n     */\n    this.lowpassfreq = 0;\n    /**\n     * freq in Hz. 0=lame choses. -1=no filter\n     */\n    this.highpassfreq = 0;\n    /**\n     * freq width of filter, in Hz (default=15%)\n     */\n    this.lowpasswidth = 0;\n    /**\n     * freq width of filter, in Hz (default=15%)\n     */\n    this.highpasswidth = 0;\n\n    /*\n     * psycho acoustics and other arguments which you should not change unless\n     * you know what you are doing\n     */\n\n    this.maskingadjust = 0.;\n    this.maskingadjust_short = 0.;\n    /**\n     * only use ATH\n     */\n    this.ATHonly = false;\n    /**\n     * only use ATH for short blocks\n     */\n    this.ATHshort = false;\n    /**\n     * disable ATH\n     */\n    this.noATH = false;\n    /**\n     * select ATH formula\n     */\n    this.ATHtype = 0;\n    /**\n     * change ATH formula 4 shape\n     */\n    this.ATHcurve = 0.;\n    /**\n     * lower ATH by this many db\n     */\n    this.ATHlower = 0.;\n    /**\n     * select ATH auto-adjust scheme\n     */\n    this.athaa_type = 0;\n    /**\n     * select ATH auto-adjust loudness calc\n     */\n    this.athaa_loudapprox = 0;\n    /**\n     * dB, tune active region of auto-level\n     */\n    this.athaa_sensitivity = 0.;\n    this.short_blocks = null;\n    /**\n     * use temporal masking effect\n     */\n    this.useTemporal = false;\n    this.interChRatio = 0.;\n    /**\n     * Naoki's adjustment of Mid/Side maskings\n     */\n    this.msfix = 0.;\n\n    /**\n     * 0 off, 1 on\n     */\n    this.tune = false;\n    /**\n     * used to pass values for debugging and stuff\n     */\n    this.tune_value_a = 0.;\n\n    /************************************************************************/\n    /* internal variables, do not set... */\n    /* provided because they may be of use to calling application */\n    /************************************************************************/\n\n    /**\n     * 0=MPEG-2/2.5 1=MPEG-1\n     */\n    this.version = 0;\n    this.encoder_delay = 0;\n    /**\n     * number of samples of padding appended to input\n     */\n    this.encoder_padding = 0;\n    this.framesize = 0;\n    /**\n     * number of frames encoded\n     */\n    this.frameNum = 0;\n    /**\n     * is this struct owned by calling program or lame?\n     */\n    this.lame_allocated_gfp = 0;\n    /**************************************************************************/\n    /* more internal variables are stored in this structure: */\n    /**************************************************************************/\n    this.internal_flags = null;\n}\n\nmodule.exports = LameGlobalFlags;\n","var Encoder = require('./Encoder.js');\n\nvar L3Side = {};\n\n\n\t/**\n\t * max scalefactor band, max(SBMAX_l, SBMAX_s*3, (SBMAX_s-3)*3+8)\n\t */\nL3Side.SFBMAX = (Encoder.SBMAX_s * 3);\n\nmodule.exports = L3Side;\n","//package mp3;\nvar common = require('./common.js');\nvar System = common.System;\nvar VbrMode = common.VbrMode;\nvar Float = common.Float;\nvar ShortBlock = common.ShortBlock;\nvar Util = common.Util;\nvar Arrays = common.Arrays;\nvar new_array_n = common.new_array_n;\nvar new_byte = common.new_byte;\nvar new_double = common.new_double;\nvar new_float = common.new_float;\nvar new_float_n = common.new_float_n;\nvar new_int = common.new_int;\nvar new_int_n = common.new_int_n;\nvar assert = common.assert;\n\nvar L3Side = require('./L3Side.js');\n\nfunction GrInfo() {\n    //float xr[] = new float[576];\n    this.xr = new_float(576);\n    //int l3_enc[] = new int[576];\n    this.l3_enc = new_int(576);\n    //int scalefac[] = new int[L3Side.SFBMAX];\n    this.scalefac = new_int(L3Side.SFBMAX);\n    this.xrpow_max = 0.;\n\n    this.part2_3_length = 0;\n    this.big_values = 0;\n    this.count1 = 0;\n    this.global_gain = 0;\n    this.scalefac_compress = 0;\n    this.block_type = 0;\n    this.mixed_block_flag = 0;\n    this.table_select = new_int(3);\n    this.subblock_gain = new_int(3 + 1);\n    this.region0_count = 0;\n    this.region1_count = 0;\n    this.preflag = 0;\n    this.scalefac_scale = 0;\n    this.count1table_select = 0;\n\n    this.part2_length = 0;\n    this.sfb_lmax = 0;\n    this.sfb_smin = 0;\n    this.psy_lmax = 0;\n    this.sfbmax = 0;\n    this.psymax = 0;\n    this.sfbdivide = 0;\n    this.width = new_int(L3Side.SFBMAX);\n    this.window = new_int(L3Side.SFBMAX);\n    this.count1bits = 0;\n    /**\n     * added for LSF\n     */\n    this.sfb_partition_table = null;\n    this.slen = new_int(4);\n\n    this.max_nonzero_coeff = 0;\n\n    var self = this;\n    function clone_int(array) {\n        return new Int32Array(array);\n    }\n    function clone_float(array) {\n        return new Float32Array(array);\n    }\n    this.assign = function (other) {\n        self.xr = clone_float(other.xr); //.slice(0); //clone();\n        self.l3_enc = clone_int(other.l3_enc); //.slice(0); //clone();\n        self.scalefac = clone_int(other.scalefac);//.slice(0); //clone();\n        self.xrpow_max = other.xrpow_max;\n\n        self.part2_3_length = other.part2_3_length;\n        self.big_values = other.big_values;\n        self.count1 = other.count1;\n        self.global_gain = other.global_gain;\n        self.scalefac_compress = other.scalefac_compress;\n        self.block_type = other.block_type;\n        self.mixed_block_flag = other.mixed_block_flag;\n        self.table_select = clone_int(other.table_select);//.slice(0); //clone();\n        self.subblock_gain = clone_int(other.subblock_gain); //.slice(0); //.clone();\n        self.region0_count = other.region0_count;\n        self.region1_count = other.region1_count;\n        self.preflag = other.preflag;\n        self.scalefac_scale = other.scalefac_scale;\n        self.count1table_select = other.count1table_select;\n\n        self.part2_length = other.part2_length;\n        self.sfb_lmax = other.sfb_lmax;\n        self.sfb_smin = other.sfb_smin;\n        self.psy_lmax = other.psy_lmax;\n        self.sfbmax = other.sfbmax;\n        self.psymax = other.psymax;\n        self.sfbdivide = other.sfbdivide;\n        self.width = clone_int(other.width); //.slice(0); //.clone();\n        self.window = clone_int(other.window); //.slice(0); //.clone();\n        self.count1bits = other.count1bits;\n\n        self.sfb_partition_table = other.sfb_partition_table.slice(0); //.clone();\n        self.slen = clone_int(other.slen); //.slice(0); //.clone();\n        self.max_nonzero_coeff = other.max_nonzero_coeff;\n    }\n}\n\nmodule.exports = GrInfo;\n","var common = require('./common.js');\nvar System = common.System;\nvar VbrMode = common.VbrMode;\nvar Float = common.Float;\nvar ShortBlock = common.ShortBlock;\nvar Util = common.Util;\nvar Arrays = common.Arrays;\nvar new_array_n = common.new_array_n;\nvar new_byte = common.new_byte;\nvar new_double = common.new_double;\nvar new_float = common.new_float;\nvar new_float_n = common.new_float_n;\nvar new_int = common.new_int;\nvar new_int_n = common.new_int_n;\nvar assert = common.assert;\n\nvar GrInfo = require('./GrInfo.js');\n\nfunction IIISideInfo() {\n    this.tt = [[null, null], [null, null]];\n    this.main_data_begin = 0;\n    this.private_bits = 0;\n    this.resvDrain_pre = 0;\n    this.resvDrain_post = 0;\n    this.scfsi = [new_int(4), new_int(4)];\n\n    for (var gr = 0; gr < 2; gr++) {\n        for (var ch = 0; ch < 2; ch++) {\n            this.tt[gr][ch] = new GrInfo();\n        }\n    }\n}\n\nmodule.exports = IIISideInfo;\n","//package mp3;\n\n/**\n * Layer III side information.\n *\n * @author Ken\n *\n */\n\nvar common = require('./common.js');\nvar System = common.System;\nvar VbrMode = common.VbrMode;\nvar Float = common.Float;\nvar ShortBlock = common.ShortBlock;\nvar Util = common.Util;\nvar Arrays = common.Arrays;\nvar new_array_n = common.new_array_n;\nvar new_byte = common.new_byte;\nvar new_double = common.new_double;\nvar new_float = common.new_float;\nvar new_float_n = common.new_float_n;\nvar new_int = common.new_int;\nvar new_int_n = common.new_int_n;\nvar assert = common.assert;\n\nvar Encoder = require('./Encoder.js');\n\nfunction ScaleFac(arrL, arrS, arr21, arr12) {\n\n    this.l = new_int(1 + Encoder.SBMAX_l);\n    this.s = new_int(1 + Encoder.SBMAX_s);\n    this.psfb21 = new_int(1 + Encoder.PSFB21);\n    this.psfb12 = new_int(1 + Encoder.PSFB12);\n    var l = this.l;\n    var s = this.s;\n\n    if (arguments.length == 4) {\n        //public ScaleFac(final int[] arrL, final int[] arrS, final int[] arr21,\n        //    final int[] arr12) {\n        this.arrL = arguments[0];\n        this.arrS = arguments[1];\n        this.arr21 = arguments[2];\n        this.arr12 = arguments[3];\n\n        System.arraycopy(this.arrL, 0, l, 0, Math.min(this.arrL.length, this.l.length));\n        System.arraycopy(this.arrS, 0, s, 0, Math.min(this.arrS.length, this.s.length));\n        System.arraycopy(this.arr21, 0, this.psfb21, 0, Math.min(this.arr21.length, this.psfb21.length));\n        System.arraycopy(this.arr12, 0, this.psfb12, 0, Math.min(this.arr12.length, this.psfb12.length));\n    }\n}\n\nmodule.exports = ScaleFac;\n","var common = require('./common.js');\nvar System = common.System;\nvar VbrMode = common.VbrMode;\nvar Float = common.Float;\nvar ShortBlock = common.ShortBlock;\nvar Util = common.Util;\nvar Arrays = common.Arrays;\nvar new_array_n = common.new_array_n;\nvar new_byte = common.new_byte;\nvar new_double = common.new_double;\nvar new_float = common.new_float;\nvar new_float_n = common.new_float_n;\nvar new_int = common.new_int;\nvar new_int_n = common.new_int_n;\nvar assert = common.assert;\n\nvar Encoder = require('./Encoder.js');\n\n//package mp3;\n\n/**\n * Variables used for --nspsytune\n *\n * @author Ken\n *\n */\nfunction NsPsy() {\n    this.last_en_subshort = new_float_n([4, 9]);\n    this.lastAttacks = new_int(4);\n    this.pefirbuf = new_float(19);\n    this.longfact = new_float(Encoder.SBMAX_l);\n    this.shortfact = new_float(Encoder.SBMAX_s);\n\n    /**\n     * short block tuning\n     */\n    this.attackthre = 0.;\n    this.attackthre_s = 0.;\n}\n\nmodule.exports = NsPsy;\n","//package mp3;\n\nfunction VBRSeekInfo() {\n    /**\n     * What we have seen so far.\n     */\n    this.sum = 0;\n    /**\n     * How many frames we have seen in this chunk.\n     */\n    this.seen = 0;\n    /**\n     * How many frames we want to collect into one chunk.\n     */\n    this.want = 0;\n    /**\n     * Actual position in our bag.\n     */\n    this.pos = 0;\n    /**\n     * Size of our bag.\n     */\n    this.size = 0;\n    /**\n     * Pointer to our bag.\n     */\n    this.bag = null;\n    this.nVbrNumFrames = 0;\n    this.nBytesWritten = 0;\n    /* VBR tag data */\n    this.TotalFrameSize = 0;\n}\n\nmodule.exports = VBRSeekInfo;\n","var common = require('./common.js');\nvar System = common.System;\nvar VbrMode = common.VbrMode;\nvar Float = common.Float;\nvar ShortBlock = common.ShortBlock;\nvar Util = common.Util;\nvar Arrays = common.Arrays;\nvar new_array_n = common.new_array_n;\nvar new_byte = common.new_byte;\nvar new_double = common.new_double;\nvar new_float = common.new_float;\nvar new_float_n = common.new_float_n;\nvar new_int = common.new_int;\nvar new_int_n = common.new_int_n;\nvar assert = common.assert;\n\nvar IIISideInfo = require('./IIISideInfo.js');\nvar ScaleFac = require('./ScaleFac.js');\nvar NsPsy = require('./NsPsy.js');\nvar VBRSeekInfo = require('./VBRSeekInfo.js');\nvar III_psy_xmin = require('./III_psy_xmin.js');\nvar Encoder = require('./Encoder.js');\nvar L3Side = require('./L3Side.js');\n\n\nLameInternalFlags.MFSIZE = (3 * 1152 + Encoder.ENCDELAY - Encoder.MDCTDELAY);\nLameInternalFlags.MAX_HEADER_BUF = 256;\nLameInternalFlags.MAX_BITS_PER_CHANNEL = 4095;\nLameInternalFlags.MAX_BITS_PER_GRANULE = 7680;\nLameInternalFlags.BPC = 320;\n\nfunction LameInternalFlags() {\n    var MAX_HEADER_LEN = 40;\n\n\n    /********************************************************************\n     * internal variables NOT set by calling program, and should not be *\n     * modified by the calling program *\n     ********************************************************************/\n\n    /**\n     * Some remarks to the Class_ID field: The Class ID is an Identifier for a\n     * pointer to this struct. It is very unlikely that a pointer to\n     * lame_global_flags has the same 32 bits in it's structure (large and other\n     * special properties, for instance prime).\n     *\n     * To test that the structure is right and initialized, use: if ( gfc .\n     * Class_ID == LAME_ID ) ... Other remark: If you set a flag to 0 for uninit\n     * data and 1 for init data, the right test should be \"if (flag == 1)\" and\n     * NOT \"if (flag)\". Unintended modification of this element will be\n     * otherwise misinterpreted as an init.\n     */\n    this.Class_ID = 0;\n\n    this.lame_encode_frame_init = 0;\n    this.iteration_init_init = 0;\n    this.fill_buffer_resample_init = 0;\n\n    //public float mfbuf[][] = new float[2][MFSIZE];\n    this.mfbuf = new_float_n([2, LameInternalFlags.MFSIZE]);\n\n    /**\n     * granules per frame\n     */\n    this.mode_gr = 0;\n    /**\n     * number of channels in the input data stream (PCM or decoded PCM)\n     */\n    this.channels_in = 0;\n    /**\n     * number of channels in the output data stream (not used for decoding)\n     */\n    this.channels_out = 0;\n    /**\n     * input_samp_rate/output_samp_rate\n     */\n        //public double resample_ratio;\n    this.resample_ratio = 0.;\n\n    this.mf_samples_to_encode = 0;\n    this.mf_size = 0;\n    /**\n     * min bitrate index\n     */\n    this.VBR_min_bitrate = 0;\n    /**\n     * max bitrate index\n     */\n    this.VBR_max_bitrate = 0;\n    this.bitrate_index = 0;\n    this.samplerate_index = 0;\n    this.mode_ext = 0;\n\n    /* lowpass and highpass filter control */\n    /**\n     * normalized frequency bounds of passband\n     */\n    this.lowpass1 = 0.;\n    this.lowpass2 = 0.;\n    /**\n     * normalized frequency bounds of passband\n     */\n    this.highpass1 = 0.;\n    this.highpass2 = 0.;\n\n    /**\n     * 0 = none 1 = ISO AAC model 2 = allow scalefac_select=1\n     */\n    this.noise_shaping = 0;\n\n    /**\n     * 0 = ISO model: amplify all distorted bands<BR>\n     * 1 = amplify within 50% of max (on db scale)<BR>\n     * 2 = amplify only most distorted band<BR>\n     * 3 = method 1 and refine with method 2<BR>\n     */\n    this.noise_shaping_amp = 0;\n    /**\n     * 0 = no substep<BR>\n     * 1 = use substep shaping at last step(VBR only)<BR>\n     * (not implemented yet)<BR>\n     * 2 = use substep inside loop<BR>\n     * 3 = use substep inside loop and last step<BR>\n     */\n    this.substep_shaping = 0;\n\n    /**\n     * 1 = gpsycho. 0 = none\n     */\n    this.psymodel = 0;\n    /**\n     * 0 = stop at over=0, all scalefacs amplified or<BR>\n     * a scalefac has reached max value<BR>\n     * 1 = stop when all scalefacs amplified or a scalefac has reached max value<BR>\n     * 2 = stop when all scalefacs amplified\n     */\n    this.noise_shaping_stop = 0;\n\n    /**\n     * 0 = no, 1 = yes\n     */\n    this.subblock_gain = 0;\n    /**\n     * 0 = no. 1=outside loop 2=inside loop(slow)\n     */\n    this.use_best_huffman = 0;\n\n    /**\n     * 0 = stop early after 0 distortion found. 1 = full search\n     */\n    this.full_outer_loop = 0;\n\n    //public IIISideInfo l3_side = new IIISideInfo();\n    this.l3_side = new IIISideInfo();\n    this.ms_ratio = new_float(2);\n\n    /* used for padding */\n    /**\n     * padding for the current frame?\n     */\n    this.padding = 0;\n    this.frac_SpF = 0;\n    this.slot_lag = 0;\n\n    /**\n     * optional ID3 tags\n     */\n        //public ID3TagSpec tag_spec;\n    this.tag_spec = null;\n    this.nMusicCRC = 0;\n\n    /* variables used by Quantize */\n    //public int OldValue[] = new int[2];\n    this.OldValue = new_int(2);\n    //public int CurrentStep[] = new int[2];\n    this.CurrentStep = new_int(2);\n\n    this.masking_lower = 0.;\n    //public int bv_scf[] = new int[576];\n    this.bv_scf = new_int(576);\n    //public int pseudohalf[] = new int[L3Side.SFBMAX];\n    this.pseudohalf = new_int(L3Side.SFBMAX);\n\n    /**\n     * will be set in lame_init_params\n     */\n    this.sfb21_extra = false;\n\n    /* BPC = maximum number of filter convolution windows to precompute */\n    //public float[][] inbuf_old = new float[2][];\n    this.inbuf_old = new Array(2);\n    //public float[][] blackfilt = new float[2 * BPC + 1][];\n    this.blackfilt = new Array(2 * LameInternalFlags.BPC + 1);\n    //public double itime[] = new double[2];\n    this.itime = new_double(2);\n    this.sideinfo_len = 0;\n\n    /* variables for newmdct.c */\n    //public float sb_sample[][][][] = new float[2][2][18][Encoder.SBLIMIT];\n    this.sb_sample = new_float_n([2, 2, 18, Encoder.SBLIMIT]);\n    this.amp_filter = new_float(32);\n\n    /* variables for BitStream */\n\n    /**\n     * <PRE>\n     * mpeg1: buffer=511 bytes  smallest frame: 96-38(sideinfo)=58\n     * max number of frames in reservoir:  8\n     * mpeg2: buffer=255 bytes.  smallest frame: 24-23bytes=1\n     * with VBR, if you are encoding all silence, it is possible to\n     * have 8kbs/24khz frames with 1byte of data each, which means we need\n     * to buffer up to 255 headers!\n     * </PRE>\n     */\n    /**\n     * also, max_header_buf has to be a power of two\n     */\n    /**\n     * max size of header is 38\n     */\n\n    function Header() {\n        this.write_timing = 0;\n        this.ptr = 0;\n        //public byte buf[] = new byte[MAX_HEADER_LEN];\n        this.buf = new_byte(MAX_HEADER_LEN);\n    }\n\n    this.header = new Array(LameInternalFlags.MAX_HEADER_BUF);\n\n    this.h_ptr = 0;\n    this.w_ptr = 0;\n    this.ancillary_flag = 0;\n\n    /* variables for Reservoir */\n    /**\n     * in bits\n     */\n    this.ResvSize = 0;\n    /**\n     * in bits\n     */\n    this.ResvMax = 0;\n\n    //public ScaleFac scalefac_band = new ScaleFac();\n    this.scalefac_band = new ScaleFac();\n\n    /* daa from PsyModel */\n    /* The static variables \"r\", \"phi_sav\", \"new\", \"old\" and \"oldest\" have */\n    /* to be remembered for the unpredictability measure. For \"r\" and */\n    /* \"phi_sav\", the first index from the left is the channel select and */\n    /* the second index is the \"age\" of the data. */\n    this.minval_l = new_float(Encoder.CBANDS);\n    this.minval_s = new_float(Encoder.CBANDS);\n    this.nb_1 = new_float_n([4, Encoder.CBANDS]);\n    this.nb_2 = new_float_n([4, Encoder.CBANDS]);\n    this.nb_s1 = new_float_n([4, Encoder.CBANDS]);\n    this.nb_s2 = new_float_n([4, Encoder.CBANDS]);\n    this.s3_ss = null;\n    this.s3_ll = null;\n    this.decay = 0.;\n\n    //public III_psy_xmin[] thm = new III_psy_xmin[4];\n    //public III_psy_xmin[] en = new III_psy_xmin[4];\n    this.thm = new Array(4);\n    this.en = new Array(4);\n\n    /**\n     * fft and energy calculation\n     */\n    this.tot_ener = new_float(4);\n\n    /* loudness calculation (for adaptive threshold of hearing) */\n    /**\n     * loudness^2 approx. per granule and channel\n     */\n    this.loudness_sq = new_float_n([2, 2]);\n    /**\n     * account for granule delay of L3psycho_anal\n     */\n    this.loudness_sq_save = new_float(2);\n\n    /**\n     * Scale Factor Bands\n     */\n    this.mld_l = new_float(Encoder.SBMAX_l);\n    this.mld_s = new_float(Encoder.SBMAX_s);\n    this.bm_l = new_int(Encoder.SBMAX_l);\n    this.bo_l = new_int(Encoder.SBMAX_l);\n    this.bm_s = new_int(Encoder.SBMAX_s);\n    this.bo_s = new_int(Encoder.SBMAX_s);\n    this.npart_l = 0;\n    this.npart_s = 0;\n\n    this.s3ind = new_int_n([Encoder.CBANDS, 2]);\n    this.s3ind_s = new_int_n([Encoder.CBANDS, 2]);\n\n    this.numlines_s = new_int(Encoder.CBANDS);\n    this.numlines_l = new_int(Encoder.CBANDS);\n    this.rnumlines_l = new_float(Encoder.CBANDS);\n    this.mld_cb_l = new_float(Encoder.CBANDS);\n    this.mld_cb_s = new_float(Encoder.CBANDS);\n    this.numlines_s_num1 = 0;\n    this.numlines_l_num1 = 0;\n\n    /* ratios */\n    this.pe = new_float(4);\n    this.ms_ratio_s_old = 0.;\n    this.ms_ratio_l_old = 0.;\n    this.ms_ener_ratio_old = 0.;\n\n    /**\n     * block type\n     */\n    this.blocktype_old = new_int(2);\n\n    /**\n     * variables used for --nspsytune\n     */\n    this.nsPsy = new NsPsy();\n\n    /**\n     * used for Xing VBR header\n     */\n    this.VBR_seek_table = new VBRSeekInfo();\n\n    /**\n     * all ATH related stuff\n     */\n        //public ATH ATH;\n    this.ATH = null;\n\n    this.PSY = null;\n\n    this.nogap_total = 0;\n    this.nogap_current = 0;\n\n    /* ReplayGain */\n    this.decode_on_the_fly = true;\n    this.findReplayGain = true;\n    this.findPeakSample = true;\n    this.PeakSample = 0.;\n    this.RadioGain = 0;\n    this.AudiophileGain = 0;\n    //public ReplayGain rgdata;\n    this.rgdata = null;\n\n    /**\n     * gain change required for preventing clipping\n     */\n    this.noclipGainChange = 0;\n    /**\n     * user-specified scale factor required for preventing clipping\n     */\n    this.noclipScale = 0.;\n\n    /* simple statistics */\n    this.bitrate_stereoMode_Hist = new_int_n([16, 4 + 1]);\n    /**\n     * norm/start/short/stop/mixed(short)/sum\n     */\n    this.bitrate_blockType_Hist = new_int_n([16, 4 + 1 + 1]);\n\n    //public PlottingData pinfo;\n    //public MPGLib.mpstr_tag hip;\n    this.pinfo = null;\n    this.hip = null;\n\n    this.in_buffer_nsamples = 0;\n    //public float[] in_buffer_0;\n    //public float[] in_buffer_1;\n    this.in_buffer_0 = null;\n    this.in_buffer_1 = null;\n\n    //public IIterationLoop iteration_loop;\n    this.iteration_loop = null;\n\n    for (var i = 0; i < this.en.length; i++) {\n        this.en[i] = new III_psy_xmin();\n    }\n    for (var i = 0; i < this.thm.length; i++) {\n        this.thm[i] = new III_psy_xmin();\n    }\n    for (var i = 0; i < this.header.length; i++) {\n        this.header[i] = new Header();\n    }\n\n}\n\nmodule.exports = LameInternalFlags;\n","var common = require('./common.js');\nvar System = common.System;\nvar VbrMode = common.VbrMode;\nvar Float = common.Float;\nvar ShortBlock = common.ShortBlock;\nvar Util = common.Util;\nvar Arrays = common.Arrays;\nvar new_array_n = common.new_array_n;\nvar new_byte = common.new_byte;\nvar new_double = common.new_double;\nvar new_float = common.new_float;\nvar new_float_n = common.new_float_n;\nvar new_int = common.new_int;\nvar new_int_n = common.new_int_n;\nvar assert = common.assert;\n\nvar Encoder = require('./Encoder.js');\n\n/**\n * ATH related stuff, if something new ATH related has to be added, please plug\n * it here into the ATH.\n */\nfunction ATH() {\n    /**\n     * Method for the auto adjustment.\n     */\n    this.useAdjust = 0;\n    /**\n     * factor for tuning the (sample power) point below which adaptive threshold\n     * of hearing adjustment occurs\n     */\n    this.aaSensitivityP = 0.;\n    /**\n     * Lowering based on peak volume, 1 = no lowering.\n     */\n    this.adjust = 0.;\n    /**\n     * Limit for dynamic ATH adjust.\n     */\n    this.adjustLimit = 0.;\n    /**\n     * Determined to lower x dB each second.\n     */\n    this.decay = 0.;\n    /**\n     * Lowest ATH value.\n     */\n    this.floor = 0.;\n    /**\n     * ATH for sfbs in long blocks.\n     */\n    this.l = new_float(Encoder.SBMAX_l);\n    /**\n     * ATH for sfbs in short blocks.\n     */\n    this.s = new_float(Encoder.SBMAX_s);\n    /**\n     * ATH for partitioned sfb21 in long blocks.\n     */\n    this.psfb21 = new_float(Encoder.PSFB21);\n    /**\n     * ATH for partitioned sfb12 in short blocks.\n     */\n    this.psfb12 = new_float(Encoder.PSFB12);\n    /**\n     * ATH for long block convolution bands.\n     */\n    this.cb_l = new_float(Encoder.CBANDS);\n    /**\n     * ATH for short block convolution bands.\n     */\n    this.cb_s = new_float(Encoder.CBANDS);\n    /**\n     * Equal loudness weights (based on ATH).\n     */\n    this.eql_w = new_float(Encoder.BLKSIZE / 2);\n}\n\nmodule.exports = ATH;\n","/*\n *  ReplayGainAnalysis - analyzes input samples and give the recommended dB change\n *  Copyright (C) 2001 David Robinson and Glen Sawyer\n *  Improvements and optimizations added by Frank Klemm, and by Marcel Muller \n *\n *  This library is free software; you can redistribute it and/or\n *  modify it under the terms of the GNU Lesser General Public\n *  License as published by the Free Software Foundation; either\n *  version 2.1 of the License, or (at your option) any later version.\n *\n *  This library is distributed in the hope that it will be useful,\n *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n *  Lesser General Public License for more details.\n *\n *  You should have received a copy of the GNU Lesser General Public\n *  License along with this library; if not, write to the Free Software\n *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n *\n *  concept and filter values by David Robinson (David@Robinson.org)\n *    -- blame him if you think the idea is flawed\n *  original coding by Glen Sawyer (mp3gain@hotmail.com)\n *    -- blame him if you think this runs too slowly, or the coding is otherwise flawed\n *\n *  lots of code improvements by Frank Klemm ( http://www.uni-jena.de/~pfk/mpp/ )\n *    -- credit him for all the _good_ programming ;)\n *\n *\n *  For an explanation of the concepts and the basic algorithms involved, go to:\n *    http://www.replaygain.org/\n */\n\n/*\n *  Here's the deal. Call\n *\n *    InitGainAnalysis ( long samplefreq );\n *\n *  to initialize everything. Call\n *\n *    AnalyzeSamples ( var Float_t*  left_samples,\n *                     var Float_t*  right_samples,\n *                     size_t          num_samples,\n *                     int             num_channels );\n *\n *  as many times as you want, with as many or as few samples as you want.\n *  If mono, pass the sample buffer in through left_samples, leave\n *  right_samples NULL, and make sure num_channels = 1.\n *\n *    GetTitleGain()\n *\n *  will return the recommended dB level change for all samples analyzed\n *  SINCE THE LAST TIME you called GetTitleGain() OR InitGainAnalysis().\n *\n *    GetAlbumGain()\n *\n *  will return the recommended dB level change for all samples analyzed\n *  since InitGainAnalysis() was called and finalized with GetTitleGain().\n *\n *  Pseudo-code to process an album:\n *\n *    Float_t       l_samples [4096];\n *    Float_t       r_samples [4096];\n *    size_t        num_samples;\n *    unsigned int  num_songs;\n *    unsigned int  i;\n *\n *    InitGainAnalysis ( 44100 );\n *    for ( i = 1; i <= num_songs; i++ ) {\n *        while ( ( num_samples = getSongSamples ( song[i], left_samples, right_samples ) ) > 0 )\n *            AnalyzeSamples ( left_samples, right_samples, num_samples, 2 );\n *        fprintf (\"Recommended dB change for song %2d: %+6.2 dB\\n\", i, GetTitleGain() );\n *    }\n *    fprintf (\"Recommended dB change for whole album: %+6.2 dB\\n\", GetAlbumGain() );\n */\n\n/*\n *  So here's the main source of potential code confusion:\n *\n *  The filters applied to the incoming samples are IIR filters,\n *  meaning they rely on up to <filter order> number of previous samples\n *  AND up to <filter order> number of previous filtered samples.\n *\n *  I set up the AnalyzeSamples routine to minimize memory usage and interface\n *  complexity. The speed isn't compromised too much (I don't think), but the\n *  internal complexity is higher than it should be for such a relatively\n *  simple routine.\n *\n *  Optimization/clarity suggestions are welcome.\n */\nvar common = require('./common.js');\nvar System = common.System;\nvar VbrMode = common.VbrMode;\nvar Float = common.Float;\nvar ShortBlock = common.ShortBlock;\nvar Util = common.Util;\nvar Arrays = common.Arrays;\nvar new_array_n = common.new_array_n;\nvar new_byte = common.new_byte;\nvar new_double = common.new_double;\nvar new_float = common.new_float;\nvar new_float_n = common.new_float_n;\nvar new_int = common.new_int;\nvar new_int_n = common.new_int_n;\nvar assert = common.assert;\n\n/**\n * Table entries per dB\n */\nGainAnalysis.STEPS_per_dB = 100.;\n/**\n * Table entries for 0...MAX_dB (normal max. values are 70...80 dB)\n */\nGainAnalysis.MAX_dB = 120.;\nGainAnalysis.GAIN_NOT_ENOUGH_SAMPLES = -24601;\nGainAnalysis.GAIN_ANALYSIS_ERROR = 0;\nGainAnalysis.GAIN_ANALYSIS_OK = 1;\nGainAnalysis.INIT_GAIN_ANALYSIS_ERROR = 0;\nGainAnalysis.INIT_GAIN_ANALYSIS_OK = 1;\n\nGainAnalysis.YULE_ORDER = 10;\nGainAnalysis.MAX_ORDER = GainAnalysis.YULE_ORDER;\n\nGainAnalysis.MAX_SAMP_FREQ = 48000;\nGainAnalysis.RMS_WINDOW_TIME_NUMERATOR = 1;\nGainAnalysis.RMS_WINDOW_TIME_DENOMINATOR = 20;\nGainAnalysis.MAX_SAMPLES_PER_WINDOW = ((GainAnalysis.MAX_SAMP_FREQ * GainAnalysis.RMS_WINDOW_TIME_NUMERATOR) / GainAnalysis.RMS_WINDOW_TIME_DENOMINATOR + 1);\n\nfunction GainAnalysis() {\n    /**\n     * calibration value for 89dB\n     */\n    var PINK_REF = 64.82;\n\n    var YULE_ORDER = GainAnalysis.YULE_ORDER;\n    /**\n     * percentile which is louder than the proposed level\n     */\n    var RMS_PERCENTILE = 0.95;\n    /**\n     * maximum allowed sample frequency [Hz]\n     */\n    var MAX_SAMP_FREQ = GainAnalysis.MAX_SAMP_FREQ;\n    var RMS_WINDOW_TIME_NUMERATOR = GainAnalysis.RMS_WINDOW_TIME_NUMERATOR;\n    /**\n     * numerator / denominator = time slice size [s]\n     */\n    var RMS_WINDOW_TIME_DENOMINATOR = GainAnalysis.RMS_WINDOW_TIME_DENOMINATOR;\n    /**\n     * max. Samples per Time slice\n     */\n    var MAX_SAMPLES_PER_WINDOW = GainAnalysis.MAX_SAMPLES_PER_WINDOW;\n\n\n    var ABYule = [\n        [0.03857599435200, -3.84664617118067, -0.02160367184185,\n            7.81501653005538, -0.00123395316851, -11.34170355132042,\n            -0.00009291677959, 13.05504219327545, -0.01655260341619,\n            -12.28759895145294, 0.02161526843274, 9.48293806319790,\n            -0.02074045215285, -5.87257861775999, 0.00594298065125,\n            2.75465861874613, 0.00306428023191, -0.86984376593551,\n            0.00012025322027, 0.13919314567432, 0.00288463683916],\n        [0.05418656406430, -3.47845948550071, -0.02911007808948,\n            6.36317777566148, -0.00848709379851, -8.54751527471874,\n            -0.00851165645469, 9.47693607801280, -0.00834990904936,\n            -8.81498681370155, 0.02245293253339, 6.85401540936998,\n            -0.02596338512915, -4.39470996079559, 0.01624864962975,\n            2.19611684890774, -0.00240879051584, -0.75104302451432,\n            0.00674613682247, 0.13149317958808, -0.00187763777362],\n        [0.15457299681924, -2.37898834973084, -0.09331049056315,\n            2.84868151156327, -0.06247880153653, -2.64577170229825,\n            0.02163541888798, 2.23697657451713, -0.05588393329856,\n            -1.67148153367602, 0.04781476674921, 1.00595954808547,\n            0.00222312597743, -0.45953458054983, 0.03174092540049,\n            0.16378164858596, -0.01390589421898, -0.05032077717131,\n            0.00651420667831, 0.02347897407020, -0.00881362733839],\n        [0.30296907319327, -1.61273165137247, -0.22613988682123,\n            1.07977492259970, -0.08587323730772, -0.25656257754070,\n            0.03282930172664, -0.16276719120440, -0.00915702933434,\n            -0.22638893773906, -0.02364141202522, 0.39120800788284,\n            -0.00584456039913, -0.22138138954925, 0.06276101321749,\n            0.04500235387352, -0.00000828086748, 0.02005851806501,\n            0.00205861885564, 0.00302439095741, -0.02950134983287],\n        [0.33642304856132, -1.49858979367799, -0.25572241425570,\n            0.87350271418188, -0.11828570177555, 0.12205022308084,\n            0.11921148675203, -0.80774944671438, -0.07834489609479,\n            0.47854794562326, -0.00469977914380, -0.12453458140019,\n            -0.00589500224440, -0.04067510197014, 0.05724228140351,\n            0.08333755284107, 0.00832043980773, -0.04237348025746,\n            -0.01635381384540, 0.02977207319925, -0.01760176568150],\n        [0.44915256608450, -0.62820619233671, -0.14351757464547,\n            0.29661783706366, -0.22784394429749, -0.37256372942400,\n            -0.01419140100551, 0.00213767857124, 0.04078262797139,\n            -0.42029820170918, -0.12398163381748, 0.22199650564824,\n            0.04097565135648, 0.00613424350682, 0.10478503600251,\n            0.06747620744683, -0.01863887810927, 0.05784820375801,\n            -0.03193428438915, 0.03222754072173, 0.00541907748707],\n        [0.56619470757641, -1.04800335126349, -0.75464456939302,\n            0.29156311971249, 0.16242137742230, -0.26806001042947,\n            0.16744243493672, 0.00819999645858, -0.18901604199609,\n            0.45054734505008, 0.30931782841830, -0.33032403314006,\n            -0.27562961986224, 0.06739368333110, 0.00647310677246,\n            -0.04784254229033, 0.08647503780351, 0.01639907836189,\n            -0.03788984554840, 0.01807364323573, -0.00588215443421],\n        [0.58100494960553, -0.51035327095184, -0.53174909058578,\n            -0.31863563325245, -0.14289799034253, -0.20256413484477,\n            0.17520704835522, 0.14728154134330, 0.02377945217615,\n            0.38952639978999, 0.15558449135573, -0.23313271880868,\n            -0.25344790059353, -0.05246019024463, 0.01628462406333,\n            -0.02505961724053, 0.06920467763959, 0.02442357316099,\n            -0.03721611395801, 0.01818801111503, -0.00749618797172],\n        [0.53648789255105, -0.25049871956020, -0.42163034350696,\n            -0.43193942311114, -0.00275953611929, -0.03424681017675,\n            0.04267842219415, -0.04678328784242, -0.10214864179676,\n            0.26408300200955, 0.14590772289388, 0.15113130533216,\n            -0.02459864859345, -0.17556493366449, -0.11202315195388,\n            -0.18823009262115, -0.04060034127000, 0.05477720428674,\n            0.04788665548180, 0.04704409688120, -0.02217936801134]];\n\n    var ABButter = [\n        [0.98621192462708, -1.97223372919527, -1.97242384925416,\n            0.97261396931306, 0.98621192462708],\n        [0.98500175787242, -1.96977855582618, -1.97000351574484,\n            0.97022847566350, 0.98500175787242],\n        [0.97938932735214, -1.95835380975398, -1.95877865470428,\n            0.95920349965459, 0.97938932735214],\n        [0.97531843204928, -1.95002759149878, -1.95063686409857,\n            0.95124613669835, 0.97531843204928],\n        [0.97316523498161, -1.94561023566527, -1.94633046996323,\n            0.94705070426118, 0.97316523498161],\n        [0.96454515552826, -1.92783286977036, -1.92909031105652,\n            0.93034775234268, 0.96454515552826],\n        [0.96009142950541, -1.91858953033784, -1.92018285901082,\n            0.92177618768381, 0.96009142950541],\n        [0.95856916599601, -1.91542108074780, -1.91713833199203,\n            0.91885558323625, 0.95856916599601],\n        [0.94597685600279, -1.88903307939452, -1.89195371200558,\n            0.89487434461664, 0.94597685600279]];\n\n\n    /**\n     * When calling this procedure, make sure that ip[-order] and op[-order]\n     * point to real data\n     */\n    //private void filterYule(final float[] input, int inputPos, float[] output,\n    //int outputPos, int nSamples, final float[] kernel) {\n    function filterYule(input, inputPos, output, outputPos, nSamples, kernel) {\n\n        while ((nSamples--) != 0) {\n            /* 1e-10 is a hack to avoid slowdown because of denormals */\n            output[outputPos] = 1e-10 + input[inputPos + 0] * kernel[0]\n                - output[outputPos - 1] * kernel[1] + input[inputPos - 1]\n                * kernel[2] - output[outputPos - 2] * kernel[3]\n                + input[inputPos - 2] * kernel[4] - output[outputPos - 3]\n                * kernel[5] + input[inputPos - 3] * kernel[6]\n                - output[outputPos - 4] * kernel[7] + input[inputPos - 4]\n                * kernel[8] - output[outputPos - 5] * kernel[9]\n                + input[inputPos - 5] * kernel[10] - output[outputPos - 6]\n                * kernel[11] + input[inputPos - 6] * kernel[12]\n                - output[outputPos - 7] * kernel[13] + input[inputPos - 7]\n                * kernel[14] - output[outputPos - 8] * kernel[15]\n                + input[inputPos - 8] * kernel[16] - output[outputPos - 9]\n                * kernel[17] + input[inputPos - 9] * kernel[18]\n                - output[outputPos - 10] * kernel[19]\n                + input[inputPos - 10] * kernel[20];\n            ++outputPos;\n            ++inputPos;\n        }\n    }\n\n//private void filterButter(final float[] input, int inputPos,\n//    float[] output, int outputPos, int nSamples, final float[] kernel) {\n    function filterButter(input, inputPos, output, outputPos, nSamples, kernel) {\n\n        while ((nSamples--) != 0) {\n            output[outputPos] = input[inputPos + 0] * kernel[0]\n                - output[outputPos - 1] * kernel[1] + input[inputPos - 1]\n                * kernel[2] - output[outputPos - 2] * kernel[3]\n                + input[inputPos - 2] * kernel[4];\n            ++outputPos;\n            ++inputPos;\n        }\n    }\n\n    /**\n     * @return INIT_GAIN_ANALYSIS_OK if successful, INIT_GAIN_ANALYSIS_ERROR if\n     *         not\n     */\n    function ResetSampleFrequency(rgData, samplefreq) {\n        /* zero out initial values */\n        for (var i = 0; i < MAX_ORDER; i++)\n            rgData.linprebuf[i] = rgData.lstepbuf[i] = rgData.loutbuf[i] = rgData.rinprebuf[i] = rgData.rstepbuf[i] = rgData.routbuf[i] = 0.;\n\n        switch (0 | (samplefreq)) {\n            case 48000:\n                rgData.reqindex = 0;\n                break;\n            case 44100:\n                rgData.reqindex = 1;\n                break;\n            case 32000:\n                rgData.reqindex = 2;\n                break;\n            case 24000:\n                rgData.reqindex = 3;\n                break;\n            case 22050:\n                rgData.reqindex = 4;\n                break;\n            case 16000:\n                rgData.reqindex = 5;\n                break;\n            case 12000:\n                rgData.reqindex = 6;\n                break;\n            case 11025:\n                rgData.reqindex = 7;\n                break;\n            case 8000:\n                rgData.reqindex = 8;\n                break;\n            default:\n                return INIT_GAIN_ANALYSIS_ERROR;\n        }\n\n        rgData.sampleWindow = 0 | ((samplefreq * RMS_WINDOW_TIME_NUMERATOR\n            + RMS_WINDOW_TIME_DENOMINATOR - 1) / RMS_WINDOW_TIME_DENOMINATOR);\n\n        rgData.lsum = 0.;\n        rgData.rsum = 0.;\n        rgData.totsamp = 0;\n\n        Arrays.ill(rgData.A, 0);\n\n        return INIT_GAIN_ANALYSIS_OK;\n    }\n\n    this.InitGainAnalysis = function (rgData, samplefreq) {\n        if (ResetSampleFrequency(rgData, samplefreq) != INIT_GAIN_ANALYSIS_OK) {\n            return INIT_GAIN_ANALYSIS_ERROR;\n        }\n\n        rgData.linpre = MAX_ORDER;\n        rgData.rinpre = MAX_ORDER;\n        rgData.lstep = MAX_ORDER;\n        rgData.rstep = MAX_ORDER;\n        rgData.lout = MAX_ORDER;\n        rgData.rout = MAX_ORDER;\n\n        Arrays.fill(rgData.B, 0);\n\n        return INIT_GAIN_ANALYSIS_OK;\n    };\n\n    /**\n     * square\n     */\n    function fsqr(d) {\n        return d * d;\n    }\n\n    this.AnalyzeSamples = function (rgData, left_samples, left_samplesPos, right_samples, right_samplesPos, num_samples,\n                                    num_channels) {\n        var curleft;\n        var curleftBase;\n        var curright;\n        var currightBase;\n        var batchsamples;\n        var cursamples;\n        var cursamplepos;\n\n        if (num_samples == 0)\n            return GAIN_ANALYSIS_OK;\n\n        cursamplepos = 0;\n        batchsamples = num_samples;\n\n        switch (num_channels) {\n            case 1:\n                right_samples = left_samples;\n                right_samplesPos = left_samplesPos;\n                break;\n            case 2:\n                break;\n            default:\n                return GAIN_ANALYSIS_ERROR;\n        }\n\n        if (num_samples < MAX_ORDER) {\n            System.arraycopy(left_samples, left_samplesPos, rgData.linprebuf,\n                MAX_ORDER, num_samples);\n            System.arraycopy(right_samples, right_samplesPos, rgData.rinprebuf,\n                MAX_ORDER, num_samples);\n        } else {\n            System.arraycopy(left_samples, left_samplesPos, rgData.linprebuf,\n                MAX_ORDER, MAX_ORDER);\n            System.arraycopy(right_samples, right_samplesPos, rgData.rinprebuf,\n                MAX_ORDER, MAX_ORDER);\n        }\n\n        while (batchsamples > 0) {\n            cursamples = batchsamples > rgData.sampleWindow - rgData.totsamp ? rgData.sampleWindow\n            - rgData.totsamp\n                : batchsamples;\n            if (cursamplepos < MAX_ORDER) {\n                curleft = rgData.linpre + cursamplepos;\n                curleftBase = rgData.linprebuf;\n                curright = rgData.rinpre + cursamplepos;\n                currightBase = rgData.rinprebuf;\n                if (cursamples > MAX_ORDER - cursamplepos)\n                    cursamples = MAX_ORDER - cursamplepos;\n            } else {\n                curleft = left_samplesPos + cursamplepos;\n                curleftBase = left_samples;\n                curright = right_samplesPos + cursamplepos;\n                currightBase = right_samples;\n            }\n\n            filterYule(curleftBase, curleft, rgData.lstepbuf, rgData.lstep\n                + rgData.totsamp, cursamples, ABYule[rgData.reqindex]);\n            filterYule(currightBase, curright, rgData.rstepbuf, rgData.rstep\n                + rgData.totsamp, cursamples, ABYule[rgData.reqindex]);\n\n            filterButter(rgData.lstepbuf, rgData.lstep + rgData.totsamp,\n                rgData.loutbuf, rgData.lout + rgData.totsamp, cursamples,\n                ABButter[rgData.reqindex]);\n            filterButter(rgData.rstepbuf, rgData.rstep + rgData.totsamp,\n                rgData.routbuf, rgData.rout + rgData.totsamp, cursamples,\n                ABButter[rgData.reqindex]);\n\n            curleft = rgData.lout + rgData.totsamp;\n            /* Get the squared values */\n            curleftBase = rgData.loutbuf;\n            curright = rgData.rout + rgData.totsamp;\n            currightBase = rgData.routbuf;\n\n            var i = cursamples % 8;\n            while ((i--) != 0) {\n                rgData.lsum += fsqr(curleftBase[curleft++]);\n                rgData.rsum += fsqr(currightBase[curright++]);\n            }\n            i = cursamples / 8;\n            while ((i--) != 0) {\n                rgData.lsum += fsqr(curleftBase[curleft + 0])\n                    + fsqr(curleftBase[curleft + 1])\n                    + fsqr(curleftBase[curleft + 2])\n                    + fsqr(curleftBase[curleft + 3])\n                    + fsqr(curleftBase[curleft + 4])\n                    + fsqr(curleftBase[curleft + 5])\n                    + fsqr(curleftBase[curleft + 6])\n                    + fsqr(curleftBase[curleft + 7]);\n                curleft += 8;\n                rgData.rsum += fsqr(currightBase[curright + 0])\n                    + fsqr(currightBase[curright + 1])\n                    + fsqr(currightBase[curright + 2])\n                    + fsqr(currightBase[curright + 3])\n                    + fsqr(currightBase[curright + 4])\n                    + fsqr(currightBase[curright + 5])\n                    + fsqr(currightBase[curright + 6])\n                    + fsqr(currightBase[curright + 7]);\n                curright += 8;\n            }\n\n            batchsamples -= cursamples;\n            cursamplepos += cursamples;\n            rgData.totsamp += cursamples;\n            if (rgData.totsamp == rgData.sampleWindow) {\n                /* Get the Root Mean Square (RMS) for this set of samples */\n                var val = GainAnalysis.STEPS_per_dB\n                    * 10.\n                    * Math.log10((rgData.lsum + rgData.rsum)\n                        / rgData.totsamp * 0.5 + 1.e-37);\n                var ival = (val <= 0) ? 0 : 0 | val;\n                if (ival >= rgData.A.length)\n                    ival = rgData.A.length - 1;\n                rgData.A[ival]++;\n                rgData.lsum = rgData.rsum = 0.;\n\n                System.arraycopy(rgData.loutbuf, rgData.totsamp,\n                    rgData.loutbuf, 0, MAX_ORDER);\n                System.arraycopy(rgData.routbuf, rgData.totsamp,\n                    rgData.routbuf, 0, MAX_ORDER);\n                System.arraycopy(rgData.lstepbuf, rgData.totsamp,\n                    rgData.lstepbuf, 0, MAX_ORDER);\n                System.arraycopy(rgData.rstepbuf, rgData.totsamp,\n                    rgData.rstepbuf, 0, MAX_ORDER);\n                rgData.totsamp = 0;\n            }\n            if (rgData.totsamp > rgData.sampleWindow) {\n                /*\n                 * somehow I really screwed up: Error in programming! Contact\n                 * author about totsamp > sampleWindow\n                 */\n                return GAIN_ANALYSIS_ERROR;\n            }\n        }\n        if (num_samples < MAX_ORDER) {\n            System.arraycopy(rgData.linprebuf, num_samples, rgData.linprebuf,\n                0, MAX_ORDER - num_samples);\n            System.arraycopy(rgData.rinprebuf, num_samples, rgData.rinprebuf,\n                0, MAX_ORDER - num_samples);\n            System.arraycopy(left_samples, left_samplesPos, rgData.linprebuf,\n                MAX_ORDER - num_samples, num_samples);\n            System.arraycopy(right_samples, right_samplesPos, rgData.rinprebuf,\n                MAX_ORDER - num_samples, num_samples);\n        } else {\n            System.arraycopy(left_samples, left_samplesPos + num_samples\n                - MAX_ORDER, rgData.linprebuf, 0, MAX_ORDER);\n            System.arraycopy(right_samples, right_samplesPos + num_samples\n                - MAX_ORDER, rgData.rinprebuf, 0, MAX_ORDER);\n        }\n\n        return GAIN_ANALYSIS_OK;\n    };\n\n    function analyzeResult(Array, len) {\n        var i;\n\n        var elems = 0;\n        for (i = 0; i < len; i++)\n            elems += Array[i];\n        if (elems == 0)\n            return GAIN_NOT_ENOUGH_SAMPLES;\n\n        var upper = 0 | Math.ceil(elems * (1. - RMS_PERCENTILE));\n        for (i = len; i-- > 0;) {\n            if ((upper -= Array[i]) <= 0)\n                break;\n        }\n\n        //return (float) ((float) PINK_REF - (float) i / (float) STEPS_per_dB);\n        return (PINK_REF - i / GainAnalysis.STEPS_per_dB);\n    }\n\n    this.GetTitleGain = function (rgData) {\n        var retval = analyzeResult(rgData.A, rgData.A.length);\n\n        for (var i = 0; i < rgData.A.length; i++) {\n            rgData.B[i] += rgData.A[i];\n            rgData.A[i] = 0;\n        }\n\n        for (var i = 0; i < MAX_ORDER; i++)\n            rgData.linprebuf[i] = rgData.lstepbuf[i] = rgData.loutbuf[i] = rgData.rinprebuf[i] = rgData.rstepbuf[i] = rgData.routbuf[i] = 0.;\n\n        rgData.totsamp = 0;\n        rgData.lsum = rgData.rsum = 0.;\n        return retval;\n    }\n\n}\n\nmodule.exports = GainAnalysis;\n","var common = require('./common.js');\nvar System = common.System;\nvar VbrMode = common.VbrMode;\nvar Float = common.Float;\nvar ShortBlock = common.ShortBlock;\nvar Util = common.Util;\nvar Arrays = common.Arrays;\nvar new_array_n = common.new_array_n;\nvar new_byte = common.new_byte;\nvar new_double = common.new_double;\nvar new_float = common.new_float;\nvar new_float_n = common.new_float_n;\nvar new_int = common.new_int;\nvar new_int_n = common.new_int_n;\nvar assert = common.assert;\n\nvar GainAnalysis = require('./GainAnalysis.js');\n\nfunction ReplayGain() {\n    this.linprebuf = new_float(GainAnalysis.MAX_ORDER * 2);\n    /**\n     * left input samples, with pre-buffer\n     */\n    this.linpre = 0;\n    this.lstepbuf = new_float(GainAnalysis.MAX_SAMPLES_PER_WINDOW + GainAnalysis.MAX_ORDER);\n    /**\n     * left \"first step\" (i.e. post first filter) samples\n     */\n    this.lstep = 0;\n    this.loutbuf = new_float(GainAnalysis.MAX_SAMPLES_PER_WINDOW + GainAnalysis.MAX_ORDER);\n    /**\n     * left \"out\" (i.e. post second filter) samples\n     */\n    this.lout = 0;\n    this.rinprebuf = new_float(GainAnalysis.MAX_ORDER * 2);\n    /**\n     * right input samples ...\n     */\n    this.rinpre = 0;\n    this.rstepbuf = new_float(GainAnalysis.MAX_SAMPLES_PER_WINDOW + GainAnalysis.MAX_ORDER);\n    this.rstep = 0;\n    this.routbuf = new_float(GainAnalysis.MAX_SAMPLES_PER_WINDOW + GainAnalysis.MAX_ORDER);\n    this.rout = 0;\n    /**\n     * number of samples required to reach number of milliseconds required\n     * for RMS window\n     */\n    this.sampleWindow = 0;\n    this.totsamp = 0;\n    this.lsum = 0.;\n    this.rsum = 0.;\n    this.freqindex = 0;\n    this.first = 0;\n    this.A = new_int(0 | (GainAnalysis.STEPS_per_dB * GainAnalysis.MAX_dB));\n    this.B = new_int(0 | (GainAnalysis.STEPS_per_dB * GainAnalysis.MAX_dB));\n\n}\n\nmodule.exports = ReplayGain;\n","function MeanBits(meanBits) {\n    this.bits = meanBits;\n}\n\nmodule.exports = MeanBits;\n","var common = require('./common.js');\nvar System = common.System;\nvar VbrMode = common.VbrMode;\nvar Float = common.Float;\nvar ShortBlock = common.ShortBlock;\nvar Util = common.Util;\nvar Arrays = common.Arrays;\nvar new_array_n = common.new_array_n;\nvar new_byte = common.new_byte;\nvar new_double = common.new_double;\nvar new_float = common.new_float;\nvar new_float_n = common.new_float_n;\nvar new_int = common.new_int;\nvar new_int_n = common.new_int_n;\nvar assert = common.assert;\n\nvar MeanBits = require('./MeanBits.js');\nvar Encoder = require('./Encoder.js');\nvar L3Side = require('./L3Side.js');\nvar LameInternalFlags = require('./LameInternalFlags.js');\n\nfunction CBRNewIterationLoop(_quantize)  {\n    var quantize = _quantize;\n    this.quantize = quantize;\n\tthis.iteration_loop = function(gfp, pe, ms_ener_ratio, ratio) {\n\t\tvar gfc = gfp.internal_flags;\n        var l3_xmin = new_float(L3Side.SFBMAX);\n\t\tvar xrpow = new_float(576);\n\t\tvar targ_bits = new_int(2);\n\t\tvar mean_bits = 0, max_bits;\n\t\tvar l3_side = gfc.l3_side;\n\n\t\tvar mb = new MeanBits(mean_bits);\n\t\tthis.quantize.rv.ResvFrameBegin(gfp, mb);\n\t\tmean_bits = mb.bits;\n\n\t\t/* quantize! */\n\t\tfor (var gr = 0; gr < gfc.mode_gr; gr++) {\n\n\t\t\t/*\n\t\t\t * calculate needed bits\n\t\t\t */\n\t\t\tmax_bits = this.quantize.qupvt.on_pe(gfp, pe, targ_bits, mean_bits,\n\t\t\t\t\tgr, gr);\n\n\t\t\tif (gfc.mode_ext == Encoder.MPG_MD_MS_LR) {\n\t\t\t\tthis.quantize.ms_convert(gfc.l3_side, gr);\n\t\t\t\tthis.quantize.qupvt.reduce_side(targ_bits, ms_ener_ratio[gr],\n\t\t\t\t\t\tmean_bits, max_bits);\n\t\t\t}\n\n\t\t\tfor (var ch = 0; ch < gfc.channels_out; ch++) {\n\t\t\t\tvar adjust, masking_lower_db;\n\t\t\t\tvar cod_info = l3_side.tt[gr][ch];\n\n\t\t\t\tif (cod_info.block_type != Encoder.SHORT_TYPE) {\n\t\t\t\t\t// NORM, START or STOP type\n\t\t\t\t\tadjust = 0;\n\t\t\t\t\tmasking_lower_db = gfc.PSY.mask_adjust - adjust;\n\t\t\t\t} else {\n\t\t\t\t\tadjust = 0;\n\t\t\t\t\tmasking_lower_db = gfc.PSY.mask_adjust_short - adjust;\n\t\t\t\t}\n\t\t\t\tgfc.masking_lower =  Math.pow(10.0,\n\t\t\t\t\t\tmasking_lower_db * 0.1);\n\n\t\t\t\t/*\n\t\t\t\t * init_outer_loop sets up cod_info, scalefac and xrpow\n\t\t\t\t */\n\t\t\t\tthis.quantize.init_outer_loop(gfc, cod_info);\n\t\t\t\tif (this.quantize.init_xrpow(gfc, cod_info, xrpow)) {\n\t\t\t\t\t/*\n\t\t\t\t\t * xr contains energy we will have to encode calculate the\n\t\t\t\t\t * masking abilities find some good quantization in\n\t\t\t\t\t * outer_loop\n\t\t\t\t\t */\n\t\t\t\t\tthis.quantize.qupvt.calc_xmin(gfp, ratio[gr][ch], cod_info,\n\t\t\t\t\t\t\tl3_xmin);\n\t\t\t\t\tthis.quantize.outer_loop(gfp, cod_info, l3_xmin, xrpow, ch,\n\t\t\t\t\t\t\ttarg_bits[ch]);\n\t\t\t\t}\n\n\t\t\t\tthis.quantize.iteration_finish_one(gfc, gr, ch);\n\t\t\t\tassert (cod_info.part2_3_length <= LameInternalFlags.MAX_BITS_PER_CHANNEL);\n\t\t\t\tassert (cod_info.part2_3_length <= targ_bits[ch]);\n\t\t\t} /* for ch */\n\t\t} /* for gr */\n\n\t\tthis.quantize.rv.ResvFrameEnd(gfc, mean_bits);\n\t}\n}\nmodule.exports = CBRNewIterationLoop;\n","function HuffCodeTab(len, max, tab, hl) {\n    this.xlen = len;\n    this.linmax = max;\n    this.table = tab;\n    this.hlen = hl;\n}\n\nvar Tables = {};\n\n\nTables.t1HB = [\n    1, 1,\n    1, 0\n];\n\nTables.t2HB = [\n    1, 2, 1,\n    3, 1, 1,\n    3, 2, 0\n];\n\nTables.t3HB = [\n    3, 2, 1,\n    1, 1, 1,\n    3, 2, 0\n];\n\nTables.t5HB = [\n    1, 2, 6, 5,\n    3, 1, 4, 4,\n    7, 5, 7, 1,\n    6, 1, 1, 0\n];\n\nTables.t6HB = [\n    7, 3, 5, 1,\n    6, 2, 3, 2,\n    5, 4, 4, 1,\n    3, 3, 2, 0\n];\n\nTables.t7HB = [\n    1, 2, 10, 19, 16, 10,\n    3, 3, 7, 10, 5, 3,\n    11, 4, 13, 17, 8, 4,\n    12, 11, 18, 15, 11, 2,\n    7, 6, 9, 14, 3, 1,\n    6, 4, 5, 3, 2, 0\n];\n\nTables.t8HB = [\n    3, 4, 6, 18, 12, 5,\n    5, 1, 2, 16, 9, 3,\n    7, 3, 5, 14, 7, 3,\n    19, 17, 15, 13, 10, 4,\n    13, 5, 8, 11, 5, 1,\n    12, 4, 4, 1, 1, 0\n];\n\nTables.t9HB = [\n    7, 5, 9, 14, 15, 7,\n    6, 4, 5, 5, 6, 7,\n    7, 6, 8, 8, 8, 5,\n    15, 6, 9, 10, 5, 1,\n    11, 7, 9, 6, 4, 1,\n    14, 4, 6, 2, 6, 0\n];\n\nTables.t10HB = [\n    1, 2, 10, 23, 35, 30, 12, 17,\n    3, 3, 8, 12, 18, 21, 12, 7,\n    11, 9, 15, 21, 32, 40, 19, 6,\n    14, 13, 22, 34, 46, 23, 18, 7,\n    20, 19, 33, 47, 27, 22, 9, 3,\n    31, 22, 41, 26, 21, 20, 5, 3,\n    14, 13, 10, 11, 16, 6, 5, 1,\n    9, 8, 7, 8, 4, 4, 2, 0\n];\n\nTables.t11HB = [\n    3, 4, 10, 24, 34, 33, 21, 15,\n    5, 3, 4, 10, 32, 17, 11, 10,\n    11, 7, 13, 18, 30, 31, 20, 5,\n    25, 11, 19, 59, 27, 18, 12, 5,\n    35, 33, 31, 58, 30, 16, 7, 5,\n    28, 26, 32, 19, 17, 15, 8, 14,\n    14, 12, 9, 13, 14, 9, 4, 1,\n    11, 4, 6, 6, 6, 3, 2, 0\n];\n\nTables.t12HB = [\n    9, 6, 16, 33, 41, 39, 38, 26,\n    7, 5, 6, 9, 23, 16, 26, 11,\n    17, 7, 11, 14, 21, 30, 10, 7,\n    17, 10, 15, 12, 18, 28, 14, 5,\n    32, 13, 22, 19, 18, 16, 9, 5,\n    40, 17, 31, 29, 17, 13, 4, 2,\n    27, 12, 11, 15, 10, 7, 4, 1,\n    27, 12, 8, 12, 6, 3, 1, 0\n];\n\nTables.t13HB = [\n    1, 5, 14, 21, 34, 51, 46, 71, 42, 52, 68, 52, 67, 44, 43, 19,\n    3, 4, 12, 19, 31, 26, 44, 33, 31, 24, 32, 24, 31, 35, 22, 14,\n    15, 13, 23, 36, 59, 49, 77, 65, 29, 40, 30, 40, 27, 33, 42, 16,\n    22, 20, 37, 61, 56, 79, 73, 64, 43, 76, 56, 37, 26, 31, 25, 14,\n    35, 16, 60, 57, 97, 75, 114, 91, 54, 73, 55, 41, 48, 53, 23, 24,\n    58, 27, 50, 96, 76, 70, 93, 84, 77, 58, 79, 29, 74, 49, 41, 17,\n    47, 45, 78, 74, 115, 94, 90, 79, 69, 83, 71, 50, 59, 38, 36, 15,\n    72, 34, 56, 95, 92, 85, 91, 90, 86, 73, 77, 65, 51, 44, 43, 42,\n    43, 20, 30, 44, 55, 78, 72, 87, 78, 61, 46, 54, 37, 30, 20, 16,\n    53, 25, 41, 37, 44, 59, 54, 81, 66, 76, 57, 54, 37, 18, 39, 11,\n    35, 33, 31, 57, 42, 82, 72, 80, 47, 58, 55, 21, 22, 26, 38, 22,\n    53, 25, 23, 38, 70, 60, 51, 36, 55, 26, 34, 23, 27, 14, 9, 7,\n    34, 32, 28, 39, 49, 75, 30, 52, 48, 40, 52, 28, 18, 17, 9, 5,\n    45, 21, 34, 64, 56, 50, 49, 45, 31, 19, 12, 15, 10, 7, 6, 3,\n    48, 23, 20, 39, 36, 35, 53, 21, 16, 23, 13, 10, 6, 1, 4, 2,\n    16, 15, 17, 27, 25, 20, 29, 11, 17, 12, 16, 8, 1, 1, 0, 1\n];\n\nTables.t15HB = [\n    7, 12, 18, 53, 47, 76, 124, 108, 89, 123, 108, 119, 107, 81, 122, 63,\n    13, 5, 16, 27, 46, 36, 61, 51, 42, 70, 52, 83, 65, 41, 59, 36,\n    19, 17, 15, 24, 41, 34, 59, 48, 40, 64, 50, 78, 62, 80, 56, 33,\n    29, 28, 25, 43, 39, 63, 55, 93, 76, 59, 93, 72, 54, 75, 50, 29,\n    52, 22, 42, 40, 67, 57, 95, 79, 72, 57, 89, 69, 49, 66, 46, 27,\n    77, 37, 35, 66, 58, 52, 91, 74, 62, 48, 79, 63, 90, 62, 40, 38,\n    125, 32, 60, 56, 50, 92, 78, 65, 55, 87, 71, 51, 73, 51, 70, 30,\n    109, 53, 49, 94, 88, 75, 66, 122, 91, 73, 56, 42, 64, 44, 21, 25,\n    90, 43, 41, 77, 73, 63, 56, 92, 77, 66, 47, 67, 48, 53, 36, 20,\n    71, 34, 67, 60, 58, 49, 88, 76, 67, 106, 71, 54, 38, 39, 23, 15,\n    109, 53, 51, 47, 90, 82, 58, 57, 48, 72, 57, 41, 23, 27, 62, 9,\n    86, 42, 40, 37, 70, 64, 52, 43, 70, 55, 42, 25, 29, 18, 11, 11,\n    118, 68, 30, 55, 50, 46, 74, 65, 49, 39, 24, 16, 22, 13, 14, 7,\n    91, 44, 39, 38, 34, 63, 52, 45, 31, 52, 28, 19, 14, 8, 9, 3,\n    123, 60, 58, 53, 47, 43, 32, 22, 37, 24, 17, 12, 15, 10, 2, 1,\n    71, 37, 34, 30, 28, 20, 17, 26, 21, 16, 10, 6, 8, 6, 2, 0\n];\n\nTables.t16HB = [\n    1, 5, 14, 44, 74, 63, 110, 93, 172, 149, 138, 242, 225, 195, 376, 17,\n    3, 4, 12, 20, 35, 62, 53, 47, 83, 75, 68, 119, 201, 107, 207, 9,\n    15, 13, 23, 38, 67, 58, 103, 90, 161, 72, 127, 117, 110, 209, 206, 16,\n    45, 21, 39, 69, 64, 114, 99, 87, 158, 140, 252, 212, 199, 387, 365, 26,\n    75, 36, 68, 65, 115, 101, 179, 164, 155, 264, 246, 226, 395, 382, 362, 9,\n    66, 30, 59, 56, 102, 185, 173, 265, 142, 253, 232, 400, 388, 378, 445, 16,\n    111, 54, 52, 100, 184, 178, 160, 133, 257, 244, 228, 217, 385, 366, 715, 10,\n    98, 48, 91, 88, 165, 157, 148, 261, 248, 407, 397, 372, 380, 889, 884, 8,\n    85, 84, 81, 159, 156, 143, 260, 249, 427, 401, 392, 383, 727, 713, 708, 7,\n    154, 76, 73, 141, 131, 256, 245, 426, 406, 394, 384, 735, 359, 710, 352, 11,\n    139, 129, 67, 125, 247, 233, 229, 219, 393, 743, 737, 720, 885, 882, 439, 4,\n    243, 120, 118, 115, 227, 223, 396, 746, 742, 736, 721, 712, 706, 223, 436, 6,\n    202, 224, 222, 218, 216, 389, 386, 381, 364, 888, 443, 707, 440, 437, 1728, 4,\n    747, 211, 210, 208, 370, 379, 734, 723, 714, 1735, 883, 877, 876, 3459, 865, 2,\n    377, 369, 102, 187, 726, 722, 358, 711, 709, 866, 1734, 871, 3458, 870, 434, 0,\n    12, 10, 7, 11, 10, 17, 11, 9, 13, 12, 10, 7, 5, 3, 1, 3\n];\n\nTables.t24HB = [\n    15, 13, 46, 80, 146, 262, 248, 434, 426, 669, 653, 649, 621, 517, 1032, 88,\n    14, 12, 21, 38, 71, 130, 122, 216, 209, 198, 327, 345, 319, 297, 279, 42,\n    47, 22, 41, 74, 68, 128, 120, 221, 207, 194, 182, 340, 315, 295, 541, 18,\n    81, 39, 75, 70, 134, 125, 116, 220, 204, 190, 178, 325, 311, 293, 271, 16,\n    147, 72, 69, 135, 127, 118, 112, 210, 200, 188, 352, 323, 306, 285, 540, 14,\n    263, 66, 129, 126, 119, 114, 214, 202, 192, 180, 341, 317, 301, 281, 262, 12,\n    249, 123, 121, 117, 113, 215, 206, 195, 185, 347, 330, 308, 291, 272, 520, 10,\n    435, 115, 111, 109, 211, 203, 196, 187, 353, 332, 313, 298, 283, 531, 381, 17,\n    427, 212, 208, 205, 201, 193, 186, 177, 169, 320, 303, 286, 268, 514, 377, 16,\n    335, 199, 197, 191, 189, 181, 174, 333, 321, 305, 289, 275, 521, 379, 371, 11,\n    668, 184, 183, 179, 175, 344, 331, 314, 304, 290, 277, 530, 383, 373, 366, 10,\n    652, 346, 171, 168, 164, 318, 309, 299, 287, 276, 263, 513, 375, 368, 362, 6,\n    648, 322, 316, 312, 307, 302, 292, 284, 269, 261, 512, 376, 370, 364, 359, 4,\n    620, 300, 296, 294, 288, 282, 273, 266, 515, 380, 374, 369, 365, 361, 357, 2,\n    1033, 280, 278, 274, 267, 264, 259, 382, 378, 372, 367, 363, 360, 358, 356, 0,\n    43, 20, 19, 17, 15, 13, 11, 9, 7, 6, 4, 7, 5, 3, 1, 3\n];\n\nTables.t32HB = [\n    1 << 0, 5 << 1, 4 << 1, 5 << 2, 6 << 1, 5 << 2, 4 << 2, 4 << 3,\n    7 << 1, 3 << 2, 6 << 2, 0 << 3, 7 << 2, 2 << 3, 3 << 3, 1 << 4\n];\n\nTables.t33HB = [\n    15 << 0, 14 << 1, 13 << 1, 12 << 2, 11 << 1, 10 << 2, 9 << 2, 8 << 3,\n    7 << 1, 6 << 2, 5 << 2, 4 << 3, 3 << 2, 2 << 3, 1 << 3, 0 << 4\n];\n\nTables.t1l = [\n    1, 4,\n    3, 5\n];\n\nTables.t2l = [\n    1, 4, 7,\n    4, 5, 7,\n    6, 7, 8\n];\n\nTables.t3l = [\n    2, 3, 7,\n    4, 4, 7,\n    6, 7, 8\n];\n\nTables.t5l = [\n    1, 4, 7, 8,\n    4, 5, 8, 9,\n    7, 8, 9, 10,\n    8, 8, 9, 10\n];\n\nTables.t6l = [\n    3, 4, 6, 8,\n    4, 4, 6, 7,\n    5, 6, 7, 8,\n    7, 7, 8, 9\n];\n\nTables.t7l = [\n    1, 4, 7, 9, 9, 10,\n    4, 6, 8, 9, 9, 10,\n    7, 7, 9, 10, 10, 11,\n    8, 9, 10, 11, 11, 11,\n    8, 9, 10, 11, 11, 12,\n    9, 10, 11, 12, 12, 12\n];\n\nTables.t8l = [\n    2, 4, 7, 9, 9, 10,\n    4, 4, 6, 10, 10, 10,\n    7, 6, 8, 10, 10, 11,\n    9, 10, 10, 11, 11, 12,\n    9, 9, 10, 11, 12, 12,\n    10, 10, 11, 11, 13, 13\n];\n\nTables.t9l = [\n    3, 4, 6, 7, 9, 10,\n    4, 5, 6, 7, 8, 10,\n    5, 6, 7, 8, 9, 10,\n    7, 7, 8, 9, 9, 10,\n    8, 8, 9, 9, 10, 11,\n    9, 9, 10, 10, 11, 11\n];\n\nTables.t10l = [\n    1, 4, 7, 9, 10, 10, 10, 11,\n    4, 6, 8, 9, 10, 11, 10, 10,\n    7, 8, 9, 10, 11, 12, 11, 11,\n    8, 9, 10, 11, 12, 12, 11, 12,\n    9, 10, 11, 12, 12, 12, 12, 12,\n    10, 11, 12, 12, 13, 13, 12, 13,\n    9, 10, 11, 12, 12, 12, 13, 13,\n    10, 10, 11, 12, 12, 13, 13, 13\n];\n\nTables.t11l = [\n    2, 4, 6, 8, 9, 10, 9, 10,\n    4, 5, 6, 8, 10, 10, 9, 10,\n    6, 7, 8, 9, 10, 11, 10, 10,\n    8, 8, 9, 11, 10, 12, 10, 11,\n    9, 10, 10, 11, 11, 12, 11, 12,\n    9, 10, 11, 12, 12, 13, 12, 13,\n    9, 9, 9, 10, 11, 12, 12, 12,\n    9, 9, 10, 11, 12, 12, 12, 12\n];\n\nTables.t12l = [\n    4, 4, 6, 8, 9, 10, 10, 10,\n    4, 5, 6, 7, 9, 9, 10, 10,\n    6, 6, 7, 8, 9, 10, 9, 10,\n    7, 7, 8, 8, 9, 10, 10, 10,\n    8, 8, 9, 9, 10, 10, 10, 11,\n    9, 9, 10, 10, 10, 11, 10, 11,\n    9, 9, 9, 10, 10, 11, 11, 12,\n    10, 10, 10, 11, 11, 11, 11, 12\n];\n\nTables.t13l = [\n    1, 5, 7, 8, 9, 10, 10, 11, 10, 11, 12, 12, 13, 13, 14, 14,\n    4, 6, 8, 9, 10, 10, 11, 11, 11, 11, 12, 12, 13, 14, 14, 14,\n    7, 8, 9, 10, 11, 11, 12, 12, 11, 12, 12, 13, 13, 14, 15, 15,\n    8, 9, 10, 11, 11, 12, 12, 12, 12, 13, 13, 13, 13, 14, 15, 15,\n    9, 9, 11, 11, 12, 12, 13, 13, 12, 13, 13, 14, 14, 15, 15, 16,\n    10, 10, 11, 12, 12, 12, 13, 13, 13, 13, 14, 13, 15, 15, 16, 16,\n    10, 11, 12, 12, 13, 13, 13, 13, 13, 14, 14, 14, 15, 15, 16, 16,\n    11, 11, 12, 13, 13, 13, 14, 14, 14, 14, 15, 15, 15, 16, 18, 18,\n    10, 10, 11, 12, 12, 13, 13, 14, 14, 14, 14, 15, 15, 16, 17, 17,\n    11, 11, 12, 12, 13, 13, 13, 15, 14, 15, 15, 16, 16, 16, 18, 17,\n    11, 12, 12, 13, 13, 14, 14, 15, 14, 15, 16, 15, 16, 17, 18, 19,\n    12, 12, 12, 13, 14, 14, 14, 14, 15, 15, 15, 16, 17, 17, 17, 18,\n    12, 13, 13, 14, 14, 15, 14, 15, 16, 16, 17, 17, 17, 18, 18, 18,\n    13, 13, 14, 15, 15, 15, 16, 16, 16, 16, 16, 17, 18, 17, 18, 18,\n    14, 14, 14, 15, 15, 15, 17, 16, 16, 19, 17, 17, 17, 19, 18, 18,\n    13, 14, 15, 16, 16, 16, 17, 16, 17, 17, 18, 18, 21, 20, 21, 18\n];\n\nTables.t15l = [\n    3, 5, 6, 8, 8, 9, 10, 10, 10, 11, 11, 12, 12, 12, 13, 14,\n    5, 5, 7, 8, 9, 9, 10, 10, 10, 11, 11, 12, 12, 12, 13, 13,\n    6, 7, 7, 8, 9, 9, 10, 10, 10, 11, 11, 12, 12, 13, 13, 13,\n    7, 8, 8, 9, 9, 10, 10, 11, 11, 11, 12, 12, 12, 13, 13, 13,\n    8, 8, 9, 9, 10, 10, 11, 11, 11, 11, 12, 12, 12, 13, 13, 13,\n    9, 9, 9, 10, 10, 10, 11, 11, 11, 11, 12, 12, 13, 13, 13, 14,\n    10, 9, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 13, 13, 14, 14,\n    10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12, 12, 13, 13, 13, 14,\n    10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12, 13, 13, 14, 14, 14,\n    10, 10, 11, 11, 11, 11, 12, 12, 12, 13, 13, 13, 13, 14, 14, 14,\n    11, 11, 11, 11, 12, 12, 12, 12, 12, 13, 13, 13, 13, 14, 15, 14,\n    11, 11, 11, 11, 12, 12, 12, 12, 13, 13, 13, 13, 14, 14, 14, 15,\n    12, 12, 11, 12, 12, 12, 13, 13, 13, 13, 13, 13, 14, 14, 15, 15,\n    12, 12, 12, 12, 12, 13, 13, 13, 13, 14, 14, 14, 14, 14, 15, 15,\n    13, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 15, 15, 14, 15,\n    13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 15, 15, 15, 15\n];\n\nTables.t16_5l = [\n    1, 5, 7, 9, 10, 10, 11, 11, 12, 12, 12, 13, 13, 13, 14, 11,\n    4, 6, 8, 9, 10, 11, 11, 11, 12, 12, 12, 13, 14, 13, 14, 11,\n    7, 8, 9, 10, 11, 11, 12, 12, 13, 12, 13, 13, 13, 14, 14, 12,\n    9, 9, 10, 11, 11, 12, 12, 12, 13, 13, 14, 14, 14, 15, 15, 13,\n    10, 10, 11, 11, 12, 12, 13, 13, 13, 14, 14, 14, 15, 15, 15, 12,\n    10, 10, 11, 11, 12, 13, 13, 14, 13, 14, 14, 15, 15, 15, 16, 13,\n    11, 11, 11, 12, 13, 13, 13, 13, 14, 14, 14, 14, 15, 15, 16, 13,\n    11, 11, 12, 12, 13, 13, 13, 14, 14, 15, 15, 15, 15, 17, 17, 13,\n    11, 12, 12, 13, 13, 13, 14, 14, 15, 15, 15, 15, 16, 16, 16, 13,\n    12, 12, 12, 13, 13, 14, 14, 15, 15, 15, 15, 16, 15, 16, 15, 14,\n    12, 13, 12, 13, 14, 14, 14, 14, 15, 16, 16, 16, 17, 17, 16, 13,\n    13, 13, 13, 13, 14, 14, 15, 16, 16, 16, 16, 16, 16, 15, 16, 14,\n    13, 14, 14, 14, 14, 15, 15, 15, 15, 17, 16, 16, 16, 16, 18, 14,\n    15, 14, 14, 14, 15, 15, 16, 16, 16, 18, 17, 17, 17, 19, 17, 14,\n    14, 15, 13, 14, 16, 16, 15, 16, 16, 17, 18, 17, 19, 17, 16, 14,\n    11, 11, 11, 12, 12, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 12\n];\n\nTables.t16l = [\n    1, 5, 7, 9, 10, 10, 11, 11, 12, 12, 12, 13, 13, 13, 14, 10,\n    4, 6, 8, 9, 10, 11, 11, 11, 12, 12, 12, 13, 14, 13, 14, 10,\n    7, 8, 9, 10, 11, 11, 12, 12, 13, 12, 13, 13, 13, 14, 14, 11,\n    9, 9, 10, 11, 11, 12, 12, 12, 13, 13, 14, 14, 14, 15, 15, 12,\n    10, 10, 11, 11, 12, 12, 13, 13, 13, 14, 14, 14, 15, 15, 15, 11,\n    10, 10, 11, 11, 12, 13, 13, 14, 13, 14, 14, 15, 15, 15, 16, 12,\n    11, 11, 11, 12, 13, 13, 13, 13, 14, 14, 14, 14, 15, 15, 16, 12,\n    11, 11, 12, 12, 13, 13, 13, 14, 14, 15, 15, 15, 15, 17, 17, 12,\n    11, 12, 12, 13, 13, 13, 14, 14, 15, 15, 15, 15, 16, 16, 16, 12,\n    12, 12, 12, 13, 13, 14, 14, 15, 15, 15, 15, 16, 15, 16, 15, 13,\n    12, 13, 12, 13, 14, 14, 14, 14, 15, 16, 16, 16, 17, 17, 16, 12,\n    13, 13, 13, 13, 14, 14, 15, 16, 16, 16, 16, 16, 16, 15, 16, 13,\n    13, 14, 14, 14, 14, 15, 15, 15, 15, 17, 16, 16, 16, 16, 18, 13,\n    15, 14, 14, 14, 15, 15, 16, 16, 16, 18, 17, 17, 17, 19, 17, 13,\n    14, 15, 13, 14, 16, 16, 15, 16, 16, 17, 18, 17, 19, 17, 16, 13,\n    10, 10, 10, 11, 11, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 10\n];\n\nTables.t24l = [\n    4, 5, 7, 8, 9, 10, 10, 11, 11, 12, 12, 12, 12, 12, 13, 10,\n    5, 6, 7, 8, 9, 10, 10, 11, 11, 11, 12, 12, 12, 12, 12, 10,\n    7, 7, 8, 9, 9, 10, 10, 11, 11, 11, 11, 12, 12, 12, 13, 9,\n    8, 8, 9, 9, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12, 9,\n    9, 9, 9, 10, 10, 10, 10, 11, 11, 11, 12, 12, 12, 12, 13, 9,\n    10, 9, 10, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12, 12, 9,\n    10, 10, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12, 12, 13, 9,\n    11, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12, 12, 13, 13, 10,\n    11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 13, 13, 10,\n    11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 13, 13, 13, 10,\n    12, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 10,\n    12, 12, 11, 11, 11, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 10,\n    12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 10,\n    12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 10,\n    13, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 10,\n    9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 6\n];\n\nTables.t32l = [\n    1 + 0, 4 + 1, 4 + 1, 5 + 2, 4 + 1, 6 + 2, 5 + 2, 6 + 3,\n    4 + 1, 5 + 2, 5 + 2, 6 + 3, 5 + 2, 6 + 3, 6 + 3, 6 + 4\n];\n\nTables.t33l = [\n    4 + 0, 4 + 1, 4 + 1, 4 + 2, 4 + 1, 4 + 2, 4 + 2, 4 + 3,\n    4 + 1, 4 + 2, 4 + 2, 4 + 3, 4 + 2, 4 + 3, 4 + 3, 4 + 4\n];\n\nTables.ht = [\n    /* xlen, linmax, table, hlen */\n    new HuffCodeTab(0, 0, null, null),\n    new HuffCodeTab(2, 0, Tables.t1HB, Tables.t1l),\n    new HuffCodeTab(3, 0, Tables.t2HB, Tables.t2l),\n    new HuffCodeTab(3, 0, Tables.t3HB, Tables.t3l),\n    new HuffCodeTab(0, 0, null, null), /* Apparently not used */\n    new HuffCodeTab(4, 0, Tables.t5HB, Tables.t5l),\n    new HuffCodeTab(4, 0, Tables.t6HB, Tables.t6l),\n    new HuffCodeTab(6, 0, Tables.t7HB, Tables.t7l),\n    new HuffCodeTab(6, 0, Tables.t8HB, Tables.t8l),\n    new HuffCodeTab(6, 0, Tables.t9HB, Tables.t9l),\n    new HuffCodeTab(8, 0, Tables.t10HB, Tables.t10l),\n    new HuffCodeTab(8, 0, Tables.t11HB, Tables.t11l),\n    new HuffCodeTab(8, 0, Tables.t12HB, Tables.t12l),\n    new HuffCodeTab(16, 0, Tables.t13HB, Tables.t13l),\n    new HuffCodeTab(0, 0, null, Tables.t16_5l), /* Apparently not used */\n    new HuffCodeTab(16, 0, Tables.t15HB, Tables.t15l),\n\n    new HuffCodeTab(1, 1, Tables.t16HB, Tables.t16l),\n    new HuffCodeTab(2, 3, Tables.t16HB, Tables.t16l),\n    new HuffCodeTab(3, 7, Tables.t16HB, Tables.t16l),\n    new HuffCodeTab(4, 15, Tables.t16HB, Tables.t16l),\n    new HuffCodeTab(6, 63, Tables.t16HB, Tables.t16l),\n    new HuffCodeTab(8, 255, Tables.t16HB, Tables.t16l),\n    new HuffCodeTab(10, 1023, Tables.t16HB, Tables.t16l),\n    new HuffCodeTab(13, 8191, Tables.t16HB, Tables.t16l),\n\n    new HuffCodeTab(4, 15, Tables.t24HB, Tables.t24l),\n    new HuffCodeTab(5, 31, Tables.t24HB, Tables.t24l),\n    new HuffCodeTab(6, 63, Tables.t24HB, Tables.t24l),\n    new HuffCodeTab(7, 127, Tables.t24HB, Tables.t24l),\n    new HuffCodeTab(8, 255, Tables.t24HB, Tables.t24l),\n    new HuffCodeTab(9, 511, Tables.t24HB, Tables.t24l),\n    new HuffCodeTab(11, 2047, Tables.t24HB, Tables.t24l),\n    new HuffCodeTab(13, 8191, Tables.t24HB, Tables.t24l),\n\n    new HuffCodeTab(0, 0, Tables.t32HB, Tables.t32l),\n    new HuffCodeTab(0, 0, Tables.t33HB, Tables.t33l),\n];\n\n/**\n * <CODE>\n *  for (i = 0; i < 16*16; i++) [\n *      largetbl[i] = ((ht[16].hlen[i]) << 16) + ht[24].hlen[i];\n *  ]\n * </CODE>\n *\n */\nTables.largetbl = [\n    0x010004, 0x050005, 0x070007, 0x090008, 0x0a0009, 0x0a000a, 0x0b000a, 0x0b000b,\n    0x0c000b, 0x0c000c, 0x0c000c, 0x0d000c, 0x0d000c, 0x0d000c, 0x0e000d, 0x0a000a,\n    0x040005, 0x060006, 0x080007, 0x090008, 0x0a0009, 0x0b000a, 0x0b000a, 0x0b000b,\n    0x0c000b, 0x0c000b, 0x0c000c, 0x0d000c, 0x0e000c, 0x0d000c, 0x0e000c, 0x0a000a,\n    0x070007, 0x080007, 0x090008, 0x0a0009, 0x0b0009, 0x0b000a, 0x0c000a, 0x0c000b,\n    0x0d000b, 0x0c000b, 0x0d000b, 0x0d000c, 0x0d000c, 0x0e000c, 0x0e000d, 0x0b0009,\n    0x090008, 0x090008, 0x0a0009, 0x0b0009, 0x0b000a, 0x0c000a, 0x0c000a, 0x0c000b,\n    0x0d000b, 0x0d000b, 0x0e000b, 0x0e000c, 0x0e000c, 0x0f000c, 0x0f000c, 0x0c0009,\n    0x0a0009, 0x0a0009, 0x0b0009, 0x0b000a, 0x0c000a, 0x0c000a, 0x0d000a, 0x0d000b,\n    0x0d000b, 0x0e000b, 0x0e000c, 0x0e000c, 0x0f000c, 0x0f000c, 0x0f000d, 0x0b0009,\n    0x0a000a, 0x0a0009, 0x0b000a, 0x0b000a, 0x0c000a, 0x0d000a, 0x0d000b, 0x0e000b,\n    0x0d000b, 0x0e000b, 0x0e000c, 0x0f000c, 0x0f000c, 0x0f000c, 0x10000c, 0x0c0009,\n    0x0b000a, 0x0b000a, 0x0b000a, 0x0c000a, 0x0d000a, 0x0d000b, 0x0d000b, 0x0d000b,\n    0x0e000b, 0x0e000c, 0x0e000c, 0x0e000c, 0x0f000c, 0x0f000c, 0x10000d, 0x0c0009,\n    0x0b000b, 0x0b000a, 0x0c000a, 0x0c000a, 0x0d000b, 0x0d000b, 0x0d000b, 0x0e000b,\n    0x0e000c, 0x0f000c, 0x0f000c, 0x0f000c, 0x0f000c, 0x11000d, 0x11000d, 0x0c000a,\n    0x0b000b, 0x0c000b, 0x0c000b, 0x0d000b, 0x0d000b, 0x0d000b, 0x0e000b, 0x0e000b,\n    0x0f000b, 0x0f000c, 0x0f000c, 0x0f000c, 0x10000c, 0x10000d, 0x10000d, 0x0c000a,\n    0x0c000b, 0x0c000b, 0x0c000b, 0x0d000b, 0x0d000b, 0x0e000b, 0x0e000b, 0x0f000c,\n    0x0f000c, 0x0f000c, 0x0f000c, 0x10000c, 0x0f000d, 0x10000d, 0x0f000d, 0x0d000a,\n    0x0c000c, 0x0d000b, 0x0c000b, 0x0d000b, 0x0e000b, 0x0e000c, 0x0e000c, 0x0e000c,\n    0x0f000c, 0x10000c, 0x10000c, 0x10000d, 0x11000d, 0x11000d, 0x10000d, 0x0c000a,\n    0x0d000c, 0x0d000c, 0x0d000b, 0x0d000b, 0x0e000b, 0x0e000c, 0x0f000c, 0x10000c,\n    0x10000c, 0x10000c, 0x10000c, 0x10000d, 0x10000d, 0x0f000d, 0x10000d, 0x0d000a,\n    0x0d000c, 0x0e000c, 0x0e000c, 0x0e000c, 0x0e000c, 0x0f000c, 0x0f000c, 0x0f000c,\n    0x0f000c, 0x11000c, 0x10000d, 0x10000d, 0x10000d, 0x10000d, 0x12000d, 0x0d000a,\n    0x0f000c, 0x0e000c, 0x0e000c, 0x0e000c, 0x0f000c, 0x0f000c, 0x10000c, 0x10000c,\n    0x10000d, 0x12000d, 0x11000d, 0x11000d, 0x11000d, 0x13000d, 0x11000d, 0x0d000a,\n    0x0e000d, 0x0f000c, 0x0d000c, 0x0e000c, 0x10000c, 0x10000c, 0x0f000c, 0x10000d,\n    0x10000d, 0x11000d, 0x12000d, 0x11000d, 0x13000d, 0x11000d, 0x10000d, 0x0d000a,\n    0x0a0009, 0x0a0009, 0x0a0009, 0x0b0009, 0x0b0009, 0x0c0009, 0x0c0009, 0x0c0009,\n    0x0d0009, 0x0d0009, 0x0d0009, 0x0d000a, 0x0d000a, 0x0d000a, 0x0d000a, 0x0a0006\n];\n/**\n * <CODE>\n *  for (i = 0; i < 3*3; i++) [\n *      table23[i] = ((ht[2].hlen[i]) << 16) + ht[3].hlen[i];\n *  ]\n * </CODE>\n *\n */\nTables.table23 = [\n    0x010002, 0x040003, 0x070007,\n    0x040004, 0x050004, 0x070007,\n    0x060006, 0x070007, 0x080008\n];\n\n/**\n * <CODE>\n *  for (i = 0; i < 4*4; i++) [\n *       table56[i] = ((ht[5].hlen[i]) << 16) + ht[6].hlen[i];\n *   ]\n * </CODE>\n *\n */\nTables.table56 = [\n    0x010003, 0x040004, 0x070006, 0x080008, 0x040004, 0x050004, 0x080006, 0x090007,\n    0x070005, 0x080006, 0x090007, 0x0a0008, 0x080007, 0x080007, 0x090008, 0x0a0009\n];\n\nTables.bitrate_table = [\n    [0, 8, 16, 24, 32, 40, 48, 56, 64, 80, 96, 112, 128, 144, 160, -1], /* MPEG 2 */\n    [0, 32, 40, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 256, 320, -1], /* MPEG 1 */\n    [0, 8, 16, 24, 32, 40, 48, 56, 64, -1, -1, -1, -1, -1, -1, -1], /* MPEG 2.5 */\n];\n\n/**\n * MPEG 2, MPEG 1, MPEG 2.5.\n */\nTables.samplerate_table = [\n    [22050, 24000, 16000, -1],\n    [44100, 48000, 32000, -1],\n    [11025, 12000, 8000, -1],\n];\n\n/**\n * This is the scfsi_band table from 2.4.2.7 of the IS.\n */\nTables.scfsi_band = [0, 6, 11, 16, 21];\n\nmodule.exports = Tables;\n","/*\n *      quantize_pvt source file\n *\n *      Copyright (c) 1999-2002 Takehiro Tominaga\n *      Copyright (c) 2000-2002 Robert Hegemann\n *      Copyright (c) 2001 Naoki Shibata\n *      Copyright (c) 2002-2005 Gabriel Bouvigne\n *\n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2 of the License, or (at your option) any later version.\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Library General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the\n * Free Software Foundation, Inc., 59 Temple Place - Suite 330,\n * Boston, MA 02111-1307, USA.\n */\n\n/* $Id: QuantizePVT.java,v 1.24 2011/05/24 20:48:06 kenchis Exp $ */\nvar ScaleFac = require('./ScaleFac.js');\nvar common = require('./common.js');\nvar System = common.System;\nvar VbrMode = common.VbrMode;\nvar Float = common.Float;\nvar ShortBlock = common.ShortBlock;\nvar Util = common.Util;\nvar Arrays = common.Arrays;\nvar new_array_n = common.new_array_n;\nvar new_byte = common.new_byte;\nvar new_double = common.new_double;\nvar new_float = common.new_float;\nvar new_float_n = common.new_float_n;\nvar new_int = common.new_int;\nvar new_int_n = common.new_int_n;\nvar assert = common.assert;\n\nvar Encoder = require('./Encoder.js');\nvar MeanBits = require('./MeanBits.js');\nvar LameInternalFlags = require('./LameInternalFlags.js');\n\nQuantizePVT.Q_MAX = (256 + 1);\nQuantizePVT.Q_MAX2 = 116;\nQuantizePVT.LARGE_BITS = 100000;\nQuantizePVT.IXMAX_VAL = 8206;\n\nfunction QuantizePVT() {\n\n    var tak = null;\n    var rv = null;\n    var psy = null;\n\n    this.setModules = function (_tk, _rv, _psy) {\n        tak = _tk;\n        rv = _rv;\n        psy = _psy;\n    };\n\n    function POW20(x) {\n        assert(0 <= (x + QuantizePVT.Q_MAX2) && x < QuantizePVT.Q_MAX);\n        return pow20[x + QuantizePVT.Q_MAX2];\n    }\n\n    this.IPOW20 = function (x) {\n        assert(0 <= x && x < QuantizePVT.Q_MAX);\n        return ipow20[x];\n    }\n\n    /**\n     * smallest such that 1.0+DBL_EPSILON != 1.0\n     */\n    var DBL_EPSILON = 2.2204460492503131e-016;\n\n    /**\n     * ix always <= 8191+15. see count_bits()\n     */\n    var IXMAX_VAL = QuantizePVT.IXMAX_VAL;\n\n    var PRECALC_SIZE = (IXMAX_VAL + 2);\n\n    var Q_MAX = QuantizePVT.Q_MAX;\n\n\n    /**\n     * <CODE>\n     * minimum possible number of\n     * -cod_info.global_gain + ((scalefac[] + (cod_info.preflag ? pretab[sfb] : 0))\n     * << (cod_info.scalefac_scale + 1)) + cod_info.subblock_gain[cod_info.window[sfb]] * 8;\n     *\n     * for long block, 0+((15+3)<<2) = 18*4 = 72\n     * for short block, 0+(15<<2)+7*8 = 15*4+56 = 116\n     * </CODE>\n     */\n    var Q_MAX2 = QuantizePVT.Q_MAX2;\n\n    var LARGE_BITS = QuantizePVT.LARGE_BITS;\n\n\n    /**\n     * Assuming dynamic range=96dB, this value should be 92\n     */\n    var NSATHSCALE = 100;\n\n    /**\n     * The following table is used to implement the scalefactor partitioning for\n     * MPEG2 as described in section 2.4.3.2 of the IS. The indexing corresponds\n     * to the way the tables are presented in the IS:\n     *\n     * [table_number][row_in_table][column of nr_of_sfb]\n     */\n    this.nr_of_sfb_block = [\n        [[6, 5, 5, 5], [9, 9, 9, 9], [6, 9, 9, 9]],\n        [[6, 5, 7, 3], [9, 9, 12, 6], [6, 9, 12, 6]],\n        [[11, 10, 0, 0], [18, 18, 0, 0], [15, 18, 0, 0]],\n        [[7, 7, 7, 0], [12, 12, 12, 0], [6, 15, 12, 0]],\n        [[6, 6, 6, 3], [12, 9, 9, 6], [6, 12, 9, 6]],\n        [[8, 8, 5, 0], [15, 12, 9, 0], [6, 18, 9, 0]]];\n\n    /**\n     * Table B.6: layer3 preemphasis\n     */\n    var pretab = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1,\n        2, 2, 3, 3, 3, 2, 0];\n    this.pretab = pretab;\n\n    /**\n     * Here are MPEG1 Table B.8 and MPEG2 Table B.1 -- Layer III scalefactor\n     * bands. <BR>\n     * Index into this using a method such as:<BR>\n     * idx = fr_ps.header.sampling_frequency + (fr_ps.header.version * 3)\n     */\n    this.sfBandIndex = [\n        // Table B.2.b: 22.05 kHz\n        new ScaleFac([0, 6, 12, 18, 24, 30, 36, 44, 54, 66, 80, 96, 116, 140, 168, 200, 238, 284, 336, 396, 464,\n                522, 576],\n            [0, 4, 8, 12, 18, 24, 32, 42, 56, 74, 100, 132, 174, 192]\n            , [0, 0, 0, 0, 0, 0, 0] //  sfb21 pseudo sub bands\n            , [0, 0, 0, 0, 0, 0, 0] //  sfb12 pseudo sub bands\n        ),\n        /* Table B.2.c: 24 kHz */ /* docs: 332. mpg123(broken): 330 */\n        new ScaleFac([0, 6, 12, 18, 24, 30, 36, 44, 54, 66, 80, 96, 114, 136, 162, 194, 232, 278, 332, 394, 464,\n                540, 576],\n            [0, 4, 8, 12, 18, 26, 36, 48, 62, 80, 104, 136, 180, 192]\n            , [0, 0, 0, 0, 0, 0, 0] /*  sfb21 pseudo sub bands */\n            , [0, 0, 0, 0, 0, 0, 0] /*  sfb12 pseudo sub bands */\n        ),\n        /* Table B.2.a: 16 kHz */\n        new ScaleFac([0, 6, 12, 18, 24, 30, 36, 44, 54, 66, 80, 96, 116, 140, 168, 200, 238, 284, 336, 396, 464,\n                522, 576],\n            [0, 4, 8, 12, 18, 26, 36, 48, 62, 80, 104, 134, 174, 192]\n            , [0, 0, 0, 0, 0, 0, 0] /*  sfb21 pseudo sub bands */\n            , [0, 0, 0, 0, 0, 0, 0] /*  sfb12 pseudo sub bands */\n        ),\n        /* Table B.8.b: 44.1 kHz */\n        new ScaleFac([0, 4, 8, 12, 16, 20, 24, 30, 36, 44, 52, 62, 74, 90, 110, 134, 162, 196, 238, 288, 342, 418,\n                576],\n            [0, 4, 8, 12, 16, 22, 30, 40, 52, 66, 84, 106, 136, 192]\n            , [0, 0, 0, 0, 0, 0, 0] /*  sfb21 pseudo sub bands */\n            , [0, 0, 0, 0, 0, 0, 0] /*  sfb12 pseudo sub bands */\n        ),\n        /* Table B.8.c: 48 kHz */\n        new ScaleFac([0, 4, 8, 12, 16, 20, 24, 30, 36, 42, 50, 60, 72, 88, 106, 128, 156, 190, 230, 276, 330, 384,\n                576],\n            [0, 4, 8, 12, 16, 22, 28, 38, 50, 64, 80, 100, 126, 192]\n            , [0, 0, 0, 0, 0, 0, 0] /*  sfb21 pseudo sub bands */\n            , [0, 0, 0, 0, 0, 0, 0] /*  sfb12 pseudo sub bands */\n        ),\n        /* Table B.8.a: 32 kHz */\n        new ScaleFac([0, 4, 8, 12, 16, 20, 24, 30, 36, 44, 54, 66, 82, 102, 126, 156, 194, 240, 296, 364, 448, 550,\n                576],\n            [0, 4, 8, 12, 16, 22, 30, 42, 58, 78, 104, 138, 180, 192]\n            , [0, 0, 0, 0, 0, 0, 0] /*  sfb21 pseudo sub bands */\n            , [0, 0, 0, 0, 0, 0, 0] /*  sfb12 pseudo sub bands */\n        ),\n        /* MPEG-2.5 11.025 kHz */\n        new ScaleFac([0, 6, 12, 18, 24, 30, 36, 44, 54, 66, 80, 96, 116, 140, 168, 200, 238, 284, 336, 396, 464,\n                522, 576],\n            [0 / 3, 12 / 3, 24 / 3, 36 / 3, 54 / 3, 78 / 3, 108 / 3, 144 / 3, 186 / 3, 240 / 3, 312 / 3,\n                402 / 3, 522 / 3, 576 / 3]\n            , [0, 0, 0, 0, 0, 0, 0] /*  sfb21 pseudo sub bands */\n            , [0, 0, 0, 0, 0, 0, 0] /*  sfb12 pseudo sub bands */\n        ),\n        /* MPEG-2.5 12 kHz */\n        new ScaleFac([0, 6, 12, 18, 24, 30, 36, 44, 54, 66, 80, 96, 116, 140, 168, 200, 238, 284, 336, 396, 464,\n                522, 576],\n            [0 / 3, 12 / 3, 24 / 3, 36 / 3, 54 / 3, 78 / 3, 108 / 3, 144 / 3, 186 / 3, 240 / 3, 312 / 3,\n                402 / 3, 522 / 3, 576 / 3]\n            , [0, 0, 0, 0, 0, 0, 0] /*  sfb21 pseudo sub bands */\n            , [0, 0, 0, 0, 0, 0, 0] /*  sfb12 pseudo sub bands */\n        ),\n        /* MPEG-2.5 8 kHz */\n        new ScaleFac([0, 12, 24, 36, 48, 60, 72, 88, 108, 132, 160, 192, 232, 280, 336, 400, 476, 566, 568, 570,\n                572, 574, 576],\n            [0 / 3, 24 / 3, 48 / 3, 72 / 3, 108 / 3, 156 / 3, 216 / 3, 288 / 3, 372 / 3, 480 / 3, 486 / 3,\n                492 / 3, 498 / 3, 576 / 3]\n            , [0, 0, 0, 0, 0, 0, 0] /*  sfb21 pseudo sub bands */\n            , [0, 0, 0, 0, 0, 0, 0] /*  sfb12 pseudo sub bands */\n        )\n    ];\n\n    var pow20 = new_float(Q_MAX + Q_MAX2 + 1);\n    var ipow20 = new_float(Q_MAX);\n    var pow43 = new_float(PRECALC_SIZE);\n\n    var adj43 = new_float(PRECALC_SIZE);\n    this.adj43 = adj43;\n\n    /**\n     * <PRE>\n     * compute the ATH for each scalefactor band cd range: 0..96db\n     *\n     * Input: 3.3kHz signal 32767 amplitude (3.3kHz is where ATH is smallest =\n     * -5db) longblocks: sfb=12 en0/bw=-11db max_en0 = 1.3db shortblocks: sfb=5\n     * -9db 0db\n     *\n     * Input: 1 1 1 1 1 1 1 -1 -1 -1 -1 -1 -1 -1 (repeated) longblocks: amp=1\n     * sfb=12 en0/bw=-103 db max_en0 = -92db amp=32767 sfb=12 -12 db -1.4db\n     *\n     * Input: 1 1 1 1 1 1 1 -1 -1 -1 -1 -1 -1 -1 (repeated) shortblocks: amp=1\n     * sfb=5 en0/bw= -99 -86 amp=32767 sfb=5 -9 db 4db\n     *\n     *\n     * MAX energy of largest wave at 3.3kHz = 1db AVE energy of largest wave at\n     * 3.3kHz = -11db Let's take AVE: -11db = maximum signal in sfb=12. Dynamic\n     * range of CD: 96db. Therefor energy of smallest audible wave in sfb=12 =\n     * -11 - 96 = -107db = ATH at 3.3kHz.\n     *\n     * ATH formula for this wave: -5db. To adjust to LAME scaling, we need ATH =\n     * ATH_formula - 103 (db) ATH = ATH * 2.5e-10 (ener)\n     * </PRE>\n     */\n    function ATHmdct(gfp, f) {\n        var ath = psy.ATHformula(f, gfp);\n\n        ath -= NSATHSCALE;\n\n        /* modify the MDCT scaling for the ATH and convert to energy */\n        ath = Math.pow(10.0, ath / 10.0 + gfp.ATHlower);\n        return ath;\n    }\n\n    function compute_ath(gfp) {\n        var ATH_l = gfp.internal_flags.ATH.l;\n        var ATH_psfb21 = gfp.internal_flags.ATH.psfb21;\n        var ATH_s = gfp.internal_flags.ATH.s;\n        var ATH_psfb12 = gfp.internal_flags.ATH.psfb12;\n        var gfc = gfp.internal_flags;\n        var samp_freq = gfp.out_samplerate;\n\n        for (var sfb = 0; sfb < Encoder.SBMAX_l; sfb++) {\n            var start = gfc.scalefac_band.l[sfb];\n            var end = gfc.scalefac_band.l[sfb + 1];\n            ATH_l[sfb] = Float.MAX_VALUE;\n            for (var i = start; i < end; i++) {\n                var freq = i * samp_freq / (2 * 576);\n                var ATH_f = ATHmdct(gfp, freq);\n                /* freq in kHz */\n                ATH_l[sfb] = Math.min(ATH_l[sfb], ATH_f);\n            }\n        }\n\n        for (var sfb = 0; sfb < Encoder.PSFB21; sfb++) {\n            var start = gfc.scalefac_band.psfb21[sfb];\n            var end = gfc.scalefac_band.psfb21[sfb + 1];\n            ATH_psfb21[sfb] = Float.MAX_VALUE;\n            for (var i = start; i < end; i++) {\n                var freq = i * samp_freq / (2 * 576);\n                var ATH_f = ATHmdct(gfp, freq);\n                /* freq in kHz */\n                ATH_psfb21[sfb] = Math.min(ATH_psfb21[sfb], ATH_f);\n            }\n        }\n\n        for (var sfb = 0; sfb < Encoder.SBMAX_s; sfb++) {\n            var start = gfc.scalefac_band.s[sfb];\n            var end = gfc.scalefac_band.s[sfb + 1];\n            ATH_s[sfb] = Float.MAX_VALUE;\n            for (var i = start; i < end; i++) {\n                var freq = i * samp_freq / (2 * 192);\n                var ATH_f = ATHmdct(gfp, freq);\n                /* freq in kHz */\n                ATH_s[sfb] = Math.min(ATH_s[sfb], ATH_f);\n            }\n            ATH_s[sfb] *= (gfc.scalefac_band.s[sfb + 1] - gfc.scalefac_band.s[sfb]);\n        }\n\n        for (var sfb = 0; sfb < Encoder.PSFB12; sfb++) {\n            var start = gfc.scalefac_band.psfb12[sfb];\n            var end = gfc.scalefac_band.psfb12[sfb + 1];\n            ATH_psfb12[sfb] = Float.MAX_VALUE;\n            for (var i = start; i < end; i++) {\n                var freq = i * samp_freq / (2 * 192);\n                var ATH_f = ATHmdct(gfp, freq);\n                /* freq in kHz */\n                ATH_psfb12[sfb] = Math.min(ATH_psfb12[sfb], ATH_f);\n            }\n            /* not sure about the following */\n            ATH_psfb12[sfb] *= (gfc.scalefac_band.s[13] - gfc.scalefac_band.s[12]);\n        }\n\n        /*\n         * no-ATH mode: reduce ATH to -200 dB\n         */\n        if (gfp.noATH) {\n            for (var sfb = 0; sfb < Encoder.SBMAX_l; sfb++) {\n                ATH_l[sfb] = 1E-20;\n            }\n            for (var sfb = 0; sfb < Encoder.PSFB21; sfb++) {\n                ATH_psfb21[sfb] = 1E-20;\n            }\n            for (var sfb = 0; sfb < Encoder.SBMAX_s; sfb++) {\n                ATH_s[sfb] = 1E-20;\n            }\n            for (var sfb = 0; sfb < Encoder.PSFB12; sfb++) {\n                ATH_psfb12[sfb] = 1E-20;\n            }\n        }\n\n        /*\n         * work in progress, don't rely on it too much\n         */\n        gfc.ATH.floor = 10. * Math.log10(ATHmdct(gfp, -1.));\n    }\n\n    /**\n     * initialization for iteration_loop\n     */\n    this.iteration_init = function (gfp) {\n        var gfc = gfp.internal_flags;\n        var l3_side = gfc.l3_side;\n        var i;\n\n        if (gfc.iteration_init_init == 0) {\n            gfc.iteration_init_init = 1;\n\n            l3_side.main_data_begin = 0;\n            compute_ath(gfp);\n\n            pow43[0] = 0.0;\n            for (i = 1; i < PRECALC_SIZE; i++)\n                pow43[i] = Math.pow(i, 4.0 / 3.0);\n\n            for (i = 0; i < PRECALC_SIZE - 1; i++)\n                adj43[i] = ((i + 1) - Math.pow(\n                    0.5 * (pow43[i] + pow43[i + 1]), 0.75));\n            adj43[i] = 0.5;\n\n            for (i = 0; i < Q_MAX; i++)\n                ipow20[i] = Math.pow(2.0, (i - 210) * -0.1875);\n            for (i = 0; i <= Q_MAX + Q_MAX2; i++)\n                pow20[i] = Math.pow(2.0, (i - 210 - Q_MAX2) * 0.25);\n\n            tak.huffman_init(gfc);\n\n            {\n                var bass, alto, treble, sfb21;\n\n                i = (gfp.exp_nspsytune >> 2) & 63;\n                if (i >= 32)\n                    i -= 64;\n                bass = Math.pow(10, i / 4.0 / 10.0);\n\n                i = (gfp.exp_nspsytune >> 8) & 63;\n                if (i >= 32)\n                    i -= 64;\n                alto = Math.pow(10, i / 4.0 / 10.0);\n\n                i = (gfp.exp_nspsytune >> 14) & 63;\n                if (i >= 32)\n                    i -= 64;\n                treble = Math.pow(10, i / 4.0 / 10.0);\n\n                /*\n                 * to be compatible with Naoki's original code, the next 6 bits\n                 * define only the amount of changing treble for sfb21\n                 */\n                i = (gfp.exp_nspsytune >> 20) & 63;\n                if (i >= 32)\n                    i -= 64;\n                sfb21 = treble * Math.pow(10, i / 4.0 / 10.0);\n                for (i = 0; i < Encoder.SBMAX_l; i++) {\n                    var f;\n                    if (i <= 6)\n                        f = bass;\n                    else if (i <= 13)\n                        f = alto;\n                    else if (i <= 20)\n                        f = treble;\n                    else\n                        f = sfb21;\n\n                    gfc.nsPsy.longfact[i] = f;\n                }\n                for (i = 0; i < Encoder.SBMAX_s; i++) {\n                    var f;\n                    if (i <= 5)\n                        f = bass;\n                    else if (i <= 10)\n                        f = alto;\n                    else if (i <= 11)\n                        f = treble;\n                    else\n                        f = sfb21;\n\n                    gfc.nsPsy.shortfact[i] = f;\n                }\n            }\n        }\n    }\n\n    /**\n     * allocate bits among 2 channels based on PE<BR>\n     * mt 6/99<BR>\n     * bugfixes rh 8/01: often allocated more than the allowed 4095 bits\n     */\n    this.on_pe = function (gfp, pe,\n                           targ_bits, mean_bits, gr, cbr) {\n        var gfc = gfp.internal_flags;\n        var tbits = 0, bits;\n        var add_bits = new_int(2);\n        var ch;\n\n        /* allocate targ_bits for granule */\n        var mb = new MeanBits(tbits);\n        var extra_bits = rv.ResvMaxBits(gfp, mean_bits, mb, cbr);\n        tbits = mb.bits;\n        /* maximum allowed bits for this granule */\n        var max_bits = tbits + extra_bits;\n        if (max_bits > LameInternalFlags.MAX_BITS_PER_GRANULE) {\n            // hard limit per granule\n            max_bits = LameInternalFlags.MAX_BITS_PER_GRANULE;\n        }\n        for (bits = 0, ch = 0; ch < gfc.channels_out; ++ch) {\n            /******************************************************************\n             * allocate bits for each channel\n             ******************************************************************/\n            targ_bits[ch] = Math.min(LameInternalFlags.MAX_BITS_PER_CHANNEL,\n                tbits / gfc.channels_out);\n\n            add_bits[ch] = 0 | (targ_bits[ch] * pe[gr][ch] / 700.0 - targ_bits[ch]);\n\n            /* at most increase bits by 1.5*average */\n            if (add_bits[ch] > mean_bits * 3 / 4)\n                add_bits[ch] = mean_bits * 3 / 4;\n            if (add_bits[ch] < 0)\n                add_bits[ch] = 0;\n\n            if (add_bits[ch] + targ_bits[ch] > LameInternalFlags.MAX_BITS_PER_CHANNEL)\n                add_bits[ch] = Math.max(0,\n                    LameInternalFlags.MAX_BITS_PER_CHANNEL - targ_bits[ch]);\n\n            bits += add_bits[ch];\n        }\n        if (bits > extra_bits) {\n            for (ch = 0; ch < gfc.channels_out; ++ch) {\n                add_bits[ch] = extra_bits * add_bits[ch] / bits;\n            }\n        }\n\n        for (ch = 0; ch < gfc.channels_out; ++ch) {\n            targ_bits[ch] += add_bits[ch];\n            extra_bits -= add_bits[ch];\n        }\n\n        for (bits = 0, ch = 0; ch < gfc.channels_out; ++ch) {\n            bits += targ_bits[ch];\n        }\n        if (bits > LameInternalFlags.MAX_BITS_PER_GRANULE) {\n            var sum = 0;\n            for (ch = 0; ch < gfc.channels_out; ++ch) {\n                targ_bits[ch] *= LameInternalFlags.MAX_BITS_PER_GRANULE;\n                targ_bits[ch] /= bits;\n                sum += targ_bits[ch];\n            }\n            assert(sum <= LameInternalFlags.MAX_BITS_PER_GRANULE);\n        }\n\n        return max_bits;\n    }\n\n    this.reduce_side = function (targ_bits, ms_ener_ratio, mean_bits, max_bits) {\n        assert(max_bits <= LameInternalFlags.MAX_BITS_PER_GRANULE);\n        assert(targ_bits[0] + targ_bits[1] <= LameInternalFlags.MAX_BITS_PER_GRANULE);\n\n        /*\n         * ms_ener_ratio = 0: allocate 66/33 mid/side fac=.33 ms_ener_ratio =.5:\n         * allocate 50/50 mid/side fac= 0\n         */\n        /* 75/25 split is fac=.5 */\n        var fac = .33 * (.5 - ms_ener_ratio) / .5;\n        if (fac < 0)\n            fac = 0;\n        if (fac > .5)\n            fac = .5;\n\n        /* number of bits to move from side channel to mid channel */\n        /* move_bits = fac*targ_bits[1]; */\n        var move_bits = 0 | (fac * .5 * (targ_bits[0] + targ_bits[1]));\n\n        if (move_bits > LameInternalFlags.MAX_BITS_PER_CHANNEL - targ_bits[0]) {\n            move_bits = LameInternalFlags.MAX_BITS_PER_CHANNEL - targ_bits[0];\n        }\n        if (move_bits < 0)\n            move_bits = 0;\n\n        if (targ_bits[1] >= 125) {\n            /* dont reduce side channel below 125 bits */\n            if (targ_bits[1] - move_bits > 125) {\n\n                /* if mid channel already has 2x more than average, dont bother */\n                /* mean_bits = bits per granule (for both channels) */\n                if (targ_bits[0] < mean_bits)\n                    targ_bits[0] += move_bits;\n                targ_bits[1] -= move_bits;\n            } else {\n                targ_bits[0] += targ_bits[1] - 125;\n                targ_bits[1] = 125;\n            }\n        }\n\n        move_bits = targ_bits[0] + targ_bits[1];\n        if (move_bits > max_bits) {\n            targ_bits[0] = (max_bits * targ_bits[0]) / move_bits;\n            targ_bits[1] = (max_bits * targ_bits[1]) / move_bits;\n        }\n        assert(targ_bits[0] <= LameInternalFlags.MAX_BITS_PER_CHANNEL);\n        assert(targ_bits[1] <= LameInternalFlags.MAX_BITS_PER_CHANNEL);\n        assert(targ_bits[0] + targ_bits[1] <= LameInternalFlags.MAX_BITS_PER_GRANULE);\n    };\n\n    /**\n     *  Robert Hegemann 2001-04-27:\n     *  this adjusts the ATH, keeping the original noise floor\n     *  affects the higher frequencies more than the lower ones\n     */\n    this.athAdjust = function (a, x, athFloor) {\n        /*\n         * work in progress\n         */\n        var o = 90.30873362;\n        var p = 94.82444863;\n        var u = Util.FAST_LOG10_X(x, 10.0);\n        var v = a * a;\n        var w = 0.0;\n        u -= athFloor;\n        /* undo scaling */\n        if (v > 1E-20)\n            w = 1. + Util.FAST_LOG10_X(v, 10.0 / o);\n        if (w < 0)\n            w = 0.;\n        u *= w;\n        u += athFloor + o - p;\n        /* redo scaling */\n\n        return Math.pow(10., 0.1 * u);\n    };\n\n    /**\n     * Calculate the allowed distortion for each scalefactor band, as determined\n     * by the psychoacoustic model. xmin(sb) = ratio(sb) * en(sb) / bw(sb)\n     *\n     * returns number of sfb's with energy > ATH\n     */\n    this.calc_xmin = function (gfp, ratio, cod_info, pxmin) {\n        var pxminPos = 0;\n        var gfc = gfp.internal_flags;\n        var gsfb, j = 0, ath_over = 0;\n        var ATH = gfc.ATH;\n        var xr = cod_info.xr;\n        var enable_athaa_fix = (gfp.VBR == VbrMode.vbr_mtrh) ? 1 : 0;\n        var masking_lower = gfc.masking_lower;\n\n        if (gfp.VBR == VbrMode.vbr_mtrh || gfp.VBR == VbrMode.vbr_mt) {\n            /* was already done in PSY-Model */\n            masking_lower = 1.0;\n        }\n\n        for (gsfb = 0; gsfb < cod_info.psy_lmax; gsfb++) {\n            var en0, xmin;\n            var rh1, rh2;\n            var width, l;\n\n            if (gfp.VBR == VbrMode.vbr_rh || gfp.VBR == VbrMode.vbr_mtrh)\n                xmin = athAdjust(ATH.adjust, ATH.l[gsfb], ATH.floor);\n            else\n                xmin = ATH.adjust * ATH.l[gsfb];\n\n            width = cod_info.width[gsfb];\n            rh1 = xmin / width;\n            rh2 = DBL_EPSILON;\n            l = width >> 1;\n            en0 = 0.0;\n            do {\n                var xa, xb;\n                xa = xr[j] * xr[j];\n                en0 += xa;\n                rh2 += (xa < rh1) ? xa : rh1;\n                j++;\n                xb = xr[j] * xr[j];\n                en0 += xb;\n                rh2 += (xb < rh1) ? xb : rh1;\n                j++;\n            } while (--l > 0);\n            if (en0 > xmin)\n                ath_over++;\n\n            if (gsfb == Encoder.SBPSY_l) {\n                var x = xmin * gfc.nsPsy.longfact[gsfb];\n                if (rh2 < x) {\n                    rh2 = x;\n                }\n            }\n            if (enable_athaa_fix != 0) {\n                xmin = rh2;\n            }\n            if (!gfp.ATHonly) {\n                var e = ratio.en.l[gsfb];\n                if (e > 0.0) {\n                    var x;\n                    x = en0 * ratio.thm.l[gsfb] * masking_lower / e;\n                    if (enable_athaa_fix != 0)\n                        x *= gfc.nsPsy.longfact[gsfb];\n                    if (xmin < x)\n                        xmin = x;\n                }\n            }\n            if (enable_athaa_fix != 0)\n                pxmin[pxminPos++] = xmin;\n            else\n                pxmin[pxminPos++] = xmin * gfc.nsPsy.longfact[gsfb];\n        }\n        /* end of long block loop */\n\n        /* use this function to determine the highest non-zero coeff */\n        var max_nonzero = 575;\n        if (cod_info.block_type != Encoder.SHORT_TYPE) {\n            // NORM, START or STOP type, but not SHORT\n            var k = 576;\n            while (k-- != 0 && BitStream.EQ(xr[k], 0)) {\n                max_nonzero = k;\n            }\n        }\n        cod_info.max_nonzero_coeff = max_nonzero;\n\n        for (var sfb = cod_info.sfb_smin; gsfb < cod_info.psymax; sfb++, gsfb += 3) {\n            var width, b;\n            var tmpATH;\n            if (gfp.VBR == VbrMode.vbr_rh || gfp.VBR == VbrMode.vbr_mtrh)\n                tmpATH = athAdjust(ATH.adjust, ATH.s[sfb], ATH.floor);\n            else\n                tmpATH = ATH.adjust * ATH.s[sfb];\n\n            width = cod_info.width[gsfb];\n            for (b = 0; b < 3; b++) {\n                var en0 = 0.0, xmin;\n                var rh1, rh2;\n                var l = width >> 1;\n\n                rh1 = tmpATH / width;\n                rh2 = DBL_EPSILON;\n                do {\n                    var xa, xb;\n                    xa = xr[j] * xr[j];\n                    en0 += xa;\n                    rh2 += (xa < rh1) ? xa : rh1;\n                    j++;\n                    xb = xr[j] * xr[j];\n                    en0 += xb;\n                    rh2 += (xb < rh1) ? xb : rh1;\n                    j++;\n                } while (--l > 0);\n                if (en0 > tmpATH)\n                    ath_over++;\n                if (sfb == Encoder.SBPSY_s) {\n                    var x = tmpATH * gfc.nsPsy.shortfact[sfb];\n                    if (rh2 < x) {\n                        rh2 = x;\n                    }\n                }\n                if (enable_athaa_fix != 0)\n                    xmin = rh2;\n                else\n                    xmin = tmpATH;\n\n                if (!gfp.ATHonly && !gfp.ATHshort) {\n                    var e = ratio.en.s[sfb][b];\n                    if (e > 0.0) {\n                        var x;\n                        x = en0 * ratio.thm.s[sfb][b] * masking_lower / e;\n                        if (enable_athaa_fix != 0)\n                            x *= gfc.nsPsy.shortfact[sfb];\n                        if (xmin < x)\n                            xmin = x;\n                    }\n                }\n                if (enable_athaa_fix != 0)\n                    pxmin[pxminPos++] = xmin;\n                else\n                    pxmin[pxminPos++] = xmin * gfc.nsPsy.shortfact[sfb];\n            }\n            /* b */\n            if (gfp.useTemporal) {\n                if (pxmin[pxminPos - 3] > pxmin[pxminPos - 3 + 1])\n                    pxmin[pxminPos - 3 + 1] += (pxmin[pxminPos - 3] - pxmin[pxminPos - 3 + 1])\n                        * gfc.decay;\n                if (pxmin[pxminPos - 3 + 1] > pxmin[pxminPos - 3 + 2])\n                    pxmin[pxminPos - 3 + 2] += (pxmin[pxminPos - 3 + 1] - pxmin[pxminPos - 3 + 2])\n                        * gfc.decay;\n            }\n        }\n        /* end of short block sfb loop */\n\n        return ath_over;\n    };\n\n    function StartLine(j) {\n        this.s = j;\n    }\n\n    this.calc_noise_core = function (cod_info, startline, l, step) {\n        var noise = 0;\n        var j = startline.s;\n        var ix = cod_info.l3_enc;\n\n        if (j > cod_info.count1) {\n            while ((l--) != 0) {\n                var temp;\n                temp = cod_info.xr[j];\n                j++;\n                noise += temp * temp;\n                temp = cod_info.xr[j];\n                j++;\n                noise += temp * temp;\n            }\n        } else if (j > cod_info.big_values) {\n            var ix01 = new_float(2);\n            ix01[0] = 0;\n            ix01[1] = step;\n            while ((l--) != 0) {\n                var temp;\n                temp = Math.abs(cod_info.xr[j]) - ix01[ix[j]];\n                j++;\n                noise += temp * temp;\n                temp = Math.abs(cod_info.xr[j]) - ix01[ix[j]];\n                j++;\n                noise += temp * temp;\n            }\n        } else {\n            while ((l--) != 0) {\n                var temp;\n                temp = Math.abs(cod_info.xr[j]) - pow43[ix[j]] * step;\n                j++;\n                noise += temp * temp;\n                temp = Math.abs(cod_info.xr[j]) - pow43[ix[j]] * step;\n                j++;\n                noise += temp * temp;\n            }\n        }\n\n        startline.s = j;\n        return noise;\n    }\n\n    /**\n     * <PRE>\n     * -oo dB  =>  -1.00\n     * - 6 dB  =>  -0.97\n     * - 3 dB  =>  -0.80\n     * - 2 dB  =>  -0.64\n     * - 1 dB  =>  -0.38\n     *   0 dB  =>   0.00\n     * + 1 dB  =>  +0.49\n     * + 2 dB  =>  +1.06\n     * + 3 dB  =>  +1.68\n     * + 6 dB  =>  +3.69\n     * +10 dB  =>  +6.45\n     * </PRE>\n     */\n    this.calc_noise = function (cod_info, l3_xmin, distort, res, prev_noise) {\n        var distortPos = 0;\n        var l3_xminPos = 0;\n        var sfb, l, over = 0;\n        var over_noise_db = 0;\n        /* 0 dB relative to masking */\n        var tot_noise_db = 0;\n        /* -200 dB relative to masking */\n        var max_noise = -20.0;\n        var j = 0;\n        var scalefac = cod_info.scalefac;\n        var scalefacPos = 0;\n\n        res.over_SSD = 0;\n\n        for (sfb = 0; sfb < cod_info.psymax; sfb++) {\n            var s = cod_info.global_gain\n                - (((scalefac[scalefacPos++]) + (cod_info.preflag != 0 ? pretab[sfb]\n                    : 0)) << (cod_info.scalefac_scale + 1))\n                - cod_info.subblock_gain[cod_info.window[sfb]] * 8;\n            var noise = 0.0;\n\n            if (prev_noise != null && (prev_noise.step[sfb] == s)) {\n\n                /* use previously computed values */\n                noise = prev_noise.noise[sfb];\n                j += cod_info.width[sfb];\n                distort[distortPos++] = noise / l3_xmin[l3_xminPos++];\n\n                noise = prev_noise.noise_log[sfb];\n\n            } else {\n                var step = POW20(s);\n                l = cod_info.width[sfb] >> 1;\n\n                if ((j + cod_info.width[sfb]) > cod_info.max_nonzero_coeff) {\n                    var usefullsize;\n                    usefullsize = cod_info.max_nonzero_coeff - j + 1;\n\n                    if (usefullsize > 0)\n                        l = usefullsize >> 1;\n                    else\n                        l = 0;\n                }\n\n                var sl = new StartLine(j);\n                noise = this.calc_noise_core(cod_info, sl, l, step);\n                j = sl.s;\n\n                if (prev_noise != null) {\n                    /* save noise values */\n                    prev_noise.step[sfb] = s;\n                    prev_noise.noise[sfb] = noise;\n                }\n\n                noise = distort[distortPos++] = noise / l3_xmin[l3_xminPos++];\n\n                /* multiplying here is adding in dB, but can overflow */\n                noise = Util.FAST_LOG10(Math.max(noise, 1E-20));\n\n                if (prev_noise != null) {\n                    /* save noise values */\n                    prev_noise.noise_log[sfb] = noise;\n                }\n            }\n\n            if (prev_noise != null) {\n                /* save noise values */\n                prev_noise.global_gain = cod_info.global_gain;\n            }\n\n            tot_noise_db += noise;\n\n            if (noise > 0.0) {\n                var tmp;\n\n                tmp = Math.max(0 | (noise * 10 + .5), 1);\n                res.over_SSD += tmp * tmp;\n\n                over++;\n                /* multiplying here is adding in dB -but can overflow */\n                /* over_noise *= noise; */\n                over_noise_db += noise;\n            }\n            max_noise = Math.max(max_noise, noise);\n\n        }\n\n        res.over_count = over;\n        res.tot_noise = tot_noise_db;\n        res.over_noise = over_noise_db;\n        res.max_noise = max_noise;\n\n        return over;\n    }\n\n    /**\n     * updates plotting data\n     *\n     * Mark Taylor 2000-??-??\n     *\n     * Robert Hegemann: moved noise/distortion calc into it\n     */\n    this.set_pinfo = function (gfp, cod_info, ratio, gr, ch) {\n        var gfc = gfp.internal_flags;\n        var sfb, sfb2;\n        var l;\n        var en0, en1;\n        var ifqstep = (cod_info.scalefac_scale == 0) ? .5 : 1.0;\n        var scalefac = cod_info.scalefac;\n\n        var l3_xmin = new_float(L3Side.SFBMAX);\n        var xfsf = new_float(L3Side.SFBMAX);\n        var noise = new CalcNoiseResult();\n\n        calc_xmin(gfp, ratio, cod_info, l3_xmin);\n        calc_noise(cod_info, l3_xmin, xfsf, noise, null);\n\n        var j = 0;\n        sfb2 = cod_info.sfb_lmax;\n        if (cod_info.block_type != Encoder.SHORT_TYPE\n            && 0 == cod_info.mixed_block_flag)\n            sfb2 = 22;\n        for (sfb = 0; sfb < sfb2; sfb++) {\n            var start = gfc.scalefac_band.l[sfb];\n            var end = gfc.scalefac_band.l[sfb + 1];\n            var bw = end - start;\n            for (en0 = 0.0; j < end; j++)\n                en0 += cod_info.xr[j] * cod_info.xr[j];\n            en0 /= bw;\n            /* convert to MDCT units */\n            /* scaling so it shows up on FFT plot */\n            en1 = 1e15;\n            gfc.pinfo.en[gr][ch][sfb] = en1 * en0;\n            gfc.pinfo.xfsf[gr][ch][sfb] = en1 * l3_xmin[sfb] * xfsf[sfb] / bw;\n\n            if (ratio.en.l[sfb] > 0 && !gfp.ATHonly)\n                en0 = en0 / ratio.en.l[sfb];\n            else\n                en0 = 0.0;\n\n            gfc.pinfo.thr[gr][ch][sfb] = en1\n                * Math.max(en0 * ratio.thm.l[sfb], gfc.ATH.l[sfb]);\n\n            /* there is no scalefactor bands >= SBPSY_l */\n            gfc.pinfo.LAMEsfb[gr][ch][sfb] = 0;\n            if (cod_info.preflag != 0 && sfb >= 11)\n                gfc.pinfo.LAMEsfb[gr][ch][sfb] = -ifqstep * pretab[sfb];\n\n            if (sfb < Encoder.SBPSY_l) {\n                /* scfsi should be decoded by caller side */\n                assert(scalefac[sfb] >= 0);\n                gfc.pinfo.LAMEsfb[gr][ch][sfb] -= ifqstep * scalefac[sfb];\n            }\n        }\n        /* for sfb */\n\n        if (cod_info.block_type == Encoder.SHORT_TYPE) {\n            sfb2 = sfb;\n            for (sfb = cod_info.sfb_smin; sfb < Encoder.SBMAX_s; sfb++) {\n                var start = gfc.scalefac_band.s[sfb];\n                var end = gfc.scalefac_band.s[sfb + 1];\n                var bw = end - start;\n                for (var i = 0; i < 3; i++) {\n                    for (en0 = 0.0, l = start; l < end; l++) {\n                        en0 += cod_info.xr[j] * cod_info.xr[j];\n                        j++;\n                    }\n                    en0 = Math.max(en0 / bw, 1e-20);\n                    /* convert to MDCT units */\n                    /* scaling so it shows up on FFT plot */\n                    en1 = 1e15;\n\n                    gfc.pinfo.en_s[gr][ch][3 * sfb + i] = en1 * en0;\n                    gfc.pinfo.xfsf_s[gr][ch][3 * sfb + i] = en1 * l3_xmin[sfb2]\n                        * xfsf[sfb2] / bw;\n                    if (ratio.en.s[sfb][i] > 0)\n                        en0 = en0 / ratio.en.s[sfb][i];\n                    else\n                        en0 = 0.0;\n                    if (gfp.ATHonly || gfp.ATHshort)\n                        en0 = 0;\n\n                    gfc.pinfo.thr_s[gr][ch][3 * sfb + i] = en1\n                        * Math.max(en0 * ratio.thm.s[sfb][i],\n                            gfc.ATH.s[sfb]);\n\n                    /* there is no scalefactor bands >= SBPSY_s */\n                    gfc.pinfo.LAMEsfb_s[gr][ch][3 * sfb + i] = -2.0\n                        * cod_info.subblock_gain[i];\n                    if (sfb < Encoder.SBPSY_s) {\n                        gfc.pinfo.LAMEsfb_s[gr][ch][3 * sfb + i] -= ifqstep\n                            * scalefac[sfb2];\n                    }\n                    sfb2++;\n                }\n            }\n        }\n        /* block type short */\n        gfc.pinfo.LAMEqss[gr][ch] = cod_info.global_gain;\n        gfc.pinfo.LAMEmainbits[gr][ch] = cod_info.part2_3_length\n            + cod_info.part2_length;\n        gfc.pinfo.LAMEsfbits[gr][ch] = cod_info.part2_length;\n\n        gfc.pinfo.over[gr][ch] = noise.over_count;\n        gfc.pinfo.max_noise[gr][ch] = noise.max_noise * 10.0;\n        gfc.pinfo.over_noise[gr][ch] = noise.over_noise * 10.0;\n        gfc.pinfo.tot_noise[gr][ch] = noise.tot_noise * 10.0;\n        gfc.pinfo.over_SSD[gr][ch] = noise.over_SSD;\n    }\n\n    /**\n     * updates plotting data for a whole frame\n     *\n     * Robert Hegemann 2000-10-21\n     */\n    function set_frame_pinfo(gfp, ratio) {\n        var gfc = gfp.internal_flags;\n\n        gfc.masking_lower = 1.0;\n\n        /*\n         * for every granule and channel patch l3_enc and set info\n         */\n        for (var gr = 0; gr < gfc.mode_gr; gr++) {\n            for (var ch = 0; ch < gfc.channels_out; ch++) {\n                var cod_info = gfc.l3_side.tt[gr][ch];\n                var scalefac_sav = new_int(L3Side.SFBMAX);\n                System.arraycopy(cod_info.scalefac, 0, scalefac_sav, 0,\n                    scalefac_sav.length);\n\n                /*\n                 * reconstruct the scalefactors in case SCFSI was used\n                 */\n                if (gr == 1) {\n                    var sfb;\n                    for (sfb = 0; sfb < cod_info.sfb_lmax; sfb++) {\n                        if (cod_info.scalefac[sfb] < 0) /* scfsi */\n                            cod_info.scalefac[sfb] = gfc.l3_side.tt[0][ch].scalefac[sfb];\n                    }\n                }\n\n                set_pinfo(gfp, cod_info, ratio[gr][ch], gr, ch);\n                System.arraycopy(scalefac_sav, 0, cod_info.scalefac, 0,\n                    scalefac_sav.length);\n            }\n            /* for ch */\n        }\n        /* for gr */\n    }\n\n}\n\nmodule.exports = QuantizePVT;\n","/*\n *\tMP3 huffman table selecting and bit counting\n *\n *\tCopyright (c) 1999-2005 Takehiro TOMINAGA\n *\tCopyright (c) 2002-2005 Gabriel Bouvigne\n *\n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2 of the License, or (at your option) any later version.\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\t See the GNU\n * Library General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the\n * Free Software Foundation, Inc., 59 Temple Place - Suite 330,\n * Boston, MA 02111-1307, USA.\n */\n\n/* $Id: Takehiro.java,v 1.26 2011/05/24 20:48:06 kenchis Exp $ */\n\n//package mp3;\n\n//import java.util.Arrays;\nvar common = require('./common.js');\nvar System = common.System;\nvar VbrMode = common.VbrMode;\nvar Float = common.Float;\nvar ShortBlock = common.ShortBlock;\nvar Util = common.Util;\nvar Arrays = common.Arrays;\nvar new_array_n = common.new_array_n;\nvar new_byte = common.new_byte;\nvar new_double = common.new_double;\nvar new_float = common.new_float;\nvar new_float_n = common.new_float_n;\nvar new_int = common.new_int;\nvar new_int_n = common.new_int_n;\nvar assert = common.assert;\n\nvar Encoder = require('./Encoder.js');\nvar Tables = require('./Tables.js');\nvar GrInfo = require('./GrInfo.js');\nvar QuantizePVT = require('./QuantizePVT.js');\n\n\nfunction Takehiro() {\n\n    var qupvt = null;\n    this.qupvt = null;\n\n    this.setModules = function (_qupvt) {\n        this.qupvt = _qupvt;\n        qupvt = _qupvt;\n    }\n\n    function Bits(b) {\n        this.bits = 0 | b;\n    }\n\n    var subdv_table = [[0, 0], /* 0 bands */\n        [0, 0], /* 1 bands */\n        [0, 0], /* 2 bands */\n        [0, 0], /* 3 bands */\n        [0, 0], /* 4 bands */\n        [0, 1], /* 5 bands */\n        [1, 1], /* 6 bands */\n        [1, 1], /* 7 bands */\n        [1, 2], /* 8 bands */\n        [2, 2], /* 9 bands */\n        [2, 3], /* 10 bands */\n        [2, 3], /* 11 bands */\n        [3, 4], /* 12 bands */\n        [3, 4], /* 13 bands */\n        [3, 4], /* 14 bands */\n        [4, 5], /* 15 bands */\n        [4, 5], /* 16 bands */\n        [4, 6], /* 17 bands */\n        [5, 6], /* 18 bands */\n        [5, 6], /* 19 bands */\n        [5, 7], /* 20 bands */\n        [6, 7], /* 21 bands */\n        [6, 7], /* 22 bands */\n    ];\n\n    /**\n     * nonlinear quantization of xr More accurate formula than the ISO formula.\n     * Takes into account the fact that we are quantizing xr . ix, but we want\n     * ix^4/3 to be as close as possible to x^4/3. (taking the nearest int would\n     * mean ix is as close as possible to xr, which is different.)\n     *\n     * From Segher Boessenkool <segher@eastsite.nl> 11/1999\n     *\n     * 09/2000: ASM code removed in favor of IEEE754 hack by Takehiro Tominaga.\n     * If you need the ASM code, check CVS circa Aug 2000.\n     *\n     * 01/2004: Optimizations by Gabriel Bouvigne\n     */\n    function quantize_lines_xrpow_01(l, istep, xr, xrPos, ix, ixPos) {\n        var compareval0 = (1.0 - 0.4054) / istep;\n\n        assert(l > 0);\n        l = l >> 1;\n        while ((l--) != 0) {\n            ix[ixPos++] = (compareval0 > xr[xrPos++]) ? 0 : 1;\n            ix[ixPos++] = (compareval0 > xr[xrPos++]) ? 0 : 1;\n        }\n    }\n\n    /**\n     * XRPOW_FTOI is a macro to convert floats to ints.<BR>\n     * if XRPOW_FTOI(x) = nearest_int(x), then QUANTFAC(x)=adj43asm[x]<BR>\n     * ROUNDFAC= -0.0946<BR>\n     *\n     * if XRPOW_FTOI(x) = floor(x), then QUANTFAC(x)=asj43[x]<BR>\n     * ROUNDFAC=0.4054<BR>\n     *\n     * Note: using floor() or 0| is extremely slow. On machines where the\n     * TAKEHIRO_IEEE754_HACK code above does not work, it is worthwile to write\n     * some ASM for XRPOW_FTOI().\n     */\n    function quantize_lines_xrpow(l, istep, xr, xrPos, ix, ixPos) {\n        assert(l > 0);\n\n        l = l >> 1;\n        var remaining = l % 2;\n        l = l >> 1;\n        while (l-- != 0) {\n            var x0, x1, x2, x3;\n            var rx0, rx1, rx2, rx3;\n\n            x0 = xr[xrPos++] * istep;\n            x1 = xr[xrPos++] * istep;\n            rx0 = 0 | x0;\n            x2 = xr[xrPos++] * istep;\n            rx1 = 0 | x1;\n            x3 = xr[xrPos++] * istep;\n            rx2 = 0 | x2;\n            x0 += qupvt.adj43[rx0];\n            rx3 = 0 | x3;\n            x1 += qupvt.adj43[rx1];\n            ix[ixPos++] = 0 | x0;\n            x2 += qupvt.adj43[rx2];\n            ix[ixPos++] = 0 | x1;\n            x3 += qupvt.adj43[rx3];\n            ix[ixPos++] = 0 | x2;\n            ix[ixPos++] = 0 | x3;\n        }\n        if (remaining != 0) {\n            var x0, x1;\n            var rx0, rx1;\n\n            x0 = xr[xrPos++] * istep;\n            x1 = xr[xrPos++] * istep;\n            rx0 = 0 | x0;\n            rx1 = 0 | x1;\n            x0 += qupvt.adj43[rx0];\n            x1 += qupvt.adj43[rx1];\n            ix[ixPos++] = 0 | x0;\n            ix[ixPos++] = 0 | x1;\n        }\n    }\n\n    /**\n     * Quantization function This function will select which lines to quantize\n     * and call the proper quantization function\n     */\n    function quantize_xrpow(xp, pi, istep, codInfo, prevNoise) {\n        /* quantize on xr^(3/4) instead of xr */\n        var sfb;\n        var sfbmax;\n        var j = 0;\n        var prev_data_use;\n        var accumulate = 0;\n        var accumulate01 = 0;\n        var xpPos = 0;\n        var iData = pi;\n        var iDataPos = 0;\n        var acc_iData = iData;\n        var acc_iDataPos = 0;\n        var acc_xp = xp;\n        var acc_xpPos = 0;\n\n        /*\n         * Reusing previously computed data does not seems to work if global\n         * gain is changed. Finding why it behaves this way would allow to use a\n         * cache of previously computed values (let's 10 cached values per sfb)\n         * that would probably provide a noticeable speedup\n         */\n        prev_data_use = (prevNoise != null && (codInfo.global_gain == prevNoise.global_gain));\n\n        if (codInfo.block_type == Encoder.SHORT_TYPE)\n            sfbmax = 38;\n        else\n            sfbmax = 21;\n\n        for (sfb = 0; sfb <= sfbmax; sfb++) {\n            var step = -1;\n\n            if (prev_data_use || codInfo.block_type == Encoder.NORM_TYPE) {\n                step = codInfo.global_gain\n                    - ((codInfo.scalefac[sfb] + (codInfo.preflag != 0 ? qupvt.pretab[sfb]\n                        : 0)) << (codInfo.scalefac_scale + 1))\n                    - codInfo.subblock_gain[codInfo.window[sfb]] * 8;\n            }\n            assert(codInfo.width[sfb] >= 0);\n            if (prev_data_use && (prevNoise.step[sfb] == step)) {\n                /*\n                 * do not recompute this part, but compute accumulated lines\n                 */\n                if (accumulate != 0) {\n                    quantize_lines_xrpow(accumulate, istep, acc_xp, acc_xpPos,\n                        acc_iData, acc_iDataPos);\n                    accumulate = 0;\n                }\n                if (accumulate01 != 0) {\n                    quantize_lines_xrpow_01(accumulate01, istep, acc_xp,\n                        acc_xpPos, acc_iData, acc_iDataPos);\n                    accumulate01 = 0;\n                }\n            } else { /* should compute this part */\n                var l = codInfo.width[sfb];\n\n                if ((j + codInfo.width[sfb]) > codInfo.max_nonzero_coeff) {\n                    /* do not compute upper zero part */\n                    var usefullsize;\n                    usefullsize = codInfo.max_nonzero_coeff - j + 1;\n                    Arrays.fill(pi, codInfo.max_nonzero_coeff, 576, 0);\n                    l = usefullsize;\n\n                    if (l < 0) {\n                        l = 0;\n                    }\n\n                    /* no need to compute higher sfb values */\n                    sfb = sfbmax + 1;\n                }\n\n                /* accumulate lines to quantize */\n                if (0 == accumulate && 0 == accumulate01) {\n                    acc_iData = iData;\n                    acc_iDataPos = iDataPos;\n                    acc_xp = xp;\n                    acc_xpPos = xpPos;\n                }\n                if (prevNoise != null && prevNoise.sfb_count1 > 0\n                    && sfb >= prevNoise.sfb_count1\n                    && prevNoise.step[sfb] > 0\n                    && step >= prevNoise.step[sfb]) {\n\n                    if (accumulate != 0) {\n                        quantize_lines_xrpow(accumulate, istep, acc_xp,\n                            acc_xpPos, acc_iData, acc_iDataPos);\n                        accumulate = 0;\n                        acc_iData = iData;\n                        acc_iDataPos = iDataPos;\n                        acc_xp = xp;\n                        acc_xpPos = xpPos;\n                    }\n                    accumulate01 += l;\n                } else {\n                    if (accumulate01 != 0) {\n                        quantize_lines_xrpow_01(accumulate01, istep, acc_xp,\n                            acc_xpPos, acc_iData, acc_iDataPos);\n                        accumulate01 = 0;\n                        acc_iData = iData;\n                        acc_iDataPos = iDataPos;\n                        acc_xp = xp;\n                        acc_xpPos = xpPos;\n                    }\n                    accumulate += l;\n                }\n\n                if (l <= 0) {\n                    /*\n                     * rh: 20040215 may happen due to \"prev_data_use\"\n                     * optimization\n                     */\n                    if (accumulate01 != 0) {\n                        quantize_lines_xrpow_01(accumulate01, istep, acc_xp,\n                            acc_xpPos, acc_iData, acc_iDataPos);\n                        accumulate01 = 0;\n                    }\n                    if (accumulate != 0) {\n                        quantize_lines_xrpow(accumulate, istep, acc_xp,\n                            acc_xpPos, acc_iData, acc_iDataPos);\n                        accumulate = 0;\n                    }\n\n                    break;\n                    /* ends for-loop */\n                }\n            }\n            if (sfb <= sfbmax) {\n                iDataPos += codInfo.width[sfb];\n                xpPos += codInfo.width[sfb];\n                j += codInfo.width[sfb];\n            }\n        }\n        if (accumulate != 0) { /* last data part */\n            quantize_lines_xrpow(accumulate, istep, acc_xp, acc_xpPos,\n                acc_iData, acc_iDataPos);\n            accumulate = 0;\n        }\n        if (accumulate01 != 0) { /* last data part */\n            quantize_lines_xrpow_01(accumulate01, istep, acc_xp, acc_xpPos,\n                acc_iData, acc_iDataPos);\n            accumulate01 = 0;\n        }\n\n    }\n\n    /**\n     * ix_max\n     */\n    function ix_max(ix, ixPos, endPos) {\n        var max1 = 0, max2 = 0;\n\n        do {\n            var x1 = ix[ixPos++];\n            var x2 = ix[ixPos++];\n            if (max1 < x1)\n                max1 = x1;\n\n            if (max2 < x2)\n                max2 = x2;\n        } while (ixPos < endPos);\n        if (max1 < max2)\n            max1 = max2;\n        return max1;\n    }\n\n    function count_bit_ESC(ix, ixPos, end, t1, t2, s) {\n        /* ESC-table is used */\n        var linbits = Tables.ht[t1].xlen * 65536 + Tables.ht[t2].xlen;\n        var sum = 0, sum2;\n\n        do {\n            var x = ix[ixPos++];\n            var y = ix[ixPos++];\n\n            if (x != 0) {\n                if (x > 14) {\n                    x = 15;\n                    sum += linbits;\n                }\n                x *= 16;\n            }\n\n            if (y != 0) {\n                if (y > 14) {\n                    y = 15;\n                    sum += linbits;\n                }\n                x += y;\n            }\n\n            sum += Tables.largetbl[x];\n        } while (ixPos < end);\n\n        sum2 = sum & 0xffff;\n        sum >>= 16;\n\n        if (sum > sum2) {\n            sum = sum2;\n            t1 = t2;\n        }\n\n        s.bits += sum;\n        return t1;\n    }\n\n    function count_bit_noESC(ix, ixPos, end, s) {\n        /* No ESC-words */\n        var sum1 = 0;\n        var hlen1 = Tables.ht[1].hlen;\n\n        do {\n            var x = ix[ixPos + 0] * 2 + ix[ixPos + 1];\n            ixPos += 2;\n            sum1 += hlen1[x];\n        } while (ixPos < end);\n\n        s.bits += sum1;\n        return 1;\n    }\n\n    function count_bit_noESC_from2(ix, ixPos, end, t1, s) {\n        /* No ESC-words */\n        var sum = 0, sum2;\n        var xlen = Tables.ht[t1].xlen;\n        var hlen;\n        if (t1 == 2)\n            hlen = Tables.table23;\n        else\n            hlen = Tables.table56;\n\n        do {\n            var x = ix[ixPos + 0] * xlen + ix[ixPos + 1];\n            ixPos += 2;\n            sum += hlen[x];\n        } while (ixPos < end);\n\n        sum2 = sum & 0xffff;\n        sum >>= 16;\n\n        if (sum > sum2) {\n            sum = sum2;\n            t1++;\n        }\n\n        s.bits += sum;\n        return t1;\n    }\n\n    function count_bit_noESC_from3(ix, ixPos, end, t1, s) {\n        /* No ESC-words */\n        var sum1 = 0;\n        var sum2 = 0;\n        var sum3 = 0;\n        var xlen = Tables.ht[t1].xlen;\n        var hlen1 = Tables.ht[t1].hlen;\n        var hlen2 = Tables.ht[t1 + 1].hlen;\n        var hlen3 = Tables.ht[t1 + 2].hlen;\n\n        do {\n            var x = ix[ixPos + 0] * xlen + ix[ixPos + 1];\n            ixPos += 2;\n            sum1 += hlen1[x];\n            sum2 += hlen2[x];\n            sum3 += hlen3[x];\n        } while (ixPos < end);\n        var t = t1;\n        if (sum1 > sum2) {\n            sum1 = sum2;\n            t++;\n        }\n        if (sum1 > sum3) {\n            sum1 = sum3;\n            t = t1 + 2;\n        }\n        s.bits += sum1;\n\n        return t;\n    }\n\n    /*************************************************************************/\n    /* choose table */\n    /*************************************************************************/\n\n    var huf_tbl_noESC = [1, 2, 5, 7, 7, 10, 10, 13, 13,\n        13, 13, 13, 13, 13, 13];\n\n    /**\n     * Choose the Huffman table that will encode ix[begin..end] with the fewest\n     * bits.\n     *\n     * Note: This code contains knowledge about the sizes and characteristics of\n     * the Huffman tables as defined in the IS (Table B.7), and will not work\n     * with any arbitrary tables.\n     */\n    function choose_table(ix, ixPos, endPos, s) {\n        var max = ix_max(ix, ixPos, endPos);\n\n        switch (max) {\n            case 0:\n                return max;\n\n            case 1:\n                return count_bit_noESC(ix, ixPos, endPos, s);\n\n            case 2:\n            case 3:\n                return count_bit_noESC_from2(ix, ixPos, endPos,\n                    huf_tbl_noESC[max - 1], s);\n\n            case 4:\n            case 5:\n            case 6:\n            case 7:\n            case 8:\n            case 9:\n            case 10:\n            case 11:\n            case 12:\n            case 13:\n            case 14:\n            case 15:\n                return count_bit_noESC_from3(ix, ixPos, endPos,\n                    huf_tbl_noESC[max - 1], s);\n\n            default:\n                /* try tables with linbits */\n                if (max > QuantizePVT.IXMAX_VAL) {\n                    s.bits = QuantizePVT.LARGE_BITS;\n                    return -1;\n                }\n                max -= 15;\n                var choice2;\n                for (choice2 = 24; choice2 < 32; choice2++) {\n                    if (Tables.ht[choice2].linmax >= max) {\n                        break;\n                    }\n                }\n                var choice;\n                for (choice = choice2 - 8; choice < 24; choice++) {\n                    if (Tables.ht[choice].linmax >= max) {\n                        break;\n                    }\n                }\n                return count_bit_ESC(ix, ixPos, endPos, choice, choice2, s);\n        }\n    }\n\n    /**\n     * count_bit\n     */\n    this.noquant_count_bits = function (gfc, gi, prev_noise) {\n        var ix = gi.l3_enc;\n        var i = Math.min(576, ((gi.max_nonzero_coeff + 2) >> 1) << 1);\n\n        if (prev_noise != null)\n            prev_noise.sfb_count1 = 0;\n\n        /* Determine count1 region */\n        for (; i > 1; i -= 2)\n            if ((ix[i - 1] | ix[i - 2]) != 0)\n                break;\n        gi.count1 = i;\n\n        /* Determines the number of bits to encode the quadruples. */\n        var a1 = 0;\n        var a2 = 0;\n        for (; i > 3; i -= 4) {\n            var p;\n            /* hack to check if all values <= 1 */\n            //throw \"TODO: HACK         if ((((long) ix[i - 1] | (long) ix[i - 2] | (long) ix[i - 3] | (long) ix[i - 4]) & 0xffffffffL) > 1L        \"\n            //if (true) {\n            if (((ix[i - 1] | ix[i - 2] | ix[i - 3] | ix[i - 4]) & 0x7fffffff) > 1) {\n                break;\n            }\n            p = ((ix[i - 4] * 2 + ix[i - 3]) * 2 + ix[i - 2]) * 2 + ix[i - 1];\n            a1 += Tables.t32l[p];\n            a2 += Tables.t33l[p];\n        }\n        var bits = a1;\n        gi.count1table_select = 0;\n        if (a1 > a2) {\n            bits = a2;\n            gi.count1table_select = 1;\n        }\n\n        gi.count1bits = bits;\n        gi.big_values = i;\n        if (i == 0)\n            return bits;\n\n        if (gi.block_type == Encoder.SHORT_TYPE) {\n            a1 = 3 * gfc.scalefac_band.s[3];\n            if (a1 > gi.big_values)\n                a1 = gi.big_values;\n            a2 = gi.big_values;\n\n        } else if (gi.block_type == Encoder.NORM_TYPE) {\n            assert(i <= 576);\n            /* bv_scf has 576 entries (0..575) */\n            a1 = gi.region0_count = gfc.bv_scf[i - 2];\n            a2 = gi.region1_count = gfc.bv_scf[i - 1];\n\n            assert(a1 + a2 + 2 < Encoder.SBPSY_l);\n            a2 = gfc.scalefac_band.l[a1 + a2 + 2];\n            a1 = gfc.scalefac_band.l[a1 + 1];\n            if (a2 < i) {\n                var bi = new Bits(bits);\n                gi.table_select[2] = choose_table(ix, a2, i, bi);\n                bits = bi.bits;\n            }\n        } else {\n            gi.region0_count = 7;\n            /* gi.region1_count = SBPSY_l - 7 - 1; */\n            gi.region1_count = Encoder.SBMAX_l - 1 - 7 - 1;\n            a1 = gfc.scalefac_band.l[7 + 1];\n            a2 = i;\n            if (a1 > a2) {\n                a1 = a2;\n            }\n        }\n\n        /* have to allow for the case when bigvalues < region0 < region1 */\n        /* (and region0, region1 are ignored) */\n        a1 = Math.min(a1, i);\n        a2 = Math.min(a2, i);\n\n        assert(a1 >= 0);\n        assert(a2 >= 0);\n\n        /* Count the number of bits necessary to code the bigvalues region. */\n        if (0 < a1) {\n            var bi = new Bits(bits);\n            gi.table_select[0] = choose_table(ix, 0, a1, bi);\n            bits = bi.bits;\n        }\n        if (a1 < a2) {\n            var bi = new Bits(bits);\n            gi.table_select[1] = choose_table(ix, a1, a2, bi);\n            bits = bi.bits;\n        }\n        if (gfc.use_best_huffman == 2) {\n            gi.part2_3_length = bits;\n            best_huffman_divide(gfc, gi);\n            bits = gi.part2_3_length;\n        }\n\n        if (prev_noise != null) {\n            if (gi.block_type == Encoder.NORM_TYPE) {\n                var sfb = 0;\n                while (gfc.scalefac_band.l[sfb] < gi.big_values) {\n                    sfb++;\n                }\n                prev_noise.sfb_count1 = sfb;\n            }\n        }\n\n        return bits;\n    }\n\n    this.count_bits = function (gfc, xr, gi, prev_noise) {\n        var ix = gi.l3_enc;\n\n        /* since quantize_xrpow uses table lookup, we need to check this first: */\n        var w = (QuantizePVT.IXMAX_VAL) / qupvt.IPOW20(gi.global_gain);\n\n        if (gi.xrpow_max > w)\n            return QuantizePVT.LARGE_BITS;\n\n        quantize_xrpow(xr, ix, qupvt.IPOW20(gi.global_gain), gi, prev_noise);\n\n        if ((gfc.substep_shaping & 2) != 0) {\n            var j = 0;\n            /* 0.634521682242439 = 0.5946*2**(.5*0.1875) */\n            var gain = gi.global_gain + gi.scalefac_scale;\n            var roundfac = 0.634521682242439 / qupvt.IPOW20(gain);\n            for (var sfb = 0; sfb < gi.sfbmax; sfb++) {\n                var width = gi.width[sfb];\n                assert(width >= 0);\n                if (0 == gfc.pseudohalf[sfb]) {\n                    j += width;\n                } else {\n                    var k;\n                    for (k = j, j += width; k < j; ++k) {\n                        ix[k] = (xr[k] >= roundfac) ? ix[k] : 0;\n                    }\n                }\n            }\n        }\n        return this.noquant_count_bits(gfc, gi, prev_noise);\n    }\n\n    /**\n     * re-calculate the best scalefac_compress using scfsi the saved bits are\n     * kept in the bit reservoir.\n     */\n    function recalc_divide_init(gfc, cod_info, ix, r01_bits, r01_div, r0_tbl, r1_tbl) {\n        var bigv = cod_info.big_values;\n\n        for (var r0 = 0; r0 <= 7 + 15; r0++) {\n            r01_bits[r0] = QuantizePVT.LARGE_BITS;\n        }\n\n        for (var r0 = 0; r0 < 16; r0++) {\n            var a1 = gfc.scalefac_band.l[r0 + 1];\n            if (a1 >= bigv)\n                break;\n            var r0bits = 0;\n            var bi = new Bits(r0bits);\n            var r0t = choose_table(ix, 0, a1, bi);\n            r0bits = bi.bits;\n\n            for (var r1 = 0; r1 < 8; r1++) {\n                var a2 = gfc.scalefac_band.l[r0 + r1 + 2];\n                if (a2 >= bigv)\n                    break;\n                var bits = r0bits;\n                bi = new Bits(bits);\n                var r1t = choose_table(ix, a1, a2, bi);\n                bits = bi.bits;\n                if (r01_bits[r0 + r1] > bits) {\n                    r01_bits[r0 + r1] = bits;\n                    r01_div[r0 + r1] = r0;\n                    r0_tbl[r0 + r1] = r0t;\n                    r1_tbl[r0 + r1] = r1t;\n                }\n            }\n        }\n    }\n\n    function recalc_divide_sub(gfc, cod_info2, gi, ix, r01_bits, r01_div, r0_tbl, r1_tbl) {\n        var bigv = cod_info2.big_values;\n\n        for (var r2 = 2; r2 < Encoder.SBMAX_l + 1; r2++) {\n            var a2 = gfc.scalefac_band.l[r2];\n            if (a2 >= bigv)\n                break;\n            var bits = r01_bits[r2 - 2] + cod_info2.count1bits;\n            if (gi.part2_3_length <= bits)\n                break;\n\n            var bi = new Bits(bits);\n            var r2t = choose_table(ix, a2, bigv, bi);\n            bits = bi.bits;\n            if (gi.part2_3_length <= bits)\n                continue;\n\n            gi.assign(cod_info2);\n            gi.part2_3_length = bits;\n            gi.region0_count = r01_div[r2 - 2];\n            gi.region1_count = r2 - 2 - r01_div[r2 - 2];\n            gi.table_select[0] = r0_tbl[r2 - 2];\n            gi.table_select[1] = r1_tbl[r2 - 2];\n            gi.table_select[2] = r2t;\n        }\n    }\n\n    this.best_huffman_divide = function (gfc, gi) {\n        var cod_info2 = new GrInfo();\n        var ix = gi.l3_enc;\n        var r01_bits = new_int(7 + 15 + 1);\n        var r01_div = new_int(7 + 15 + 1);\n        var r0_tbl = new_int(7 + 15 + 1);\n        var r1_tbl = new_int(7 + 15 + 1);\n\n        /* SHORT BLOCK stuff fails for MPEG2 */\n        if (gi.block_type == Encoder.SHORT_TYPE && gfc.mode_gr == 1)\n            return;\n\n        cod_info2.assign(gi);\n        if (gi.block_type == Encoder.NORM_TYPE) {\n            recalc_divide_init(gfc, gi, ix, r01_bits, r01_div, r0_tbl, r1_tbl);\n            recalc_divide_sub(gfc, cod_info2, gi, ix, r01_bits, r01_div,\n                r0_tbl, r1_tbl);\n        }\n        var i = cod_info2.big_values;\n        if (i == 0 || (ix[i - 2] | ix[i - 1]) > 1)\n            return;\n\n        i = gi.count1 + 2;\n        if (i > 576)\n            return;\n\n        /* Determines the number of bits to encode the quadruples. */\n        cod_info2.assign(gi);\n        cod_info2.count1 = i;\n        var a1 = 0;\n        var a2 = 0;\n\n        assert(i <= 576);\n\n        for (; i > cod_info2.big_values; i -= 4) {\n            var p = ((ix[i - 4] * 2 + ix[i - 3]) * 2 + ix[i - 2]) * 2\n                + ix[i - 1];\n            a1 += Tables.t32l[p];\n            a2 += Tables.t33l[p];\n        }\n        cod_info2.big_values = i;\n\n        cod_info2.count1table_select = 0;\n        if (a1 > a2) {\n            a1 = a2;\n            cod_info2.count1table_select = 1;\n        }\n\n        cod_info2.count1bits = a1;\n\n        if (cod_info2.block_type == Encoder.NORM_TYPE)\n            recalc_divide_sub(gfc, cod_info2, gi, ix, r01_bits, r01_div,\n                r0_tbl, r1_tbl);\n        else {\n            /* Count the number of bits necessary to code the bigvalues region. */\n            cod_info2.part2_3_length = a1;\n            a1 = gfc.scalefac_band.l[7 + 1];\n            if (a1 > i) {\n                a1 = i;\n            }\n            if (a1 > 0) {\n                var bi = new Bits(cod_info2.part2_3_length);\n                cod_info2.table_select[0] = choose_table(ix, 0, a1, bi);\n                cod_info2.part2_3_length = bi.bits;\n            }\n            if (i > a1) {\n                var bi = new Bits(cod_info2.part2_3_length);\n                cod_info2.table_select[1] = choose_table(ix, a1, i, bi);\n                cod_info2.part2_3_length = bi.bits;\n            }\n            if (gi.part2_3_length > cod_info2.part2_3_length)\n                gi.assign(cod_info2);\n        }\n    }\n\n    var slen1_n = [1, 1, 1, 1, 8, 2, 2, 2, 4, 4, 4, 8, 8, 8, 16, 16];\n    var slen2_n = [1, 2, 4, 8, 1, 2, 4, 8, 2, 4, 8, 2, 4, 8, 4, 8];\n    var slen1_tab = [0, 0, 0, 0, 3, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4];\n    var slen2_tab = [0, 1, 2, 3, 0, 1, 2, 3, 1, 2, 3, 1, 2, 3, 2, 3];\n    Takehiro.slen1_tab = slen1_tab;\n    Takehiro.slen2_tab = slen2_tab;\n\n    function scfsi_calc(ch, l3_side) {\n        var sfb;\n        var gi = l3_side.tt[1][ch];\n        var g0 = l3_side.tt[0][ch];\n\n        for (var i = 0; i < Tables.scfsi_band.length - 1; i++) {\n            for (sfb = Tables.scfsi_band[i]; sfb < Tables.scfsi_band[i + 1]; sfb++) {\n                if (g0.scalefac[sfb] != gi.scalefac[sfb]\n                    && gi.scalefac[sfb] >= 0)\n                    break;\n            }\n            if (sfb == Tables.scfsi_band[i + 1]) {\n                for (sfb = Tables.scfsi_band[i]; sfb < Tables.scfsi_band[i + 1]; sfb++) {\n                    gi.scalefac[sfb] = -1;\n                }\n                l3_side.scfsi[ch][i] = 1;\n            }\n        }\n        var s1 = 0;\n        var c1 = 0;\n        for (sfb = 0; sfb < 11; sfb++) {\n            if (gi.scalefac[sfb] == -1)\n                continue;\n            c1++;\n            if (s1 < gi.scalefac[sfb])\n                s1 = gi.scalefac[sfb];\n        }\n        var s2 = 0;\n        var c2 = 0;\n        for (; sfb < Encoder.SBPSY_l; sfb++) {\n            if (gi.scalefac[sfb] == -1)\n                continue;\n            c2++;\n            if (s2 < gi.scalefac[sfb])\n                s2 = gi.scalefac[sfb];\n        }\n\n        for (var i = 0; i < 16; i++) {\n            if (s1 < slen1_n[i] && s2 < slen2_n[i]) {\n                var c = slen1_tab[i] * c1 + slen2_tab[i] * c2;\n                if (gi.part2_length > c) {\n                    gi.part2_length = c;\n                    gi.scalefac_compress = i;\n                }\n            }\n        }\n    }\n\n    /**\n     * Find the optimal way to store the scalefactors. Only call this routine\n     * after final scalefactors have been chosen and the channel/granule will\n     * not be re-encoded.\n     */\n    this.best_scalefac_store = function (gfc, gr, ch, l3_side) {\n        /* use scalefac_scale if we can */\n        var gi = l3_side.tt[gr][ch];\n        var sfb, i, j, l;\n        var recalc = 0;\n\n        /*\n         * remove scalefacs from bands with ix=0. This idea comes from the AAC\n         * ISO docs. added mt 3/00\n         */\n        /* check if l3_enc=0 */\n        j = 0;\n        for (sfb = 0; sfb < gi.sfbmax; sfb++) {\n            var width = gi.width[sfb];\n            assert(width >= 0);\n            j += width;\n            for (l = -width; l < 0; l++) {\n                if (gi.l3_enc[l + j] != 0)\n                    break;\n            }\n            if (l == 0)\n                gi.scalefac[sfb] = recalc = -2;\n            /* anything goes. */\n            /*\n             * only best_scalefac_store and calc_scfsi know--and only they\n             * should know--about the magic number -2.\n             */\n        }\n\n        if (0 == gi.scalefac_scale && 0 == gi.preflag) {\n            var s = 0;\n            for (sfb = 0; sfb < gi.sfbmax; sfb++)\n                if (gi.scalefac[sfb] > 0)\n                    s |= gi.scalefac[sfb];\n\n            if (0 == (s & 1) && s != 0) {\n                for (sfb = 0; sfb < gi.sfbmax; sfb++)\n                    if (gi.scalefac[sfb] > 0)\n                        gi.scalefac[sfb] >>= 1;\n\n                gi.scalefac_scale = recalc = 1;\n            }\n        }\n\n        if (0 == gi.preflag && gi.block_type != Encoder.SHORT_TYPE\n            && gfc.mode_gr == 2) {\n            for (sfb = 11; sfb < Encoder.SBPSY_l; sfb++)\n                if (gi.scalefac[sfb] < qupvt.pretab[sfb]\n                    && gi.scalefac[sfb] != -2)\n                    break;\n            if (sfb == Encoder.SBPSY_l) {\n                for (sfb = 11; sfb < Encoder.SBPSY_l; sfb++)\n                    if (gi.scalefac[sfb] > 0)\n                        gi.scalefac[sfb] -= qupvt.pretab[sfb];\n\n                gi.preflag = recalc = 1;\n            }\n        }\n\n        for (i = 0; i < 4; i++)\n            l3_side.scfsi[ch][i] = 0;\n\n        if (gfc.mode_gr == 2 && gr == 1\n            && l3_side.tt[0][ch].block_type != Encoder.SHORT_TYPE\n            && l3_side.tt[1][ch].block_type != Encoder.SHORT_TYPE) {\n            scfsi_calc(ch, l3_side);\n            recalc = 0;\n        }\n        for (sfb = 0; sfb < gi.sfbmax; sfb++) {\n            if (gi.scalefac[sfb] == -2) {\n                gi.scalefac[sfb] = 0;\n                /* if anything goes, then 0 is a good choice */\n            }\n        }\n        if (recalc != 0) {\n            if (gfc.mode_gr == 2) {\n                this.scale_bitcount(gi);\n            } else {\n                this.scale_bitcount_lsf(gfc, gi);\n            }\n        }\n    }\n\n    function all_scalefactors_not_negative(scalefac, n) {\n        for (var i = 0; i < n; ++i) {\n            if (scalefac[i] < 0)\n                return false;\n        }\n        return true;\n    }\n\n    /**\n     * number of bits used to encode scalefacs.\n     *\n     * 18*slen1_tab[i] + 18*slen2_tab[i]\n     */\n    var scale_short = [0, 18, 36, 54, 54, 36, 54, 72,\n        54, 72, 90, 72, 90, 108, 108, 126];\n\n    /**\n     * number of bits used to encode scalefacs.\n     *\n     * 17*slen1_tab[i] + 18*slen2_tab[i]\n     */\n    var scale_mixed = [0, 18, 36, 54, 51, 35, 53, 71,\n        52, 70, 88, 69, 87, 105, 104, 122];\n\n    /**\n     * number of bits used to encode scalefacs.\n     *\n     * 11*slen1_tab[i] + 10*slen2_tab[i]\n     */\n    var scale_long = [0, 10, 20, 30, 33, 21, 31, 41, 32, 42,\n        52, 43, 53, 63, 64, 74];\n\n    /**\n     * Also calculates the number of bits necessary to code the scalefactors.\n     */\n    this.scale_bitcount = function (cod_info) {\n        var k, sfb, max_slen1 = 0, max_slen2 = 0;\n\n        /* maximum values */\n        var tab;\n        var scalefac = cod_info.scalefac;\n\n        assert(all_scalefactors_not_negative(scalefac, cod_info.sfbmax));\n\n        if (cod_info.block_type == Encoder.SHORT_TYPE) {\n            tab = scale_short;\n            if (cod_info.mixed_block_flag != 0)\n                tab = scale_mixed;\n        } else { /* block_type == 1,2,or 3 */\n            tab = scale_long;\n            if (0 == cod_info.preflag) {\n                for (sfb = 11; sfb < Encoder.SBPSY_l; sfb++)\n                    if (scalefac[sfb] < qupvt.pretab[sfb])\n                        break;\n\n                if (sfb == Encoder.SBPSY_l) {\n                    cod_info.preflag = 1;\n                    for (sfb = 11; sfb < Encoder.SBPSY_l; sfb++)\n                        scalefac[sfb] -= qupvt.pretab[sfb];\n                }\n            }\n        }\n\n        for (sfb = 0; sfb < cod_info.sfbdivide; sfb++)\n            if (max_slen1 < scalefac[sfb])\n                max_slen1 = scalefac[sfb];\n\n        for (; sfb < cod_info.sfbmax; sfb++)\n            if (max_slen2 < scalefac[sfb])\n                max_slen2 = scalefac[sfb];\n\n        /*\n         * from Takehiro TOMINAGA <tominaga@isoternet.org> 10/99 loop over *all*\n         * posible values of scalefac_compress to find the one which uses the\n         * smallest number of bits. ISO would stop at first valid index\n         */\n        cod_info.part2_length = QuantizePVT.LARGE_BITS;\n        for (k = 0; k < 16; k++) {\n            if (max_slen1 < slen1_n[k] && max_slen2 < slen2_n[k]\n                && cod_info.part2_length > tab[k]) {\n                cod_info.part2_length = tab[k];\n                cod_info.scalefac_compress = k;\n            }\n        }\n        return cod_info.part2_length == QuantizePVT.LARGE_BITS;\n    }\n\n    /**\n     * table of largest scalefactor values for MPEG2\n     */\n    var max_range_sfac_tab = [[15, 15, 7, 7],\n        [15, 15, 7, 0], [7, 3, 0, 0], [15, 31, 31, 0],\n        [7, 7, 7, 0], [3, 3, 0, 0]];\n\n    /**\n     * Also counts the number of bits to encode the scalefacs but for MPEG 2\n     * Lower sampling frequencies (24, 22.05 and 16 kHz.)\n     *\n     * This is reverse-engineered from section 2.4.3.2 of the MPEG2 IS,\n     * \"Audio Decoding Layer III\"\n     */\n    this.scale_bitcount_lsf = function (gfc, cod_info) {\n        var table_number, row_in_table, partition, nr_sfb, window;\n        var over;\n        var i, sfb;\n        var max_sfac = new_int(4);\n//var partition_table;\n        var scalefac = cod_info.scalefac;\n\n        /*\n         * Set partition table. Note that should try to use table one, but do\n         * not yet...\n         */\n        if (cod_info.preflag != 0)\n            table_number = 2;\n        else\n            table_number = 0;\n\n        for (i = 0; i < 4; i++)\n            max_sfac[i] = 0;\n\n        if (cod_info.block_type == Encoder.SHORT_TYPE) {\n            row_in_table = 1;\n            var partition_table = qupvt.nr_of_sfb_block[table_number][row_in_table];\n            for (sfb = 0, partition = 0; partition < 4; partition++) {\n                nr_sfb = partition_table[partition] / 3;\n                for (i = 0; i < nr_sfb; i++, sfb++)\n                    for (window = 0; window < 3; window++)\n                        if (scalefac[sfb * 3 + window] > max_sfac[partition])\n                            max_sfac[partition] = scalefac[sfb * 3 + window];\n            }\n        } else {\n            row_in_table = 0;\n            var partition_table = qupvt.nr_of_sfb_block[table_number][row_in_table];\n            for (sfb = 0, partition = 0; partition < 4; partition++) {\n                nr_sfb = partition_table[partition];\n                for (i = 0; i < nr_sfb; i++, sfb++)\n                    if (scalefac[sfb] > max_sfac[partition])\n                        max_sfac[partition] = scalefac[sfb];\n            }\n        }\n\n        for (over = false, partition = 0; partition < 4; partition++) {\n            if (max_sfac[partition] > max_range_sfac_tab[table_number][partition])\n                over = true;\n        }\n        if (!over) {\n            var slen1, slen2, slen3, slen4;\n\n            cod_info.sfb_partition_table = qupvt.nr_of_sfb_block[table_number][row_in_table];\n            for (partition = 0; partition < 4; partition++)\n                cod_info.slen[partition] = log2tab[max_sfac[partition]];\n\n            /* set scalefac_compress */\n            slen1 = cod_info.slen[0];\n            slen2 = cod_info.slen[1];\n            slen3 = cod_info.slen[2];\n            slen4 = cod_info.slen[3];\n\n            switch (table_number) {\n                case 0:\n                    cod_info.scalefac_compress = (((slen1 * 5) + slen2) << 4)\n                        + (slen3 << 2) + slen4;\n                    break;\n\n                case 1:\n                    cod_info.scalefac_compress = 400 + (((slen1 * 5) + slen2) << 2)\n                        + slen3;\n                    break;\n\n                case 2:\n                    cod_info.scalefac_compress = 500 + (slen1 * 3) + slen2;\n                    break;\n\n                default:\n                    System.err.printf(\"intensity stereo not implemented yet\\n\");\n                    break;\n            }\n        }\n        if (!over) {\n            assert(cod_info.sfb_partition_table != null);\n            cod_info.part2_length = 0;\n            for (partition = 0; partition < 4; partition++)\n                cod_info.part2_length += cod_info.slen[partition]\n                    * cod_info.sfb_partition_table[partition];\n        }\n        return over;\n    }\n\n    /*\n     * Since no bands have been over-amplified, we can set scalefac_compress and\n     * slen[] for the formatter\n     */\n    var log2tab = [0, 1, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4,\n        4, 4, 4, 4];\n\n    this.huffman_init = function (gfc) {\n        for (var i = 2; i <= 576; i += 2) {\n            var scfb_anz = 0, bv_index;\n            while (gfc.scalefac_band.l[++scfb_anz] < i)\n                ;\n\n            bv_index = subdv_table[scfb_anz][0]; // .region0_count\n            while (gfc.scalefac_band.l[bv_index + 1] > i)\n                bv_index--;\n\n            if (bv_index < 0) {\n                /*\n                 * this is an indication that everything is going to be encoded\n                 * as region0: bigvalues < region0 < region1 so lets set\n                 * region0, region1 to some value larger than bigvalues\n                 */\n                bv_index = subdv_table[scfb_anz][0]; // .region0_count\n            }\n\n            gfc.bv_scf[i - 2] = bv_index;\n\n            bv_index = subdv_table[scfb_anz][1]; // .region1_count\n            while (gfc.scalefac_band.l[bv_index + gfc.bv_scf[i - 2] + 2] > i)\n                bv_index--;\n\n            if (bv_index < 0) {\n                bv_index = subdv_table[scfb_anz][1]; // .region1_count\n            }\n\n            gfc.bv_scf[i - 1] = bv_index;\n        }\n    }\n}\n\nmodule.exports = Takehiro;\n","var common = require('./common.js');\nvar System = common.System;\nvar VbrMode = common.VbrMode;\nvar Float = common.Float;\nvar ShortBlock = common.ShortBlock;\nvar Util = common.Util;\nvar Arrays = common.Arrays;\nvar new_array_n = common.new_array_n;\nvar new_byte = common.new_byte;\nvar new_double = common.new_double;\nvar new_float = common.new_float;\nvar new_float_n = common.new_float_n;\nvar new_int = common.new_int;\nvar new_int_n = common.new_int_n;\nvar assert = common.assert;\n\nvar Takehiro = require('./Takehiro.js');\nvar Tables = require('./Tables.js');\nvar Encoder = require('./Encoder.js');\nvar LameInternalFlags = require('./LameInternalFlags.js');\n\nBitStream.EQ = function (a, b) {\n    return (Math.abs(a) > Math.abs(b)) ? (Math.abs((a) - (b)) <= (Math\n        .abs(a) * 1e-6))\n        : (Math.abs((a) - (b)) <= (Math.abs(b) * 1e-6));\n};\n\nBitStream.NEQ = function (a, b) {\n    return !BitStream.EQ(a, b);\n};\n\nfunction BitStream() {\n    var self = this;\n    var CRC16_POLYNOMIAL = 0x8005;\n\n    /*\n     * we work with ints, so when doing bit manipulation, we limit ourselves to\n     * MAX_LENGTH-2 just to be on the safe side\n     */\n    var MAX_LENGTH = 32;\n\n    //GainAnalysis ga;\n    //MPGLib mpg;\n    //Version ver;\n    //VBRTag vbr;\n    var ga = null;\n    var mpg = null;\n    var ver = null;\n    var vbr = null;\n\n    //public final void setModules(GainAnalysis ga, MPGLib mpg, Version ver,\n    //\tVBRTag vbr) {\n\n    this.setModules = function (_ga, _mpg, _ver, _vbr) {\n        ga = _ga;\n        mpg = _mpg;\n        ver = _ver;\n        vbr = _vbr;\n    };\n\n    /**\n     * Bit stream buffer.\n     */\n    //private byte[] buf;\n    var buf = null;\n    /**\n     * Bit counter of bit stream.\n     */\n    var totbit = 0;\n    /**\n     * Pointer to top byte in buffer.\n     */\n    var bufByteIdx = 0;\n    /**\n     * Pointer to top bit of top byte in buffer.\n     */\n    var bufBitIdx = 0;\n\n    /**\n     * compute bitsperframe and mean_bits for a layer III frame\n     */\n    this.getframebits = function (gfp) {\n        var gfc = gfp.internal_flags;\n        var bit_rate;\n\n        /* get bitrate in kbps [?] */\n        if (gfc.bitrate_index != 0)\n            bit_rate = Tables.bitrate_table[gfp.version][gfc.bitrate_index];\n        else\n            bit_rate = gfp.brate;\n        assert(8 <= bit_rate && bit_rate <= 640);\n\n        /* main encoding routine toggles padding on and off */\n        /* one Layer3 Slot consists of 8 bits */\n        var bytes = 0 | (gfp.version + 1) * 72000 * bit_rate / gfp.out_samplerate + gfc.padding;\n        return 8 * bytes;\n    };\n\n    function putheader_bits(gfc) {\n        System.arraycopy(gfc.header[gfc.w_ptr].buf, 0, buf, bufByteIdx, gfc.sideinfo_len);\n        bufByteIdx += gfc.sideinfo_len;\n        totbit += gfc.sideinfo_len * 8;\n        gfc.w_ptr = (gfc.w_ptr + 1) & (LameInternalFlags.MAX_HEADER_BUF - 1);\n    }\n\n    /**\n     * write j bits into the bit stream\n     */\n    function putbits2(gfc, val, j) {\n        assert(j < MAX_LENGTH - 2);\n\n        while (j > 0) {\n            var k;\n            if (bufBitIdx == 0) {\n                bufBitIdx = 8;\n                bufByteIdx++;\n                assert(bufByteIdx < Lame.LAME_MAXMP3BUFFER);\n                assert(gfc.header[gfc.w_ptr].write_timing >= totbit);\n                if (gfc.header[gfc.w_ptr].write_timing == totbit) {\n                    putheader_bits(gfc);\n                }\n                buf[bufByteIdx] = 0;\n            }\n\n            k = Math.min(j, bufBitIdx);\n            j -= k;\n\n            bufBitIdx -= k;\n\n            assert(j < MAX_LENGTH);\n            /* 32 too large on 32 bit machines */\n            assert(bufBitIdx < MAX_LENGTH);\n\n            buf[bufByteIdx] |= ((val >> j) << bufBitIdx);\n            totbit += k;\n        }\n    }\n\n    /**\n     * write j bits into the bit stream, ignoring frame headers\n     */\n    function putbits_noheaders(gfc, val, j) {\n        assert(j < MAX_LENGTH - 2);\n\n        while (j > 0) {\n            var k;\n            if (bufBitIdx == 0) {\n                bufBitIdx = 8;\n                bufByteIdx++;\n                assert(bufByteIdx < Lame.LAME_MAXMP3BUFFER);\n                buf[bufByteIdx] = 0;\n            }\n\n            k = Math.min(j, bufBitIdx);\n            j -= k;\n\n            bufBitIdx -= k;\n\n            assert(j < MAX_LENGTH);\n            /* 32 too large on 32 bit machines */\n            assert(bufBitIdx < MAX_LENGTH);\n\n            buf[bufByteIdx] |= ((val >> j) << bufBitIdx);\n            totbit += k;\n        }\n    }\n\n    /**\n     * Some combinations of bitrate, Fs, and stereo make it impossible to stuff\n     * out a frame using just main_data, due to the limited number of bits to\n     * indicate main_data_length. In these situations, we put stuffing bits into\n     * the ancillary data...\n     */\n    function drain_into_ancillary(gfp, remainingBits) {\n        var gfc = gfp.internal_flags;\n        var i;\n        assert(remainingBits >= 0);\n\n        if (remainingBits >= 8) {\n            putbits2(gfc, 0x4c, 8);\n            remainingBits -= 8;\n        }\n        if (remainingBits >= 8) {\n            putbits2(gfc, 0x41, 8);\n            remainingBits -= 8;\n        }\n        if (remainingBits >= 8) {\n            putbits2(gfc, 0x4d, 8);\n            remainingBits -= 8;\n        }\n        if (remainingBits >= 8) {\n            putbits2(gfc, 0x45, 8);\n            remainingBits -= 8;\n        }\n\n        if (remainingBits >= 32) {\n            var version = ver.getLameShortVersion();\n            if (remainingBits >= 32)\n                for (i = 0; i < version.length && remainingBits >= 8; ++i) {\n                    remainingBits -= 8;\n                    putbits2(gfc, version.charAt(i), 8);\n                }\n        }\n\n        for (; remainingBits >= 1; remainingBits -= 1) {\n            putbits2(gfc, gfc.ancillary_flag, 1);\n            gfc.ancillary_flag ^= (!gfp.disable_reservoir ? 1 : 0);\n        }\n\n        assert(remainingBits == 0);\n\n    }\n\n    /**\n     * write N bits into the header\n     */\n    function writeheader(gfc, val, j) {\n        var ptr = gfc.header[gfc.h_ptr].ptr;\n\n        while (j > 0) {\n            var k = Math.min(j, 8 - (ptr & 7));\n            j -= k;\n            assert(j < MAX_LENGTH);\n            /* >> 32 too large for 32 bit machines */\n\n            gfc.header[gfc.h_ptr].buf[ptr >> 3] |= ((val >> j)) << (8 - (ptr & 7) - k);\n            ptr += k;\n        }\n        gfc.header[gfc.h_ptr].ptr = ptr;\n    }\n\n    function CRC_update(value, crc) {\n        value <<= 8;\n        for (var i = 0; i < 8; i++) {\n            value <<= 1;\n            crc <<= 1;\n\n            if ((((crc ^ value) & 0x10000) != 0))\n                crc ^= CRC16_POLYNOMIAL;\n        }\n        return crc;\n    }\n\n    this.CRC_writeheader = function (gfc, header) {\n        var crc = 0xffff;\n        /* (jo) init crc16 for error_protection */\n\n        crc = CRC_update(header[2] & 0xff, crc);\n        crc = CRC_update(header[3] & 0xff, crc);\n        for (var i = 6; i < gfc.sideinfo_len; i++) {\n            crc = CRC_update(header[i] & 0xff, crc);\n        }\n\n        header[4] = (byte)(crc >> 8);\n        header[5] = (byte)(crc & 255);\n    };\n\n    function encodeSideInfo2(gfp, bitsPerFrame) {\n        var gfc = gfp.internal_flags;\n        var l3_side;\n        var gr, ch;\n\n        l3_side = gfc.l3_side;\n        gfc.header[gfc.h_ptr].ptr = 0;\n        Arrays.fill(gfc.header[gfc.h_ptr].buf, 0, gfc.sideinfo_len, 0);\n        if (gfp.out_samplerate < 16000)\n            writeheader(gfc, 0xffe, 12);\n        else\n            writeheader(gfc, 0xfff, 12);\n        writeheader(gfc, (gfp.version), 1);\n        writeheader(gfc, 4 - 3, 2);\n        writeheader(gfc, (!gfp.error_protection ? 1 : 0), 1);\n        writeheader(gfc, (gfc.bitrate_index), 4);\n        writeheader(gfc, (gfc.samplerate_index), 2);\n        writeheader(gfc, (gfc.padding), 1);\n        writeheader(gfc, (gfp.extension), 1);\n        writeheader(gfc, (gfp.mode.ordinal()), 2);\n        writeheader(gfc, (gfc.mode_ext), 2);\n        writeheader(gfc, (gfp.copyright), 1);\n        writeheader(gfc, (gfp.original), 1);\n        writeheader(gfc, (gfp.emphasis), 2);\n        if (gfp.error_protection) {\n            writeheader(gfc, 0, 16);\n            /* dummy */\n        }\n\n        if (gfp.version == 1) {\n            /* MPEG1 */\n            assert(l3_side.main_data_begin >= 0);\n            writeheader(gfc, (l3_side.main_data_begin), 9);\n\n            if (gfc.channels_out == 2)\n                writeheader(gfc, l3_side.private_bits, 3);\n            else\n                writeheader(gfc, l3_side.private_bits, 5);\n\n            for (ch = 0; ch < gfc.channels_out; ch++) {\n                var band;\n                for (band = 0; band < 4; band++) {\n                    writeheader(gfc, l3_side.scfsi[ch][band], 1);\n                }\n            }\n\n            for (gr = 0; gr < 2; gr++) {\n                for (ch = 0; ch < gfc.channels_out; ch++) {\n                    var gi = l3_side.tt[gr][ch];\n                    writeheader(gfc, gi.part2_3_length + gi.part2_length, 12);\n                    writeheader(gfc, gi.big_values / 2, 9);\n                    writeheader(gfc, gi.global_gain, 8);\n                    writeheader(gfc, gi.scalefac_compress, 4);\n\n                    if (gi.block_type != Encoder.NORM_TYPE) {\n                        writeheader(gfc, 1, 1);\n                        /* window_switching_flag */\n                        writeheader(gfc, gi.block_type, 2);\n                        writeheader(gfc, gi.mixed_block_flag, 1);\n\n                        if (gi.table_select[0] == 14)\n                            gi.table_select[0] = 16;\n                        writeheader(gfc, gi.table_select[0], 5);\n                        if (gi.table_select[1] == 14)\n                            gi.table_select[1] = 16;\n                        writeheader(gfc, gi.table_select[1], 5);\n\n                        writeheader(gfc, gi.subblock_gain[0], 3);\n                        writeheader(gfc, gi.subblock_gain[1], 3);\n                        writeheader(gfc, gi.subblock_gain[2], 3);\n                    } else {\n                        writeheader(gfc, 0, 1);\n                        /* window_switching_flag */\n                        if (gi.table_select[0] == 14)\n                            gi.table_select[0] = 16;\n                        writeheader(gfc, gi.table_select[0], 5);\n                        if (gi.table_select[1] == 14)\n                            gi.table_select[1] = 16;\n                        writeheader(gfc, gi.table_select[1], 5);\n                        if (gi.table_select[2] == 14)\n                            gi.table_select[2] = 16;\n                        writeheader(gfc, gi.table_select[2], 5);\n\n                        assert(0 <= gi.region0_count && gi.region0_count < 16);\n                        assert(0 <= gi.region1_count && gi.region1_count < 8);\n                        writeheader(gfc, gi.region0_count, 4);\n                        writeheader(gfc, gi.region1_count, 3);\n                    }\n                    writeheader(gfc, gi.preflag, 1);\n                    writeheader(gfc, gi.scalefac_scale, 1);\n                    writeheader(gfc, gi.count1table_select, 1);\n                }\n            }\n        } else {\n            /* MPEG2 */\n            assert(l3_side.main_data_begin >= 0);\n            writeheader(gfc, (l3_side.main_data_begin), 8);\n            writeheader(gfc, l3_side.private_bits, gfc.channels_out);\n\n            gr = 0;\n            for (ch = 0; ch < gfc.channels_out; ch++) {\n                var gi = l3_side.tt[gr][ch];\n                writeheader(gfc, gi.part2_3_length + gi.part2_length, 12);\n                writeheader(gfc, gi.big_values / 2, 9);\n                writeheader(gfc, gi.global_gain, 8);\n                writeheader(gfc, gi.scalefac_compress, 9);\n\n                if (gi.block_type != Encoder.NORM_TYPE) {\n                    writeheader(gfc, 1, 1);\n                    /* window_switching_flag */\n                    writeheader(gfc, gi.block_type, 2);\n                    writeheader(gfc, gi.mixed_block_flag, 1);\n\n                    if (gi.table_select[0] == 14)\n                        gi.table_select[0] = 16;\n                    writeheader(gfc, gi.table_select[0], 5);\n                    if (gi.table_select[1] == 14)\n                        gi.table_select[1] = 16;\n                    writeheader(gfc, gi.table_select[1], 5);\n\n                    writeheader(gfc, gi.subblock_gain[0], 3);\n                    writeheader(gfc, gi.subblock_gain[1], 3);\n                    writeheader(gfc, gi.subblock_gain[2], 3);\n                } else {\n                    writeheader(gfc, 0, 1);\n                    /* window_switching_flag */\n                    if (gi.table_select[0] == 14)\n                        gi.table_select[0] = 16;\n                    writeheader(gfc, gi.table_select[0], 5);\n                    if (gi.table_select[1] == 14)\n                        gi.table_select[1] = 16;\n                    writeheader(gfc, gi.table_select[1], 5);\n                    if (gi.table_select[2] == 14)\n                        gi.table_select[2] = 16;\n                    writeheader(gfc, gi.table_select[2], 5);\n\n                    assert(0 <= gi.region0_count && gi.region0_count < 16);\n                    assert(0 <= gi.region1_count && gi.region1_count < 8);\n                    writeheader(gfc, gi.region0_count, 4);\n                    writeheader(gfc, gi.region1_count, 3);\n                }\n\n                writeheader(gfc, gi.scalefac_scale, 1);\n                writeheader(gfc, gi.count1table_select, 1);\n            }\n        }\n\n        if (gfp.error_protection) {\n            /* (jo) error_protection: add crc16 information to header */\n            CRC_writeheader(gfc, gfc.header[gfc.h_ptr].buf);\n        }\n\n        {\n            var old = gfc.h_ptr;\n            assert(gfc.header[old].ptr == gfc.sideinfo_len * 8);\n\n            gfc.h_ptr = (old + 1) & (LameInternalFlags.MAX_HEADER_BUF - 1);\n            gfc.header[gfc.h_ptr].write_timing = gfc.header[old].write_timing\n                + bitsPerFrame;\n\n            if (gfc.h_ptr == gfc.w_ptr) {\n                /* yikes! we are out of header buffer space */\n                System.err\n                    .println(\"Error: MAX_HEADER_BUF too small in bitstream.c \\n\");\n            }\n\n        }\n    }\n\n    function huffman_coder_count1(gfc, gi) {\n        /* Write count1 area */\n        var h = Tables.ht[gi.count1table_select + 32];\n        var i, bits = 0;\n\n        var ix = gi.big_values;\n        var xr = gi.big_values;\n        assert(gi.count1table_select < 2);\n\n        for (i = (gi.count1 - gi.big_values) / 4; i > 0; --i) {\n            var huffbits = 0;\n            var p = 0, v;\n\n            v = gi.l3_enc[ix + 0];\n            if (v != 0) {\n                p += 8;\n                if (gi.xr[xr + 0] < 0)\n                    huffbits++;\n                assert(v <= 1);\n            }\n\n            v = gi.l3_enc[ix + 1];\n            if (v != 0) {\n                p += 4;\n                huffbits *= 2;\n                if (gi.xr[xr + 1] < 0)\n                    huffbits++;\n                assert(v <= 1);\n            }\n\n            v = gi.l3_enc[ix + 2];\n            if (v != 0) {\n                p += 2;\n                huffbits *= 2;\n                if (gi.xr[xr + 2] < 0)\n                    huffbits++;\n                assert(v <= 1);\n            }\n\n            v = gi.l3_enc[ix + 3];\n            if (v != 0) {\n                p++;\n                huffbits *= 2;\n                if (gi.xr[xr + 3] < 0)\n                    huffbits++;\n                assert(v <= 1);\n            }\n\n            ix += 4;\n            xr += 4;\n            putbits2(gfc, huffbits + h.table[p], h.hlen[p]);\n            bits += h.hlen[p];\n        }\n        return bits;\n    }\n\n    /**\n     * Implements the pseudocode of page 98 of the IS\n     */\n    function Huffmancode(gfc, tableindex, start, end, gi) {\n        var h = Tables.ht[tableindex];\n        var bits = 0;\n\n        assert(tableindex < 32);\n        if (0 == tableindex)\n            return bits;\n\n        for (var i = start; i < end; i += 2) {\n            var cbits = 0;\n            var xbits = 0;\n            var linbits = h.xlen;\n            var xlen = h.xlen;\n            var ext = 0;\n            var x1 = gi.l3_enc[i];\n            var x2 = gi.l3_enc[i + 1];\n\n            if (x1 != 0) {\n                if (gi.xr[i] < 0)\n                    ext++;\n                cbits--;\n            }\n\n            if (tableindex > 15) {\n                /* use ESC-words */\n                if (x1 > 14) {\n                    var linbits_x1 = x1 - 15;\n                    assert(linbits_x1 <= h.linmax);\n                    ext |= linbits_x1 << 1;\n                    xbits = linbits;\n                    x1 = 15;\n                }\n\n                if (x2 > 14) {\n                    var linbits_x2 = x2 - 15;\n                    assert(linbits_x2 <= h.linmax);\n                    ext <<= linbits;\n                    ext |= linbits_x2;\n                    xbits += linbits;\n                    x2 = 15;\n                }\n                xlen = 16;\n            }\n\n            if (x2 != 0) {\n                ext <<= 1;\n                if (gi.xr[i + 1] < 0)\n                    ext++;\n                cbits--;\n            }\n\n            assert((x1 | x2) < 16);\n\n            x1 = x1 * xlen + x2;\n            xbits -= cbits;\n            cbits += h.hlen[x1];\n\n            assert(cbits <= MAX_LENGTH);\n            assert(xbits <= MAX_LENGTH);\n\n            putbits2(gfc, h.table[x1], cbits);\n            putbits2(gfc, ext, xbits);\n            bits += cbits + xbits;\n        }\n        return bits;\n    }\n\n    /**\n     * Note the discussion of huffmancodebits() on pages 28 and 29 of the IS, as\n     * well as the definitions of the side information on pages 26 and 27.\n     */\n    function ShortHuffmancodebits(gfc, gi) {\n        var region1Start = 3 * gfc.scalefac_band.s[3];\n        if (region1Start > gi.big_values)\n            region1Start = gi.big_values;\n\n        /* short blocks do not have a region2 */\n        var bits = Huffmancode(gfc, gi.table_select[0], 0, region1Start, gi);\n        bits += Huffmancode(gfc, gi.table_select[1], region1Start,\n            gi.big_values, gi);\n        return bits;\n    }\n\n    function LongHuffmancodebits(gfc, gi) {\n        var bigvalues, bits;\n        var region1Start, region2Start;\n\n        bigvalues = gi.big_values;\n        assert(0 <= bigvalues && bigvalues <= 576);\n\n        var i = gi.region0_count + 1;\n        assert(0 <= i);\n        assert(i < gfc.scalefac_band.l.length);\n        region1Start = gfc.scalefac_band.l[i];\n        i += gi.region1_count + 1;\n        assert(0 <= i);\n        assert(i < gfc.scalefac_band.l.length);\n        region2Start = gfc.scalefac_band.l[i];\n\n        if (region1Start > bigvalues)\n            region1Start = bigvalues;\n\n        if (region2Start > bigvalues)\n            region2Start = bigvalues;\n\n        bits = Huffmancode(gfc, gi.table_select[0], 0, region1Start, gi);\n        bits += Huffmancode(gfc, gi.table_select[1], region1Start,\n            region2Start, gi);\n        bits += Huffmancode(gfc, gi.table_select[2], region2Start, bigvalues,\n            gi);\n        return bits;\n    }\n\n    function writeMainData(gfp) {\n        var gr, ch, sfb, data_bits, tot_bits = 0;\n        var gfc = gfp.internal_flags;\n        var l3_side = gfc.l3_side;\n\n        if (gfp.version == 1) {\n            /* MPEG 1 */\n            for (gr = 0; gr < 2; gr++) {\n                for (ch = 0; ch < gfc.channels_out; ch++) {\n                    var gi = l3_side.tt[gr][ch];\n                    var slen1 = Takehiro.slen1_tab[gi.scalefac_compress];\n                    var slen2 = Takehiro.slen2_tab[gi.scalefac_compress];\n                    data_bits = 0;\n                    for (sfb = 0; sfb < gi.sfbdivide; sfb++) {\n                        if (gi.scalefac[sfb] == -1)\n                            continue;\n                        /* scfsi is used */\n                        putbits2(gfc, gi.scalefac[sfb], slen1);\n                        data_bits += slen1;\n                    }\n                    for (; sfb < gi.sfbmax; sfb++) {\n                        if (gi.scalefac[sfb] == -1)\n                            continue;\n                        /* scfsi is used */\n                        putbits2(gfc, gi.scalefac[sfb], slen2);\n                        data_bits += slen2;\n                    }\n                    assert(data_bits == gi.part2_length);\n\n                    if (gi.block_type == Encoder.SHORT_TYPE) {\n                        data_bits += ShortHuffmancodebits(gfc, gi);\n                    } else {\n                        data_bits += LongHuffmancodebits(gfc, gi);\n                    }\n                    data_bits += huffman_coder_count1(gfc, gi);\n                    /* does bitcount in quantize.c agree with actual bit count? */\n                    assert(data_bits == gi.part2_3_length + gi.part2_length);\n                    tot_bits += data_bits;\n                }\n                /* for ch */\n            }\n            /* for gr */\n        } else {\n            /* MPEG 2 */\n            gr = 0;\n            for (ch = 0; ch < gfc.channels_out; ch++) {\n                var gi = l3_side.tt[gr][ch];\n                var i, sfb_partition, scale_bits = 0;\n                assert(gi.sfb_partition_table != null);\n                data_bits = 0;\n                sfb = 0;\n                sfb_partition = 0;\n\n                if (gi.block_type == Encoder.SHORT_TYPE) {\n                    for (; sfb_partition < 4; sfb_partition++) {\n                        var sfbs = gi.sfb_partition_table[sfb_partition] / 3;\n                        var slen = gi.slen[sfb_partition];\n                        for (i = 0; i < sfbs; i++, sfb++) {\n                            putbits2(gfc,\n                                Math.max(gi.scalefac[sfb * 3 + 0], 0), slen);\n                            putbits2(gfc,\n                                Math.max(gi.scalefac[sfb * 3 + 1], 0), slen);\n                            putbits2(gfc,\n                                Math.max(gi.scalefac[sfb * 3 + 2], 0), slen);\n                            scale_bits += 3 * slen;\n                        }\n                    }\n                    data_bits += ShortHuffmancodebits(gfc, gi);\n                } else {\n                    for (; sfb_partition < 4; sfb_partition++) {\n                        var sfbs = gi.sfb_partition_table[sfb_partition];\n                        var slen = gi.slen[sfb_partition];\n                        for (i = 0; i < sfbs; i++, sfb++) {\n                            putbits2(gfc, Math.max(gi.scalefac[sfb], 0), slen);\n                            scale_bits += slen;\n                        }\n                    }\n                    data_bits += LongHuffmancodebits(gfc, gi);\n                }\n                data_bits += huffman_coder_count1(gfc, gi);\n                /* does bitcount in quantize.c agree with actual bit count? */\n                assert(data_bits == gi.part2_3_length);\n                assert(scale_bits == gi.part2_length);\n                tot_bits += scale_bits + data_bits;\n            }\n            /* for ch */\n        }\n        /* for gf */\n        return tot_bits;\n    }\n\n    /* main_data */\n\n    function TotalBytes() {\n        this.total = 0;\n    }\n\n    /*\n     * compute the number of bits required to flush all mp3 frames currently in\n     * the buffer. This should be the same as the reservoir size. Only call this\n     * routine between frames - i.e. only after all headers and data have been\n     * added to the buffer by format_bitstream().\n     *\n     * Also compute total_bits_output = size of mp3 buffer (including frame\n     * headers which may not have yet been send to the mp3 buffer) + number of\n     * bits needed to flush all mp3 frames.\n     *\n     * total_bytes_output is the size of the mp3 output buffer if\n     * lame_encode_flush_nogap() was called right now.\n     */\n    function compute_flushbits(gfp, total_bytes_output) {\n        var gfc = gfp.internal_flags;\n        var flushbits, remaining_headers;\n        var bitsPerFrame;\n        var last_ptr, first_ptr;\n        first_ptr = gfc.w_ptr;\n        /* first header to add to bitstream */\n        last_ptr = gfc.h_ptr - 1;\n        /* last header to add to bitstream */\n        if (last_ptr == -1)\n            last_ptr = LameInternalFlags.MAX_HEADER_BUF - 1;\n\n        /* add this many bits to bitstream so we can flush all headers */\n        flushbits = gfc.header[last_ptr].write_timing - totbit;\n        total_bytes_output.total = flushbits;\n\n        if (flushbits >= 0) {\n            /* if flushbits >= 0, some headers have not yet been written */\n            /* reduce flushbits by the size of the headers */\n            remaining_headers = 1 + last_ptr - first_ptr;\n            if (last_ptr < first_ptr)\n                remaining_headers = 1 + last_ptr - first_ptr\n                    + LameInternalFlags.MAX_HEADER_BUF;\n            flushbits -= remaining_headers * 8 * gfc.sideinfo_len;\n        }\n\n        /*\n         * finally, add some bits so that the last frame is complete these bits\n         * are not necessary to decode the last frame, but some decoders will\n         * ignore last frame if these bits are missing\n         */\n        bitsPerFrame = self.getframebits(gfp);\n        flushbits += bitsPerFrame;\n        total_bytes_output.total += bitsPerFrame;\n        /* round up: */\n        if ((total_bytes_output.total % 8) != 0)\n            total_bytes_output.total = 1 + (total_bytes_output.total / 8);\n        else\n            total_bytes_output.total = (total_bytes_output.total / 8);\n        total_bytes_output.total += bufByteIdx + 1;\n\n        if (flushbits < 0) {\n            System.err.println(\"strange error flushing buffer ... \\n\");\n        }\n        return flushbits;\n    }\n\n    this.flush_bitstream = function (gfp) {\n        var gfc = gfp.internal_flags;\n        var l3_side;\n        var flushbits;\n        var last_ptr = gfc.h_ptr - 1;\n        /* last header to add to bitstream */\n        if (last_ptr == -1)\n            last_ptr = LameInternalFlags.MAX_HEADER_BUF - 1;\n        l3_side = gfc.l3_side;\n\n        if ((flushbits = compute_flushbits(gfp, new TotalBytes())) < 0)\n            return;\n        drain_into_ancillary(gfp, flushbits);\n\n        /* check that the 100% of the last frame has been written to bitstream */\n        assert(gfc.header[last_ptr].write_timing + this.getframebits(gfp) == totbit);\n\n        /*\n         * we have padded out all frames with ancillary data, which is the same\n         * as filling the bitreservoir with ancillary data, so :\n         */\n        gfc.ResvSize = 0;\n        l3_side.main_data_begin = 0;\n\n        /* save the ReplayGain value */\n        if (gfc.findReplayGain) {\n            var RadioGain = ga.GetTitleGain(gfc.rgdata);\n            assert(NEQ(RadioGain, GainAnalysis.GAIN_NOT_ENOUGH_SAMPLES));\n            gfc.RadioGain = Math.floor(RadioGain * 10.0 + 0.5) | 0;\n            /* round to nearest */\n        }\n\n        /* find the gain and scale change required for no clipping */\n        if (gfc.findPeakSample) {\n            gfc.noclipGainChange = Math.ceil(Math\n                        .log10(gfc.PeakSample / 32767.0) * 20.0 * 10.0) | 0;\n            /* round up */\n\n            if (gfc.noclipGainChange > 0) {\n                /* clipping occurs */\n                if (EQ(gfp.scale, 1.0) || EQ(gfp.scale, 0.0))\n                    gfc.noclipScale = (Math\n                        .floor((32767.0 / gfc.PeakSample) * 100.0) / 100.0);\n                /* round down */\n                else {\n                    /*\n                     * the user specified his own scaling factor. We could\n                     * suggest the scaling factor of\n                     * (32767.0/gfp.PeakSample)*(gfp.scale) but it's usually\n                     * very inaccurate. So we'd rather not advice him on the\n                     * scaling factor.\n                     */\n                    gfc.noclipScale = -1;\n                }\n            } else\n            /* no clipping */\n                gfc.noclipScale = -1;\n        }\n    };\n\n    this.add_dummy_byte = function (gfp, val, n) {\n        var gfc = gfp.internal_flags;\n        var i;\n\n        while (n-- > 0) {\n            putbits_noheaders(gfc, val, 8);\n\n            for (i = 0; i < LameInternalFlags.MAX_HEADER_BUF; ++i)\n                gfc.header[i].write_timing += 8;\n        }\n    };\n\n    /**\n     * This is called after a frame of audio has been quantized and coded. It\n     * will write the encoded audio to the bitstream. Note that from a layer3\n     * encoder's perspective the bit stream is primarily a series of main_data()\n     * blocks, with header and side information inserted at the proper locations\n     * to maintain framing. (See Figure A.7 in the IS).\n     */\n    this.format_bitstream = function (gfp) {\n        var gfc = gfp.internal_flags;\n        var l3_side;\n        l3_side = gfc.l3_side;\n\n        var bitsPerFrame = this.getframebits(gfp);\n        drain_into_ancillary(gfp, l3_side.resvDrain_pre);\n\n        encodeSideInfo2(gfp, bitsPerFrame);\n        var bits = 8 * gfc.sideinfo_len;\n        bits += writeMainData(gfp);\n        drain_into_ancillary(gfp, l3_side.resvDrain_post);\n        bits += l3_side.resvDrain_post;\n\n        l3_side.main_data_begin += (bitsPerFrame - bits) / 8;\n\n        /*\n         * compare number of bits needed to clear all buffered mp3 frames with\n         * what we think the resvsize is:\n         */\n        if (compute_flushbits(gfp, new TotalBytes()) != gfc.ResvSize) {\n            System.err.println(\"Internal buffer inconsistency. flushbits <> ResvSize\");\n        }\n\n        /*\n         * compare main_data_begin for the next frame with what we think the\n         * resvsize is:\n         */\n        if ((l3_side.main_data_begin * 8) != gfc.ResvSize) {\n            System.err.printf(\"bit reservoir error: \\n\"\n                + \"l3_side.main_data_begin: %d \\n\"\n                + \"Resvoir size:             %d \\n\"\n                + \"resv drain (post)         %d \\n\"\n                + \"resv drain (pre)          %d \\n\"\n                + \"header and sideinfo:      %d \\n\"\n                + \"data bits:                %d \\n\"\n                + \"total bits:               %d (remainder: %d) \\n\"\n                + \"bitsperframe:             %d \\n\",\n                8 * l3_side.main_data_begin, gfc.ResvSize,\n                l3_side.resvDrain_post, l3_side.resvDrain_pre,\n                8 * gfc.sideinfo_len, bits - l3_side.resvDrain_post - 8\n                * gfc.sideinfo_len, bits, bits % 8, bitsPerFrame);\n\n            System.err.println(\"This is a fatal error.  It has several possible causes:\");\n            System.err.println(\"90%%  LAME compiled with buggy version of gcc using advanced optimizations\");\n            System.err.println(\" 9%%  Your system is overclocked\");\n            System.err.println(\" 1%%  bug in LAME encoding library\");\n\n            gfc.ResvSize = l3_side.main_data_begin * 8;\n        }\n        //;\n        assert(totbit % 8 == 0);\n\n        if (totbit > 1000000000) {\n            /*\n             * to avoid totbit overflow, (at 8h encoding at 128kbs) lets reset\n             * bit counter\n             */\n            var i;\n            for (i = 0; i < LameInternalFlags.MAX_HEADER_BUF; ++i)\n                gfc.header[i].write_timing -= totbit;\n            totbit = 0;\n        }\n\n        return 0;\n    };\n\n    /**\n     * <PRE>\n     * copy data out of the internal MP3 bit buffer into a user supplied\n     *       unsigned char buffer.\n     *\n     *       mp3data=0      indicates data in buffer is an id3tags and VBR tags\n     *       mp3data=1      data is real mp3 frame data.\n     * </PRE>\n     */\n    this.copy_buffer = function (gfc, buffer, bufferPos, size, mp3data) {\n        var minimum = bufByteIdx + 1;\n        if (minimum <= 0)\n            return 0;\n        if (size != 0 && minimum > size) {\n            /* buffer is too small */\n            return -1;\n        }\n        System.arraycopy(buf, 0, buffer, bufferPos, minimum);\n        bufByteIdx = -1;\n        bufBitIdx = 0;\n\n        if (mp3data != 0) {\n            var crc = new_int(1);\n            crc[0] = gfc.nMusicCRC;\n            vbr.updateMusicCRC(crc, buffer, bufferPos, minimum);\n            gfc.nMusicCRC = crc[0];\n\n            /**\n             * sum number of bytes belonging to the mp3 stream this info will be\n             * written into the Xing/LAME header for seeking\n             */\n            if (minimum > 0) {\n                gfc.VBR_seek_table.nBytesWritten += minimum;\n            }\n\n            if (gfc.decode_on_the_fly) { /* decode the frame */\n                var pcm_buf = new_float_n([2, 1152]);\n                var mp3_in = minimum;\n                var samples_out = -1;\n                var i;\n\n                /* re-synthesis to pcm. Repeat until we get a samples_out=0 */\n                while (samples_out != 0) {\n\n                    samples_out = mpg.hip_decode1_unclipped(gfc.hip, buffer,\n                        bufferPos, mp3_in, pcm_buf[0], pcm_buf[1]);\n                    /*\n                     * samples_out = 0: need more data to decode samples_out =\n                     * -1: error. Lets assume 0 pcm output samples_out = number\n                     * of samples output\n                     */\n\n                    /*\n                     * set the lenght of the mp3 input buffer to zero, so that\n                     * in the next iteration of the loop we will be querying\n                     * mpglib about buffered data\n                     */\n                    mp3_in = 0;\n\n                    if (samples_out == -1) {\n                        /*\n                         * error decoding. Not fatal, but might screw up the\n                         * ReplayGain tag. What should we do? Ignore for now\n                         */\n                        samples_out = 0;\n                    }\n                    if (samples_out > 0) {\n                        /* process the PCM data */\n\n                        /*\n                         * this should not be possible, and indicates we have\n                         * overflown the pcm_buf buffer\n                         */\n                        assert(samples_out <= 1152);\n\n                        if (gfc.findPeakSample) {\n                            for (i = 0; i < samples_out; i++) {\n                                if (pcm_buf[0][i] > gfc.PeakSample)\n                                    gfc.PeakSample = pcm_buf[0][i];\n                                else if (-pcm_buf[0][i] > gfc.PeakSample)\n                                    gfc.PeakSample = -pcm_buf[0][i];\n                            }\n                            if (gfc.channels_out > 1)\n                                for (i = 0; i < samples_out; i++) {\n                                    if (pcm_buf[1][i] > gfc.PeakSample)\n                                        gfc.PeakSample = pcm_buf[1][i];\n                                    else if (-pcm_buf[1][i] > gfc.PeakSample)\n                                        gfc.PeakSample = -pcm_buf[1][i];\n                                }\n                        }\n\n                        if (gfc.findReplayGain)\n                            if (ga.AnalyzeSamples(gfc.rgdata, pcm_buf[0], 0,\n                                    pcm_buf[1], 0, samples_out,\n                                    gfc.channels_out) == GainAnalysis.GAIN_ANALYSIS_ERROR)\n                                return -6;\n\n                    }\n                    /* if (samples_out>0) */\n                }\n                /* while (samples_out!=0) */\n            }\n            /* if (gfc.decode_on_the_fly) */\n\n        }\n        /* if (mp3data) */\n        return minimum;\n    };\n\n    this.init_bit_stream_w = function (gfc) {\n        buf = new_byte(Lame.LAME_MAXMP3BUFFER);\n\n        gfc.h_ptr = gfc.w_ptr = 0;\n        gfc.header[gfc.h_ptr].write_timing = 0;\n        bufByteIdx = -1;\n        bufBitIdx = 0;\n        totbit = 0;\n    };\n\n    // From machine.h\n\n\n}\n\nmodule.exports = BitStream;\n","var common = require('./common.js');\nvar System = common.System;\nvar VbrMode = common.VbrMode;\nvar Float = common.Float;\nvar ShortBlock = common.ShortBlock;\nvar Util = common.Util;\nvar Arrays = common.Arrays;\nvar new_array_n = common.new_array_n;\nvar new_byte = common.new_byte;\nvar new_double = common.new_double;\nvar new_float = common.new_float;\nvar new_float_n = common.new_float_n;\nvar new_int = common.new_int;\nvar new_int_n = common.new_int_n;\nvar new_short_n = common.new_short_n;\nvar assert = common.assert;\n\nvar PsyModel = require('./PsyModel.js');\nvar LameGlobalFlags = require('./LameGlobalFlags.js');\nvar LameInternalFlags = require('./LameInternalFlags.js');\nvar ATH = require('./ATH.js');\nvar ReplayGain = require('./ReplayGain.js');\nvar CBRNewIterationLoop = require('./CBRNewIterationLoop.js');\nvar BitStream = require('./BitStream.js');\nvar Tables = require('./Tables.js');\nvar Encoder = require('./Encoder.js');\n\nfunction Lame() {\n    var self = this;\n    var LAME_MAXALBUMART = (128 * 1024);\n\n    Lame.V9 = 410;\n    Lame.V8 = 420;\n    Lame.V7 = 430;\n    Lame.V6 = 440;\n    Lame.V5 = 450;\n    Lame.V4 = 460;\n    Lame.V3 = 470;\n    Lame.V2 = 480;\n    Lame.V1 = 490;\n    Lame.V0 = 500;\n\n    /* still there for compatibility */\n\n    Lame.R3MIX = 1000;\n    Lame.STANDARD = 1001;\n    Lame.EXTREME = 1002;\n    Lame.INSANE = 1003;\n    Lame.STANDARD_FAST = 1004;\n    Lame.EXTREME_FAST = 1005;\n    Lame.MEDIUM = 1006;\n    Lame.MEDIUM_FAST = 1007;\n\n    /**\n     * maximum size of mp3buffer needed if you encode at most 1152 samples for\n     * each call to lame_encode_buffer. see lame_encode_buffer() below\n     * (LAME_MAXMP3BUFFER is now obsolete)\n     */\n    var LAME_MAXMP3BUFFER = (16384 + LAME_MAXALBUMART);\n    Lame.LAME_MAXMP3BUFFER = LAME_MAXMP3BUFFER;\n\n    var ga;\n    var bs;\n    var p;\n    var qupvt;\n    var qu;\n    var psy = new PsyModel();\n    var vbr;\n    var ver;\n    var id3;\n    var mpglib;\n    this.enc = new Encoder();\n\n    this.setModules = function (_ga, _bs, _p, _qupvt, _qu, _vbr, _ver, _id3, _mpglib) {\n        ga = _ga;\n        bs = _bs;\n        p = _p;\n        qupvt = _qupvt;\n        qu = _qu;\n        vbr = _vbr;\n        ver = _ver;\n        id3 = _id3;\n        mpglib = _mpglib;\n        this.enc.setModules(bs, psy, qupvt, vbr);\n    }\n\n    /**\n     * PSY Model related stuff\n     */\n    function PSY() {\n        /**\n         * The dbQ stuff.\n         */\n        this.mask_adjust = 0.;\n        /**\n         * The dbQ stuff.\n         */\n        this.mask_adjust_short = 0.;\n        /* at transition from one scalefactor band to next */\n        /**\n         * Band weight long scalefactor bands.\n         */\n        this.bo_l_weight = new_float(Encoder.SBMAX_l);\n        /**\n         * Band weight short scalefactor bands.\n         */\n        this.bo_s_weight = new_float(Encoder.SBMAX_s);\n    }\n\n    function LowPassHighPass() {\n        this.lowerlimit = 0.;\n    }\n\n    function BandPass(bitrate, lPass) {\n        this.lowpass = lPass;\n    }\n\n    var LAME_ID = 0xFFF88E3B;\n\n    function lame_init_old(gfp) {\n        var gfc;\n\n        gfp.class_id = LAME_ID;\n\n        gfc = gfp.internal_flags = new LameInternalFlags();\n\n        /* Global flags. set defaults here for non-zero values */\n        /* see lame.h for description */\n        /*\n         * set integer values to -1 to mean that LAME will compute the best\n         * value, UNLESS the calling program as set it (and the value is no\n         * longer -1)\n         */\n\n        gfp.mode = MPEGMode.NOT_SET;\n        gfp.original = 1;\n        gfp.in_samplerate = 44100;\n        gfp.num_channels = 2;\n        gfp.num_samples = -1;\n\n        gfp.bWriteVbrTag = true;\n        gfp.quality = -1;\n        gfp.short_blocks = null;\n        gfc.subblock_gain = -1;\n\n        gfp.lowpassfreq = 0;\n        gfp.highpassfreq = 0;\n        gfp.lowpasswidth = -1;\n        gfp.highpasswidth = -1;\n\n        gfp.VBR = VbrMode.vbr_off;\n        gfp.VBR_q = 4;\n        gfp.ATHcurve = -1;\n        gfp.VBR_mean_bitrate_kbps = 128;\n        gfp.VBR_min_bitrate_kbps = 0;\n        gfp.VBR_max_bitrate_kbps = 0;\n        gfp.VBR_hard_min = 0;\n        gfc.VBR_min_bitrate = 1;\n        /* not 0 ????? */\n        gfc.VBR_max_bitrate = 13;\n        /* not 14 ????? */\n\n        gfp.quant_comp = -1;\n        gfp.quant_comp_short = -1;\n\n        gfp.msfix = -1;\n\n        gfc.resample_ratio = 1;\n\n        gfc.OldValue[0] = 180;\n        gfc.OldValue[1] = 180;\n        gfc.CurrentStep[0] = 4;\n        gfc.CurrentStep[1] = 4;\n        gfc.masking_lower = 1;\n        gfc.nsPsy.attackthre = -1;\n        gfc.nsPsy.attackthre_s = -1;\n\n        gfp.scale = -1;\n\n        gfp.athaa_type = -1;\n        gfp.ATHtype = -1;\n        /* default = -1 = set in lame_init_params */\n        gfp.athaa_loudapprox = -1;\n        /* 1 = flat loudness approx. (total energy) */\n        /* 2 = equal loudness curve */\n        gfp.athaa_sensitivity = 0.0;\n        /* no offset */\n        gfp.useTemporal = null;\n        gfp.interChRatio = -1;\n\n        /*\n         * The reason for int mf_samples_to_encode = ENCDELAY + POSTDELAY;\n         * ENCDELAY = internal encoder delay. And then we have to add\n         * POSTDELAY=288 because of the 50% MDCT overlap. A 576 MDCT granule\n         * decodes to 1152 samples. To synthesize the 576 samples centered under\n         * this granule we need the previous granule for the first 288 samples\n         * (no problem), and the next granule for the next 288 samples (not\n         * possible if this is last granule). So we need to pad with 288 samples\n         * to make sure we can encode the 576 samples we are interested in.\n         */\n        gfc.mf_samples_to_encode = Encoder.ENCDELAY + Encoder.POSTDELAY;\n        gfp.encoder_padding = 0;\n        gfc.mf_size = Encoder.ENCDELAY - Encoder.MDCTDELAY;\n        /*\n         * we pad input with this many 0's\n         */\n\n        gfp.findReplayGain = false;\n        gfp.decode_on_the_fly = false;\n\n        gfc.decode_on_the_fly = false;\n        gfc.findReplayGain = false;\n        gfc.findPeakSample = false;\n\n        gfc.RadioGain = 0;\n        gfc.AudiophileGain = 0;\n        gfc.noclipGainChange = 0;\n        gfc.noclipScale = -1.0;\n\n        gfp.preset = 0;\n\n        gfp.write_id3tag_automatic = true;\n        return 0;\n    }\n\n    this.lame_init = function () {\n        var gfp = new LameGlobalFlags();\n\n        var ret = lame_init_old(gfp);\n        if (ret != 0) {\n            return null;\n        }\n\n        gfp.lame_allocated_gfp = 1;\n        return gfp;\n    }\n\n    function filter_coef(x) {\n        if (x > 1.0)\n            return 0.0;\n        if (x <= 0.0)\n            return 1.0;\n\n        return Math.cos(Math.PI / 2 * x);\n    }\n\n    this.nearestBitrateFullIndex = function (bitrate) {\n        /* borrowed from DM abr presets */\n\n        var full_bitrate_table = [8, 16, 24, 32, 40, 48, 56, 64, 80,\n            96, 112, 128, 160, 192, 224, 256, 320];\n\n        var lower_range = 0, lower_range_kbps = 0, upper_range = 0, upper_range_kbps = 0;\n\n        /* We assume specified bitrate will be 320kbps */\n        upper_range_kbps = full_bitrate_table[16];\n        upper_range = 16;\n        lower_range_kbps = full_bitrate_table[16];\n        lower_range = 16;\n\n        /*\n         * Determine which significant bitrates the value specified falls\n         * between, if loop ends without breaking then we were correct above\n         * that the value was 320\n         */\n        for (var b = 0; b < 16; b++) {\n            if ((Math.max(bitrate, full_bitrate_table[b + 1])) != bitrate) {\n                upper_range_kbps = full_bitrate_table[b + 1];\n                upper_range = b + 1;\n                lower_range_kbps = full_bitrate_table[b];\n                lower_range = (b);\n                break;\n                /* We found upper range */\n            }\n        }\n\n        /* Determine which range the value specified is closer to */\n        if ((upper_range_kbps - bitrate) > (bitrate - lower_range_kbps)) {\n            return lower_range;\n        }\n        return upper_range;\n    }\n\n    function optimum_samplefreq(lowpassfreq, input_samplefreq) {\n        /*\n         * Rules:\n         *\n         * - if possible, sfb21 should NOT be used\n         */\n        var suggested_samplefreq = 44100;\n\n        if (input_samplefreq >= 48000)\n            suggested_samplefreq = 48000;\n        else if (input_samplefreq >= 44100)\n            suggested_samplefreq = 44100;\n        else if (input_samplefreq >= 32000)\n            suggested_samplefreq = 32000;\n        else if (input_samplefreq >= 24000)\n            suggested_samplefreq = 24000;\n        else if (input_samplefreq >= 22050)\n            suggested_samplefreq = 22050;\n        else if (input_samplefreq >= 16000)\n            suggested_samplefreq = 16000;\n        else if (input_samplefreq >= 12000)\n            suggested_samplefreq = 12000;\n        else if (input_samplefreq >= 11025)\n            suggested_samplefreq = 11025;\n        else if (input_samplefreq >= 8000)\n            suggested_samplefreq = 8000;\n\n        if (lowpassfreq == -1)\n            return suggested_samplefreq;\n\n        if (lowpassfreq <= 15960)\n            suggested_samplefreq = 44100;\n        if (lowpassfreq <= 15250)\n            suggested_samplefreq = 32000;\n        if (lowpassfreq <= 11220)\n            suggested_samplefreq = 24000;\n        if (lowpassfreq <= 9970)\n            suggested_samplefreq = 22050;\n        if (lowpassfreq <= 7230)\n            suggested_samplefreq = 16000;\n        if (lowpassfreq <= 5420)\n            suggested_samplefreq = 12000;\n        if (lowpassfreq <= 4510)\n            suggested_samplefreq = 11025;\n        if (lowpassfreq <= 3970)\n            suggested_samplefreq = 8000;\n\n        if (input_samplefreq < suggested_samplefreq) {\n            /*\n             * choose a valid MPEG sample frequency above the input sample\n             * frequency to avoid SFB21/12 bitrate bloat rh 061115\n             */\n            if (input_samplefreq > 44100) {\n                return 48000;\n            }\n            if (input_samplefreq > 32000) {\n                return 44100;\n            }\n            if (input_samplefreq > 24000) {\n                return 32000;\n            }\n            if (input_samplefreq > 22050) {\n                return 24000;\n            }\n            if (input_samplefreq > 16000) {\n                return 22050;\n            }\n            if (input_samplefreq > 12000) {\n                return 16000;\n            }\n            if (input_samplefreq > 11025) {\n                return 12000;\n            }\n            if (input_samplefreq > 8000) {\n                return 11025;\n            }\n            return 8000;\n        }\n        return suggested_samplefreq;\n    }\n\n    /**\n     * convert samp freq in Hz to index\n     */\n    function SmpFrqIndex(sample_freq, gpf) {\n        switch (sample_freq) {\n            case 44100:\n                gpf.version = 1;\n                return 0;\n            case 48000:\n                gpf.version = 1;\n                return 1;\n            case 32000:\n                gpf.version = 1;\n                return 2;\n            case 22050:\n                gpf.version = 0;\n                return 0;\n            case 24000:\n                gpf.version = 0;\n                return 1;\n            case 16000:\n                gpf.version = 0;\n                return 2;\n            case 11025:\n                gpf.version = 0;\n                return 0;\n            case 12000:\n                gpf.version = 0;\n                return 1;\n            case 8000:\n                gpf.version = 0;\n                return 2;\n            default:\n                gpf.version = 0;\n                return -1;\n        }\n    }\n\n    /**\n     * @param bRate\n     *            legal rates from 8 to 320\n     */\n    function FindNearestBitrate(bRate, version, samplerate) {\n        /* MPEG-1 or MPEG-2 LSF */\n        if (samplerate < 16000)\n            version = 2;\n\n        var bitrate = Tables.bitrate_table[version][1];\n\n        for (var i = 2; i <= 14; i++) {\n            if (Tables.bitrate_table[version][i] > 0) {\n                if (Math.abs(Tables.bitrate_table[version][i] - bRate) < Math\n                        .abs(bitrate - bRate))\n                    bitrate = Tables.bitrate_table[version][i];\n            }\n        }\n        return bitrate;\n    }\n\n    /**\n     * @param bRate\n     *            legal rates from 32 to 448 kbps\n     * @param version\n     *            MPEG-1 or MPEG-2/2.5 LSF\n     */\n    function BitrateIndex(bRate, version, samplerate) {\n        /* convert bitrate in kbps to index */\n        if (samplerate < 16000)\n            version = 2;\n        for (var i = 0; i <= 14; i++) {\n            if (Tables.bitrate_table[version][i] > 0) {\n                if (Tables.bitrate_table[version][i] == bRate) {\n                    return i;\n                }\n            }\n        }\n        return -1;\n    }\n\n    function optimum_bandwidth(lh, bitrate) {\n        /**\n         * <PRE>\n         *  Input:\n         *      bitrate     total bitrate in kbps\n         *\n         *   Output:\n         *      lowerlimit: best lowpass frequency limit for input filter in Hz\n         *      upperlimit: best highpass frequency limit for input filter in Hz\n         * </PRE>\n         */\n        var freq_map = [new BandPass(8, 2000),\n            new BandPass(16, 3700), new BandPass(24, 3900),\n            new BandPass(32, 5500), new BandPass(40, 7000),\n            new BandPass(48, 7500), new BandPass(56, 10000),\n            new BandPass(64, 11000), new BandPass(80, 13500),\n            new BandPass(96, 15100), new BandPass(112, 15600),\n            new BandPass(128, 17000), new BandPass(160, 17500),\n            new BandPass(192, 18600), new BandPass(224, 19400),\n            new BandPass(256, 19700), new BandPass(320, 20500)];\n\n        var table_index = self.nearestBitrateFullIndex(bitrate);\n        lh.lowerlimit = freq_map[table_index].lowpass;\n    }\n\n    function lame_init_params_ppflt(gfp) {\n        var gfc = gfp.internal_flags;\n        /***************************************************************/\n        /* compute info needed for polyphase filter (filter type==0, default) */\n        /***************************************************************/\n\n        var lowpass_band = 32;\n        var highpass_band = -1;\n\n        if (gfc.lowpass1 > 0) {\n            var minband = 999;\n            for (var band = 0; band <= 31; band++) {\n                var freq = (band / 31.0);\n                /* this band and above will be zeroed: */\n                if (freq >= gfc.lowpass2) {\n                    lowpass_band = Math.min(lowpass_band, band);\n                }\n                if (gfc.lowpass1 < freq && freq < gfc.lowpass2) {\n                    minband = Math.min(minband, band);\n                }\n            }\n\n            /*\n             * compute the *actual* transition band implemented by the polyphase\n             * filter\n             */\n            if (minband == 999) {\n                gfc.lowpass1 = (lowpass_band - .75) / 31.0;\n            } else {\n                gfc.lowpass1 = (minband - .75) / 31.0;\n            }\n            gfc.lowpass2 = lowpass_band / 31.0;\n        }\n\n        /*\n         * make sure highpass filter is within 90% of what the effective\n         * highpass frequency will be\n         */\n        if (gfc.highpass2 > 0) {\n            if (gfc.highpass2 < .9 * (.75 / 31.0)) {\n                gfc.highpass1 = 0;\n                gfc.highpass2 = 0;\n                System.err.println(\"Warning: highpass filter disabled.  \"\n                    + \"highpass frequency too small\\n\");\n            }\n        }\n\n        if (gfc.highpass2 > 0) {\n            var maxband = -1;\n            for (var band = 0; band <= 31; band++) {\n                var freq = band / 31.0;\n                /* this band and below will be zereod */\n                if (freq <= gfc.highpass1) {\n                    highpass_band = Math.max(highpass_band, band);\n                }\n                if (gfc.highpass1 < freq && freq < gfc.highpass2) {\n                    maxband = Math.max(maxband, band);\n                }\n            }\n            /*\n             * compute the *actual* transition band implemented by the polyphase\n             * filter\n             */\n            gfc.highpass1 = highpass_band / 31.0;\n            if (maxband == -1) {\n                gfc.highpass2 = (highpass_band + .75) / 31.0;\n            } else {\n                gfc.highpass2 = (maxband + .75) / 31.0;\n            }\n        }\n\n        for (var band = 0; band < 32; band++) {\n            var fc1, fc2;\n            var freq = band / 31.0;\n            if (gfc.highpass2 > gfc.highpass1) {\n                fc1 = filter_coef((gfc.highpass2 - freq)\n                    / (gfc.highpass2 - gfc.highpass1 + 1e-20));\n            } else {\n                fc1 = 1.0;\n            }\n            if (gfc.lowpass2 > gfc.lowpass1) {\n                fc2 = filter_coef((freq - gfc.lowpass1)\n                    / (gfc.lowpass2 - gfc.lowpass1 + 1e-20));\n            } else {\n                fc2 = 1.0;\n            }\n            gfc.amp_filter[band] = (fc1 * fc2);\n        }\n    }\n\n    function lame_init_qval(gfp) {\n        var gfc = gfp.internal_flags;\n\n        switch (gfp.quality) {\n            default:\n            case 9: /* no psymodel, no noise shaping */\n                gfc.psymodel = 0;\n                gfc.noise_shaping = 0;\n                gfc.noise_shaping_amp = 0;\n                gfc.noise_shaping_stop = 0;\n                gfc.use_best_huffman = 0;\n                gfc.full_outer_loop = 0;\n                break;\n\n            case 8:\n                gfp.quality = 7;\n            //$FALL-THROUGH$\n            case 7:\n                /*\n                 * use psymodel (for short block and m/s switching), but no noise\n                 * shapping\n                 */\n                gfc.psymodel = 1;\n                gfc.noise_shaping = 0;\n                gfc.noise_shaping_amp = 0;\n                gfc.noise_shaping_stop = 0;\n                gfc.use_best_huffman = 0;\n                gfc.full_outer_loop = 0;\n                break;\n\n            case 6:\n                gfc.psymodel = 1;\n                if (gfc.noise_shaping == 0)\n                    gfc.noise_shaping = 1;\n                gfc.noise_shaping_amp = 0;\n                gfc.noise_shaping_stop = 0;\n                if (gfc.subblock_gain == -1)\n                    gfc.subblock_gain = 1;\n                gfc.use_best_huffman = 0;\n                gfc.full_outer_loop = 0;\n                break;\n\n            case 5:\n                gfc.psymodel = 1;\n                if (gfc.noise_shaping == 0)\n                    gfc.noise_shaping = 1;\n                gfc.noise_shaping_amp = 0;\n                gfc.noise_shaping_stop = 0;\n                if (gfc.subblock_gain == -1)\n                    gfc.subblock_gain = 1;\n                gfc.use_best_huffman = 0;\n                gfc.full_outer_loop = 0;\n                break;\n\n            case 4:\n                gfc.psymodel = 1;\n                if (gfc.noise_shaping == 0)\n                    gfc.noise_shaping = 1;\n                gfc.noise_shaping_amp = 0;\n                gfc.noise_shaping_stop = 0;\n                if (gfc.subblock_gain == -1)\n                    gfc.subblock_gain = 1;\n                gfc.use_best_huffman = 1;\n                gfc.full_outer_loop = 0;\n                break;\n\n            case 3:\n                gfc.psymodel = 1;\n                if (gfc.noise_shaping == 0)\n                    gfc.noise_shaping = 1;\n                gfc.noise_shaping_amp = 1;\n                gfc.noise_shaping_stop = 1;\n                if (gfc.subblock_gain == -1)\n                    gfc.subblock_gain = 1;\n                gfc.use_best_huffman = 1;\n                gfc.full_outer_loop = 0;\n                break;\n\n            case 2:\n                gfc.psymodel = 1;\n                if (gfc.noise_shaping == 0)\n                    gfc.noise_shaping = 1;\n                if (gfc.substep_shaping == 0)\n                    gfc.substep_shaping = 2;\n                gfc.noise_shaping_amp = 1;\n                gfc.noise_shaping_stop = 1;\n                if (gfc.subblock_gain == -1)\n                    gfc.subblock_gain = 1;\n                gfc.use_best_huffman = 1;\n                /* inner loop */\n                gfc.full_outer_loop = 0;\n                break;\n\n            case 1:\n                gfc.psymodel = 1;\n                if (gfc.noise_shaping == 0)\n                    gfc.noise_shaping = 1;\n                if (gfc.substep_shaping == 0)\n                    gfc.substep_shaping = 2;\n                gfc.noise_shaping_amp = 2;\n                gfc.noise_shaping_stop = 1;\n                if (gfc.subblock_gain == -1)\n                    gfc.subblock_gain = 1;\n                gfc.use_best_huffman = 1;\n                gfc.full_outer_loop = 0;\n                break;\n\n            case 0:\n                gfc.psymodel = 1;\n                if (gfc.noise_shaping == 0)\n                    gfc.noise_shaping = 1;\n                if (gfc.substep_shaping == 0)\n                    gfc.substep_shaping = 2;\n                gfc.noise_shaping_amp = 2;\n                gfc.noise_shaping_stop = 1;\n                if (gfc.subblock_gain == -1)\n                    gfc.subblock_gain = 1;\n                gfc.use_best_huffman = 1;\n                /*\n                 * type 2 disabled because of it slowness, in favor of full outer\n                 * loop search\n                 */\n                gfc.full_outer_loop = 0;\n                /*\n                 * full outer loop search disabled because of audible distortions it\n                 * may generate rh 060629\n                 */\n                break;\n        }\n\n    }\n\n    function lame_init_bitstream(gfp) {\n        var gfc = gfp.internal_flags;\n        gfp.frameNum = 0;\n\n        if (gfp.write_id3tag_automatic) {\n            id3.id3tag_write_v2(gfp);\n        }\n        /* initialize histogram data optionally used by frontend */\n\n        gfc.bitrate_stereoMode_Hist = new_int_n([16, 4 + 1]);\n        gfc.bitrate_blockType_Hist = new_int_n([16, 4 + 1 + 1]);\n\n        gfc.PeakSample = 0.0;\n\n        /* Write initial VBR Header to bitstream and init VBR data */\n        if (gfp.bWriteVbrTag)\n            vbr.InitVbrTag(gfp);\n    }\n\n    /********************************************************************\n     * initialize internal params based on data in gf (globalflags struct filled\n     * in by calling program)\n     *\n     * OUTLINE:\n     *\n     * We first have some complex code to determine bitrate, output samplerate\n     * and mode. It is complicated by the fact that we allow the user to set\n     * some or all of these parameters, and need to determine best possible\n     * values for the rest of them:\n     *\n     * 1. set some CPU related flags 2. check if we are mono.mono, stereo.mono\n     * or stereo.stereo 3. compute bitrate and output samplerate: user may have\n     * set compression ratio user may have set a bitrate user may have set a\n     * output samplerate 4. set some options which depend on output samplerate\n     * 5. compute the actual compression ratio 6. set mode based on compression\n     * ratio\n     *\n     * The remaining code is much simpler - it just sets options based on the\n     * mode & compression ratio:\n     *\n     * set allow_diff_short based on mode select lowpass filter based on\n     * compression ratio & mode set the bitrate index, and min/max bitrates for\n     * VBR modes disable VBR tag if it is not appropriate initialize the\n     * bitstream initialize scalefac_band data set sideinfo_len (based on\n     * channels, CRC, out_samplerate) write an id3v2 tag into the bitstream\n     * write VBR tag into the bitstream set mpeg1/2 flag estimate the number of\n     * frames (based on a lot of data)\n     *\n     * now we set more flags: nspsytune: see code VBR modes see code CBR/ABR see\n     * code\n     *\n     * Finally, we set the algorithm flags based on the gfp.quality value\n     * lame_init_qval(gfp);\n     *\n     ********************************************************************/\n    this.lame_init_params = function (gfp) {\n        var gfc = gfp.internal_flags;\n\n        gfc.Class_ID = 0;\n        if (gfc.ATH == null)\n            gfc.ATH = new ATH();\n        if (gfc.PSY == null)\n            gfc.PSY = new PSY();\n        if (gfc.rgdata == null)\n            gfc.rgdata = new ReplayGain();\n\n        gfc.channels_in = gfp.num_channels;\n        if (gfc.channels_in == 1)\n            gfp.mode = MPEGMode.MONO;\n        gfc.channels_out = (gfp.mode == MPEGMode.MONO) ? 1 : 2;\n        gfc.mode_ext = Encoder.MPG_MD_MS_LR;\n        if (gfp.mode == MPEGMode.MONO)\n            gfp.force_ms = false;\n        /*\n         * don't allow forced mid/side stereo for mono output\n         */\n\n        if (gfp.VBR == VbrMode.vbr_off && gfp.VBR_mean_bitrate_kbps != 128\n            && gfp.brate == 0)\n            gfp.brate = gfp.VBR_mean_bitrate_kbps;\n\n        if (gfp.VBR == VbrMode.vbr_off || gfp.VBR == VbrMode.vbr_mtrh\n            || gfp.VBR == VbrMode.vbr_mt) {\n            /* these modes can handle free format condition */\n        } else {\n            gfp.free_format = false;\n            /* mode can't be mixed with free format */\n        }\n\n        if (gfp.VBR == VbrMode.vbr_off && gfp.brate == 0) {\n            /* no bitrate or compression ratio specified, use 11.025 */\n            if (BitStream.EQ(gfp.compression_ratio, 0))\n                gfp.compression_ratio = 11.025;\n            /*\n             * rate to compress a CD down to exactly 128000 bps\n             */\n        }\n\n        /* find bitrate if user specify a compression ratio */\n        if (gfp.VBR == VbrMode.vbr_off && gfp.compression_ratio > 0) {\n\n            if (gfp.out_samplerate == 0)\n                gfp.out_samplerate = map2MP3Frequency((int)(0.97 * gfp.in_samplerate));\n            /*\n             * round up with a margin of 3 %\n             */\n\n            /*\n             * choose a bitrate for the output samplerate which achieves\n             * specified compression ratio\n             */\n            gfp.brate = 0 | (gfp.out_samplerate * 16 * gfc.channels_out / (1.e3 * gfp.compression_ratio));\n\n            /* we need the version for the bitrate table look up */\n            gfc.samplerate_index = SmpFrqIndex(gfp.out_samplerate, gfp);\n\n            if (!gfp.free_format) /*\n             * for non Free Format find the nearest allowed\n             * bitrate\n             */\n                gfp.brate = FindNearestBitrate(gfp.brate, gfp.version,\n                    gfp.out_samplerate);\n        }\n\n        if (gfp.out_samplerate != 0) {\n            if (gfp.out_samplerate < 16000) {\n                gfp.VBR_mean_bitrate_kbps = Math.max(gfp.VBR_mean_bitrate_kbps,\n                    8);\n                gfp.VBR_mean_bitrate_kbps = Math.min(gfp.VBR_mean_bitrate_kbps,\n                    64);\n            } else if (gfp.out_samplerate < 32000) {\n                gfp.VBR_mean_bitrate_kbps = Math.max(gfp.VBR_mean_bitrate_kbps,\n                    8);\n                gfp.VBR_mean_bitrate_kbps = Math.min(gfp.VBR_mean_bitrate_kbps,\n                    160);\n            } else {\n                gfp.VBR_mean_bitrate_kbps = Math.max(gfp.VBR_mean_bitrate_kbps,\n                    32);\n                gfp.VBR_mean_bitrate_kbps = Math.min(gfp.VBR_mean_bitrate_kbps,\n                    320);\n            }\n        }\n\n        /****************************************************************/\n        /* if a filter has not been enabled, see if we should add one: */\n        /****************************************************************/\n        if (gfp.lowpassfreq == 0) {\n            var lowpass = 16000.;\n\n            switch (gfp.VBR) {\n                case VbrMode.vbr_off:\n                {\n                    var lh = new LowPassHighPass();\n                    optimum_bandwidth(lh, gfp.brate);\n                    lowpass = lh.lowerlimit;\n                    break;\n                }\n                case VbrMode.vbr_abr:\n                {\n                    var lh = new LowPassHighPass();\n                    optimum_bandwidth(lh, gfp.VBR_mean_bitrate_kbps);\n                    lowpass = lh.lowerlimit;\n                    break;\n                }\n                case VbrMode.vbr_rh:\n                {\n                    var x = [19500, 19000, 18600, 18000, 17500, 16000,\n                        15600, 14900, 12500, 10000, 3950];\n                    if (0 <= gfp.VBR_q && gfp.VBR_q <= 9) {\n                        var a = x[gfp.VBR_q], b = x[gfp.VBR_q + 1], m = gfp.VBR_q_frac;\n                        lowpass = linear_int(a, b, m);\n                    } else {\n                        lowpass = 19500;\n                    }\n                    break;\n                }\n                default:\n                {\n                    var x = [19500, 19000, 18500, 18000, 17500, 16500,\n                        15500, 14500, 12500, 9500, 3950];\n                    if (0 <= gfp.VBR_q && gfp.VBR_q <= 9) {\n                        var a = x[gfp.VBR_q], b = x[gfp.VBR_q + 1], m = gfp.VBR_q_frac;\n                        lowpass = linear_int(a, b, m);\n                    } else {\n                        lowpass = 19500;\n                    }\n                }\n            }\n            if (gfp.mode == MPEGMode.MONO\n                && (gfp.VBR == VbrMode.vbr_off || gfp.VBR == VbrMode.vbr_abr))\n                lowpass *= 1.5;\n\n            gfp.lowpassfreq = lowpass | 0;\n        }\n\n        if (gfp.out_samplerate == 0) {\n            if (2 * gfp.lowpassfreq > gfp.in_samplerate) {\n                gfp.lowpassfreq = gfp.in_samplerate / 2;\n            }\n            gfp.out_samplerate = optimum_samplefreq(gfp.lowpassfreq | 0,\n                gfp.in_samplerate);\n        }\n\n        gfp.lowpassfreq = Math.min(20500, gfp.lowpassfreq);\n        gfp.lowpassfreq = Math.min(gfp.out_samplerate / 2, gfp.lowpassfreq);\n\n        if (gfp.VBR == VbrMode.vbr_off) {\n            gfp.compression_ratio = gfp.out_samplerate * 16 * gfc.channels_out\n                / (1.e3 * gfp.brate);\n        }\n        if (gfp.VBR == VbrMode.vbr_abr) {\n            gfp.compression_ratio = gfp.out_samplerate * 16 * gfc.channels_out\n                / (1.e3 * gfp.VBR_mean_bitrate_kbps);\n        }\n\n        /*\n         * do not compute ReplayGain values and do not find the peak sample if\n         * we can't store them\n         */\n        if (!gfp.bWriteVbrTag) {\n            gfp.findReplayGain = false;\n            gfp.decode_on_the_fly = false;\n            gfc.findPeakSample = false;\n        }\n        gfc.findReplayGain = gfp.findReplayGain;\n        gfc.decode_on_the_fly = gfp.decode_on_the_fly;\n\n        if (gfc.decode_on_the_fly)\n            gfc.findPeakSample = true;\n\n        if (gfc.findReplayGain) {\n            if (ga.InitGainAnalysis(gfc.rgdata, gfp.out_samplerate) == GainAnalysis.INIT_GAIN_ANALYSIS_ERROR) {\n                gfp.internal_flags = null;\n                return -6;\n            }\n        }\n\n        if (gfc.decode_on_the_fly && !gfp.decode_only) {\n            if (gfc.hip != null) {\n                mpglib.hip_decode_exit(gfc.hip);\n            }\n            gfc.hip = mpglib.hip_decode_init();\n        }\n\n        gfc.mode_gr = gfp.out_samplerate <= 24000 ? 1 : 2;\n        /*\n         * Number of granules per frame\n         */\n        gfp.framesize = 576 * gfc.mode_gr;\n        gfp.encoder_delay = Encoder.ENCDELAY;\n\n        gfc.resample_ratio = gfp.in_samplerate / gfp.out_samplerate;\n\n        /**\n         * <PRE>\n         *  sample freq       bitrate     compression ratio\n         *     [kHz]      [kbps/channel]   for 16 bit input\n         *     44.1            56               12.6\n         *     44.1            64               11.025\n         *     44.1            80                8.82\n         *     22.05           24               14.7\n         *     22.05           32               11.025\n         *     22.05           40                8.82\n         *     16              16               16.0\n         *     16              24               10.667\n         * </PRE>\n         */\n        /**\n         * <PRE>\n         *  For VBR, take a guess at the compression_ratio.\n         *  For example:\n         *\n         *    VBR_q    compression     like\n         *     -        4.4         320 kbps/44 kHz\n         *   0...1      5.5         256 kbps/44 kHz\n         *     2        7.3         192 kbps/44 kHz\n         *     4        8.8         160 kbps/44 kHz\n         *     6       11           128 kbps/44 kHz\n         *     9       14.7          96 kbps\n         *\n         *  for lower bitrates, downsample with --resample\n         * </PRE>\n         */\n        switch (gfp.VBR) {\n            case VbrMode.vbr_mt:\n            case VbrMode.vbr_rh:\n            case VbrMode.vbr_mtrh:\n            {\n                /* numbers are a bit strange, but they determine the lowpass value */\n                var cmp = [5.7, 6.5, 7.3, 8.2, 10, 11.9, 13, 14,\n                    15, 16.5];\n                gfp.compression_ratio = cmp[gfp.VBR_q];\n            }\n                break;\n            case VbrMode.vbr_abr:\n                gfp.compression_ratio = gfp.out_samplerate * 16 * gfc.channels_out\n                    / (1.e3 * gfp.VBR_mean_bitrate_kbps);\n                break;\n            default:\n                gfp.compression_ratio = gfp.out_samplerate * 16 * gfc.channels_out\n                    / (1.e3 * gfp.brate);\n                break;\n        }\n\n        /*\n         * mode = -1 (not set by user) or mode = MONO (because of only 1 input\n         * channel). If mode has not been set, then select J-STEREO\n         */\n        if (gfp.mode == MPEGMode.NOT_SET) {\n            gfp.mode = MPEGMode.JOINT_STEREO;\n        }\n\n        /* apply user driven high pass filter */\n        if (gfp.highpassfreq > 0) {\n            gfc.highpass1 = 2. * gfp.highpassfreq;\n\n            if (gfp.highpasswidth >= 0)\n                gfc.highpass2 = 2. * (gfp.highpassfreq + gfp.highpasswidth);\n            else\n            /* 0% above on default */\n                gfc.highpass2 = (1 + 0.00) * 2. * gfp.highpassfreq;\n\n            gfc.highpass1 /= gfp.out_samplerate;\n            gfc.highpass2 /= gfp.out_samplerate;\n        } else {\n            gfc.highpass1 = 0;\n            gfc.highpass2 = 0;\n        }\n        /* apply user driven low pass filter */\n        if (gfp.lowpassfreq > 0) {\n            gfc.lowpass2 = 2. * gfp.lowpassfreq;\n            if (gfp.lowpasswidth >= 0) {\n                gfc.lowpass1 = 2. * (gfp.lowpassfreq - gfp.lowpasswidth);\n                if (gfc.lowpass1 < 0) /* has to be >= 0 */\n                    gfc.lowpass1 = 0;\n            } else { /* 0% below on default */\n                gfc.lowpass1 = (1 - 0.00) * 2. * gfp.lowpassfreq;\n            }\n            gfc.lowpass1 /= gfp.out_samplerate;\n            gfc.lowpass2 /= gfp.out_samplerate;\n        } else {\n            gfc.lowpass1 = 0;\n            gfc.lowpass2 = 0;\n        }\n\n        /**********************************************************************/\n        /* compute info needed for polyphase filter (filter type==0, default) */\n        /**********************************************************************/\n        lame_init_params_ppflt(gfp);\n        /*******************************************************\n         * samplerate and bitrate index\n         *******************************************************/\n        gfc.samplerate_index = SmpFrqIndex(gfp.out_samplerate, gfp);\n        if (gfc.samplerate_index < 0) {\n            gfp.internal_flags = null;\n            return -1;\n        }\n\n        if (gfp.VBR == VbrMode.vbr_off) {\n            if (gfp.free_format) {\n                gfc.bitrate_index = 0;\n            } else {\n                gfp.brate = FindNearestBitrate(gfp.brate, gfp.version,\n                    gfp.out_samplerate);\n                gfc.bitrate_index = BitrateIndex(gfp.brate, gfp.version,\n                    gfp.out_samplerate);\n                if (gfc.bitrate_index <= 0) {\n                    gfp.internal_flags = null;\n                    return -1;\n                }\n            }\n        } else {\n            gfc.bitrate_index = 1;\n        }\n\n        /* for CBR, we will write an \"info\" tag. */\n\n        if (gfp.analysis)\n            gfp.bWriteVbrTag = false;\n\n        /* some file options not allowed if output is: not specified or stdout */\n        if (gfc.pinfo != null)\n            gfp.bWriteVbrTag = false;\n        /* disable Xing VBR tag */\n\n        bs.init_bit_stream_w(gfc);\n\n        var j = gfc.samplerate_index + (3 * gfp.version) + 6\n            * (gfp.out_samplerate < 16000 ? 1 : 0);\n        for (var i = 0; i < Encoder.SBMAX_l + 1; i++)\n            gfc.scalefac_band.l[i] = qupvt.sfBandIndex[j].l[i];\n\n        for (var i = 0; i < Encoder.PSFB21 + 1; i++) {\n            var size = (gfc.scalefac_band.l[22] - gfc.scalefac_band.l[21])\n                / Encoder.PSFB21;\n            var start = gfc.scalefac_band.l[21] + i * size;\n            gfc.scalefac_band.psfb21[i] = start;\n        }\n        gfc.scalefac_band.psfb21[Encoder.PSFB21] = 576;\n\n        for (var i = 0; i < Encoder.SBMAX_s + 1; i++)\n            gfc.scalefac_band.s[i] = qupvt.sfBandIndex[j].s[i];\n\n        for (var i = 0; i < Encoder.PSFB12 + 1; i++) {\n            var size = (gfc.scalefac_band.s[13] - gfc.scalefac_band.s[12])\n                / Encoder.PSFB12;\n            var start = gfc.scalefac_band.s[12] + i * size;\n            gfc.scalefac_band.psfb12[i] = start;\n        }\n        gfc.scalefac_band.psfb12[Encoder.PSFB12] = 192;\n        /* determine the mean bitrate for main data */\n        if (gfp.version == 1) /* MPEG 1 */\n            gfc.sideinfo_len = (gfc.channels_out == 1) ? 4 + 17 : 4 + 32;\n        else\n        /* MPEG 2 */\n            gfc.sideinfo_len = (gfc.channels_out == 1) ? 4 + 9 : 4 + 17;\n\n        if (gfp.error_protection)\n            gfc.sideinfo_len += 2;\n\n        lame_init_bitstream(gfp);\n\n        gfc.Class_ID = LAME_ID;\n\n        {\n            var k;\n\n            for (k = 0; k < 19; k++)\n                gfc.nsPsy.pefirbuf[k] = 700 * gfc.mode_gr * gfc.channels_out;\n\n            if (gfp.ATHtype == -1)\n                gfp.ATHtype = 4;\n        }\n        assert(gfp.VBR_q <= 9);\n        assert(gfp.VBR_q >= 0);\n\n        switch (gfp.VBR) {\n\n            case VbrMode.vbr_mt:\n                gfp.VBR = VbrMode.vbr_mtrh;\n            //$FALL-THROUGH$\n            case VbrMode.vbr_mtrh:\n            {\n                if (gfp.useTemporal == null) {\n                    gfp.useTemporal = false;\n                    /* off by default for this VBR mode */\n                }\n\n                p.apply_preset(gfp, 500 - (gfp.VBR_q * 10), 0);\n                /**\n                 * <PRE>\n                 *   The newer VBR code supports only a limited\n                 *     subset of quality levels:\n                 *     9-5=5 are the same, uses x^3/4 quantization\n                 *   4-0=0 are the same  5 plus best huffman divide code\n                 * </PRE>\n                 */\n                if (gfp.quality < 0)\n                    gfp.quality = LAME_DEFAULT_QUALITY;\n                if (gfp.quality < 5)\n                    gfp.quality = 0;\n                if (gfp.quality > 5)\n                    gfp.quality = 5;\n\n                gfc.PSY.mask_adjust = gfp.maskingadjust;\n                gfc.PSY.mask_adjust_short = gfp.maskingadjust_short;\n\n                /*\n                 * sfb21 extra only with MPEG-1 at higher sampling rates\n                 */\n                if (gfp.experimentalY)\n                    gfc.sfb21_extra = false;\n                else\n                    gfc.sfb21_extra = (gfp.out_samplerate > 44000);\n\n                gfc.iteration_loop = new VBRNewIterationLoop(qu);\n                break;\n\n            }\n            case VbrMode.vbr_rh:\n            {\n\n                p.apply_preset(gfp, 500 - (gfp.VBR_q * 10), 0);\n\n                gfc.PSY.mask_adjust = gfp.maskingadjust;\n                gfc.PSY.mask_adjust_short = gfp.maskingadjust_short;\n\n                /*\n                 * sfb21 extra only with MPEG-1 at higher sampling rates\n                 */\n                if (gfp.experimentalY)\n                    gfc.sfb21_extra = false;\n                else\n                    gfc.sfb21_extra = (gfp.out_samplerate > 44000);\n\n                /*\n                 * VBR needs at least the output of GPSYCHO, so we have to garantee\n                 * that by setting a minimum quality level, actually level 6 does\n                 * it. down to level 6\n                 */\n                if (gfp.quality > 6)\n                    gfp.quality = 6;\n\n                if (gfp.quality < 0)\n                    gfp.quality = LAME_DEFAULT_QUALITY;\n\n                gfc.iteration_loop = new VBROldIterationLoop(qu);\n                break;\n            }\n\n            default: /* cbr/abr */\n            {\n                var vbrmode;\n\n                /*\n                 * no sfb21 extra with CBR code\n                 */\n                gfc.sfb21_extra = false;\n\n                if (gfp.quality < 0)\n                    gfp.quality = LAME_DEFAULT_QUALITY;\n\n                vbrmode = gfp.VBR;\n                if (vbrmode == VbrMode.vbr_off)\n                    gfp.VBR_mean_bitrate_kbps = gfp.brate;\n                /* second, set parameters depending on bitrate */\n                p.apply_preset(gfp, gfp.VBR_mean_bitrate_kbps, 0);\n                gfp.VBR = vbrmode;\n\n                gfc.PSY.mask_adjust = gfp.maskingadjust;\n                gfc.PSY.mask_adjust_short = gfp.maskingadjust_short;\n\n                if (vbrmode == VbrMode.vbr_off) {\n                    gfc.iteration_loop = new CBRNewIterationLoop(qu);\n                } else {\n                    gfc.iteration_loop = new ABRIterationLoop(qu);\n                }\n                break;\n            }\n        }\n        assert(gfp.scale >= 0);\n        /* initialize default values common for all modes */\n\n        if (gfp.VBR != VbrMode.vbr_off) { /* choose a min/max bitrate for VBR */\n            /* if the user didn't specify VBR_max_bitrate: */\n            gfc.VBR_min_bitrate = 1;\n            /*\n             * default: allow 8 kbps (MPEG-2) or 32 kbps (MPEG-1)\n             */\n            gfc.VBR_max_bitrate = 14;\n            /*\n             * default: allow 160 kbps (MPEG-2) or 320 kbps (MPEG-1)\n             */\n            if (gfp.out_samplerate < 16000)\n                gfc.VBR_max_bitrate = 8;\n            /* default: allow 64 kbps (MPEG-2.5) */\n            if (gfp.VBR_min_bitrate_kbps != 0) {\n                gfp.VBR_min_bitrate_kbps = FindNearestBitrate(\n                    gfp.VBR_min_bitrate_kbps, gfp.version,\n                    gfp.out_samplerate);\n                gfc.VBR_min_bitrate = BitrateIndex(gfp.VBR_min_bitrate_kbps,\n                    gfp.version, gfp.out_samplerate);\n                if (gfc.VBR_min_bitrate < 0)\n                    return -1;\n            }\n            if (gfp.VBR_max_bitrate_kbps != 0) {\n                gfp.VBR_max_bitrate_kbps = FindNearestBitrate(\n                    gfp.VBR_max_bitrate_kbps, gfp.version,\n                    gfp.out_samplerate);\n                gfc.VBR_max_bitrate = BitrateIndex(gfp.VBR_max_bitrate_kbps,\n                    gfp.version, gfp.out_samplerate);\n                if (gfc.VBR_max_bitrate < 0)\n                    return -1;\n            }\n            gfp.VBR_min_bitrate_kbps = Tables.bitrate_table[gfp.version][gfc.VBR_min_bitrate];\n            gfp.VBR_max_bitrate_kbps = Tables.bitrate_table[gfp.version][gfc.VBR_max_bitrate];\n            gfp.VBR_mean_bitrate_kbps = Math.min(\n                Tables.bitrate_table[gfp.version][gfc.VBR_max_bitrate],\n                gfp.VBR_mean_bitrate_kbps);\n            gfp.VBR_mean_bitrate_kbps = Math.max(\n                Tables.bitrate_table[gfp.version][gfc.VBR_min_bitrate],\n                gfp.VBR_mean_bitrate_kbps);\n        }\n\n        /* just another daily changing developer switch */\n        if (gfp.tune) {\n            gfc.PSY.mask_adjust += gfp.tune_value_a;\n            gfc.PSY.mask_adjust_short += gfp.tune_value_a;\n        }\n\n        /* initialize internal qval settings */\n        lame_init_qval(gfp);\n        assert(gfp.scale >= 0);\n        /*\n         * automatic ATH adjustment on\n         */\n        if (gfp.athaa_type < 0)\n            gfc.ATH.useAdjust = 3;\n        else\n            gfc.ATH.useAdjust = gfp.athaa_type;\n\n        /* initialize internal adaptive ATH settings -jd */\n        gfc.ATH.aaSensitivityP = Math.pow(10.0, gfp.athaa_sensitivity\n            / -10.0);\n\n        if (gfp.short_blocks == null) {\n            gfp.short_blocks = ShortBlock.short_block_allowed;\n        }\n\n        /*\n         * Note Jan/2003: Many hardware decoders cannot handle short blocks in\n         * regular stereo mode unless they are coupled (same type in both\n         * channels) it is a rare event (1 frame per min. or so) that LAME would\n         * use uncoupled short blocks, so lets turn them off until we decide how\n         * to handle this. No other encoders allow uncoupled short blocks, even\n         * though it is in the standard.\n         */\n        /*\n         * rh 20040217: coupling makes no sense for mono and dual-mono streams\n         */\n        if (gfp.short_blocks == ShortBlock.short_block_allowed\n            && (gfp.mode == MPEGMode.JOINT_STEREO || gfp.mode == MPEGMode.STEREO)) {\n            gfp.short_blocks = ShortBlock.short_block_coupled;\n        }\n\n        if (gfp.quant_comp < 0)\n            gfp.quant_comp = 1;\n        if (gfp.quant_comp_short < 0)\n            gfp.quant_comp_short = 0;\n\n        if (gfp.msfix < 0)\n            gfp.msfix = 0;\n\n        /* select psychoacoustic model */\n        gfp.exp_nspsytune = gfp.exp_nspsytune | 1;\n\n        if (gfp.internal_flags.nsPsy.attackthre < 0)\n            gfp.internal_flags.nsPsy.attackthre = PsyModel.NSATTACKTHRE;\n        if (gfp.internal_flags.nsPsy.attackthre_s < 0)\n            gfp.internal_flags.nsPsy.attackthre_s = PsyModel.NSATTACKTHRE_S;\n\n        assert(gfp.scale >= 0);\n\n        if (gfp.scale < 0)\n            gfp.scale = 1;\n\n        if (gfp.ATHtype < 0)\n            gfp.ATHtype = 4;\n\n        if (gfp.ATHcurve < 0)\n            gfp.ATHcurve = 4;\n\n        if (gfp.athaa_loudapprox < 0)\n            gfp.athaa_loudapprox = 2;\n\n        if (gfp.interChRatio < 0)\n            gfp.interChRatio = 0;\n\n        if (gfp.useTemporal == null)\n            gfp.useTemporal = true;\n        /* on by default */\n\n        /*\n         * padding method as described in\n         * \"MPEG-Layer3 / Bitstream Syntax and Decoding\" by Martin Sieler, Ralph\n         * Sperschneider\n         *\n         * note: there is no padding for the very first frame\n         *\n         * Robert Hegemann 2000-06-22\n         */\n        gfc.slot_lag = gfc.frac_SpF = 0;\n        if (gfp.VBR == VbrMode.vbr_off)\n            gfc.slot_lag = gfc.frac_SpF = (((gfp.version + 1) * 72000 * gfp.brate) % gfp.out_samplerate) | 0;\n\n        qupvt.iteration_init(gfp);\n        psy.psymodel_init(gfp);\n        assert(gfp.scale >= 0);\n        return 0;\n    }\n\n    function update_inbuffer_size(gfc, nsamples) {\n        if (gfc.in_buffer_0 == null || gfc.in_buffer_nsamples < nsamples) {\n            gfc.in_buffer_0 = new_float(nsamples);\n            gfc.in_buffer_1 = new_float(nsamples);\n            gfc.in_buffer_nsamples = nsamples;\n        }\n    }\n\n    this.lame_encode_flush = function (gfp, mp3buffer, mp3bufferPos, mp3buffer_size) {\n        var gfc = gfp.internal_flags;\n        var buffer = new_short_n([2, 1152]);\n        var imp3 = 0, mp3count, mp3buffer_size_remaining;\n\n        /*\n         * we always add POSTDELAY=288 padding to make sure granule with real\n         * data can be complety decoded (because of 50% overlap with next\n         * granule\n         */\n        var end_padding;\n        var frames_left;\n        var samples_to_encode = gfc.mf_samples_to_encode - Encoder.POSTDELAY;\n        var mf_needed = calcNeeded(gfp);\n\n        /* Was flush already called? */\n        if (gfc.mf_samples_to_encode < 1) {\n            return 0;\n        }\n        mp3count = 0;\n\n        if (gfp.in_samplerate != gfp.out_samplerate) {\n            /*\n             * delay due to resampling; needs to be fixed, if resampling code\n             * gets changed\n             */\n            samples_to_encode += 16. * gfp.out_samplerate / gfp.in_samplerate;\n        }\n        end_padding = gfp.framesize - (samples_to_encode % gfp.framesize);\n        if (end_padding < 576)\n            end_padding += gfp.framesize;\n        gfp.encoder_padding = end_padding;\n\n        frames_left = (samples_to_encode + end_padding) / gfp.framesize;\n\n        /*\n         * send in a frame of 0 padding until all internal sample buffers are\n         * flushed\n         */\n        while (frames_left > 0 && imp3 >= 0) {\n            var bunch = mf_needed - gfc.mf_size;\n            var frame_num = gfp.frameNum;\n\n            bunch *= gfp.in_samplerate;\n            bunch /= gfp.out_samplerate;\n            if (bunch > 1152)\n                bunch = 1152;\n            if (bunch < 1)\n                bunch = 1;\n\n            mp3buffer_size_remaining = mp3buffer_size - mp3count;\n\n            /* if user specifed buffer size = 0, dont check size */\n            if (mp3buffer_size == 0)\n                mp3buffer_size_remaining = 0;\n\n            imp3 = this.lame_encode_buffer(gfp, buffer[0], buffer[1], bunch,\n                mp3buffer, mp3bufferPos, mp3buffer_size_remaining);\n\n            mp3bufferPos += imp3;\n            mp3count += imp3;\n            frames_left -= (frame_num != gfp.frameNum) ? 1 : 0;\n        }\n        /*\n         * Set gfc.mf_samples_to_encode to 0, so we may detect and break loops\n         * calling it more than once in a row.\n         */\n        gfc.mf_samples_to_encode = 0;\n\n        if (imp3 < 0) {\n            /* some type of fatal error */\n            return imp3;\n        }\n\n        mp3buffer_size_remaining = mp3buffer_size - mp3count;\n        /* if user specifed buffer size = 0, dont check size */\n        if (mp3buffer_size == 0)\n            mp3buffer_size_remaining = 0;\n\n        /* mp3 related stuff. bit buffer might still contain some mp3 data */\n        bs.flush_bitstream(gfp);\n        imp3 = bs.copy_buffer(gfc, mp3buffer, mp3bufferPos,\n            mp3buffer_size_remaining, 1);\n        if (imp3 < 0) {\n            /* some type of fatal error */\n            return imp3;\n        }\n        mp3bufferPos += imp3;\n        mp3count += imp3;\n        mp3buffer_size_remaining = mp3buffer_size - mp3count;\n        /* if user specifed buffer size = 0, dont check size */\n        if (mp3buffer_size == 0)\n            mp3buffer_size_remaining = 0;\n\n        if (gfp.write_id3tag_automatic) {\n            /* write a id3 tag to the bitstream */\n            id3.id3tag_write_v1(gfp);\n\n            imp3 = bs.copy_buffer(gfc, mp3buffer, mp3bufferPos,\n                mp3buffer_size_remaining, 0);\n\n            if (imp3 < 0) {\n                return imp3;\n            }\n            mp3count += imp3;\n        }\n        return mp3count;\n    };\n\n    this.lame_encode_buffer = function (gfp, buffer_l, buffer_r, nsamples, mp3buf, mp3bufPos, mp3buf_size) {\n        var gfc = gfp.internal_flags;\n        var in_buffer = [null, null];\n\n        if (gfc.Class_ID != LAME_ID)\n            return -3;\n\n        if (nsamples == 0)\n            return 0;\n\n        update_inbuffer_size(gfc, nsamples);\n\n        in_buffer[0] = gfc.in_buffer_0;\n        in_buffer[1] = gfc.in_buffer_1;\n\n        /* make a copy of input buffer, changing type to sample_t */\n        for (var i = 0; i < nsamples; i++) {\n            in_buffer[0][i] = buffer_l[i];\n            if (gfc.channels_in > 1)\n                in_buffer[1][i] = buffer_r[i];\n        }\n\n        return lame_encode_buffer_sample(gfp, in_buffer[0], in_buffer[1],\n            nsamples, mp3buf, mp3bufPos, mp3buf_size);\n    }\n\n    function calcNeeded(gfp) {\n        var mf_needed = Encoder.BLKSIZE + gfp.framesize - Encoder.FFTOFFSET;\n        /*\n         * amount needed for FFT\n         */\n        mf_needed = Math.max(mf_needed, 512 + gfp.framesize - 32);\n        assert(LameInternalFlags.MFSIZE >= mf_needed);\n\n        return mf_needed;\n    }\n\n    function lame_encode_buffer_sample(gfp, buffer_l, buffer_r, nsamples, mp3buf, mp3bufPos, mp3buf_size) {\n        var gfc = gfp.internal_flags;\n        var mp3size = 0, ret, i, ch, mf_needed;\n        var mp3out;\n        var mfbuf = [null, null];\n        var in_buffer = [null, null];\n\n        if (gfc.Class_ID != LAME_ID)\n            return -3;\n\n        if (nsamples == 0)\n            return 0;\n\n        /* copy out any tags that may have been written into bitstream */\n        mp3out = bs.copy_buffer(gfc, mp3buf, mp3bufPos, mp3buf_size, 0);\n        if (mp3out < 0)\n            return mp3out;\n        /* not enough buffer space */\n        mp3bufPos += mp3out;\n        mp3size += mp3out;\n\n        in_buffer[0] = buffer_l;\n        in_buffer[1] = buffer_r;\n\n        /* Apply user defined re-scaling */\n\n        /* user selected scaling of the samples */\n        if (BitStream.NEQ(gfp.scale, 0) && BitStream.NEQ(gfp.scale, 1.0)) {\n            for (i = 0; i < nsamples; ++i) {\n                in_buffer[0][i] *= gfp.scale;\n                if (gfc.channels_out == 2)\n                    in_buffer[1][i] *= gfp.scale;\n            }\n        }\n\n        /* user selected scaling of the channel 0 (left) samples */\n        if (BitStream.NEQ(gfp.scale_left, 0)\n            && BitStream.NEQ(gfp.scale_left, 1.0)) {\n            for (i = 0; i < nsamples; ++i) {\n                in_buffer[0][i] *= gfp.scale_left;\n            }\n        }\n\n        /* user selected scaling of the channel 1 (right) samples */\n        if (BitStream.NEQ(gfp.scale_right, 0)\n            && BitStream.NEQ(gfp.scale_right, 1.0)) {\n            for (i = 0; i < nsamples; ++i) {\n                in_buffer[1][i] *= gfp.scale_right;\n            }\n        }\n\n        /* Downsample to Mono if 2 channels in and 1 channel out */\n        if (gfp.num_channels == 2 && gfc.channels_out == 1) {\n            for (i = 0; i < nsamples; ++i) {\n                in_buffer[0][i] = 0.5 * ( in_buffer[0][i] + in_buffer[1][i]);\n                in_buffer[1][i] = 0.0;\n            }\n        }\n\n        mf_needed = calcNeeded(gfp);\n\n        mfbuf[0] = gfc.mfbuf[0];\n        mfbuf[1] = gfc.mfbuf[1];\n\n        var in_bufferPos = 0;\n        while (nsamples > 0) {\n            var in_buffer_ptr = [null, null];\n            var n_in = 0;\n            /* number of input samples processed with fill_buffer */\n            var n_out = 0;\n            /* number of samples output with fill_buffer */\n            /* n_in <> n_out if we are resampling */\n\n            in_buffer_ptr[0] = in_buffer[0];\n            in_buffer_ptr[1] = in_buffer[1];\n            /* copy in new samples into mfbuf, with resampling */\n            var inOut = new InOut();\n            fill_buffer(gfp, mfbuf, in_buffer_ptr, in_bufferPos, nsamples,\n                inOut);\n            n_in = inOut.n_in;\n            n_out = inOut.n_out;\n\n            /* compute ReplayGain of resampled input if requested */\n            if (gfc.findReplayGain && !gfc.decode_on_the_fly)\n                if (ga.AnalyzeSamples(gfc.rgdata, mfbuf[0], gfc.mf_size,\n                        mfbuf[1], gfc.mf_size, n_out, gfc.channels_out) == GainAnalysis.GAIN_ANALYSIS_ERROR)\n                    return -6;\n\n            /* update in_buffer counters */\n            nsamples -= n_in;\n            in_bufferPos += n_in;\n            if (gfc.channels_out == 2)\n                ;// in_bufferPos += n_in;\n\n            /* update mfbuf[] counters */\n            gfc.mf_size += n_out;\n            assert(gfc.mf_size <= LameInternalFlags.MFSIZE);\n\n            /*\n             * lame_encode_flush may have set gfc.mf_sample_to_encode to 0 so we\n             * have to reinitialize it here when that happened.\n             */\n            if (gfc.mf_samples_to_encode < 1) {\n                gfc.mf_samples_to_encode = Encoder.ENCDELAY + Encoder.POSTDELAY;\n            }\n            gfc.mf_samples_to_encode += n_out;\n\n            if (gfc.mf_size >= mf_needed) {\n                /* encode the frame. */\n                /* mp3buf = pointer to current location in buffer */\n                /* mp3buf_size = size of original mp3 output buffer */\n                /* = 0 if we should not worry about the */\n                /* buffer size because calling program is */\n                /* to lazy to compute it */\n                /* mp3size = size of data written to buffer so far */\n                /* mp3buf_size-mp3size = amount of space avalable */\n\n                var buf_size = mp3buf_size - mp3size;\n                if (mp3buf_size == 0)\n                    buf_size = 0;\n\n                ret = lame_encode_frame(gfp, mfbuf[0], mfbuf[1], mp3buf,\n                    mp3bufPos, buf_size);\n\n                if (ret < 0)\n                    return ret;\n                mp3bufPos += ret;\n                mp3size += ret;\n\n                /* shift out old samples */\n                gfc.mf_size -= gfp.framesize;\n                gfc.mf_samples_to_encode -= gfp.framesize;\n                for (ch = 0; ch < gfc.channels_out; ch++)\n                    for (i = 0; i < gfc.mf_size; i++)\n                        mfbuf[ch][i] = mfbuf[ch][i + gfp.framesize];\n            }\n        }\n        assert(nsamples == 0);\n\n        return mp3size;\n    }\n\n    function lame_encode_frame(gfp, inbuf_l, inbuf_r, mp3buf, mp3bufPos, mp3buf_size) {\n        var ret = self.enc.lame_encode_mp3_frame(gfp, inbuf_l, inbuf_r, mp3buf,\n            mp3bufPos, mp3buf_size);\n        gfp.frameNum++;\n        return ret;\n    }\n\n    function InOut() {\n        this.n_in = 0;\n        this.n_out = 0;\n    }\n\n\n    function NumUsed() {\n        this.num_used = 0;\n    }\n\n    /**\n     * Greatest common divisor.\n     * <p>\n     * Joint work of Euclid and M. Hendry\n     */\n    function gcd(i, j) {\n        return j != 0 ? gcd(j, i % j) : i;\n    }\n\n    /**\n     * Resampling via FIR filter, blackman window.\n     */\n    function blackman(x, fcn, l) {\n        /*\n         * This algorithm from: SIGNAL PROCESSING ALGORITHMS IN FORTRAN AND C\n         * S.D. Stearns and R.A. David, Prentice-Hall, 1992\n         */\n        var wcn = (Math.PI * fcn);\n\n        x /= l;\n        if (x < 0)\n            x = 0;\n        if (x > 1)\n            x = 1;\n        var x2 = x - .5;\n\n        var bkwn = 0.42 - 0.5 * Math.cos(2 * x * Math.PI) + 0.08 * Math.cos(4 * x * Math.PI);\n        if (Math.abs(x2) < 1e-9)\n            return (wcn / Math.PI);\n        else\n            return (bkwn * Math.sin(l * wcn * x2) / (Math.PI * l * x2));\n    }\n\n    function fill_buffer_resample(gfp, outbuf, outbufPos, desired_len, inbuf, in_bufferPos, len, num_used, ch) {\n        var gfc = gfp.internal_flags;\n        var i, j = 0, k;\n        /* number of convolution functions to pre-compute */\n        var bpc = gfp.out_samplerate\n            / gcd(gfp.out_samplerate, gfp.in_samplerate);\n        if (bpc > LameInternalFlags.BPC)\n            bpc = LameInternalFlags.BPC;\n\n        var intratio = (Math.abs(gfc.resample_ratio\n            - Math.floor(.5 + gfc.resample_ratio)) < .0001) ? 1 : 0;\n        var fcn = 1.00 / gfc.resample_ratio;\n        if (fcn > 1.00)\n            fcn = 1.00;\n        var filter_l = 31;\n        if (0 == filter_l % 2)\n            --filter_l;\n        /* must be odd */\n        filter_l += intratio;\n        /* unless resample_ratio=int, it must be even */\n\n        var BLACKSIZE = filter_l + 1;\n        /* size of data needed for FIR */\n\n        if (gfc.fill_buffer_resample_init == 0) {\n            gfc.inbuf_old[0] = new_float(BLACKSIZE);\n            gfc.inbuf_old[1] = new_float(BLACKSIZE);\n            for (i = 0; i <= 2 * bpc; ++i)\n                gfc.blackfilt[i] = new_float(BLACKSIZE);\n\n            gfc.itime[0] = 0;\n            gfc.itime[1] = 0;\n\n            /* precompute blackman filter coefficients */\n            for (j = 0; j <= 2 * bpc; j++) {\n                var sum = 0.;\n                var offset = (j - bpc) / (2. * bpc);\n                for (i = 0; i <= filter_l; i++)\n                    sum += gfc.blackfilt[j][i] = blackman(i - offset, fcn,\n                        filter_l);\n                for (i = 0; i <= filter_l; i++)\n                    gfc.blackfilt[j][i] /= sum;\n            }\n            gfc.fill_buffer_resample_init = 1;\n        }\n\n        var inbuf_old = gfc.inbuf_old[ch];\n\n        /* time of j'th element in inbuf = itime + j/ifreq; */\n        /* time of k'th element in outbuf = j/ofreq */\n        for (k = 0; k < desired_len; k++) {\n            var time0;\n            var joff;\n\n            time0 = k * gfc.resample_ratio;\n            /* time of k'th output sample */\n            j = 0 | Math.floor(time0 - gfc.itime[ch]);\n\n            /* check if we need more input data */\n            if ((filter_l + j - filter_l / 2) >= len)\n                break;\n\n            /* blackman filter. by default, window centered at j+.5(filter_l%2) */\n            /* but we want a window centered at time0. */\n            var offset = (time0 - gfc.itime[ch] - (j + .5 * (filter_l % 2)));\n            assert(Math.abs(offset) <= .501);\n\n            /* find the closest precomputed window for this offset: */\n            joff = 0 | Math.floor((offset * 2 * bpc) + bpc + .5);\n            var xvalue = 0.;\n            for (i = 0; i <= filter_l; ++i) {\n                var j2 = i + j - filter_l / 2;\n                var y;\n                assert(j2 < len);\n                assert(j2 + BLACKSIZE >= 0);\n                y = (j2 < 0) ? inbuf_old[BLACKSIZE + j2] : inbuf[in_bufferPos\n                + j2];\n                xvalue += y * gfc.blackfilt[joff][i];\n            }\n            outbuf[outbufPos + k] = xvalue;\n        }\n\n        /* k = number of samples added to outbuf */\n        /* last k sample used data from [j-filter_l/2,j+filter_l-filter_l/2] */\n\n        /* how many samples of input data were used: */\n        num_used.num_used = Math.min(len, filter_l + j - filter_l / 2);\n\n        /*\n         * adjust our input time counter. Incriment by the number of samples\n         * used, then normalize so that next output sample is at time 0, next\n         * input buffer is at time itime[ch]\n         */\n        gfc.itime[ch] += num_used.num_used - k * gfc.resample_ratio;\n\n        /* save the last BLACKSIZE samples into the inbuf_old buffer */\n        if (num_used.num_used >= BLACKSIZE) {\n            for (i = 0; i < BLACKSIZE; i++)\n                inbuf_old[i] = inbuf[in_bufferPos + num_used.num_used + i\n                - BLACKSIZE];\n        } else {\n            /* shift in num_used.num_used samples into inbuf_old */\n            var n_shift = BLACKSIZE - num_used.num_used;\n            /*\n             * number of samples to\n             * shift\n             */\n\n            /*\n             * shift n_shift samples by num_used.num_used, to make room for the\n             * num_used new samples\n             */\n            for (i = 0; i < n_shift; ++i)\n                inbuf_old[i] = inbuf_old[i + num_used.num_used];\n\n            /* shift in the num_used.num_used samples */\n            for (j = 0; i < BLACKSIZE; ++i, ++j)\n                inbuf_old[i] = inbuf[in_bufferPos + j];\n\n            assert(j == num_used.num_used);\n        }\n        return k;\n        /* return the number samples created at the new samplerate */\n    }\n\n    function fill_buffer(gfp, mfbuf, in_buffer, in_bufferPos, nsamples, io) {\n        var gfc = gfp.internal_flags;\n\n        /* copy in new samples into mfbuf, with resampling if necessary */\n        if ((gfc.resample_ratio < .9999) || (gfc.resample_ratio > 1.0001)) {\n            for (var ch = 0; ch < gfc.channels_out; ch++) {\n                var numUsed = new NumUsed();\n                io.n_out = fill_buffer_resample(gfp, mfbuf[ch], gfc.mf_size,\n                    gfp.framesize, in_buffer[ch], in_bufferPos, nsamples,\n                    numUsed, ch);\n                io.n_in = numUsed.num_used;\n            }\n        } else {\n            io.n_out = Math.min(gfp.framesize, nsamples);\n            io.n_in = io.n_out;\n            for (var i = 0; i < io.n_out; ++i) {\n                mfbuf[0][gfc.mf_size + i] = in_buffer[0][in_bufferPos + i];\n                if (gfc.channels_out == 2)\n                    mfbuf[1][gfc.mf_size + i] = in_buffer[1][in_bufferPos + i];\n            }\n        }\n    }\n\n}\n\nmodule.exports = Lame;\n","var common = require('./common.js');\nvar System = common.System;\nvar VbrMode = common.VbrMode;\nvar Float = common.Float;\nvar ShortBlock = common.ShortBlock;\nvar Util = common.Util;\nvar Arrays = common.Arrays;\nvar new_array_n = common.new_array_n;\nvar new_byte = common.new_byte;\nvar new_double = common.new_double;\nvar new_float = common.new_float;\nvar new_float_n = common.new_float_n;\nvar new_int = common.new_int;\nvar new_int_n = common.new_int_n;\nvar assert = common.assert;\n\nfunction Presets() {\n    function VBRPresets(qual, comp, compS,\n                        y, shThreshold, shThresholdS,\n                        adj, adjShort, lower,\n                        curve, sens, inter,\n                        joint, mod, fix) {\n        this.vbr_q = qual;\n        this.quant_comp = comp;\n        this.quant_comp_s = compS;\n        this.expY = y;\n        this.st_lrm = shThreshold;\n        this.st_s = shThresholdS;\n        this.masking_adj = adj;\n        this.masking_adj_short = adjShort;\n        this.ath_lower = lower;\n        this.ath_curve = curve;\n        this.ath_sensitivity = sens;\n        this.interch = inter;\n        this.safejoint = joint;\n        this.sfb21mod = mod;\n        this.msfix = fix;\n    }\n\n    function ABRPresets(kbps, comp, compS,\n                        joint, fix, shThreshold,\n                        shThresholdS, bass, sc,\n                        mask, lower, curve,\n                        interCh, sfScale) {\n        this.quant_comp = comp;\n        this.quant_comp_s = compS;\n        this.safejoint = joint;\n        this.nsmsfix = fix;\n        this.st_lrm = shThreshold;\n        this.st_s = shThresholdS;\n        this.nsbass = bass;\n        this.scale = sc;\n        this.masking_adj = mask;\n        this.ath_lower = lower;\n        this.ath_curve = curve;\n        this.interch = interCh;\n        this.sfscale = sfScale;\n    }\n\n    var lame;\n\n    this.setModules = function (_lame) {\n        lame = _lame;\n    };\n\n    /**\n     * <PRE>\n     * Switch mappings for VBR mode VBR_RH\n     *             vbr_q  qcomp_l  qcomp_s  expY  st_lrm   st_s  mask adj_l  adj_s  ath_lower  ath_curve  ath_sens  interChR  safejoint sfb21mod  msfix\n     * </PRE>\n     */\n    var vbr_old_switch_map = [\n        new VBRPresets(0, 9, 9, 0, 5.20, 125.0, -4.2, -6.3, 4.8, 1, 0, 0, 2, 21, 0.97),\n        new VBRPresets(1, 9, 9, 0, 5.30, 125.0, -3.6, -5.6, 4.5, 1.5, 0, 0, 2, 21, 1.35),\n        new VBRPresets(2, 9, 9, 0, 5.60, 125.0, -2.2, -3.5, 2.8, 2, 0, 0, 2, 21, 1.49),\n        new VBRPresets(3, 9, 9, 1, 5.80, 130.0, -1.8, -2.8, 2.6, 3, -4, 0, 2, 20, 1.64),\n        new VBRPresets(4, 9, 9, 1, 6.00, 135.0, -0.7, -1.1, 1.1, 3.5, -8, 0, 2, 0, 1.79),\n        new VBRPresets(5, 9, 9, 1, 6.40, 140.0, 0.5, 0.4, -7.5, 4, -12, 0.0002, 0, 0, 1.95),\n        new VBRPresets(6, 9, 9, 1, 6.60, 145.0, 0.67, 0.65, -14.7, 6.5, -19, 0.0004, 0, 0, 2.30),\n        new VBRPresets(7, 9, 9, 1, 6.60, 145.0, 0.8, 0.75, -19.7, 8, -22, 0.0006, 0, 0, 2.70),\n        new VBRPresets(8, 9, 9, 1, 6.60, 145.0, 1.2, 1.15, -27.5, 10, -23, 0.0007, 0, 0, 0),\n        new VBRPresets(9, 9, 9, 1, 6.60, 145.0, 1.6, 1.6, -36, 11, -25, 0.0008, 0, 0, 0),\n        new VBRPresets(10, 9, 9, 1, 6.60, 145.0, 2.0, 2.0, -36, 12, -25, 0.0008, 0, 0, 0)\n    ];\n\n    /**\n     * <PRE>\n     *                 vbr_q  qcomp_l  qcomp_s  expY  st_lrm   st_s  mask adj_l  adj_s  ath_lower  ath_curve  ath_sens  interChR  safejoint sfb21mod  msfix\n     * </PRE>\n     */\n    var vbr_psy_switch_map = [\n        new VBRPresets(0, 9, 9, 0, 4.20, 25.0, -7.0, -4.0, 7.5, 1, 0, 0, 2, 26, 0.97),\n        new VBRPresets(1, 9, 9, 0, 4.20, 25.0, -5.6, -3.6, 4.5, 1.5, 0, 0, 2, 21, 1.35),\n        new VBRPresets(2, 9, 9, 0, 4.20, 25.0, -4.4, -1.8, 2, 2, 0, 0, 2, 18, 1.49),\n        new VBRPresets(3, 9, 9, 1, 4.20, 25.0, -3.4, -1.25, 1.1, 3, -4, 0, 2, 15, 1.64),\n        new VBRPresets(4, 9, 9, 1, 4.20, 25.0, -2.2, 0.1, 0, 3.5, -8, 0, 2, 0, 1.79),\n        new VBRPresets(5, 9, 9, 1, 4.20, 25.0, -1.0, 1.65, -7.7, 4, -12, 0.0002, 0, 0, 1.95),\n        new VBRPresets(6, 9, 9, 1, 4.20, 25.0, -0.0, 2.47, -7.7, 6.5, -19, 0.0004, 0, 0, 2),\n        new VBRPresets(7, 9, 9, 1, 4.20, 25.0, 0.5, 2.0, -14.5, 8, -22, 0.0006, 0, 0, 2),\n        new VBRPresets(8, 9, 9, 1, 4.20, 25.0, 1.0, 2.4, -22.0, 10, -23, 0.0007, 0, 0, 2),\n        new VBRPresets(9, 9, 9, 1, 4.20, 25.0, 1.5, 2.95, -30.0, 11, -25, 0.0008, 0, 0, 2),\n        new VBRPresets(10, 9, 9, 1, 4.20, 25.0, 2.0, 2.95, -36.0, 12, -30, 0.0008, 0, 0, 2)\n    ];\n\n    function apply_vbr_preset(gfp, a, enforce) {\n        var vbr_preset = gfp.VBR == VbrMode.vbr_rh ? vbr_old_switch_map\n            : vbr_psy_switch_map;\n\n        var x = gfp.VBR_q_frac;\n        var p = vbr_preset[a];\n        var q = vbr_preset[a + 1];\n        var set = p;\n\n        // NOOP(vbr_q);\n        // NOOP(quant_comp);\n        // NOOP(quant_comp_s);\n        // NOOP(expY);\n        p.st_lrm = p.st_lrm + x * (q.st_lrm - p.st_lrm);\n        // LERP(st_lrm);\n        p.st_s = p.st_s + x * (q.st_s - p.st_s);\n        // LERP(st_s);\n        p.masking_adj = p.masking_adj + x * (q.masking_adj - p.masking_adj);\n        // LERP(masking_adj);\n        p.masking_adj_short = p.masking_adj_short + x\n            * (q.masking_adj_short - p.masking_adj_short);\n        // LERP(masking_adj_short);\n        p.ath_lower = p.ath_lower + x * (q.ath_lower - p.ath_lower);\n        // LERP(ath_lower);\n        p.ath_curve = p.ath_curve + x * (q.ath_curve - p.ath_curve);\n        // LERP(ath_curve);\n        p.ath_sensitivity = p.ath_sensitivity + x\n            * (q.ath_sensitivity - p.ath_sensitivity);\n        // LERP(ath_sensitivity);\n        p.interch = p.interch + x * (q.interch - p.interch);\n        // LERP(interch);\n        // NOOP(safejoint);\n        // NOOP(sfb21mod);\n        p.msfix = p.msfix + x * (q.msfix - p.msfix);\n        // LERP(msfix);\n\n        lame_set_VBR_q(gfp, set.vbr_q);\n\n        if (enforce != 0)\n            gfp.quant_comp = set.quant_comp;\n        else if (!(Math.abs(gfp.quant_comp - -1) > 0))\n            gfp.quant_comp = set.quant_comp;\n        // SET_OPTION(quant_comp, set.quant_comp, -1);\n        if (enforce != 0)\n            gfp.quant_comp_short = set.quant_comp_s;\n        else if (!(Math.abs(gfp.quant_comp_short - -1) > 0))\n            gfp.quant_comp_short = set.quant_comp_s;\n        // SET_OPTION(quant_comp_short, set.quant_comp_s, -1);\n        if (set.expY != 0) {\n            gfp.experimentalY = set.expY != 0;\n        }\n        if (enforce != 0)\n            gfp.internal_flags.nsPsy.attackthre = set.st_lrm;\n        else if (!(Math.abs(gfp.internal_flags.nsPsy.attackthre - -1) > 0))\n            gfp.internal_flags.nsPsy.attackthre = set.st_lrm;\n        // SET_OPTION(short_threshold_lrm, set.st_lrm, -1);\n        if (enforce != 0)\n            gfp.internal_flags.nsPsy.attackthre_s = set.st_s;\n        else if (!(Math.abs(gfp.internal_flags.nsPsy.attackthre_s - -1) > 0))\n            gfp.internal_flags.nsPsy.attackthre_s = set.st_s;\n        // SET_OPTION(short_threshold_s, set.st_s, -1);\n        if (enforce != 0)\n            gfp.maskingadjust = set.masking_adj;\n        else if (!(Math.abs(gfp.maskingadjust - 0) > 0))\n            gfp.maskingadjust = set.masking_adj;\n        // SET_OPTION(maskingadjust, set.masking_adj, 0);\n        if (enforce != 0)\n            gfp.maskingadjust_short = set.masking_adj_short;\n        else if (!(Math.abs(gfp.maskingadjust_short - 0) > 0))\n            gfp.maskingadjust_short = set.masking_adj_short;\n        // SET_OPTION(maskingadjust_short, set.masking_adj_short, 0);\n        if (enforce != 0)\n            gfp.ATHlower = -set.ath_lower / 10.0;\n        else if (!(Math.abs((-gfp.ATHlower * 10.0) - 0) > 0))\n            gfp.ATHlower = -set.ath_lower / 10.0;\n        // SET_OPTION(ATHlower, set.ath_lower, 0);\n        if (enforce != 0)\n            gfp.ATHcurve = set.ath_curve;\n        else if (!(Math.abs(gfp.ATHcurve - -1) > 0))\n            gfp.ATHcurve = set.ath_curve;\n        // SET_OPTION(ATHcurve, set.ath_curve, -1);\n        if (enforce != 0)\n            gfp.athaa_sensitivity = set.ath_sensitivity;\n        else if (!(Math.abs(gfp.athaa_sensitivity - -1) > 0))\n            gfp.athaa_sensitivity = set.ath_sensitivity;\n        // SET_OPTION(athaa_sensitivity, set.ath_sensitivity, 0);\n        if (set.interch > 0) {\n            if (enforce != 0)\n                gfp.interChRatio = set.interch;\n            else if (!(Math.abs(gfp.interChRatio - -1) > 0))\n                gfp.interChRatio = set.interch;\n            // SET_OPTION(interChRatio, set.interch, -1);\n        }\n\n        /* parameters for which there is no proper set/get interface */\n        if (set.safejoint > 0) {\n            gfp.exp_nspsytune = gfp.exp_nspsytune | set.safejoint;\n        }\n        if (set.sfb21mod > 0) {\n            gfp.exp_nspsytune = gfp.exp_nspsytune | (set.sfb21mod << 20);\n        }\n        if (enforce != 0)\n            gfp.msfix = set.msfix;\n        else if (!(Math.abs(gfp.msfix - -1) > 0))\n            gfp.msfix = set.msfix;\n        // SET_OPTION(msfix, set.msfix, -1);\n\n        if (enforce == 0) {\n            gfp.VBR_q = a;\n            gfp.VBR_q_frac = x;\n        }\n    }\n\n    /**\n     * <PRE>\n     *  Switch mappings for ABR mode\n     *\n     *              kbps  quant q_s safejoint nsmsfix st_lrm  st_s  ns-bass scale   msk ath_lwr ath_curve  interch , sfscale\n     * </PRE>\n     */\n    var abr_switch_map = [\n        new ABRPresets(8, 9, 9, 0, 0, 6.60, 145, 0, 0.95, 0, -30.0, 11, 0.0012, 1), /*   8, impossible to use in stereo */\n        new ABRPresets(16, 9, 9, 0, 0, 6.60, 145, 0, 0.95, 0, -25.0, 11, 0.0010, 1), /*  16 */\n        new ABRPresets(24, 9, 9, 0, 0, 6.60, 145, 0, 0.95, 0, -20.0, 11, 0.0010, 1), /*  24 */\n        new ABRPresets(32, 9, 9, 0, 0, 6.60, 145, 0, 0.95, 0, -15.0, 11, 0.0010, 1), /*  32 */\n        new ABRPresets(40, 9, 9, 0, 0, 6.60, 145, 0, 0.95, 0, -10.0, 11, 0.0009, 1), /*  40 */\n        new ABRPresets(48, 9, 9, 0, 0, 6.60, 145, 0, 0.95, 0, -10.0, 11, 0.0009, 1), /*  48 */\n        new ABRPresets(56, 9, 9, 0, 0, 6.60, 145, 0, 0.95, 0, -6.0, 11, 0.0008, 1), /*  56 */\n        new ABRPresets(64, 9, 9, 0, 0, 6.60, 145, 0, 0.95, 0, -2.0, 11, 0.0008, 1), /*  64 */\n        new ABRPresets(80, 9, 9, 0, 0, 6.60, 145, 0, 0.95, 0, .0, 8, 0.0007, 1), /*  80 */\n        new ABRPresets(96, 9, 9, 0, 2.50, 6.60, 145, 0, 0.95, 0, 1.0, 5.5, 0.0006, 1), /*  96 */\n        new ABRPresets(112, 9, 9, 0, 2.25, 6.60, 145, 0, 0.95, 0, 2.0, 4.5, 0.0005, 1), /* 112 */\n        new ABRPresets(128, 9, 9, 0, 1.95, 6.40, 140, 0, 0.95, 0, 3.0, 4, 0.0002, 1), /* 128 */\n        new ABRPresets(160, 9, 9, 1, 1.79, 6.00, 135, 0, 0.95, -2, 5.0, 3.5, 0, 1), /* 160 */\n        new ABRPresets(192, 9, 9, 1, 1.49, 5.60, 125, 0, 0.97, -4, 7.0, 3, 0, 0), /* 192 */\n        new ABRPresets(224, 9, 9, 1, 1.25, 5.20, 125, 0, 0.98, -6, 9.0, 2, 0, 0), /* 224 */\n        new ABRPresets(256, 9, 9, 1, 0.97, 5.20, 125, 0, 1.00, -8, 10.0, 1, 0, 0), /* 256 */\n        new ABRPresets(320, 9, 9, 1, 0.90, 5.20, 125, 0, 1.00, -10, 12.0, 0, 0, 0)  /* 320 */\n    ];\n\n    function apply_abr_preset(gfp, preset, enforce) {\n        /* Variables for the ABR stuff */\n        var actual_bitrate = preset;\n\n        var r = lame.nearestBitrateFullIndex(preset);\n\n        gfp.VBR = VbrMode.vbr_abr;\n        gfp.VBR_mean_bitrate_kbps = actual_bitrate;\n        gfp.VBR_mean_bitrate_kbps = Math.min(gfp.VBR_mean_bitrate_kbps, 320);\n        gfp.VBR_mean_bitrate_kbps = Math.max(gfp.VBR_mean_bitrate_kbps, 8);\n        gfp.brate = gfp.VBR_mean_bitrate_kbps;\n        if (gfp.VBR_mean_bitrate_kbps > 320) {\n            gfp.disable_reservoir = true;\n        }\n\n        /* parameters for which there is no proper set/get interface */\n        if (abr_switch_map[r].safejoint > 0)\n            gfp.exp_nspsytune = gfp.exp_nspsytune | 2;\n        /* safejoint */\n\n        if (abr_switch_map[r].sfscale > 0) {\n            gfp.internal_flags.noise_shaping = 2;\n        }\n        /* ns-bass tweaks */\n        if (Math.abs(abr_switch_map[r].nsbass) > 0) {\n            var k = (int)(abr_switch_map[r].nsbass * 4);\n            if (k < 0)\n                k += 64;\n            gfp.exp_nspsytune = gfp.exp_nspsytune | (k << 2);\n        }\n\n        if (enforce != 0)\n            gfp.quant_comp = abr_switch_map[r].quant_comp;\n        else if (!(Math.abs(gfp.quant_comp - -1) > 0))\n            gfp.quant_comp = abr_switch_map[r].quant_comp;\n        // SET_OPTION(quant_comp, abr_switch_map[r].quant_comp, -1);\n        if (enforce != 0)\n            gfp.quant_comp_short = abr_switch_map[r].quant_comp_s;\n        else if (!(Math.abs(gfp.quant_comp_short - -1) > 0))\n            gfp.quant_comp_short = abr_switch_map[r].quant_comp_s;\n        // SET_OPTION(quant_comp_short, abr_switch_map[r].quant_comp_s, -1);\n\n        if (enforce != 0)\n            gfp.msfix = abr_switch_map[r].nsmsfix;\n        else if (!(Math.abs(gfp.msfix - -1) > 0))\n            gfp.msfix = abr_switch_map[r].nsmsfix;\n        // SET_OPTION(msfix, abr_switch_map[r].nsmsfix, -1);\n\n        if (enforce != 0)\n            gfp.internal_flags.nsPsy.attackthre = abr_switch_map[r].st_lrm;\n        else if (!(Math.abs(gfp.internal_flags.nsPsy.attackthre - -1) > 0))\n            gfp.internal_flags.nsPsy.attackthre = abr_switch_map[r].st_lrm;\n        // SET_OPTION(short_threshold_lrm, abr_switch_map[r].st_lrm, -1);\n        if (enforce != 0)\n            gfp.internal_flags.nsPsy.attackthre_s = abr_switch_map[r].st_s;\n        else if (!(Math.abs(gfp.internal_flags.nsPsy.attackthre_s - -1) > 0))\n            gfp.internal_flags.nsPsy.attackthre_s = abr_switch_map[r].st_s;\n        // SET_OPTION(short_threshold_s, abr_switch_map[r].st_s, -1);\n\n        /*\n         * ABR seems to have big problems with clipping, especially at low\n         * bitrates\n         */\n        /*\n         * so we compensate for that here by using a scale value depending on\n         * bitrate\n         */\n        if (enforce != 0)\n            gfp.scale = abr_switch_map[r].scale;\n        else if (!(Math.abs(gfp.scale - -1) > 0))\n            gfp.scale = abr_switch_map[r].scale;\n        // SET_OPTION(scale, abr_switch_map[r].scale, -1);\n\n        if (enforce != 0)\n            gfp.maskingadjust = abr_switch_map[r].masking_adj;\n        else if (!(Math.abs(gfp.maskingadjust - 0) > 0))\n            gfp.maskingadjust = abr_switch_map[r].masking_adj;\n        // SET_OPTION(maskingadjust, abr_switch_map[r].masking_adj, 0);\n        if (abr_switch_map[r].masking_adj > 0) {\n            if (enforce != 0)\n                gfp.maskingadjust_short = (abr_switch_map[r].masking_adj * .9);\n            else if (!(Math.abs(gfp.maskingadjust_short - 0) > 0))\n                gfp.maskingadjust_short = (abr_switch_map[r].masking_adj * .9);\n            // SET_OPTION(maskingadjust_short, abr_switch_map[r].masking_adj *\n            // .9, 0);\n        } else {\n            if (enforce != 0)\n                gfp.maskingadjust_short = (abr_switch_map[r].masking_adj * 1.1);\n            else if (!(Math.abs(gfp.maskingadjust_short - 0) > 0))\n                gfp.maskingadjust_short = (abr_switch_map[r].masking_adj * 1.1);\n            // SET_OPTION(maskingadjust_short, abr_switch_map[r].masking_adj *\n            // 1.1, 0);\n        }\n\n        if (enforce != 0)\n            gfp.ATHlower = -abr_switch_map[r].ath_lower / 10.;\n        else if (!(Math.abs((-gfp.ATHlower * 10.) - 0) > 0))\n            gfp.ATHlower = -abr_switch_map[r].ath_lower / 10.;\n        // SET_OPTION(ATHlower, abr_switch_map[r].ath_lower, 0);\n        if (enforce != 0)\n            gfp.ATHcurve = abr_switch_map[r].ath_curve;\n        else if (!(Math.abs(gfp.ATHcurve - -1) > 0))\n            gfp.ATHcurve = abr_switch_map[r].ath_curve;\n        // SET_OPTION(ATHcurve, abr_switch_map[r].ath_curve, -1);\n\n        if (enforce != 0)\n            gfp.interChRatio = abr_switch_map[r].interch;\n        else if (!(Math.abs(gfp.interChRatio - -1) > 0))\n            gfp.interChRatio = abr_switch_map[r].interch;\n        // SET_OPTION(interChRatio, abr_switch_map[r].interch, -1);\n\n        return preset;\n    }\n\n    this.apply_preset = function(gfp, preset, enforce) {\n        /* translate legacy presets */\n        switch (preset) {\n            case Lame.R3MIX:\n            {\n                preset = Lame.V3;\n                gfp.VBR = VbrMode.vbr_mtrh;\n                break;\n            }\n            case Lame.MEDIUM:\n            {\n                preset = Lame.V4;\n                gfp.VBR = VbrMode.vbr_rh;\n                break;\n            }\n            case Lame.MEDIUM_FAST:\n            {\n                preset = Lame.V4;\n                gfp.VBR = VbrMode.vbr_mtrh;\n                break;\n            }\n            case Lame.STANDARD:\n            {\n                preset = Lame.V2;\n                gfp.VBR = VbrMode.vbr_rh;\n                break;\n            }\n            case Lame.STANDARD_FAST:\n            {\n                preset = Lame.V2;\n                gfp.VBR = VbrMode.vbr_mtrh;\n                break;\n            }\n            case Lame.EXTREME:\n            {\n                preset = Lame.V0;\n                gfp.VBR = VbrMode.vbr_rh;\n                break;\n            }\n            case Lame.EXTREME_FAST:\n            {\n                preset = Lame.V0;\n                gfp.VBR = VbrMode.vbr_mtrh;\n                break;\n            }\n            case Lame.INSANE:\n            {\n                preset = 320;\n                gfp.preset = preset;\n                apply_abr_preset(gfp, preset, enforce);\n                gfp.VBR = VbrMode.vbr_off;\n                return preset;\n            }\n        }\n\n        gfp.preset = preset;\n        {\n            switch (preset) {\n                case Lame.V9:\n                    apply_vbr_preset(gfp, 9, enforce);\n                    return preset;\n                case Lame.V8:\n                    apply_vbr_preset(gfp, 8, enforce);\n                    return preset;\n                case Lame.V7:\n                    apply_vbr_preset(gfp, 7, enforce);\n                    return preset;\n                case Lame.V6:\n                    apply_vbr_preset(gfp, 6, enforce);\n                    return preset;\n                case Lame.V5:\n                    apply_vbr_preset(gfp, 5, enforce);\n                    return preset;\n                case Lame.V4:\n                    apply_vbr_preset(gfp, 4, enforce);\n                    return preset;\n                case Lame.V3:\n                    apply_vbr_preset(gfp, 3, enforce);\n                    return preset;\n                case Lame.V2:\n                    apply_vbr_preset(gfp, 2, enforce);\n                    return preset;\n                case Lame.V1:\n                    apply_vbr_preset(gfp, 1, enforce);\n                    return preset;\n                case Lame.V0:\n                    apply_vbr_preset(gfp, 0, enforce);\n                    return preset;\n                default:\n                    break;\n            }\n        }\n        if (8 <= preset && preset <= 320) {\n            return apply_abr_preset(gfp, preset, enforce);\n        }\n\n        /* no corresponding preset found */\n        gfp.preset = 0;\n        return preset;\n    }\n\n    // Rest from getset.c:\n\n    /**\n     * VBR quality level.<BR>\n     * 0 = highest<BR>\n     * 9 = lowest\n     */\n    function lame_set_VBR_q(gfp, VBR_q) {\n        var ret = 0;\n\n        if (0 > VBR_q) {\n            /* Unknown VBR quality level! */\n            ret = -1;\n            VBR_q = 0;\n        }\n        if (9 < VBR_q) {\n            ret = -1;\n            VBR_q = 9;\n        }\n\n        gfp.VBR_q = VBR_q;\n        gfp.VBR_q_frac = 0;\n        return ret;\n    }\n\n}\n\nmodule.exports = Presets;\n","function VBRQuantize() {\n    var qupvt;\n    var tak;\n\n    this.setModules = function (_qupvt, _tk) {\n        qupvt = _qupvt;\n        tak = _tk;\n    }\n    //TODO\n\n}\n\nmodule.exports = VBRQuantize;\n","//package mp3;\n\nfunction CalcNoiseResult() {\n    /**\n     * sum of quantization noise > masking\n     */\n    this.over_noise = 0.;\n    /**\n     * sum of all quantization noise\n     */\n    this.tot_noise = 0.;\n    /**\n     * max quantization noise\n     */\n    this.max_noise = 0.;\n    /**\n     * number of quantization noise > masking\n     */\n    this.over_count = 0;\n    /**\n     * SSD-like cost of distorted bands\n     */\n    this.over_SSD = 0;\n    this.bits = 0;\n}\n\nmodule.exports = CalcNoiseResult;\n","var common = require('./common.js');\nvar new_float = common.new_float;\nvar new_int = common.new_int;\nvar assert = common.assert;\n\nfunction CalcNoiseData() {\n    this.global_gain = 0;\n    this.sfb_count1 = 0;\n    this.step = new_int(39);\n    this.noise = new_float(39);\n    this.noise_log = new_float(39);\n}\n\nmodule.exports = CalcNoiseData;\n","/*\n * MP3 quantization\n *\n *      Copyright (c) 1999-2000 Mark Taylor\n *      Copyright (c) 1999-2003 Takehiro Tominaga\n *      Copyright (c) 2000-2007 Robert Hegemann\n *      Copyright (c) 2001-2005 Gabriel Bouvigne\n *\n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2 of the License, or (at your option) any later version.\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.     See the GNU\n * Library General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the\n * Free Software Foundation, Inc., 59 Temple Place - Suite 330,\n * Boston, MA 02111-1307, USA.\n */\n\n/* $Id: Quantize.java,v 1.24 2011/05/24 20:48:06 kenchis Exp $ */\n\n//package mp3;\n\n//import java.util.Arrays;\nvar common = require('./common.js');\nvar System = common.System;\nvar VbrMode = common.VbrMode;\nvar Float = common.Float;\nvar ShortBlock = common.ShortBlock;\nvar Util = common.Util;\nvar Arrays = common.Arrays;\nvar new_array_n = common.new_array_n;\nvar new_byte = common.new_byte;\nvar new_double = common.new_double;\nvar new_float = common.new_float;\nvar new_float_n = common.new_float_n;\nvar new_int = common.new_int;\nvar new_int_n = common.new_int_n;\nvar assert = common.assert;\n\nvar VBRQuantize = require('./VBRQuantize.js');\nvar CalcNoiseResult = require('./CalcNoiseResult.js');\nvar CalcNoiseData = require('./CalcNoiseData.js');\nvar Encoder = require('./Encoder.js');\nvar GrInfo = require('./GrInfo.js');\nvar L3Side = require('./L3Side.js');\n\nfunction Quantize() {\n    var bs;\n    this.rv = null;\n    var rv;\n    this.qupvt = null;\n    var qupvt;\n\n    var vbr = new VBRQuantize();\n    var tk;\n\n    this.setModules = function (_bs, _rv, _qupvt, _tk) {\n        bs = _bs;\n        rv = _rv;\n        this.rv = _rv;\n        qupvt = _qupvt;\n        this.qupvt = _qupvt;\n        tk = _tk;\n        vbr.setModules(qupvt, tk);\n    }\n\n    /**\n     * convert from L/R <. Mid/Side\n     */\n    this.ms_convert = function (l3_side, gr) {\n        for (var i = 0; i < 576; ++i) {\n            var l = l3_side.tt[gr][0].xr[i];\n            var r = l3_side.tt[gr][1].xr[i];\n            l3_side.tt[gr][0].xr[i] = (l + r) * (Util.SQRT2 * 0.5);\n            l3_side.tt[gr][1].xr[i] = (l - r) * (Util.SQRT2 * 0.5);\n        }\n    };\n\n    /**\n     * mt 6/99\n     *\n     * initializes cod_info, scalefac and xrpow\n     *\n     * returns 0 if all energies in xr are zero, else 1\n     */\n    function init_xrpow_core(cod_info, xrpow, upper, sum) {\n        sum = 0;\n        for (var i = 0; i <= upper; ++i) {\n            var tmp = Math.abs(cod_info.xr[i]);\n            sum += tmp;\n            xrpow[i] = Math.sqrt(tmp * Math.sqrt(tmp));\n\n            if (xrpow[i] > cod_info.xrpow_max)\n                cod_info.xrpow_max = xrpow[i];\n        }\n        return sum;\n    }\n\n    this.init_xrpow = function (gfc, cod_info, xrpow) {\n        var sum = 0;\n        var upper = 0 | cod_info.max_nonzero_coeff;\n\n        assert(xrpow != null);\n        cod_info.xrpow_max = 0;\n\n        /*\n         * check if there is some energy we have to quantize and calculate xrpow\n         * matching our fresh scalefactors\n         */\n        assert(0 <= upper && upper <= 575);\n\n        Arrays.fill(xrpow, upper, 576, 0);\n\n        sum = init_xrpow_core(cod_info, xrpow, upper, sum);\n\n        /*\n         * return 1 if we have something to quantize, else 0\n         */\n        if (sum > 1E-20) {\n            var j = 0;\n            if ((gfc.substep_shaping & 2) != 0)\n                j = 1;\n\n            for (var i = 0; i < cod_info.psymax; i++)\n                gfc.pseudohalf[i] = j;\n\n            return true;\n        }\n\n        Arrays.fill(cod_info.l3_enc, 0, 576, 0);\n        return false;\n    }\n\n    /**\n     * Gabriel Bouvigne feb/apr 2003<BR>\n     * Analog silence detection in partitionned sfb21 or sfb12 for short blocks\n     *\n     * From top to bottom of sfb, changes to 0 coeffs which are below ath. It\n     * stops on the first coeff higher than ath.\n     */\n    function psfb21_analogsilence(gfc, cod_info) {\n        var ath = gfc.ATH;\n        var xr = cod_info.xr;\n\n        if (cod_info.block_type != Encoder.SHORT_TYPE) {\n            /* NORM, START or STOP type, but not SHORT blocks */\n            var stop = false;\n            for (var gsfb = Encoder.PSFB21 - 1; gsfb >= 0 && !stop; gsfb--) {\n                var start = gfc.scalefac_band.psfb21[gsfb];\n                var end = gfc.scalefac_band.psfb21[gsfb + 1];\n                var ath21 = qupvt.athAdjust(ath.adjust, ath.psfb21[gsfb],\n                    ath.floor);\n\n                if (gfc.nsPsy.longfact[21] > 1e-12)\n                    ath21 *= gfc.nsPsy.longfact[21];\n\n                for (var j = end - 1; j >= start; j--) {\n                    if (Math.abs(xr[j]) < ath21)\n                        xr[j] = 0;\n                    else {\n                        stop = true;\n                        break;\n                    }\n                }\n            }\n        } else {\n            /* note: short blocks coeffs are reordered */\n            for (var block = 0; block < 3; block++) {\n                var stop = false;\n                for (var gsfb = Encoder.PSFB12 - 1; gsfb >= 0 && !stop; gsfb--) {\n                    var start = gfc.scalefac_band.s[12]\n                        * 3\n                        + (gfc.scalefac_band.s[13] - gfc.scalefac_band.s[12])\n                        * block\n                        + (gfc.scalefac_band.psfb12[gsfb] - gfc.scalefac_band.psfb12[0]);\n                    var end = start\n                        + (gfc.scalefac_band.psfb12[gsfb + 1] - gfc.scalefac_band.psfb12[gsfb]);\n                    var ath12 = qupvt.athAdjust(ath.adjust, ath.psfb12[gsfb],\n                        ath.floor);\n\n                    if (gfc.nsPsy.shortfact[12] > 1e-12)\n                        ath12 *= gfc.nsPsy.shortfact[12];\n\n                    for (var j = end - 1; j >= start; j--) {\n                        if (Math.abs(xr[j]) < ath12)\n                            xr[j] = 0;\n                        else {\n                            stop = true;\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n\n    }\n\n    this.init_outer_loop = function (gfc, cod_info) {\n        /*\n         * initialize fresh cod_info\n         */\n        cod_info.part2_3_length = 0;\n        cod_info.big_values = 0;\n        cod_info.count1 = 0;\n        cod_info.global_gain = 210;\n        cod_info.scalefac_compress = 0;\n        /* mixed_block_flag, block_type was set in psymodel.c */\n        cod_info.table_select[0] = 0;\n        cod_info.table_select[1] = 0;\n        cod_info.table_select[2] = 0;\n        cod_info.subblock_gain[0] = 0;\n        cod_info.subblock_gain[1] = 0;\n        cod_info.subblock_gain[2] = 0;\n        cod_info.subblock_gain[3] = 0;\n        /* this one is always 0 */\n        cod_info.region0_count = 0;\n        cod_info.region1_count = 0;\n        cod_info.preflag = 0;\n        cod_info.scalefac_scale = 0;\n        cod_info.count1table_select = 0;\n        cod_info.part2_length = 0;\n        cod_info.sfb_lmax = Encoder.SBPSY_l;\n        cod_info.sfb_smin = Encoder.SBPSY_s;\n        cod_info.psy_lmax = gfc.sfb21_extra ? Encoder.SBMAX_l : Encoder.SBPSY_l;\n        cod_info.psymax = cod_info.psy_lmax;\n        cod_info.sfbmax = cod_info.sfb_lmax;\n        cod_info.sfbdivide = 11;\n        for (var sfb = 0; sfb < Encoder.SBMAX_l; sfb++) {\n            cod_info.width[sfb] = gfc.scalefac_band.l[sfb + 1]\n                - gfc.scalefac_band.l[sfb];\n            /* which is always 0. */\n            cod_info.window[sfb] = 3;\n        }\n        if (cod_info.block_type == Encoder.SHORT_TYPE) {\n            var ixwork = new_float(576);\n\n            cod_info.sfb_smin = 0;\n            cod_info.sfb_lmax = 0;\n            if (cod_info.mixed_block_flag != 0) {\n                /*\n                 * MPEG-1: sfbs 0-7 long block, 3-12 short blocks MPEG-2(.5):\n                 * sfbs 0-5 long block, 3-12 short blocks\n                 */\n                cod_info.sfb_smin = 3;\n                cod_info.sfb_lmax = gfc.mode_gr * 2 + 4;\n            }\n            cod_info.psymax = cod_info.sfb_lmax\n                + 3\n                * ((gfc.sfb21_extra ? Encoder.SBMAX_s : Encoder.SBPSY_s) - cod_info.sfb_smin);\n            cod_info.sfbmax = cod_info.sfb_lmax + 3\n                * (Encoder.SBPSY_s - cod_info.sfb_smin);\n            cod_info.sfbdivide = cod_info.sfbmax - 18;\n            cod_info.psy_lmax = cod_info.sfb_lmax;\n            /* re-order the short blocks, for more efficient encoding below */\n            /* By Takehiro TOMINAGA */\n            /*\n             * Within each scalefactor band, data is given for successive time\n             * windows, beginning with window 0 and ending with window 2. Within\n             * each window, the quantized values are then arranged in order of\n             * increasing frequency...\n             */\n            var ix = gfc.scalefac_band.l[cod_info.sfb_lmax];\n            System.arraycopy(cod_info.xr, 0, ixwork, 0, 576);\n            for (var sfb = cod_info.sfb_smin; sfb < Encoder.SBMAX_s; sfb++) {\n                var start = gfc.scalefac_band.s[sfb];\n                var end = gfc.scalefac_band.s[sfb + 1];\n                for (var window = 0; window < 3; window++) {\n                    for (var l = start; l < end; l++) {\n                        cod_info.xr[ix++] = ixwork[3 * l + window];\n                    }\n                }\n            }\n\n            var j = cod_info.sfb_lmax;\n            for (var sfb = cod_info.sfb_smin; sfb < Encoder.SBMAX_s; sfb++) {\n                cod_info.width[j] = cod_info.width[j + 1] = cod_info.width[j + 2] = gfc.scalefac_band.s[sfb + 1]\n                    - gfc.scalefac_band.s[sfb];\n                cod_info.window[j] = 0;\n                cod_info.window[j + 1] = 1;\n                cod_info.window[j + 2] = 2;\n                j += 3;\n            }\n        }\n\n        cod_info.count1bits = 0;\n        cod_info.sfb_partition_table = qupvt.nr_of_sfb_block[0][0];\n        cod_info.slen[0] = 0;\n        cod_info.slen[1] = 0;\n        cod_info.slen[2] = 0;\n        cod_info.slen[3] = 0;\n\n        cod_info.max_nonzero_coeff = 575;\n\n        /*\n         * fresh scalefactors are all zero\n         */\n        Arrays.fill(cod_info.scalefac, 0);\n\n        psfb21_analogsilence(gfc, cod_info);\n    };\n\n    function BinSearchDirection(ordinal) {\n        this.ordinal = ordinal;\n    }\n\n    BinSearchDirection.BINSEARCH_NONE = new BinSearchDirection(0);\n    BinSearchDirection.BINSEARCH_UP = new BinSearchDirection(1);\n    BinSearchDirection.BINSEARCH_DOWN = new BinSearchDirection(2);\n\n    /**\n     * author/date??\n     *\n     * binary step size search used by outer_loop to get a quantizer step size\n     * to start with\n     */\n    function bin_search_StepSize(gfc, cod_info, desired_rate, ch, xrpow) {\n        var nBits;\n        var CurrentStep = gfc.CurrentStep[ch];\n        var flagGoneOver = false;\n        var start = gfc.OldValue[ch];\n        var Direction = BinSearchDirection.BINSEARCH_NONE;\n        cod_info.global_gain = start;\n        desired_rate -= cod_info.part2_length;\n\n        assert(CurrentStep != 0);\n        for (; ;) {\n            var step;\n            nBits = tk.count_bits(gfc, xrpow, cod_info, null);\n\n            if (CurrentStep == 1 || nBits == desired_rate)\n                break;\n            /* nothing to adjust anymore */\n\n            if (nBits > desired_rate) {\n                /* increase Quantize_StepSize */\n                if (Direction == BinSearchDirection.BINSEARCH_DOWN)\n                    flagGoneOver = true;\n\n                if (flagGoneOver)\n                    CurrentStep /= 2;\n                Direction = BinSearchDirection.BINSEARCH_UP;\n                step = CurrentStep;\n            } else {\n                /* decrease Quantize_StepSize */\n                if (Direction == BinSearchDirection.BINSEARCH_UP)\n                    flagGoneOver = true;\n\n                if (flagGoneOver)\n                    CurrentStep /= 2;\n                Direction = BinSearchDirection.BINSEARCH_DOWN;\n                step = -CurrentStep;\n            }\n            cod_info.global_gain += step;\n            if (cod_info.global_gain < 0) {\n                cod_info.global_gain = 0;\n                flagGoneOver = true;\n            }\n            if (cod_info.global_gain > 255) {\n                cod_info.global_gain = 255;\n                flagGoneOver = true;\n            }\n        }\n\n        assert(cod_info.global_gain >= 0);\n        assert(cod_info.global_gain < 256);\n\n        while (nBits > desired_rate && cod_info.global_gain < 255) {\n            cod_info.global_gain++;\n            nBits = tk.count_bits(gfc, xrpow, cod_info, null);\n        }\n        gfc.CurrentStep[ch] = (start - cod_info.global_gain >= 4) ? 4 : 2;\n        gfc.OldValue[ch] = cod_info.global_gain;\n        cod_info.part2_3_length = nBits;\n        return nBits;\n    }\n\n    this.trancate_smallspectrums = function (gfc, gi, l3_xmin, work) {\n        var distort = new_float(L3Side.SFBMAX);\n\n        if ((0 == (gfc.substep_shaping & 4) && gi.block_type == Encoder.SHORT_TYPE)\n            || (gfc.substep_shaping & 0x80) != 0)\n            return;\n        qupvt.calc_noise(gi, l3_xmin, distort, new CalcNoiseResult(), null);\n        for (var j = 0; j < 576; j++) {\n            var xr = 0.0;\n            if (gi.l3_enc[j] != 0)\n                xr = Math.abs(gi.xr[j]);\n            work[j] = xr;\n        }\n\n        var j = 0;\n        var sfb = 8;\n        if (gi.block_type == Encoder.SHORT_TYPE)\n            sfb = 6;\n        do {\n            var allowedNoise, trancateThreshold;\n            var nsame, start;\n\n            var width = gi.width[sfb];\n            j += width;\n            if (distort[sfb] >= 1.0)\n                continue;\n\n            Arrays.sort(work, j - width, width);\n            if (BitStream.EQ(work[j - 1], 0.0))\n                continue;\n            /* all zero sfb */\n\n            allowedNoise = (1.0 - distort[sfb]) * l3_xmin[sfb];\n            trancateThreshold = 0.0;\n            start = 0;\n            do {\n                var noise;\n                for (nsame = 1; start + nsame < width; nsame++)\n                    if (BitStream.NEQ(work[start + j - width], work[start + j\n                        + nsame - width]))\n                        break;\n\n                noise = work[start + j - width] * work[start + j - width]\n                    * nsame;\n                if (allowedNoise < noise) {\n                    if (start != 0)\n                        trancateThreshold = work[start + j - width - 1];\n                    break;\n                }\n                allowedNoise -= noise;\n                start += nsame;\n            } while (start < width);\n            if (BitStream.EQ(trancateThreshold, 0.0))\n                continue;\n\n            do {\n                if (Math.abs(gi.xr[j - width]) <= trancateThreshold)\n                    gi.l3_enc[j - width] = 0;\n            } while (--width > 0);\n        } while (++sfb < gi.psymax);\n\n        gi.part2_3_length = tk.noquant_count_bits(gfc, gi, null);\n    };\n\n    /**\n     * author/date??\n     *\n     * Function: Returns zero if there is a scalefac which has not been\n     * amplified. Otherwise it returns one.\n     */\n    function loop_break(cod_info) {\n        for (var sfb = 0; sfb < cod_info.sfbmax; sfb++)\n            if (cod_info.scalefac[sfb]\n                + cod_info.subblock_gain[cod_info.window[sfb]] == 0)\n                return false;\n\n        return true;\n    }\n\n    /* mt 5/99: Function: Improved calc_noise for a single channel */\n\n    function penalties(noise) {\n        return Util.FAST_LOG10((0.368 + 0.632 * noise * noise * noise));\n    }\n\n    /**\n     * author/date??\n     *\n     * several different codes to decide which quantization is better\n     */\n    function get_klemm_noise(distort, gi) {\n        var klemm_noise = 1E-37;\n        for (var sfb = 0; sfb < gi.psymax; sfb++)\n            klemm_noise += penalties(distort[sfb]);\n\n        return Math.max(1e-20, klemm_noise);\n    }\n\n    function quant_compare(quant_comp, best, calc, gi, distort) {\n        /**\n         * noise is given in decibels (dB) relative to masking thesholds.<BR>\n         *\n         * over_noise: ??? (the previous comment is fully wrong)<BR>\n         * tot_noise: ??? (the previous comment is fully wrong)<BR>\n         * max_noise: max quantization noise\n         */\n        var better;\n\n        switch (quant_comp) {\n            default:\n            case 9:\n            {\n                if (best.over_count > 0) {\n                    /* there are distorted sfb */\n                    better = calc.over_SSD <= best.over_SSD;\n                    if (calc.over_SSD == best.over_SSD)\n                        better = calc.bits < best.bits;\n                } else {\n                    /* no distorted sfb */\n                    better = ((calc.max_noise < 0) && ((calc.max_noise * 10 + calc.bits) <= (best.max_noise * 10 + best.bits)));\n                }\n                break;\n            }\n\n            case 0:\n                better = calc.over_count < best.over_count\n                    || (calc.over_count == best.over_count && calc.over_noise < best.over_noise)\n                    || (calc.over_count == best.over_count\n                    && BitStream.EQ(calc.over_noise, best.over_noise) && calc.tot_noise < best.tot_noise);\n                break;\n\n            case 8:\n                calc.max_noise = get_klemm_noise(distort, gi);\n            //$FALL-THROUGH$\n            case 1:\n                better = calc.max_noise < best.max_noise;\n                break;\n            case 2:\n                better = calc.tot_noise < best.tot_noise;\n                break;\n            case 3:\n                better = (calc.tot_noise < best.tot_noise)\n                    && (calc.max_noise < best.max_noise);\n                break;\n            case 4:\n                better = (calc.max_noise <= 0.0 && best.max_noise > 0.2)\n                    || (calc.max_noise <= 0.0 && best.max_noise < 0.0\n                    && best.max_noise > calc.max_noise - 0.2 && calc.tot_noise < best.tot_noise)\n                    || (calc.max_noise <= 0.0 && best.max_noise > 0.0\n                    && best.max_noise > calc.max_noise - 0.2 && calc.tot_noise < best.tot_noise\n                    + best.over_noise)\n                    || (calc.max_noise > 0.0 && best.max_noise > -0.05\n                    && best.max_noise > calc.max_noise - 0.1 && calc.tot_noise\n                    + calc.over_noise < best.tot_noise\n                    + best.over_noise)\n                    || (calc.max_noise > 0.0 && best.max_noise > -0.1\n                    && best.max_noise > calc.max_noise - 0.15 && calc.tot_noise\n                    + calc.over_noise + calc.over_noise < best.tot_noise\n                    + best.over_noise + best.over_noise);\n                break;\n            case 5:\n                better = calc.over_noise < best.over_noise\n                    || (BitStream.EQ(calc.over_noise, best.over_noise) && calc.tot_noise < best.tot_noise);\n                break;\n            case 6:\n                better = calc.over_noise < best.over_noise\n                    || (BitStream.EQ(calc.over_noise, best.over_noise) && (calc.max_noise < best.max_noise || (BitStream\n                        .EQ(calc.max_noise, best.max_noise) && calc.tot_noise <= best.tot_noise)));\n                break;\n            case 7:\n                better = calc.over_count < best.over_count\n                    || calc.over_noise < best.over_noise;\n                break;\n        }\n\n        if (best.over_count == 0) {\n            /*\n             * If no distorted bands, only use this quantization if it is\n             * better, and if it uses less bits. Unfortunately, part2_3_length\n             * is sometimes a poor estimator of the final size at low bitrates.\n             */\n            better = better && calc.bits < best.bits;\n        }\n\n        return better;\n    }\n\n    /**\n     * author/date??\n     *\n     * <PRE>\n     *  Amplify the scalefactor bands that violate the masking threshold.\n     *  See ISO 11172-3 Section C.1.5.4.3.5\n     *\n     *  distort[] = noise/masking\n     *  distort[] > 1   ==> noise is not masked\n     *  distort[] < 1   ==> noise is masked\n     *  max_dist = maximum value of distort[]\n     *\n     *  Three algorithms:\n     *  noise_shaping_amp\n     *        0             Amplify all bands with distort[]>1.\n     *\n     *        1             Amplify all bands with distort[] >= max_dist^(.5);\n     *                     ( 50% in the db scale)\n     *\n     *        2             Amplify first band with distort[] >= max_dist;\n     *\n     *\n     *  For algorithms 0 and 1, if max_dist < 1, then amplify all bands\n     *  with distort[] >= .95*max_dist.  This is to make sure we always\n     *  amplify at least one band.\n     * </PRE>\n     */\n    function amp_scalefac_bands(gfp, cod_info, distort, xrpow, bRefine) {\n        var gfc = gfp.internal_flags;\n        var ifqstep34;\n\n        if (cod_info.scalefac_scale == 0) {\n            ifqstep34 = 1.29683955465100964055;\n            /* 2**(.75*.5) */\n        } else {\n            ifqstep34 = 1.68179283050742922612;\n            /* 2**(.75*1) */\n        }\n\n        /* compute maximum value of distort[] */\n        var trigger = 0;\n        for (var sfb = 0; sfb < cod_info.sfbmax; sfb++) {\n            if (trigger < distort[sfb])\n                trigger = distort[sfb];\n        }\n\n        var noise_shaping_amp = gfc.noise_shaping_amp;\n        if (noise_shaping_amp == 3) {\n            if (bRefine)\n                noise_shaping_amp = 2;\n            else\n                noise_shaping_amp = 1;\n        }\n        switch (noise_shaping_amp) {\n            case 2:\n                /* amplify exactly 1 band */\n                break;\n\n            case 1:\n                /* amplify bands within 50% of max (on db scale) */\n                if (trigger > 1.0)\n                    trigger = Math.pow(trigger, .5);\n                else\n                    trigger *= .95;\n                break;\n\n            case 0:\n            default:\n                /* ISO algorithm. amplify all bands with distort>1 */\n                if (trigger > 1.0)\n                    trigger = 1.0;\n                else\n                    trigger *= .95;\n                break;\n        }\n\n        var j = 0;\n        for (var sfb = 0; sfb < cod_info.sfbmax; sfb++) {\n            var width = cod_info.width[sfb];\n            var l;\n            j += width;\n            if (distort[sfb] < trigger)\n                continue;\n\n            if ((gfc.substep_shaping & 2) != 0) {\n                gfc.pseudohalf[sfb] = (0 == gfc.pseudohalf[sfb]) ? 1 : 0;\n                if (0 == gfc.pseudohalf[sfb] && gfc.noise_shaping_amp == 2)\n                    return;\n            }\n            cod_info.scalefac[sfb]++;\n            for (l = -width; l < 0; l++) {\n                xrpow[j + l] *= ifqstep34;\n                if (xrpow[j + l] > cod_info.xrpow_max)\n                    cod_info.xrpow_max = xrpow[j + l];\n            }\n\n            if (gfc.noise_shaping_amp == 2)\n                return;\n        }\n    }\n\n    /**\n     * Takehiro Tominaga 2000-xx-xx\n     *\n     * turns on scalefac scale and adjusts scalefactors\n     */\n    function inc_scalefac_scale(cod_info, xrpow) {\n        var ifqstep34 = 1.29683955465100964055;\n\n        var j = 0;\n        for (var sfb = 0; sfb < cod_info.sfbmax; sfb++) {\n            var width = cod_info.width[sfb];\n            var s = cod_info.scalefac[sfb];\n            if (cod_info.preflag != 0)\n                s += qupvt.pretab[sfb];\n            j += width;\n            if ((s & 1) != 0) {\n                s++;\n                for (var l = -width; l < 0; l++) {\n                    xrpow[j + l] *= ifqstep34;\n                    if (xrpow[j + l] > cod_info.xrpow_max)\n                        cod_info.xrpow_max = xrpow[j + l];\n                }\n            }\n            cod_info.scalefac[sfb] = s >> 1;\n        }\n        cod_info.preflag = 0;\n        cod_info.scalefac_scale = 1;\n    }\n\n    /**\n     * Takehiro Tominaga 2000-xx-xx\n     *\n     * increases the subblock gain and adjusts scalefactors\n     */\n    function inc_subblock_gain(gfc, cod_info, xrpow) {\n        var sfb;\n        var scalefac = cod_info.scalefac;\n\n        /* subbloc_gain can't do anything in the long block region */\n        for (sfb = 0; sfb < cod_info.sfb_lmax; sfb++) {\n            if (scalefac[sfb] >= 16)\n                return true;\n        }\n\n        for (var window = 0; window < 3; window++) {\n            var s1 = 0;\n            var s2 = 0;\n\n            for (sfb = cod_info.sfb_lmax + window; sfb < cod_info.sfbdivide; sfb += 3) {\n                if (s1 < scalefac[sfb])\n                    s1 = scalefac[sfb];\n            }\n            for (; sfb < cod_info.sfbmax; sfb += 3) {\n                if (s2 < scalefac[sfb])\n                    s2 = scalefac[sfb];\n            }\n\n            if (s1 < 16 && s2 < 8)\n                continue;\n\n            if (cod_info.subblock_gain[window] >= 7)\n                return true;\n\n            /*\n             * even though there is no scalefactor for sfb12 subblock gain\n             * affects upper frequencies too, that's why we have to go up to\n             * SBMAX_s\n             */\n            cod_info.subblock_gain[window]++;\n            var j = gfc.scalefac_band.l[cod_info.sfb_lmax];\n            for (sfb = cod_info.sfb_lmax + window; sfb < cod_info.sfbmax; sfb += 3) {\n                var amp;\n                var width = cod_info.width[sfb];\n                var s = scalefac[sfb];\n                assert(s >= 0);\n                s = s - (4 >> cod_info.scalefac_scale);\n                if (s >= 0) {\n                    scalefac[sfb] = s;\n                    j += width * 3;\n                    continue;\n                }\n\n                scalefac[sfb] = 0;\n                {\n                    var gain = 210 + (s << (cod_info.scalefac_scale + 1));\n                    amp = qupvt.IPOW20(gain);\n                }\n                j += width * (window + 1);\n                for (var l = -width; l < 0; l++) {\n                    xrpow[j + l] *= amp;\n                    if (xrpow[j + l] > cod_info.xrpow_max)\n                        cod_info.xrpow_max = xrpow[j + l];\n                }\n                j += width * (3 - window - 1);\n            }\n\n            {\n                var amp = qupvt.IPOW20(202);\n                j += cod_info.width[sfb] * (window + 1);\n                for (var l = -cod_info.width[sfb]; l < 0; l++) {\n                    xrpow[j + l] *= amp;\n                    if (xrpow[j + l] > cod_info.xrpow_max)\n                        cod_info.xrpow_max = xrpow[j + l];\n                }\n            }\n        }\n        return false;\n    }\n\n    /**\n     * <PRE>\n     *  Takehiro Tominaga /date??\n     *  Robert Hegemann 2000-09-06: made a function of it\n     *\n     *  amplifies scalefactor bands,\n     *   - if all are already amplified returns 0\n     *   - if some bands are amplified too much:\n     *      * try to increase scalefac_scale\n     *      * if already scalefac_scale was set\n     *          try on short blocks to increase subblock gain\n     * </PRE>\n     */\n    function balance_noise(gfp, cod_info, distort, xrpow, bRefine) {\n        var gfc = gfp.internal_flags;\n\n        amp_scalefac_bands(gfp, cod_info, distort, xrpow, bRefine);\n\n        /*\n         * check to make sure we have not amplified too much loop_break returns\n         * 0 if there is an unamplified scalefac scale_bitcount returns 0 if no\n         * scalefactors are too large\n         */\n\n        var status = loop_break(cod_info);\n\n        if (status)\n            return false;\n        /* all bands amplified */\n\n        /*\n         * not all scalefactors have been amplified. so these scalefacs are\n         * possibly valid. encode them:\n         */\n        if (gfc.mode_gr == 2)\n            status = tk.scale_bitcount(cod_info);\n        else\n            status = tk.scale_bitcount_lsf(gfc, cod_info);\n\n        if (!status)\n            return true;\n        /* amplified some bands not exceeding limits */\n\n        /*\n         * some scalefactors are too large. lets try setting scalefac_scale=1\n         */\n        if (gfc.noise_shaping > 1) {\n            Arrays.fill(gfc.pseudohalf, 0);\n            if (0 == cod_info.scalefac_scale) {\n                inc_scalefac_scale(cod_info, xrpow);\n                status = false;\n            } else {\n                if (cod_info.block_type == Encoder.SHORT_TYPE\n                    && gfc.subblock_gain > 0) {\n                    status = (inc_subblock_gain(gfc, cod_info, xrpow) || loop_break(cod_info));\n                }\n            }\n        }\n\n        if (!status) {\n            if (gfc.mode_gr == 2)\n                status = tk.scale_bitcount(cod_info);\n            else\n                status = tk.scale_bitcount_lsf(gfc, cod_info);\n        }\n        return !status;\n    }\n\n    /**\n     * <PRE>\n     *  Function: The outer iteration loop controls the masking conditions\n     *  of all scalefactorbands. It computes the best scalefac and\n     *  global gain. This module calls the inner iteration loop\n     *\n     *  mt 5/99 completely rewritten to allow for bit reservoir control,\n     *  mid/side channels with L/R or mid/side masking thresholds,\n     *  and chooses best quantization instead of last quantization when\n     *  no distortion free quantization can be found.\n     *\n     *  added VBR support mt 5/99\n     *\n     *  some code shuffle rh 9/00\n     * </PRE>\n     *\n     * @param l3_xmin\n     *            allowed distortion\n     * @param xrpow\n     *            coloured magnitudes of spectral\n     * @param targ_bits\n     *            maximum allowed bits\n     */\n    this.outer_loop = function (gfp, cod_info, l3_xmin, xrpow, ch, targ_bits) {\n        var gfc = gfp.internal_flags;\n        var cod_info_w = new GrInfo();\n        var save_xrpow = new_float(576);\n        var distort = new_float(L3Side.SFBMAX);\n        var best_noise_info = new CalcNoiseResult();\n        var better;\n        var prev_noise = new CalcNoiseData();\n        var best_part2_3_length = 9999999;\n        var bEndOfSearch = false;\n        var bRefine = false;\n        var best_ggain_pass1 = 0;\n\n        bin_search_StepSize(gfc, cod_info, targ_bits, ch, xrpow);\n\n        if (0 == gfc.noise_shaping)\n        /* fast mode, no noise shaping, we are ready */\n            return 100;\n        /* default noise_info.over_count */\n\n        /* compute the distortion in this quantization */\n        /* coefficients and thresholds both l/r (or both mid/side) */\n        qupvt.calc_noise(cod_info, l3_xmin, distort, best_noise_info,\n            prev_noise);\n        best_noise_info.bits = cod_info.part2_3_length;\n\n        cod_info_w.assign(cod_info);\n        var age = 0;\n        System.arraycopy(xrpow, 0, save_xrpow, 0, 576);\n\n        while (!bEndOfSearch) {\n            /* BEGIN MAIN LOOP */\n            do {\n                var noise_info = new CalcNoiseResult();\n                var search_limit;\n                var maxggain = 255;\n\n                /*\n                 * When quantization with no distorted bands is found, allow up\n                 * to X new unsuccesful tries in serial. This gives us more\n                 * possibilities for different quant_compare modes. Much more\n                 * than 3 makes not a big difference, it is only slower.\n                 */\n\n                if ((gfc.substep_shaping & 2) != 0) {\n                    search_limit = 20;\n                } else {\n                    search_limit = 3;\n                }\n\n                /*\n                 * Check if the last scalefactor band is distorted. in VBR mode\n                 * we can't get rid of the distortion, so quit now and VBR mode\n                 * will try again with more bits. (makes a 10% speed increase,\n                 * the files I tested were binary identical, 2000/05/20 Robert\n                 * Hegemann) distort[] > 1 means noise > allowed noise\n                 */\n                if (gfc.sfb21_extra) {\n                    if (distort[cod_info_w.sfbmax] > 1.0)\n                        break;\n                    if (cod_info_w.block_type == Encoder.SHORT_TYPE\n                        && (distort[cod_info_w.sfbmax + 1] > 1.0 || distort[cod_info_w.sfbmax + 2] > 1.0))\n                        break;\n                }\n\n                /* try a new scalefactor conbination on cod_info_w */\n                if (!balance_noise(gfp, cod_info_w, distort, xrpow, bRefine))\n                    break;\n                if (cod_info_w.scalefac_scale != 0)\n                    maxggain = 254;\n\n                /*\n                 * inner_loop starts with the initial quantization step computed\n                 * above and slowly increases until the bits < huff_bits. Thus\n                 * it is important not to start with too large of an inital\n                 * quantization step. Too small is ok, but inner_loop will take\n                 * longer\n                 */\n                var huff_bits = targ_bits - cod_info_w.part2_length;\n                if (huff_bits <= 0)\n                    break;\n\n                /*\n                 * increase quantizer stepsize until needed bits are below\n                 * maximum\n                 */\n                while ((cod_info_w.part2_3_length = tk.count_bits(gfc, xrpow,\n                    cod_info_w, prev_noise)) > huff_bits\n                && cod_info_w.global_gain <= maxggain)\n                    cod_info_w.global_gain++;\n\n                if (cod_info_w.global_gain > maxggain)\n                    break;\n\n                if (best_noise_info.over_count == 0) {\n\n                    while ((cod_info_w.part2_3_length = tk.count_bits(gfc,\n                        xrpow, cod_info_w, prev_noise)) > best_part2_3_length\n                    && cod_info_w.global_gain <= maxggain)\n                        cod_info_w.global_gain++;\n\n                    if (cod_info_w.global_gain > maxggain)\n                        break;\n                }\n\n                /* compute the distortion in this quantization */\n                qupvt.calc_noise(cod_info_w, l3_xmin, distort, noise_info,\n                    prev_noise);\n                noise_info.bits = cod_info_w.part2_3_length;\n\n                /*\n                 * check if this quantization is better than our saved\n                 * quantization\n                 */\n                if (cod_info.block_type != Encoder.SHORT_TYPE) {\n                    // NORM, START or STOP type\n                    better = gfp.quant_comp;\n                } else\n                    better = gfp.quant_comp_short;\n\n                better = quant_compare(better, best_noise_info, noise_info,\n                    cod_info_w, distort) ? 1 : 0;\n\n                /* save data so we can restore this quantization later */\n                if (better != 0) {\n                    best_part2_3_length = cod_info.part2_3_length;\n                    best_noise_info = noise_info;\n                    cod_info.assign(cod_info_w);\n                    age = 0;\n                    /* save data so we can restore this quantization later */\n                    /* store for later reuse */\n                    System.arraycopy(xrpow, 0, save_xrpow, 0, 576);\n                } else {\n                    /* early stop? */\n                    if (gfc.full_outer_loop == 0) {\n                        if (++age > search_limit\n                            && best_noise_info.over_count == 0)\n                            break;\n                        if ((gfc.noise_shaping_amp == 3) && bRefine && age > 30)\n                            break;\n                        if ((gfc.noise_shaping_amp == 3)\n                            && bRefine\n                            && (cod_info_w.global_gain - best_ggain_pass1) > 15)\n                            break;\n                    }\n                }\n            } while ((cod_info_w.global_gain + cod_info_w.scalefac_scale) < 255);\n\n            if (gfc.noise_shaping_amp == 3) {\n                if (!bRefine) {\n                    /* refine search */\n                    cod_info_w.assign(cod_info);\n                    System.arraycopy(save_xrpow, 0, xrpow, 0, 576);\n                    age = 0;\n                    best_ggain_pass1 = cod_info_w.global_gain;\n\n                    bRefine = true;\n                } else {\n                    /* search already refined, stop */\n                    bEndOfSearch = true;\n                }\n\n            } else {\n                bEndOfSearch = true;\n            }\n        }\n\n        assert((cod_info.global_gain + cod_info.scalefac_scale) <= 255);\n        /*\n         * finish up\n         */\n        if (gfp.VBR == VbrMode.vbr_rh || gfp.VBR == VbrMode.vbr_mtrh)\n        /* restore for reuse on next try */\n            System.arraycopy(save_xrpow, 0, xrpow, 0, 576);\n        /*\n         * do the 'substep shaping'\n         */\n        else if ((gfc.substep_shaping & 1) != 0)\n            trancate_smallspectrums(gfc, cod_info, l3_xmin, xrpow);\n\n        return best_noise_info.over_count;\n    }\n\n    /**\n     * Robert Hegemann 2000-09-06\n     *\n     * update reservoir status after FINAL quantization/bitrate\n     */\n    this.iteration_finish_one = function (gfc, gr, ch) {\n        var l3_side = gfc.l3_side;\n        var cod_info = l3_side.tt[gr][ch];\n\n        /*\n         * try some better scalefac storage\n         */\n        tk.best_scalefac_store(gfc, gr, ch, l3_side);\n\n        /*\n         * best huffman_divide may save some bits too\n         */\n        if (gfc.use_best_huffman == 1)\n            tk.best_huffman_divide(gfc, cod_info);\n\n        /*\n         * update reservoir status after FINAL quantization/bitrate\n         */\n        rv.ResvAdjust(gfc, cod_info);\n    };\n\n    /**\n     *\n     * 2000-09-04 Robert Hegemann\n     *\n     * @param l3_xmin\n     *            allowed distortion of the scalefactor\n     * @param xrpow\n     *            coloured magnitudes of spectral values\n     */\n    this.VBR_encode_granule = function (gfp, cod_info, l3_xmin, xrpow, ch, min_bits, max_bits) {\n        var gfc = gfp.internal_flags;\n        var bst_cod_info = new GrInfo();\n        var bst_xrpow = new_float(576);\n        var Max_bits = max_bits;\n        var real_bits = max_bits + 1;\n        var this_bits = (max_bits + min_bits) / 2;\n        var dbits, over, found = 0;\n        var sfb21_extra = gfc.sfb21_extra;\n\n        assert(Max_bits <= LameInternalFlags.MAX_BITS_PER_CHANNEL);\n        Arrays.fill(bst_cod_info.l3_enc, 0);\n\n        /*\n         * search within round about 40 bits of optimal\n         */\n        do {\n            assert(this_bits >= min_bits);\n            assert(this_bits <= max_bits);\n            assert(min_bits <= max_bits);\n\n            if (this_bits > Max_bits - 42)\n                gfc.sfb21_extra = false;\n            else\n                gfc.sfb21_extra = sfb21_extra;\n\n            over = outer_loop(gfp, cod_info, l3_xmin, xrpow, ch, this_bits);\n\n            /*\n             * is quantization as good as we are looking for ? in this case: is\n             * no scalefactor band distorted?\n             */\n            if (over <= 0) {\n                found = 1;\n                /*\n                 * now we know it can be done with \"real_bits\" and maybe we can\n                 * skip some iterations\n                 */\n                real_bits = cod_info.part2_3_length;\n\n                /*\n                 * store best quantization so far\n                 */\n                bst_cod_info.assign(cod_info);\n                System.arraycopy(xrpow, 0, bst_xrpow, 0, 576);\n\n                /*\n                 * try with fewer bits\n                 */\n                max_bits = real_bits - 32;\n                dbits = max_bits - min_bits;\n                this_bits = (max_bits + min_bits) / 2;\n            } else {\n                /*\n                 * try with more bits\n                 */\n                min_bits = this_bits + 32;\n                dbits = max_bits - min_bits;\n                this_bits = (max_bits + min_bits) / 2;\n\n                if (found != 0) {\n                    found = 2;\n                    /*\n                     * start again with best quantization so far\n                     */\n                    cod_info.assign(bst_cod_info);\n                    System.arraycopy(bst_xrpow, 0, xrpow, 0, 576);\n                }\n            }\n        } while (dbits > 12);\n\n        gfc.sfb21_extra = sfb21_extra;\n\n        /*\n         * found=0 => nothing found, use last one found=1 => we just found the\n         * best and left the loop found=2 => we restored a good one and have now\n         * l3_enc to restore too\n         */\n        if (found == 2) {\n            System.arraycopy(bst_cod_info.l3_enc, 0, cod_info.l3_enc, 0, 576);\n        }\n        assert(cod_info.part2_3_length <= Max_bits);\n    }\n\n    /**\n     * Robert Hegemann 2000-09-05\n     *\n     * calculates * how many bits are available for analog silent granules * how\n     * many bits to use for the lowest allowed bitrate * how many bits each\n     * bitrate would provide\n     */\n    this.get_framebits = function (gfp, frameBits) {\n        var gfc = gfp.internal_flags;\n\n        /*\n         * always use at least this many bits per granule per channel unless we\n         * detect analog silence, see below\n         */\n        gfc.bitrate_index = gfc.VBR_min_bitrate;\n        var bitsPerFrame = bs.getframebits(gfp);\n\n        /*\n         * bits for analog silence\n         */\n        gfc.bitrate_index = 1;\n        bitsPerFrame = bs.getframebits(gfp);\n\n        for (var i = 1; i <= gfc.VBR_max_bitrate; i++) {\n            gfc.bitrate_index = i;\n            var mb = new MeanBits(bitsPerFrame);\n            frameBits[i] = rv.ResvFrameBegin(gfp, mb);\n            bitsPerFrame = mb.bits;\n        }\n    };\n\n    /* RH: this one needs to be overhauled sometime */\n\n    /**\n     * <PRE>\n     *  2000-09-04 Robert Hegemann\n     *\n     *  * converts LR to MS coding when necessary\n     *  * calculates allowed/adjusted quantization noise amounts\n     *  * detects analog silent frames\n     *\n     *  some remarks:\n     *  - lower masking depending on Quality setting\n     *  - quality control together with adjusted ATH MDCT scaling\n     *    on lower quality setting allocate more noise from\n     *    ATH masking, and on higher quality setting allocate\n     *    less noise from ATH masking.\n     *  - experiments show that going more than 2dB over GPSYCHO's\n     *    limits ends up in very annoying artefacts\n     * </PRE>\n     */\n    this.VBR_old_prepare = function (gfp, pe, ms_ener_ratio, ratio, l3_xmin, frameBits, min_bits,\n                                     max_bits, bands) {\n        var gfc = gfp.internal_flags;\n\n        var masking_lower_db, adjust = 0.0;\n        var analog_silence = 1;\n        var bits = 0;\n\n        gfc.bitrate_index = gfc.VBR_max_bitrate;\n        var avg = rv.ResvFrameBegin(gfp, new MeanBits(0)) / gfc.mode_gr;\n\n        get_framebits(gfp, frameBits);\n\n        for (var gr = 0; gr < gfc.mode_gr; gr++) {\n            var mxb = qupvt.on_pe(gfp, pe, max_bits[gr], avg, gr, 0);\n            if (gfc.mode_ext == Encoder.MPG_MD_MS_LR) {\n                ms_convert(gfc.l3_side, gr);\n                qupvt.reduce_side(max_bits[gr], ms_ener_ratio[gr], avg, mxb);\n            }\n            for (var ch = 0; ch < gfc.channels_out; ++ch) {\n                var cod_info = gfc.l3_side.tt[gr][ch];\n\n                if (cod_info.block_type != Encoder.SHORT_TYPE) {\n                    // NORM, START or STOP type\n                    adjust = 1.28 / (1 + Math\n                            .exp(3.5 - pe[gr][ch] / 300.)) - 0.05;\n                    masking_lower_db = gfc.PSY.mask_adjust - adjust;\n                } else {\n                    adjust = 2.56 / (1 + Math\n                            .exp(3.5 - pe[gr][ch] / 300.)) - 0.14;\n                    masking_lower_db = gfc.PSY.mask_adjust_short - adjust;\n                }\n                gfc.masking_lower = Math.pow(10.0,\n                    masking_lower_db * 0.1);\n\n                init_outer_loop(gfc, cod_info);\n                bands[gr][ch] = qupvt.calc_xmin(gfp, ratio[gr][ch], cod_info,\n                    l3_xmin[gr][ch]);\n                if (bands[gr][ch] != 0)\n                    analog_silence = 0;\n\n                min_bits[gr][ch] = 126;\n\n                bits += max_bits[gr][ch];\n            }\n        }\n        for (var gr = 0; gr < gfc.mode_gr; gr++) {\n            for (var ch = 0; ch < gfc.channels_out; ch++) {\n                if (bits > frameBits[gfc.VBR_max_bitrate]) {\n                    max_bits[gr][ch] *= frameBits[gfc.VBR_max_bitrate];\n                    max_bits[gr][ch] /= bits;\n                }\n                if (min_bits[gr][ch] > max_bits[gr][ch])\n                    min_bits[gr][ch] = max_bits[gr][ch];\n\n            }\n            /* for ch */\n        }\n        /* for gr */\n\n        return analog_silence;\n    };\n\n    this.bitpressure_strategy = function (gfc, l3_xmin, min_bits, max_bits) {\n        for (var gr = 0; gr < gfc.mode_gr; gr++) {\n            for (var ch = 0; ch < gfc.channels_out; ch++) {\n                var gi = gfc.l3_side.tt[gr][ch];\n                var pxmin = l3_xmin[gr][ch];\n                var pxminPos = 0;\n                for (var sfb = 0; sfb < gi.psy_lmax; sfb++)\n                    pxmin[pxminPos++] *= 1. + .029 * sfb * sfb\n                        / Encoder.SBMAX_l / Encoder.SBMAX_l;\n\n                if (gi.block_type == Encoder.SHORT_TYPE) {\n                    for (var sfb = gi.sfb_smin; sfb < Encoder.SBMAX_s; sfb++) {\n                        pxmin[pxminPos++] *= 1. + .029 * sfb * sfb\n                            / Encoder.SBMAX_s / Encoder.SBMAX_s;\n                        pxmin[pxminPos++] *= 1. + .029 * sfb * sfb\n                            / Encoder.SBMAX_s / Encoder.SBMAX_s;\n                        pxmin[pxminPos++] *= 1. + .029 * sfb * sfb\n                            / Encoder.SBMAX_s / Encoder.SBMAX_s;\n                    }\n                }\n                max_bits[gr][ch] = 0 | Math.max(min_bits[gr][ch],\n                        0.9 * max_bits[gr][ch]);\n            }\n        }\n    };\n\n    this.VBR_new_prepare = function (gfp, pe, ratio, l3_xmin, frameBits, max_bits) {\n        var gfc = gfp.internal_flags;\n\n        var analog_silence = 1;\n        var avg = 0, bits = 0;\n        var maximum_framebits;\n\n        if (!gfp.free_format) {\n            gfc.bitrate_index = gfc.VBR_max_bitrate;\n\n            var mb = new MeanBits(avg);\n            rv.ResvFrameBegin(gfp, mb);\n            avg = mb.bits;\n\n            get_framebits(gfp, frameBits);\n            maximum_framebits = frameBits[gfc.VBR_max_bitrate];\n        } else {\n            gfc.bitrate_index = 0;\n            var mb = new MeanBits(avg);\n            maximum_framebits = rv.ResvFrameBegin(gfp, mb);\n            avg = mb.bits;\n            frameBits[0] = maximum_framebits;\n        }\n\n        for (var gr = 0; gr < gfc.mode_gr; gr++) {\n            qupvt.on_pe(gfp, pe, max_bits[gr], avg, gr, 0);\n            if (gfc.mode_ext == Encoder.MPG_MD_MS_LR) {\n                ms_convert(gfc.l3_side, gr);\n            }\n            for (var ch = 0; ch < gfc.channels_out; ++ch) {\n                var cod_info = gfc.l3_side.tt[gr][ch];\n\n                gfc.masking_lower = Math.pow(10.0,\n                    gfc.PSY.mask_adjust * 0.1);\n\n                init_outer_loop(gfc, cod_info);\n                if (0 != qupvt.calc_xmin(gfp, ratio[gr][ch], cod_info,\n                        l3_xmin[gr][ch]))\n                    analog_silence = 0;\n\n                bits += max_bits[gr][ch];\n            }\n        }\n        for (var gr = 0; gr < gfc.mode_gr; gr++) {\n            for (var ch = 0; ch < gfc.channels_out; ch++) {\n                if (bits > maximum_framebits) {\n                    max_bits[gr][ch] *= maximum_framebits;\n                    max_bits[gr][ch] /= bits;\n                }\n\n            }\n            /* for ch */\n        }\n        /* for gr */\n\n        return analog_silence;\n    };\n\n    /**\n     * calculates target bits for ABR encoding\n     *\n     * mt 2000/05/31\n     */\n    this.calc_target_bits = function (gfp, pe, ms_ener_ratio, targ_bits, analog_silence_bits, max_frame_bits) {\n        var gfc = gfp.internal_flags;\n        var l3_side = gfc.l3_side;\n        var res_factor;\n        var gr, ch, totbits, mean_bits = 0;\n\n        gfc.bitrate_index = gfc.VBR_max_bitrate;\n        var mb = new MeanBits(mean_bits);\n        max_frame_bits[0] = rv.ResvFrameBegin(gfp, mb);\n        mean_bits = mb.bits;\n\n        gfc.bitrate_index = 1;\n        mean_bits = bs.getframebits(gfp) - gfc.sideinfo_len * 8;\n        analog_silence_bits[0] = mean_bits / (gfc.mode_gr * gfc.channels_out);\n\n        mean_bits = gfp.VBR_mean_bitrate_kbps * gfp.framesize * 1000;\n        if ((gfc.substep_shaping & 1) != 0)\n            mean_bits *= 1.09;\n        mean_bits /= gfp.out_samplerate;\n        mean_bits -= gfc.sideinfo_len * 8;\n        mean_bits /= (gfc.mode_gr * gfc.channels_out);\n\n        /**\n         * <PRE>\n         *           res_factor is the percentage of the target bitrate that should\n         *           be used on average.  the remaining bits are added to the\n         *           bitreservoir and used for difficult to encode frames.\n         *\n         *           Since we are tracking the average bitrate, we should adjust\n         *           res_factor \"on the fly\", increasing it if the average bitrate\n         *           is greater than the requested bitrate, and decreasing it\n         *           otherwise.  Reasonable ranges are from .9 to 1.0\n         *\n         *           Until we get the above suggestion working, we use the following\n         *           tuning:\n         *           compression ratio    res_factor\n         *           5.5  (256kbps)         1.0      no need for bitreservoir\n         *           11   (128kbps)         .93      7% held for reservoir\n         *\n         *           with linear interpolation for other values.\n         * </PRE>\n         */\n        res_factor = .93 + .07 * (11.0 - gfp.compression_ratio)\n            / (11.0 - 5.5);\n        if (res_factor < .90)\n            res_factor = .90;\n        if (res_factor > 1.00)\n            res_factor = 1.00;\n\n        for (gr = 0; gr < gfc.mode_gr; gr++) {\n            var sum = 0;\n            for (ch = 0; ch < gfc.channels_out; ch++) {\n                targ_bits[gr][ch] = (int)(res_factor * mean_bits);\n\n                if (pe[gr][ch] > 700) {\n                    var add_bits = (int)((pe[gr][ch] - 700) / 1.4);\n\n                    var cod_info = l3_side.tt[gr][ch];\n                    targ_bits[gr][ch] = (int)(res_factor * mean_bits);\n\n                    /* short blocks use a little extra, no matter what the pe */\n                    if (cod_info.block_type == Encoder.SHORT_TYPE) {\n                        if (add_bits < mean_bits / 2)\n                            add_bits = mean_bits / 2;\n                    }\n                    /* at most increase bits by 1.5*average */\n                    if (add_bits > mean_bits * 3 / 2)\n                        add_bits = mean_bits * 3 / 2;\n                    else if (add_bits < 0)\n                        add_bits = 0;\n\n                    targ_bits[gr][ch] += add_bits;\n                }\n                if (targ_bits[gr][ch] > LameInternalFlags.MAX_BITS_PER_CHANNEL) {\n                    targ_bits[gr][ch] = LameInternalFlags.MAX_BITS_PER_CHANNEL;\n                }\n                sum += targ_bits[gr][ch];\n            }\n            /* for ch */\n            if (sum > LameInternalFlags.MAX_BITS_PER_GRANULE) {\n                for (ch = 0; ch < gfc.channels_out; ++ch) {\n                    targ_bits[gr][ch] *= LameInternalFlags.MAX_BITS_PER_GRANULE;\n                    targ_bits[gr][ch] /= sum;\n                }\n            }\n        }\n        /* for gr */\n\n        if (gfc.mode_ext == Encoder.MPG_MD_MS_LR)\n            for (gr = 0; gr < gfc.mode_gr; gr++) {\n                qupvt.reduce_side(targ_bits[gr], ms_ener_ratio[gr], mean_bits\n                    * gfc.channels_out,\n                    LameInternalFlags.MAX_BITS_PER_GRANULE);\n            }\n\n        /*\n         * sum target bits\n         */\n        totbits = 0;\n        for (gr = 0; gr < gfc.mode_gr; gr++) {\n            for (ch = 0; ch < gfc.channels_out; ch++) {\n                if (targ_bits[gr][ch] > LameInternalFlags.MAX_BITS_PER_CHANNEL)\n                    targ_bits[gr][ch] = LameInternalFlags.MAX_BITS_PER_CHANNEL;\n                totbits += targ_bits[gr][ch];\n            }\n        }\n\n        /*\n         * repartion target bits if needed\n         */\n        if (totbits > max_frame_bits[0]) {\n            for (gr = 0; gr < gfc.mode_gr; gr++) {\n                for (ch = 0; ch < gfc.channels_out; ch++) {\n                    targ_bits[gr][ch] *= max_frame_bits[0];\n                    targ_bits[gr][ch] /= totbits;\n                }\n            }\n        }\n    }\n\n}\n\nmodule.exports = Quantize;\n","/*\n *      bit reservoir source file\n *\n *      Copyright (c) 1999-2000 Mark Taylor\n *\n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2 of the License, or (at your option) any later version.\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Library General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the\n * Free Software Foundation, Inc., 59 Temple Place - Suite 330,\n * Boston, MA 02111-1307, USA.\n */\n\n/* $Id: Reservoir.java,v 1.9 2011/05/24 20:48:06 kenchis Exp $ */\n\n//package mp3;\n\n/**\n * ResvFrameBegin:<BR>\n * Called (repeatedly) at the beginning of a frame. Updates the maximum size of\n * the reservoir, and checks to make sure main_data_begin was set properly by\n * the formatter<BR>\n * Background information:\n * \n * This is the original text from the ISO standard. Because of sooo many bugs\n * and irritations correcting comments are added in brackets []. A '^W' means\n * you should remove the last word.\n * \n * <PRE>\n *  1. The following rule can be used to calculate the maximum\n *     number of bits used for one granule [^W frame]:<BR>\n *     At the highest possible bitrate of Layer III (320 kbps\n *     per stereo signal [^W^W^W], 48 kHz) the frames must be of\n *     [^W^W^W are designed to have] constant length, i.e.\n *     one buffer [^W^W the frame] length is:<BR>\n * \n *         320 kbps * 1152/48 kHz = 7680 bit = 960 byte\n * \n *     This value is used as the maximum buffer per channel [^W^W] at\n *     lower bitrates [than 320 kbps]. At 64 kbps mono or 128 kbps\n *     stereo the main granule length is 64 kbps * 576/48 kHz = 768 bit\n *     [per granule and channel] at 48 kHz sampling frequency.\n *     This means that there is a maximum deviation (short time buffer\n *     [= reservoir]) of 7680 - 2*2*768 = 4608 bits is allowed at 64 kbps.\n *     The actual deviation is equal to the number of bytes [with the\n *     meaning of octets] denoted by the main_data_end offset pointer.\n *     The actual maximum deviation is (2^9-1)*8 bit = 4088 bits\n *     [for MPEG-1 and (2^8-1)*8 bit for MPEG-2, both are hard limits].\n *     ... The xchange of buffer bits between the left and right channel\n *     is allowed without restrictions [exception: dual channel].\n *     Because of the [constructed] constraint on the buffer size\n *     main_data_end is always set to 0 in the case of bit_rate_index==14,\n *     i.e. data rate 320 kbps per stereo signal [^W^W^W]. In this case\n *     all data are allocated between adjacent header [^W sync] words\n *     [, i.e. there is no buffering at all].\n * </PRE>\n */\n\nvar common = require('./common.js');\nvar assert = common.assert;\n\nfunction Reservoir() {\n\tvar bs;\n\n\tthis.setModules  = function(_bs) {\n\t\tbs = _bs;\n\t}\n\n\tthis.ResvFrameBegin = function(gfp, mean_bits) {\n\t\tvar gfc = gfp.internal_flags;\n\t\tvar maxmp3buf;\n\t\tvar l3_side = gfc.l3_side;\n\n\t\tvar frameLength = bs.getframebits(gfp);\n\t\tmean_bits.bits = (frameLength - gfc.sideinfo_len * 8) / gfc.mode_gr;\n\n\t\t/**\n\t\t * <PRE>\n\t\t *  Meaning of the variables:\n\t\t *      resvLimit: (0, 8, ..., 8*255 (MPEG-2), 8*511 (MPEG-1))\n\t\t *          Number of bits can be stored in previous frame(s) due to\n\t\t *          counter size constaints\n\t\t *      maxmp3buf: ( ??? ... 8*1951 (MPEG-1 and 2), 8*2047 (MPEG-2.5))\n\t\t *          Number of bits allowed to encode one frame (you can take 8*511 bit\n\t\t *          from the bit reservoir and at most 8*1440 bit from the current\n\t\t *          frame (320 kbps, 32 kHz), so 8*1951 bit is the largest possible\n\t\t *          value for MPEG-1 and -2)\n\t\t * \n\t\t *          maximum allowed granule/channel size times 4 = 8*2047 bits.,\n\t\t *          so this is the absolute maximum supported by the format.\n\t\t * \n\t\t * \n\t\t *      fullFrameBits:  maximum number of bits available for encoding\n\t\t *                      the current frame.\n\t\t * \n\t\t *      mean_bits:      target number of bits per granule.\n\t\t * \n\t\t *      frameLength:\n\t\t * \n\t\t *      gfc.ResvMax:   maximum allowed reservoir\n\t\t * \n\t\t *      gfc.ResvSize:  current reservoir size\n\t\t * \n\t\t *      l3_side.resvDrain_pre:\n\t\t *         ancillary data to be added to previous frame:\n\t\t *         (only usefull in VBR modes if it is possible to have\n\t\t *         maxmp3buf < fullFrameBits)).  Currently disabled,\n\t\t *         see #define NEW_DRAIN\n\t\t *         2010-02-13: RH now enabled, it seems to be needed for CBR too,\n\t\t *                     as there exists one example, where the FhG decoder\n\t\t *                     can't decode a -b320 CBR file anymore.\n\t\t * \n\t\t *      l3_side.resvDrain_post:\n\t\t *         ancillary data to be added to this frame:\n\t\t * \n\t\t * </PRE>\n\t\t */\n\n\t\t/* main_data_begin has 9 bits in MPEG-1, 8 bits MPEG-2 */\n\t\tvar resvLimit = (8 * 256) * gfc.mode_gr - 8;\n\n\t\t/*\n\t\t * maximum allowed frame size. dont use more than this number of bits,\n\t\t * even if the frame has the space for them:\n\t\t */\n\t\tif (gfp.brate > 320) {\n\t\t\t/* in freeformat the buffer is constant */\n\t\t\tmaxmp3buf = 8 * ((int) ((gfp.brate * 1000)\n\t\t\t\t\t/ (gfp.out_samplerate / 1152) / 8 + .5));\n\t\t} else {\n\t\t\t/*\n\t\t\t * all mp3 decoders should have enough buffer to handle this value:\n\t\t\t * size of a 320kbps 32kHz frame\n\t\t\t */\n\t\t\tmaxmp3buf = 8 * 1440;\n\n\t\t\t/*\n\t\t\t * Bouvigne suggests this more lax interpretation of the ISO doc\n\t\t\t * instead of using 8*960.\n\t\t\t */\n\n\t\t\tif (gfp.strict_ISO) {\n\t\t\t\tmaxmp3buf = 8 * ((int) (320000 / (gfp.out_samplerate / 1152) / 8 + .5));\n\t\t\t}\n\t\t}\n\n\t\tgfc.ResvMax = maxmp3buf - frameLength;\n\t\tif (gfc.ResvMax > resvLimit)\n\t\t\tgfc.ResvMax = resvLimit;\n\t\tif (gfc.ResvMax < 0 || gfp.disable_reservoir)\n\t\t\tgfc.ResvMax = 0;\n\n\t\tvar fullFrameBits = mean_bits.bits * gfc.mode_gr\n\t\t\t\t+ Math.min(gfc.ResvSize, gfc.ResvMax);\n\n\t\tif (fullFrameBits > maxmp3buf)\n\t\t\tfullFrameBits = maxmp3buf;\n\n\t\tassert (0 == gfc.ResvMax % 8);\n\t\tassert (gfc.ResvMax >= 0);\n\n\t\tl3_side.resvDrain_pre = 0;\n\n\t\t// frame analyzer code\n\t\tif (gfc.pinfo != null) {\n\t\t\t/*\n\t\t\t * expected bits per channel per granule [is this also right for\n\t\t\t * mono/stereo, MPEG-1/2 ?]\n\t\t\t */\n\t\t\tgfc.pinfo.mean_bits = mean_bits.bits / 2;\n\t\t\tgfc.pinfo.resvsize = gfc.ResvSize;\n\t\t}\n\n\t\treturn fullFrameBits;\n\t}\n\n\t/**\n\t * returns targ_bits: target number of bits to use for 1 granule<BR>\n\t * extra_bits: amount extra available from reservoir<BR>\n\t * Mark Taylor 4/99\n\t */\n\tthis.ResvMaxBits = function(gfp, mean_bits, targ_bits, cbr) {\n\t\tvar gfc = gfp.internal_flags;\n\t\tvar add_bits;\n        var ResvSize = gfc.ResvSize, ResvMax = gfc.ResvMax;\n\n\t\t/* compensate the saved bits used in the 1st granule */\n\t\tif (cbr != 0)\n\t\t\tResvSize += mean_bits;\n\n\t\tif ((gfc.substep_shaping & 1) != 0)\n\t\t\tResvMax *= 0.9;\n\n\t\ttarg_bits.bits = mean_bits;\n\n\t\t/* extra bits if the reservoir is almost full */\n\t\tif (ResvSize * 10 > ResvMax * 9) {\n\t\t\tadd_bits = ResvSize - (ResvMax * 9) / 10;\n\t\t\ttarg_bits.bits += add_bits;\n\t\t\tgfc.substep_shaping |= 0x80;\n\t\t} else {\n\t\t\tadd_bits = 0;\n\t\t\tgfc.substep_shaping &= 0x7f;\n\t\t\t/*\n\t\t\t * build up reservoir. this builds the reservoir a little slower\n\t\t\t * than FhG. It could simple be mean_bits/15, but this was rigged to\n\t\t\t * always produce 100 (the old value) at 128kbs\n\t\t\t */\n\t\t\tif (!gfp.disable_reservoir && 0 == (gfc.substep_shaping & 1))\n\t\t\t\ttarg_bits.bits -= .1 * mean_bits;\n\t\t}\n\n\t\t/* amount from the reservoir we are allowed to use. ISO says 6/10 */\n\t\tvar extra_bits = (ResvSize < (gfc.ResvMax * 6) / 10 ? ResvSize\n\t\t\t\t: (gfc.ResvMax * 6) / 10);\n\t\textra_bits -= add_bits;\n\n\t\tif (extra_bits < 0)\n\t\t\textra_bits = 0;\n\t\treturn extra_bits;\n\t}\n\n\t/**\n\t * Called after a granule's bit allocation. Readjusts the size of the\n\t * reservoir to reflect the granule's usage.\n\t */\n\tthis.ResvAdjust = function(gfc, gi) {\n\t\tgfc.ResvSize -= gi.part2_3_length + gi.part2_length;\n\t}\n\n\t/**\n\t * Called after all granules in a frame have been allocated. Makes sure that\n\t * the reservoir size is within limits, possibly by adding stuffing bits.\n\t */\n\tthis.ResvFrameEnd = function(gfc, mean_bits) {\n\t\tvar over_bits;\n\t\tvar l3_side = gfc.l3_side;\n\n\t\tgfc.ResvSize += mean_bits * gfc.mode_gr;\n\t\tvar stuffingBits = 0;\n\t\tl3_side.resvDrain_post = 0;\n\t\tl3_side.resvDrain_pre = 0;\n\n\t\t/* we must be byte aligned */\n\t\tif ((over_bits = gfc.ResvSize % 8) != 0)\n\t\t\tstuffingBits += over_bits;\n\n\t\tover_bits = (gfc.ResvSize - stuffingBits) - gfc.ResvMax;\n\t\tif (over_bits > 0) {\n\t\t\tassert (0 == over_bits % 8);\n\t\t\tassert (over_bits >= 0);\n\t\t\tstuffingBits += over_bits;\n\t\t}\n\n\t\t/*\n\t\t * NOTE: enabling the NEW_DRAIN code fixes some problems with FhG\n\t\t * decoder shipped with MS Windows operating systems. Using this, it is\n\t\t * even possible to use Gabriel's lax buffer consideration again, which\n\t\t * assumes, any decoder should have a buffer large enough for a 320 kbps\n\t\t * frame at 32 kHz sample rate.\n\t\t * \n\t\t * old drain code: lame -b320 BlackBird.wav --. does not play with\n\t\t * GraphEdit.exe using FhG decoder V1.5 Build 50\n\t\t * \n\t\t * new drain code: lame -b320 BlackBird.wav --. plays fine with\n\t\t * GraphEdit.exe using FhG decoder V1.5 Build 50\n\t\t * \n\t\t * Robert Hegemann, 2010-02-13.\n\t\t */\n\t\t/*\n\t\t * drain as many bits as possible into previous frame ancillary data In\n\t\t * particular, in VBR mode ResvMax may have changed, and we have to make\n\t\t * sure main_data_begin does not create a reservoir bigger than ResvMax\n\t\t * mt 4/00\n\t\t */\n\t\t{\n\t\t\tvar mdb_bytes = Math.min(l3_side.main_data_begin * 8, stuffingBits) / 8;\n\t\t\tl3_side.resvDrain_pre += 8 * mdb_bytes;\n\t\t\tstuffingBits -= 8 * mdb_bytes;\n\t\t\tgfc.ResvSize -= 8 * mdb_bytes;\n\t\t\tl3_side.main_data_begin -= mdb_bytes;\n\t\t}\n\t\t/* drain the rest into this frames ancillary data */\n\t\tl3_side.resvDrain_post += stuffingBits;\n\t\tgfc.ResvSize -= stuffingBits;\n\t}\n}\n\nmodule.exports = Reservoir;\n","function Version() {\n\n    /**\n     * URL for the LAME website.\n     */\n    var LAME_URL = \"http://www.mp3dev.org/\";\n\n    /**\n     * Major version number.\n     */\n    var LAME_MAJOR_VERSION = 3;\n    /**\n     * Minor version number.\n     */\n    var LAME_MINOR_VERSION = 98;\n    /**\n     * Patch level.\n     */\n    var LAME_PATCH_VERSION = 4;\n\n    /**\n     * Major version number.\n     */\n    var PSY_MAJOR_VERSION = 0;\n    /**\n     * Minor version number.\n     */\n    var PSY_MINOR_VERSION = 93;\n\n    /**\n     * A string which describes the version of LAME.\n     *\n     * @return string which describes the version of LAME\n     */\n    this.getLameVersion = function () {\n        // primary to write screen reports\n        return (LAME_MAJOR_VERSION + \".\" + LAME_MINOR_VERSION + \".\" + LAME_PATCH_VERSION);\n    }\n\n    /**\n     * The short version of the LAME version string.\n     *\n     * @return short version of the LAME version string\n     */\n    this.getLameShortVersion = function () {\n        // Adding date and time to version string makes it harder for output\n        // validation\n        return (LAME_MAJOR_VERSION + \".\" + LAME_MINOR_VERSION + \".\" + LAME_PATCH_VERSION);\n    }\n\n    /**\n     * The shortest version of the LAME version string.\n     *\n     * @return shortest version of the LAME version string\n     */\n    this.getLameVeryShortVersion = function () {\n        // Adding date and time to version string makes it harder for output\n        return (\"LAME\" + LAME_MAJOR_VERSION + \".\" + LAME_MINOR_VERSION + \"r\");\n    }\n\n    /**\n     * String which describes the version of GPSYCHO\n     *\n     * @return string which describes the version of GPSYCHO\n     */\n    this.getPsyVersion = function () {\n        return (PSY_MAJOR_VERSION + \".\" + PSY_MINOR_VERSION);\n    }\n\n    /**\n     * String which is a URL for the LAME website.\n     *\n     * @return string which is a URL for the LAME website\n     */\n    this.getLameUrl = function () {\n        return LAME_URL;\n    }\n\n    /**\n     * Quite useless for a java version, however we are compatible ;-)\n     *\n     * @return \"32bits\"\n     */\n    this.getLameOsBitness = function () {\n        return \"32bits\";\n    }\n\n}\n\nmodule.exports = Version;\n","var common = require('./common.js');\nvar System = common.System;\nvar VbrMode = common.VbrMode;\nvar Float = common.Float;\nvar ShortBlock = common.ShortBlock;\nvar Util = common.Util;\nvar Arrays = common.Arrays;\nvar new_array_n = common.new_array_n;\nvar new_byte = common.new_byte;\nvar new_double = common.new_double;\nvar new_float = common.new_float;\nvar new_float_n = common.new_float_n;\nvar new_int = common.new_int;\nvar new_int_n = common.new_int_n;\nvar assert = common.assert;\n\n/**\n * A Vbr header may be present in the ancillary data field of the first frame of\n * an mp3 bitstream<BR>\n * The Vbr header (optionally) contains\n * <UL>\n * <LI>frames total number of audio frames in the bitstream\n * <LI>bytes total number of bytes in the bitstream\n * <LI>toc table of contents\n * </UL>\n *\n * toc (table of contents) gives seek points for random access.<BR>\n * The ith entry determines the seek point for i-percent duration.<BR>\n * seek point in bytes = (toc[i]/256.0) * total_bitstream_bytes<BR>\n * e.g. half duration seek point = (toc[50]/256.0) * total_bitstream_bytes\n */\nVBRTag.NUMTOCENTRIES = 100;\nVBRTag.MAXFRAMESIZE = 2880;\n\nfunction VBRTag() {\n\n    var lame;\n    var bs;\n    var v;\n\n    this.setModules = function (_lame, _bs, _v) {\n        lame = _lame;\n        bs = _bs;\n        v = _v;\n    };\n\n    var FRAMES_FLAG = 0x0001;\n    var BYTES_FLAG = 0x0002;\n    var TOC_FLAG = 0x0004;\n    var VBR_SCALE_FLAG = 0x0008;\n\n    var NUMTOCENTRIES = VBRTag.NUMTOCENTRIES;\n\n    /**\n     * (0xB40) the max freeformat 640 32kHz framesize.\n     */\n    var MAXFRAMESIZE = VBRTag.MAXFRAMESIZE;\n\n    /**\n     * <PRE>\n     *    4 bytes for Header Tag\n     *    4 bytes for Header Flags\n     *  100 bytes for entry (toc)\n     *    4 bytes for frame size\n     *    4 bytes for stream size\n     *    4 bytes for VBR scale. a VBR quality indicator: 0=best 100=worst\n     *   20 bytes for LAME tag.  for example, \"LAME3.12 (beta 6)\"\n     * ___________\n     *  140 bytes\n     * </PRE>\n     */\n    var VBRHEADERSIZE = (NUMTOCENTRIES + 4 + 4 + 4 + 4 + 4);\n\n    var LAMEHEADERSIZE = (VBRHEADERSIZE + 9 + 1 + 1 + 8\n    + 1 + 1 + 3 + 1 + 1 + 2 + 4 + 2 + 2);\n\n    /**\n     * The size of the Xing header MPEG-1, bit rate in kbps.\n     */\n    var XING_BITRATE1 = 128;\n    /**\n     * The size of the Xing header MPEG-2, bit rate in kbps.\n     */\n    var XING_BITRATE2 = 64;\n    /**\n     * The size of the Xing header MPEG-2.5, bit rate in kbps.\n     */\n    var XING_BITRATE25 = 32;\n\n    /**\n     * ISO-8859-1 charset for byte to string operations.\n     */\n    var ISO_8859_1 = null; //Charset.forName(\"ISO-8859-1\");\n\n    /**\n     * VBR header magic string.\n     */\n    var VBRTag0 = \"Xing\";\n    /**\n     * VBR header magic string (VBR == VBRMode.vbr_off).\n     */\n    var VBRTag1 = \"Info\";\n\n    /**\n     * Lookup table for fast CRC-16 computation. Uses the polynomial\n     * x^16+x^15+x^2+1\n     */\n    var crc16Lookup = [0x0000, 0xC0C1, 0xC181, 0x0140,\n        0xC301, 0x03C0, 0x0280, 0xC241, 0xC601, 0x06C0, 0x0780, 0xC741,\n        0x0500, 0xC5C1, 0xC481, 0x0440, 0xCC01, 0x0CC0, 0x0D80, 0xCD41,\n        0x0F00, 0xCFC1, 0xCE81, 0x0E40, 0x0A00, 0xCAC1, 0xCB81, 0x0B40,\n        0xC901, 0x09C0, 0x0880, 0xC841, 0xD801, 0x18C0, 0x1980, 0xD941,\n        0x1B00, 0xDBC1, 0xDA81, 0x1A40, 0x1E00, 0xDEC1, 0xDF81, 0x1F40,\n        0xDD01, 0x1DC0, 0x1C80, 0xDC41, 0x1400, 0xD4C1, 0xD581, 0x1540,\n        0xD701, 0x17C0, 0x1680, 0xD641, 0xD201, 0x12C0, 0x1380, 0xD341,\n        0x1100, 0xD1C1, 0xD081, 0x1040, 0xF001, 0x30C0, 0x3180, 0xF141,\n        0x3300, 0xF3C1, 0xF281, 0x3240, 0x3600, 0xF6C1, 0xF781, 0x3740,\n        0xF501, 0x35C0, 0x3480, 0xF441, 0x3C00, 0xFCC1, 0xFD81, 0x3D40,\n        0xFF01, 0x3FC0, 0x3E80, 0xFE41, 0xFA01, 0x3AC0, 0x3B80, 0xFB41,\n        0x3900, 0xF9C1, 0xF881, 0x3840, 0x2800, 0xE8C1, 0xE981, 0x2940,\n        0xEB01, 0x2BC0, 0x2A80, 0xEA41, 0xEE01, 0x2EC0, 0x2F80, 0xEF41,\n        0x2D00, 0xEDC1, 0xEC81, 0x2C40, 0xE401, 0x24C0, 0x2580, 0xE541,\n        0x2700, 0xE7C1, 0xE681, 0x2640, 0x2200, 0xE2C1, 0xE381, 0x2340,\n        0xE101, 0x21C0, 0x2080, 0xE041, 0xA001, 0x60C0, 0x6180, 0xA141,\n        0x6300, 0xA3C1, 0xA281, 0x6240, 0x6600, 0xA6C1, 0xA781, 0x6740,\n        0xA501, 0x65C0, 0x6480, 0xA441, 0x6C00, 0xACC1, 0xAD81, 0x6D40,\n        0xAF01, 0x6FC0, 0x6E80, 0xAE41, 0xAA01, 0x6AC0, 0x6B80, 0xAB41,\n        0x6900, 0xA9C1, 0xA881, 0x6840, 0x7800, 0xB8C1, 0xB981, 0x7940,\n        0xBB01, 0x7BC0, 0x7A80, 0xBA41, 0xBE01, 0x7EC0, 0x7F80, 0xBF41,\n        0x7D00, 0xBDC1, 0xBC81, 0x7C40, 0xB401, 0x74C0, 0x7580, 0xB541,\n        0x7700, 0xB7C1, 0xB681, 0x7640, 0x7200, 0xB2C1, 0xB381, 0x7340,\n        0xB101, 0x71C0, 0x7080, 0xB041, 0x5000, 0x90C1, 0x9181, 0x5140,\n        0x9301, 0x53C0, 0x5280, 0x9241, 0x9601, 0x56C0, 0x5780, 0x9741,\n        0x5500, 0x95C1, 0x9481, 0x5440, 0x9C01, 0x5CC0, 0x5D80, 0x9D41,\n        0x5F00, 0x9FC1, 0x9E81, 0x5E40, 0x5A00, 0x9AC1, 0x9B81, 0x5B40,\n        0x9901, 0x59C0, 0x5880, 0x9841, 0x8801, 0x48C0, 0x4980, 0x8941,\n        0x4B00, 0x8BC1, 0x8A81, 0x4A40, 0x4E00, 0x8EC1, 0x8F81, 0x4F40,\n        0x8D01, 0x4DC0, 0x4C80, 0x8C41, 0x4400, 0x84C1, 0x8581, 0x4540,\n        0x8701, 0x47C0, 0x4680, 0x8641, 0x8201, 0x42C0, 0x4380, 0x8341,\n        0x4100, 0x81C1, 0x8081, 0x4040];\n\n    /***********************************************************************\n     * Robert Hegemann 2001-01-17\n     ***********************************************************************/\n\n    function addVbr(v, bitrate) {\n        v.nVbrNumFrames++;\n        v.sum += bitrate;\n        v.seen++;\n\n        if (v.seen < v.want) {\n            return;\n        }\n\n        if (v.pos < v.size) {\n            v.bag[v.pos] = v.sum;\n            v.pos++;\n            v.seen = 0;\n        }\n        if (v.pos == v.size) {\n            for (var i = 1; i < v.size; i += 2) {\n                v.bag[i / 2] = v.bag[i];\n            }\n            v.want *= 2;\n            v.pos /= 2;\n        }\n    }\n\n    function xingSeekTable(v, t) {\n        if (v.pos <= 0)\n            return;\n\n        for (var i = 1; i < NUMTOCENTRIES; ++i) {\n            var j = i / NUMTOCENTRIES, act, sum;\n            var indx = 0 | (Math.floor(j * v.pos));\n            if (indx > v.pos - 1)\n                indx = v.pos - 1;\n            act = v.bag[indx];\n            sum = v.sum;\n            var seek_point = 0 | (256. * act / sum);\n            if (seek_point > 255)\n                seek_point = 255;\n            t[i] = 0xff & seek_point;\n        }\n    }\n\n    /**\n     * Add VBR entry, used to fill the VBR TOC entries.\n     *\n     * @param gfp\n     *            global flags\n     */\n    this.addVbrFrame = function (gfp) {\n        var gfc = gfp.internal_flags;\n        var kbps = Tables.bitrate_table[gfp.version][gfc.bitrate_index];\n        assert(gfc.VBR_seek_table.bag != null);\n        addVbr(gfc.VBR_seek_table, kbps);\n    }\n\n    /**\n     * Read big endian integer (4-bytes) from header.\n     *\n     * @param buf\n     *            header containing the integer\n     * @param bufPos\n     *            offset into the header\n     * @return extracted integer\n     */\n    function extractInteger(buf, bufPos) {\n        var x = buf[bufPos + 0] & 0xff;\n        x <<= 8;\n        x |= buf[bufPos + 1] & 0xff;\n        x <<= 8;\n        x |= buf[bufPos + 2] & 0xff;\n        x <<= 8;\n        x |= buf[bufPos + 3] & 0xff;\n        return x;\n    }\n\n    /**\n     * Write big endian integer (4-bytes) in the header.\n     *\n     * @param buf\n     *            header to write the integer into\n     * @param bufPos\n     *            offset into the header\n     * @param value\n     *            integer value to write\n     */\n    function createInteger(buf, bufPos, value) {\n        buf[bufPos + 0] = 0xff & ((value >> 24) & 0xff);\n        buf[bufPos + 1] = 0xff & ((value >> 16) & 0xff);\n        buf[bufPos + 2] = 0xff & ((value >> 8) & 0xff);\n        buf[bufPos + 3] = 0xff & (value & 0xff);\n    }\n\n    /**\n     * Write big endian short (2-bytes) in the header.\n     *\n     * @param buf\n     *            header to write the integer into\n     * @param bufPos\n     *            offset into the header\n     * @param value\n     *            integer value to write\n     */\n    function createShort(buf, bufPos, value) {\n        buf[bufPos + 0] = 0xff & ((value >> 8) & 0xff);\n        buf[bufPos + 1] = 0xff & (value & 0xff);\n    }\n\n    /**\n     * Check for magic strings (Xing/Info).\n     *\n     * @param buf\n     *            header to check\n     * @param bufPos\n     *            header offset to check\n     * @return magic string found\n     */\n    function isVbrTag(buf, bufPos) {\n        return new String(buf, bufPos, VBRTag0.length(), ISO_8859_1)\n                .equals(VBRTag0)\n            || new String(buf, bufPos, VBRTag1.length(), ISO_8859_1)\n                .equals(VBRTag1);\n    }\n\n    function shiftInBitsValue(x, n, v) {\n        return 0xff & ((x << n) | (v & ~(-1 << n)));\n    }\n\n    /**\n     * Construct the MP3 header using the settings of the global flags.\n     *\n     * <img src=\"1000px-Mp3filestructure.svg.png\">\n     *\n     * @param gfp\n     *            global flags\n     * @param buffer\n     *            header\n     */\n    function setLameTagFrameHeader(gfp, buffer) {\n        var gfc = gfp.internal_flags;\n\n        // MP3 Sync Word\n        buffer[0] = shiftInBitsValue(buffer[0], 8, 0xff);\n\n        buffer[1] = shiftInBitsValue(buffer[1], 3, 7);\n        buffer[1] = shiftInBitsValue(buffer[1], 1,\n            (gfp.out_samplerate < 16000) ? 0 : 1);\n        // Version\n        buffer[1] = shiftInBitsValue(buffer[1], 1, gfp.version);\n        // 01 == Layer 3\n        buffer[1] = shiftInBitsValue(buffer[1], 2, 4 - 3);\n        // Error protection\n        buffer[1] = shiftInBitsValue(buffer[1], 1, (!gfp.error_protection) ? 1\n            : 0);\n\n        // Bit rate\n        buffer[2] = shiftInBitsValue(buffer[2], 4, gfc.bitrate_index);\n        // Frequency\n        buffer[2] = shiftInBitsValue(buffer[2], 2, gfc.samplerate_index);\n        // Pad. Bit\n        buffer[2] = shiftInBitsValue(buffer[2], 1, 0);\n        // Priv. Bit\n        buffer[2] = shiftInBitsValue(buffer[2], 1, gfp.extension);\n\n        // Mode\n        buffer[3] = shiftInBitsValue(buffer[3], 2, gfp.mode.ordinal());\n        // Mode extension (Used with Joint Stereo)\n        buffer[3] = shiftInBitsValue(buffer[3], 2, gfc.mode_ext);\n        // Copy\n        buffer[3] = shiftInBitsValue(buffer[3], 1, gfp.copyright);\n        // Original\n        buffer[3] = shiftInBitsValue(buffer[3], 1, gfp.original);\n        // Emphasis\n        buffer[3] = shiftInBitsValue(buffer[3], 2, gfp.emphasis);\n\n        /* the default VBR header. 48 kbps layer III, no padding, no crc */\n        /* but sampling freq, mode and copyright/copy protection taken */\n        /* from first valid frame */\n        buffer[0] = 0xff;\n        var abyte = 0xff & (buffer[1] & 0xf1);\n        var bitrate;\n        if (1 == gfp.version) {\n            bitrate = XING_BITRATE1;\n        } else {\n            if (gfp.out_samplerate < 16000)\n                bitrate = XING_BITRATE25;\n            else\n                bitrate = XING_BITRATE2;\n        }\n\n        if (gfp.VBR == VbrMode.vbr_off)\n            bitrate = gfp.brate;\n\n        var bbyte;\n        if (gfp.free_format)\n            bbyte = 0x00;\n        else\n            bbyte = 0xff & (16 * lame.BitrateIndex(bitrate, gfp.version,\n                    gfp.out_samplerate));\n\n        /*\n         * Use as much of the info from the real frames in the Xing header:\n         * samplerate, channels, crc, etc...\n         */\n        if (gfp.version == 1) {\n            /* MPEG1 */\n            buffer[1] = 0xff & (abyte | 0x0a);\n            /* was 0x0b; */\n            abyte = 0xff & (buffer[2] & 0x0d);\n            /* AF keep also private bit */\n            buffer[2] = 0xff & (bbyte | abyte);\n            /* 64kbs MPEG1 frame */\n        } else {\n            /* MPEG2 */\n            buffer[1] = 0xff & (abyte | 0x02);\n            /* was 0x03; */\n            abyte = 0xff & (buffer[2] & 0x0d);\n            /* AF keep also private bit */\n            buffer[2] = 0xff & (bbyte | abyte);\n            /* 64kbs MPEG2 frame */\n        }\n    }\n\n    /**\n     * Get VBR tag information\n     *\n     * @param buf\n     *            header to analyze\n     * @param bufPos\n     *            offset into the header\n     * @return VBR tag data\n     */\n    this.getVbrTag = function (buf) {\n        var pTagData = new VBRTagData();\n        var bufPos = 0;\n\n        /* get Vbr header data */\n        pTagData.flags = 0;\n\n        /* get selected MPEG header data */\n        var hId = (buf[bufPos + 1] >> 3) & 1;\n        var hSrIndex = (buf[bufPos + 2] >> 2) & 3;\n        var hMode = (buf[bufPos + 3] >> 6) & 3;\n        var hBitrate = ((buf[bufPos + 2] >> 4) & 0xf);\n        hBitrate = Tables.bitrate_table[hId][hBitrate];\n\n        /* check for FFE syncword */\n        if ((buf[bufPos + 1] >> 4) == 0xE)\n            pTagData.samprate = Tables.samplerate_table[2][hSrIndex];\n        else\n            pTagData.samprate = Tables.samplerate_table[hId][hSrIndex];\n\n        /* determine offset of header */\n        if (hId != 0) {\n            /* mpeg1 */\n            if (hMode != 3)\n                bufPos += (32 + 4);\n            else\n                bufPos += (17 + 4);\n        } else {\n            /* mpeg2 */\n            if (hMode != 3)\n                bufPos += (17 + 4);\n            else\n                bufPos += (9 + 4);\n        }\n\n        if (!isVbrTag(buf, bufPos))\n            return null;\n\n        bufPos += 4;\n\n        pTagData.hId = hId;\n\n        /* get flags */\n        var head_flags = pTagData.flags = extractInteger(buf, bufPos);\n        bufPos += 4;\n\n        if ((head_flags & FRAMES_FLAG) != 0) {\n            pTagData.frames = extractInteger(buf, bufPos);\n            bufPos += 4;\n        }\n\n        if ((head_flags & BYTES_FLAG) != 0) {\n            pTagData.bytes = extractInteger(buf, bufPos);\n            bufPos += 4;\n        }\n\n        if ((head_flags & TOC_FLAG) != 0) {\n            if (pTagData.toc != null) {\n                for (var i = 0; i < NUMTOCENTRIES; i++)\n                    pTagData.toc[i] = buf[bufPos + i];\n            }\n            bufPos += NUMTOCENTRIES;\n        }\n\n        pTagData.vbrScale = -1;\n\n        if ((head_flags & VBR_SCALE_FLAG) != 0) {\n            pTagData.vbrScale = extractInteger(buf, bufPos);\n            bufPos += 4;\n        }\n\n        pTagData.headersize = ((hId + 1) * 72000 * hBitrate)\n            / pTagData.samprate;\n\n        bufPos += 21;\n        var encDelay = buf[bufPos + 0] << 4;\n        encDelay += buf[bufPos + 1] >> 4;\n        var encPadding = (buf[bufPos + 1] & 0x0F) << 8;\n        encPadding += buf[bufPos + 2] & 0xff;\n        /* check for reasonable values (this may be an old Xing header, */\n        /* not a INFO tag) */\n        if (encDelay < 0 || encDelay > 3000)\n            encDelay = -1;\n        if (encPadding < 0 || encPadding > 3000)\n            encPadding = -1;\n\n        pTagData.encDelay = encDelay;\n        pTagData.encPadding = encPadding;\n\n        /* success */\n        return pTagData;\n    }\n\n    /**\n     * Initializes the header\n     *\n     * @param gfp\n     *            global flags\n     */\n    this.InitVbrTag = function (gfp) {\n        var gfc = gfp.internal_flags;\n\n        /**\n         * <PRE>\n         * Xing VBR pretends to be a 48kbs layer III frame.  (at 44.1kHz).\n         * (at 48kHz they use 56kbs since 48kbs frame not big enough for\n         * table of contents)\n         * let's always embed Xing header inside a 64kbs layer III frame.\n         * this gives us enough room for a LAME version string too.\n         * size determined by sampling frequency (MPEG1)\n         * 32kHz:    216 bytes@48kbs    288bytes@ 64kbs\n         * 44.1kHz:  156 bytes          208bytes@64kbs     (+1 if padding = 1)\n         * 48kHz:    144 bytes          192\n         *\n         * MPEG 2 values are the same since the framesize and samplerate\n         * are each reduced by a factor of 2.\n         * </PRE>\n         */\n        var kbps_header;\n        if (1 == gfp.version) {\n            kbps_header = XING_BITRATE1;\n        } else {\n            if (gfp.out_samplerate < 16000)\n                kbps_header = XING_BITRATE25;\n            else\n                kbps_header = XING_BITRATE2;\n        }\n\n        if (gfp.VBR == VbrMode.vbr_off)\n            kbps_header = gfp.brate;\n\n        // make sure LAME Header fits into Frame\n        var totalFrameSize = ((gfp.version + 1) * 72000 * kbps_header)\n            / gfp.out_samplerate;\n        var headerSize = (gfc.sideinfo_len + LAMEHEADERSIZE);\n        gfc.VBR_seek_table.TotalFrameSize = totalFrameSize;\n        if (totalFrameSize < headerSize || totalFrameSize > MAXFRAMESIZE) {\n            /* disable tag, it wont fit */\n            gfp.bWriteVbrTag = false;\n            return;\n        }\n\n        gfc.VBR_seek_table.nVbrNumFrames = 0;\n        gfc.VBR_seek_table.nBytesWritten = 0;\n        gfc.VBR_seek_table.sum = 0;\n\n        gfc.VBR_seek_table.seen = 0;\n        gfc.VBR_seek_table.want = 1;\n        gfc.VBR_seek_table.pos = 0;\n\n        if (gfc.VBR_seek_table.bag == null) {\n            gfc.VBR_seek_table.bag = new int[400];\n            gfc.VBR_seek_table.size = 400;\n        }\n\n        // write dummy VBR tag of all 0's into bitstream\n        var buffer = new_byte(MAXFRAMESIZE);\n\n        setLameTagFrameHeader(gfp, buffer);\n        var n = gfc.VBR_seek_table.TotalFrameSize;\n        for (var i = 0; i < n; ++i) {\n            bs.add_dummy_byte(gfp, buffer[i] & 0xff, 1);\n        }\n    }\n\n    /**\n     * Fast CRC-16 computation (uses table crc16Lookup).\n     *\n     * @param value\n     * @param crc\n     * @return\n     */\n    function crcUpdateLookup(value, crc) {\n        var tmp = crc ^ value;\n        crc = (crc >> 8) ^ crc16Lookup[tmp & 0xff];\n        return crc;\n    }\n\n    this.updateMusicCRC = function (crc, buffer, bufferPos, size) {\n        for (var i = 0; i < size; ++i)\n            crc[0] = crcUpdateLookup(buffer[bufferPos + i], crc[0]);\n    }\n\n    /**\n     * Write LAME info: mini version + info on various switches used (Jonathan\n     * Dee 2001/08/31).\n     *\n     * @param gfp\n     *            global flags\n     * @param musicLength\n     *            music length\n     * @param streamBuffer\n     *            pointer to output buffer\n     * @param streamBufferPos\n     *            offset into the output buffer\n     * @param crc\n     *            computation of CRC-16 of Lame Tag so far (starting at frame\n     *            sync)\n     * @return number of bytes written to the stream\n     */\n    function putLameVBR(gfp, musicLength, streamBuffer, streamBufferPos, crc) {\n        var gfc = gfp.internal_flags;\n        var bytesWritten = 0;\n\n        /* encoder delay */\n        var encDelay = gfp.encoder_delay;\n        /* encoder padding */\n        var encPadding = gfp.encoder_padding;\n\n        /* recall: gfp.VBR_q is for example set by the switch -V */\n        /* gfp.quality by -q, -h, -f, etc */\n        var quality = (100 - 10 * gfp.VBR_q - gfp.quality);\n\n        var version = v.getLameVeryShortVersion();\n        var vbr;\n        var revision = 0x00;\n        var revMethod;\n        // numbering different in vbr_mode vs. Lame tag\n        var vbrTypeTranslator = [1, 5, 3, 2, 4, 0, 3];\n        var lowpass = 0 | (((gfp.lowpassfreq / 100.0) + .5) > 255 ? 255\n                : (gfp.lowpassfreq / 100.0) + .5);\n        var peakSignalAmplitude = 0;\n        var radioReplayGain = 0;\n        var audiophileReplayGain = 0;\n        var noiseShaping = gfp.internal_flags.noise_shaping;\n        var stereoMode = 0;\n        var nonOptimal = 0;\n        var sourceFreq = 0;\n        var misc = 0;\n        var musicCRC = 0;\n\n        // psy model type: Gpsycho or NsPsytune\n        var expNPsyTune = (gfp.exp_nspsytune & 1) != 0;\n        var safeJoint = (gfp.exp_nspsytune & 2) != 0;\n        var noGapMore = false;\n        var noGapPrevious = false;\n        var noGapCount = gfp.internal_flags.nogap_total;\n        var noGapCurr = gfp.internal_flags.nogap_current;\n\n        // 4 bits\n        var athType = gfp.ATHtype;\n        var flags = 0;\n\n        // vbr modes\n        var abrBitrate;\n        switch (gfp.VBR) {\n            case vbr_abr:\n                abrBitrate = gfp.VBR_mean_bitrate_kbps;\n                break;\n            case vbr_off:\n                abrBitrate = gfp.brate;\n                break;\n            default:\n                abrBitrate = gfp.VBR_min_bitrate_kbps;\n        }\n\n        // revision and vbr method\n        if (gfp.VBR.ordinal() < vbrTypeTranslator.length)\n            vbr = vbrTypeTranslator[gfp.VBR.ordinal()];\n        else\n            vbr = 0x00; // unknown\n\n        revMethod = 0x10 * revision + vbr;\n\n        // ReplayGain\n        if (gfc.findReplayGain) {\n            if (gfc.RadioGain > 0x1FE)\n                gfc.RadioGain = 0x1FE;\n            if (gfc.RadioGain < -0x1FE)\n                gfc.RadioGain = -0x1FE;\n\n            // set name code\n            radioReplayGain = 0x2000;\n            // set originator code to `determined automatically'\n            radioReplayGain |= 0xC00;\n\n            if (gfc.RadioGain >= 0) {\n                // set gain adjustment\n                radioReplayGain |= gfc.RadioGain;\n            } else {\n                // set the sign bit\n                radioReplayGain |= 0x200;\n                // set gain adjustment\n                radioReplayGain |= -gfc.RadioGain;\n            }\n        }\n\n        // peak sample\n        if (gfc.findPeakSample)\n            peakSignalAmplitude = Math\n                .abs(0 | ((( gfc.PeakSample) / 32767.0) * Math.pow(2, 23) + .5));\n\n        // nogap\n        if (noGapCount != -1) {\n            if (noGapCurr > 0)\n                noGapPrevious = true;\n\n            if (noGapCurr < noGapCount - 1)\n                noGapMore = true;\n        }\n\n        // flags\n        flags = athType + ((expNPsyTune ? 1 : 0) << 4)\n            + ((safeJoint ? 1 : 0) << 5) + ((noGapMore ? 1 : 0) << 6)\n            + ((noGapPrevious ? 1 : 0) << 7);\n\n        if (quality < 0)\n            quality = 0;\n\n        // stereo mode field (Intensity stereo is not implemented)\n        switch (gfp.mode) {\n            case MONO:\n                stereoMode = 0;\n                break;\n            case STEREO:\n                stereoMode = 1;\n                break;\n            case DUAL_CHANNEL:\n                stereoMode = 2;\n                break;\n            case JOINT_STEREO:\n                if (gfp.force_ms)\n                    stereoMode = 4;\n                else\n                    stereoMode = 3;\n                break;\n            case NOT_SET:\n            //$FALL-THROUGH$\n            default:\n                stereoMode = 7;\n                break;\n        }\n\n        if (gfp.in_samplerate <= 32000)\n            sourceFreq = 0x00;\n        else if (gfp.in_samplerate == 48000)\n            sourceFreq = 0x02;\n        else if (gfp.in_samplerate > 48000)\n            sourceFreq = 0x03;\n        else {\n            // default is 44100Hz\n            sourceFreq = 0x01;\n        }\n\n        // Check if the user overrided the default LAME behavior with some\n        // nasty options\n        if (gfp.short_blocks == ShortBlock.short_block_forced\n            || gfp.short_blocks == ShortBlock.short_block_dispensed\n            || ((gfp.lowpassfreq == -1) && (gfp.highpassfreq == -1)) || /* \"-k\" */\n            (gfp.scale_left < gfp.scale_right)\n            || (gfp.scale_left > gfp.scale_right)\n            || (gfp.disable_reservoir && gfp.brate < 320) || gfp.noATH\n            || gfp.ATHonly || (athType == 0) || gfp.in_samplerate <= 32000)\n            nonOptimal = 1;\n\n        misc = noiseShaping + (stereoMode << 2) + (nonOptimal << 5)\n            + (sourceFreq << 6);\n\n        musicCRC = gfc.nMusicCRC;\n\n        // Write all this information into the stream\n\n        createInteger(streamBuffer, streamBufferPos + bytesWritten, quality);\n        bytesWritten += 4;\n\n        for (var j = 0; j < 9; j++) {\n            streamBuffer[streamBufferPos + bytesWritten + j] = 0xff & version .charAt(j);\n        }\n        bytesWritten += 9;\n\n        streamBuffer[streamBufferPos + bytesWritten] = 0xff & revMethod;\n        bytesWritten++;\n\n        streamBuffer[streamBufferPos + bytesWritten] = 0xff & lowpass;\n        bytesWritten++;\n\n        createInteger(streamBuffer, streamBufferPos + bytesWritten,\n            peakSignalAmplitude);\n        bytesWritten += 4;\n\n        createShort(streamBuffer, streamBufferPos + bytesWritten,\n            radioReplayGain);\n        bytesWritten += 2;\n\n        createShort(streamBuffer, streamBufferPos + bytesWritten,\n            audiophileReplayGain);\n        bytesWritten += 2;\n\n        streamBuffer[streamBufferPos + bytesWritten] = 0xff & flags;\n        bytesWritten++;\n\n        if (abrBitrate >= 255)\n            streamBuffer[streamBufferPos + bytesWritten] = 0xFF;\n        else\n            streamBuffer[streamBufferPos + bytesWritten] = 0xff & abrBitrate;\n        bytesWritten++;\n\n        streamBuffer[streamBufferPos + bytesWritten] = 0xff & (encDelay >> 4);\n        streamBuffer[streamBufferPos + bytesWritten + 1] = 0xff & ((encDelay << 4) + (encPadding >> 8));\n        streamBuffer[streamBufferPos + bytesWritten + 2] = 0xff & encPadding;\n\n        bytesWritten += 3;\n\n        streamBuffer[streamBufferPos + bytesWritten] = 0xff & misc;\n        bytesWritten++;\n\n        // unused in rev0\n        streamBuffer[streamBufferPos + bytesWritten++] = 0;\n\n        createShort(streamBuffer, streamBufferPos + bytesWritten, gfp.preset);\n        bytesWritten += 2;\n\n        createInteger(streamBuffer, streamBufferPos + bytesWritten, musicLength);\n        bytesWritten += 4;\n\n        createShort(streamBuffer, streamBufferPos + bytesWritten, musicCRC);\n        bytesWritten += 2;\n\n        // Calculate tag CRC.... must be done here, since it includes previous\n        // information\n\n        for (var i = 0; i < bytesWritten; i++)\n            crc = crcUpdateLookup(streamBuffer[streamBufferPos + i], crc);\n\n        createShort(streamBuffer, streamBufferPos + bytesWritten, crc);\n        bytesWritten += 2;\n\n        return bytesWritten;\n    }\n\n    function skipId3v2(fpStream) {\n        // seek to the beginning of the stream\n        fpStream.seek(0);\n        // read 10 bytes in case there's an ID3 version 2 header here\n        var id3v2Header = new_byte(10);\n        fpStream.readFully(id3v2Header);\n        /* does the stream begin with the ID3 version 2 file identifier? */\n        var id3v2TagSize;\n        if (!new String(id3v2Header, \"ISO-8859-1\").startsWith(\"ID3\")) {\n            /*\n             * the tag size (minus the 10-byte header) is encoded into four\n             * bytes where the most significant bit is clear in each byte\n             */\n            id3v2TagSize = (((id3v2Header[6] & 0x7f) << 21)\n                | ((id3v2Header[7] & 0x7f) << 14)\n                | ((id3v2Header[8] & 0x7f) << 7) | (id3v2Header[9] & 0x7f))\n                + id3v2Header.length;\n        } else {\n            /* no ID3 version 2 tag in this stream */\n            id3v2TagSize = 0;\n        }\n        return id3v2TagSize;\n    }\n\n    this.getLameTagFrame = function (gfp, buffer) {\n        var gfc = gfp.internal_flags;\n\n        if (!gfp.bWriteVbrTag) {\n            return 0;\n        }\n        if (gfc.Class_ID != Lame.LAME_ID) {\n            return 0;\n        }\n        if (gfc.VBR_seek_table.pos <= 0) {\n            return 0;\n        }\n        if (buffer.length < gfc.VBR_seek_table.TotalFrameSize) {\n            return gfc.VBR_seek_table.TotalFrameSize;\n        }\n\n        Arrays.fill(buffer, 0, gfc.VBR_seek_table.TotalFrameSize, 0);\n\n        // 4 bytes frame header\n        setLameTagFrameHeader(gfp, buffer);\n\n        // Create TOC entries\n        var toc = new_byte(NUMTOCENTRIES);\n\n        if (gfp.free_format) {\n            for (var i = 1; i < NUMTOCENTRIES; ++i)\n                toc[i] = 0xff & (255 * i / 100);\n        } else {\n            xingSeekTable(gfc.VBR_seek_table, toc);\n        }\n\n        // Start writing the tag after the zero frame\n        var streamIndex = gfc.sideinfo_len;\n        /**\n         * Note: Xing header specifies that Xing data goes in the ancillary data\n         * with NO ERROR PROTECTION. If error protecton in enabled, the Xing\n         * data still starts at the same offset, and now it is in sideinfo data\n         * block, and thus will not decode correctly by non-Xing tag aware\n         * players\n         */\n        if (gfp.error_protection)\n            streamIndex -= 2;\n\n        // Put Vbr tag\n        if (gfp.VBR == VbrMode.vbr_off) {\n            buffer[streamIndex++] = 0xff & VBRTag1.charAt(0);\n            buffer[streamIndex++] = 0xff & VBRTag1.charAt(1);\n            buffer[streamIndex++] = 0xff & VBRTag1.charAt(2);\n            buffer[streamIndex++] = 0xff & VBRTag1.charAt(3);\n\n        } else {\n            buffer[streamIndex++] = 0xff & VBRTag0.charAt(0);\n            buffer[streamIndex++] = 0xff & VBRTag0.charAt(1);\n            buffer[streamIndex++] = 0xff & VBRTag0.charAt(2);\n            buffer[streamIndex++] = 0xff & VBRTag0.charAt(3);\n        }\n\n        // Put header flags\n        createInteger(buffer, streamIndex, FRAMES_FLAG + BYTES_FLAG + TOC_FLAG\n            + VBR_SCALE_FLAG);\n        streamIndex += 4;\n\n        // Put Total Number of frames\n        createInteger(buffer, streamIndex, gfc.VBR_seek_table.nVbrNumFrames);\n        streamIndex += 4;\n\n        // Put total audio stream size, including Xing/LAME Header\n        var streamSize = (gfc.VBR_seek_table.nBytesWritten + gfc.VBR_seek_table.TotalFrameSize);\n        createInteger(buffer, streamIndex, 0 | streamSize);\n        streamIndex += 4;\n\n        /* Put TOC */\n        System.arraycopy(toc, 0, buffer, streamIndex, toc.length);\n        streamIndex += toc.length;\n\n        if (gfp.error_protection) {\n            // (jo) error_protection: add crc16 information to header\n            bs.CRC_writeheader(gfc, buffer);\n        }\n\n        // work out CRC so far: initially crc = 0\n        var crc = 0x00;\n        for (var i = 0; i < streamIndex; i++)\n            crc = crcUpdateLookup(buffer[i], crc);\n        // Put LAME VBR info\n        streamIndex += putLameVBR(gfp, streamSize, buffer, streamIndex, crc);\n\n        return gfc.VBR_seek_table.TotalFrameSize;\n    }\n\n    /**\n     * Write final VBR tag to the file.\n     *\n     * @param gfp\n     *            global flags\n     * @param stream\n     *            stream to add the VBR tag to\n     * @return 0 (OK), -1 else\n     * @throws IOException\n     *             I/O error\n     */\n    this.putVbrTag = function (gfp, stream) {\n        var gfc = gfp.internal_flags;\n\n        if (gfc.VBR_seek_table.pos <= 0)\n            return -1;\n\n        // Seek to end of file\n        stream.seek(stream.length());\n\n        // Get file size, abort if file has zero length.\n        if (stream.length() == 0)\n            return -1;\n\n        // The VBR tag may NOT be located at the beginning of the stream. If an\n        // ID3 version 2 tag was added, then it must be skipped to write the VBR\n        // tag data.\n        var id3v2TagSize = skipId3v2(stream);\n\n        // Seek to the beginning of the stream\n        stream.seek(id3v2TagSize);\n\n        var buffer = new_byte(MAXFRAMESIZE);\n        var bytes = getLameTagFrame(gfp, buffer);\n        if (bytes > buffer.length) {\n            return -1;\n        }\n\n        if (bytes < 1) {\n            return 0;\n        }\n\n        // Put it all to disk again\n        stream.write(buffer, 0, bytes);\n        // success\n        return 0;\n    }\n\n}\n\nmodule.exports = VBRTag;\n","var common = require('./common.js');\nvar System = common.System;\nvar VbrMode = common.VbrMode;\nvar Float = common.Float;\nvar ShortBlock = common.ShortBlock;\nvar Util = common.Util;\nvar Arrays = common.Arrays;\nvar new_array_n = common.new_array_n;\nvar new_byte = common.new_byte;\nvar new_double = common.new_double;\nvar new_float = common.new_float;\nvar new_float_n = common.new_float_n;\nvar new_int = common.new_int;\nvar new_int_n = common.new_int_n;\nvar assert = common.assert;\n\nLame = require('./Lame.js');\nPresets = require('./Presets.js');\nGainAnalysis = require('./GainAnalysis.js');\nQuantizePVT = require('./QuantizePVT.js');\nQuantize = require('./Quantize.js');\nTakehiro = require('./Takehiro.js');\nReservoir = require('./Reservoir.js');\nMPEGMode = require('./MPEGMode.js');\nBitStream = require('./BitStream.js');\nvar Encoder = require('./Encoder.js');\nvar Version = require('./Version.js');\nvar VBRTag = require('./VBRTag.js');\n\nfunction GetAudio() {\n    var parse;\n    var mpg;\n\n    this.setModules = function (parse2, mpg2) {\n        parse = parse2;\n        mpg = mpg2;\n    }\n}\n\n\nfunction Parse() {\n    var ver;\n    var id3;\n    var pre;\n\n    this.setModules = function (ver2, id32, pre2) {\n        ver = ver2;\n        id3 = id32;\n        pre = pre2;\n    }\n}\n\nfunction MPGLib() {\n}\n\nfunction ID3Tag() {\n    var bits;\n    var ver;\n\n    this.setModules = function (_bits, _ver) {\n        bits = _bits;\n        ver = _ver;\n    }\n}\n\nfunction Mp3Encoder(channels, samplerate, kbps) {\n    if (arguments.length != 3) {\n        console.error('WARN: Mp3Encoder(channels, samplerate, kbps) not specified');\n        channels = 1;\n        samplerate = 44100;\n        kbps = 128;\n    }\n    var lame = new Lame();\n    var gaud = new GetAudio();\n    var ga = new GainAnalysis();\n    var bs = new BitStream();\n    var p = new Presets();\n    var qupvt = new QuantizePVT();\n    var qu = new Quantize();\n    var vbr = new VBRTag();\n    var ver = new Version();\n    var id3 = new ID3Tag();\n    var rv = new Reservoir();\n    var tak = new Takehiro();\n    var parse = new Parse();\n    var mpg = new MPGLib();\n\n    lame.setModules(ga, bs, p, qupvt, qu, vbr, ver, id3, mpg);\n    bs.setModules(ga, mpg, ver, vbr);\n    id3.setModules(bs, ver);\n    p.setModules(lame);\n    qu.setModules(bs, rv, qupvt, tak);\n    qupvt.setModules(tak, rv, lame.enc.psy);\n    rv.setModules(bs);\n    tak.setModules(qupvt);\n    vbr.setModules(lame, bs, ver);\n    gaud.setModules(parse, mpg);\n    parse.setModules(ver, id3, p);\n\n    var gfp = lame.lame_init();\n\n    gfp.num_channels = channels;\n    gfp.in_samplerate = samplerate;\n    gfp.brate = kbps;\n    gfp.mode = MPEGMode.STEREO;\n    gfp.quality = 3;\n    gfp.bWriteVbrTag = false;\n    gfp.disable_reservoir = true;\n    gfp.write_id3tag_automatic = false;\n\n    var retcode = lame.lame_init_params(gfp);\n    assert(0 == retcode);\n    var maxSamples = 1152;\n    var mp3buf_size = 0 | (1.25 * maxSamples + 7200);\n    var mp3buf = new_byte(mp3buf_size);\n\n    this.encodeBuffer = function (left, right) {\n        if (channels == 1) {\n            right = left;\n        }\n        assert(left.length == right.length);\n        if (left.length > maxSamples) {\n            maxSamples = left.length;\n            mp3buf_size = 0 | (1.25 * maxSamples + 7200);\n            mp3buf = new_byte(mp3buf_size);\n        }\n\n        var _sz = lame.lame_encode_buffer(gfp, left, right, left.length, mp3buf, 0, mp3buf_size);\n        return new Int8Array(mp3buf.subarray(0, _sz));\n    };\n\n    this.flush = function () {\n        var _sz = lame.lame_encode_flush(gfp, mp3buf, 0, mp3buf_size);\n        return new Int8Array(mp3buf.subarray(0, _sz));\n    };\n}\n\nfunction WavHeader() {\n    this.dataOffset = 0;\n    this.dataLen = 0;\n    this.channels = 0;\n    this.sampleRate = 0;\n}\n\nfunction fourccToInt(fourcc) {\n    return fourcc.charCodeAt(0) << 24 | fourcc.charCodeAt(1) << 16 | fourcc.charCodeAt(2) << 8 | fourcc.charCodeAt(3);\n}\n\nWavHeader.RIFF = fourccToInt(\"RIFF\");\nWavHeader.WAVE = fourccToInt(\"WAVE\");\nWavHeader.fmt_ = fourccToInt(\"fmt \");\nWavHeader.data = fourccToInt(\"data\");\n\nWavHeader.readHeader = function (dataView) {\n    var w = new WavHeader();\n\n    var header = dataView.getUint32(0, false);\n    if (WavHeader.RIFF != header) {\n        return;\n    }\n    var fileLen = dataView.getUint32(4, true);\n    if (WavHeader.WAVE != dataView.getUint32(8, false)) {\n        return;\n    }\n    if (WavHeader.fmt_ != dataView.getUint32(12, false)) {\n        return;\n    }\n    var fmtLen = dataView.getUint32(16, true);\n    var pos = 16 + 4;\n    switch (fmtLen) {\n        case 16:\n        case 18:\n            w.channels = dataView.getUint16(pos + 2, true);\n            w.sampleRate = dataView.getUint32(pos + 4, true);\n            break;\n        default:\n            throw 'extended fmt chunk not implemented';\n    }\n    pos += fmtLen;\n    var data = WavHeader.data;\n    var len = 0;\n    while (data != header) {\n        header = dataView.getUint32(pos, false);\n        len = dataView.getUint32(pos + 4, true);\n        if (data == header) {\n            break;\n        }\n        pos += (len + 8);\n    }\n    w.dataLen = len;\n    w.dataOffset = pos + 8;\n    return w;\n};\n\nmodule.exports.Mp3Encoder = Mp3Encoder;\nmodule.exports.WavHeader = WavHeader;\n","var lamejs = require('lamejs');\n\nvar MAX_AMPLITUDE = 0x7FFF;\n\nfunction encodeMp3(audioBuffer, params, onProgress, cb) {\n\tif (audioBuffer.sampleRate !== 44100) {\n\t\t// TODO: generalize encoder for different sample rates\n\t\tthrow new Error('Expecting 44100 Hz sample rate');\n\t}\n\n\tvar nChannels = audioBuffer.numberOfChannels;\n\n\tif (nChannels !== 1 && nChannels !== 2) {\n\t\tthrow new Error('Expecting mono or stereo audioBuffer');\n\t}\n\n\tvar bitrate = params.bitrate || 128;\n\tif (bitrate < 96) {\n\t\t// lame fails to encode stereo audio if bitrate is lower than 96.\n\t\t// in which case, we force sound to be mono (use only channel 0)\n\t\tnChannels = 1;\n\t}\n\n\tvar bufferLength = audioBuffer.length;\n\n\t// convert audioBuffer to sample buffers\n\tvar buffers = [];\n\n\tfor (var channel = 0; channel < nChannels; channel++) {\n\t\tvar buffer = audioBuffer.getChannelData(channel);\n\t\tvar samples = new Int16Array(bufferLength);\n\n\t\tfor (var i = 0; i < bufferLength; ++i) {\n\t\t\tvar sample = buffer[i];\n\n\t\t\t// clamp and convert to 16bit number\n\t\t\tsample = Math.min(1, Math.max(-1, sample));\n\t\t\tsample = Math.round(sample * MAX_AMPLITUDE);\n\n\t\t\tsamples[i] = sample;\n\t\t}\n\n\t\tbuffers.push(samples);\n\t}\n\n\n\t// can be anything but make it a multiple of 576 to make encoders life easier\n\tBLOCK_SIZE = 1152;\n\tmp3encoder = new lamejs.Mp3Encoder(nChannels, 44100, bitrate);\n\tvar mp3Data = [];\n\n\tvar blockIndex = 0;\n\n\tfunction encodeChunk() {\n\t\tvar mp3buf;\n\t\tif (nChannels === 1) {\n\t\t\tvar chunk = buffers[0].subarray(blockIndex, blockIndex + BLOCK_SIZE);\n\t\t\tmp3buf = mp3encoder.encodeBuffer(chunk);\n\t\t} else {\n\t\t\tchunkL = buffers[0].subarray(blockIndex, blockIndex + BLOCK_SIZE);\n\t\t\tchunkR = buffers[1].subarray(blockIndex, blockIndex + BLOCK_SIZE);\n\t\t\tvar mp3buf = mp3encoder.encodeBuffer(chunkL, chunkR);\n\t\t}\n\n\t\tif (mp3buf.length > 0) {\n\t\t\tmp3Data.push(mp3buf);\n\t\t}\n\n\t\tblockIndex += BLOCK_SIZE;\n\t}\n\n\tfunction update() {\n\t\tif (blockIndex >= bufferLength) {\n\t\t\t// finish writing mp3\n\t\t\tvar mp3buf = mp3encoder.flush();\n\n\t\t\tif (mp3buf.length > 0) {\n\t\t\t\tmp3Data.push(mp3buf);\n\t\t\t}\n\n\t\t\treturn cb(new Blob(mp3Data, { type: 'audio/mp3' }));\n\t\t}\n\n\t\tvar start = performance.now();\n\n\t\twhile (blockIndex < bufferLength && performance.now() - start < 15) {\n\t\t\tencodeChunk();\n\t\t}\n\n\t\tonProgress && onProgress(blockIndex / bufferLength);\n\t\tsetTimeout(update, 16.7);\n\t}\n\n\tupdate();\n}\n\nmodule.exports = encodeMp3;\n","var encodeWav = require('./encodeWav');\nvar encodeMp3 = require('./encodeMp3');\n\nvar VALID_MP3_BITRATES = [32, 40, 48, 56, 64, 96, 128, 192, 256, 320];\n\nmodule.exports = function encode (audioBuffer, encoding, onProgress, onComplete) {\n\tif (!encoding || encoding === 'WAV') {\n\t\treturn encodeWav(audioBuffer, onComplete);\n\t}\n\n\tencoding = ~~encoding;\n\tif (VALID_MP3_BITRATES.indexOf(encoding) === -1) {\n\t\tthrow new Error('Invalid encoding');\n\t}\n\n\treturn encodeMp3(audioBuffer, { bitrate: encoding }, onProgress, onComplete);\n};\n","import {h, VNode} from 'preact'\nimport {useState} from 'preact/hooks'\n// FIXME: TypeScript sometimes does not recognize this module.\n// @ts-ignore\nimport encodeAudio from 'audio-encoder'\n\nconst bufferToMp3 = (buffer: AudioBuffer): Promise<Blob> => {\n  return new Promise(resolve => {\n    const bitRate = 256\n    encodeAudio(buffer, bitRate, () => {}, (blob: Blob) => {\n      resolve(blob)\n    })\n  })\n}\n\nconst audioBufferToUrl = async (buffer: AudioBuffer): Promise<string> => {\n  const blob = await bufferToMp3(buffer)\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader()\n    reader.readAsDataURL(blob)\n    reader.onload = () => resolve(reader.result as string)\n    reader.onerror = () => reject()\n  })\n}\n\nexport const AudioDownloader = ({\n  fetchBuffer,\n  render\n}: {\n  fetchBuffer: () => Promise<AudioBuffer>\n  render: (props: {\n    data: string | null\n    loading: boolean\n    onLoad: () => void\n  }) => VNode\n}) => {\n  const [loading, setLoading] = useState(false)\n  const [data, setData] = useState<string | null>(null)\n\n  const update = async () => {\n    setData(null)\n    setLoading(true)\n    const buffer = await fetchBuffer()\n    setData(await audioBufferToUrl(buffer))\n    setLoading(false)\n  }\n\n  return render({\n    data,\n    loading,\n    onLoad: () => update()\n  })\n}\n","import {useEffect, useState} from 'preact/hooks'\nimport {Fragment, h} from 'preact'\nimport {IconButton} from './IconButton'\nimport {MdGetApp, MdHourglassEmpty, MdSave} from 'react-icons/md'\nimport {Note} from '../utils'\nimport {Loader, render as renderAudio} from '@dipl/dom-play'\nimport {AudioDownloader} from './AudioDownloader'\nimport {CgDarkMode} from 'react-icons/cg'\n\nexport const Downloader = ({\n  notes,\n  loader,\n  loaded,\n  getFileName\n}: {\n  notes: Note[]\n  loaded: boolean\n  loader: Loader\n  getFileName: () => string\n}) => {\n  const [version, setVersion] = useState(0)\n\n  // Invalidate rendered audio when notes change.\n  useEffect(() => setVersion(version + 1), [notes])\n\n  return (\n    <AudioDownloader\n      key={version}\n      fetchBuffer={() => renderAudio(notes, loader)}\n      render={({data, loading, onLoad}) => (\n        <Fragment>\n          {loading ? (\n            <IconButton\n              icon={<MdHourglassEmpty/>}\n              label=\"stop\"\n            />\n          ) : (\n            data ? (\n              <a href={data} download={getFileName()}>\n                <IconButton\n                  icon={<MdGetApp/>}\n                  label=\"Download MP3\"\n                />\n              </a>\n            ) : (\n              <IconButton\n                disabled={!loaded}\n                icon={<MdSave/>}\n                label=\"Convert to MP3\"\n                onAction={onLoad}\n              />\n            )\n          )}\n        </Fragment>\n      )}\n    />\n  )\n}\n","import {useEffect} from 'preact/hooks'\n\nexport function useFrame (f: () => void, inputs?: unknown[]) {\n  useEffect(() => {\n    let running = true\n    const loop = () => {\n      f()\n      if (running) window.requestAnimationFrame(loop)\n    }\n    loop()\n    return () => {\n      running = false\n    }\n  }, inputs)\n}\n","import linear from '@dipl/utils-linear'\n\nexport type Pair<T = number> = [T, T]\n\nexport type Scale = (x: number, w: number) => number\n\nexport type Dim = number | Pair\n\nexport type Box = Pair<Pair>\n\nexport type Geometry = {\n  time: number\n  span: number\n  freq: number\n}\n\nexport type Note = Geometry & {\n  color: any\n  play: string\n  detune: number\n  gain: number\n  attack: number\n  decay: number\n  sustain: number\n  release: number\n}\n\nconst extent = (ns: number[]): Pair => {\n  return [Math.min(...ns), Math.max(...ns)]\n}\n\nconst pad = ([a, b]: Pair, pad: number): Pair => {\n  return [a - pad, b + pad]\n}\n\nconst unique = (ns: number[]): number[] => {\n  return Array.from(new Set(ns.filter(x => !isNaN(x))))\n}\n\nexport const getTimeValues = (notes: Geometry[]): number[] => {\n  const head: number[] = notes.map(x => x.time)\n  const tail: number[] = notes.map(x => x.time + x.span)\n  return unique([...head, ...tail])\n}\n\nexport const getFreqValues = (notes: Geometry[]): number[] => {\n  return unique(notes.map(x => x.freq))\n}\n\nexport const getBoundingBox = (notes: Geometry[]): Box => {\n  return [\n    extent(getTimeValues(notes)),\n    extent(getFreqValues(notes))\n  ]\n}\n\nexport const boxToUnit = ([x, y]: Box, flipY: boolean = false): Pair<Scale> => {\n  return [\n    linear(x, [0, 1]),\n    linear(y, flipY ? [1, 0] : [0, 1])\n  ]\n}\n\nexport const unitToBox = ([x, y]: Box, flipY: boolean = false): Pair<Scale> => {\n  return [\n    linear([0, 1], x),\n    linear(flipY ? [1, 0] : [0, 1], y)\n  ]\n}\n\nexport const getIdealBox = (notes: Geometry[]): Box => {\n  const [x, y] = getBoundingBox(notes)\n  return [\n    pad(x, 0.5),\n    pad(y, 0.5)\n  ]\n}\n","import {Fragment, h} from 'preact'\nimport {LineView} from './LineView'\nimport {useState} from 'preact/hooks'\nimport {useFrame} from '../hooks/useFrame'\nimport {useTheme} from './Theming'\nimport {getTimeValues, Note, Pair, Scale} from '../utils'\n\nexport function Cursor (props: {\n  notes: Note[]\n  getTime: () => number | undefined\n  scale: Pair<Scale>\n}) {\n  const [value, setValue] = useState<number | undefined>(undefined)\n\n  const max = Math.max(...getTimeValues(props.notes))\n  useFrame(() => {\n    const progress = props.getTime()\n    if (progress == undefined) {\n      setValue(undefined)\n    } else {\n      const value = Math.min(progress, max)\n      setValue(value)\n    }\n  }, [props.getTime])\n\n  // Render nothing.\n  if (value == null) {\n    return <Fragment/>\n  }\n\n  const theme = useTheme()\n  return (\n    <LineView\n      axis={0}\n      value={Math.min(value, max)}\n      color={theme.textSecondary}\n      scale={props.scale}\n    />\n  )\n}\n","import {h} from 'preact'\nimport {IconButton} from './IconButton'\nimport {MdPause, MdPlayArrow} from 'react-icons/md'\nimport {useState} from 'preact/hooks'\n\nexport const Player = (props: {\n  id?: string\n  loaded: boolean\n  onPlay: () => void\n  onStop: () => void\n}) => {\n  const [playing, setPlaying] = useState(false)\n  return (\n    <IconButton\n      // FIXME: should use ref with some combination of forwardRef\n      // unfortunately we need the ref inside IconButton as well.\n      id={props.id}\n      disabled={!props.loaded}\n      icon={!playing\n        ? <MdPlayArrow/>\n        : <MdPause/>\n      }\n      label={playing ? 'Pause' : 'Play'}\n      onAction={() => {\n        setPlaying(!playing)\n        playing\n          ? props.onStop()\n          : props.onPlay()\n      }}\n    />\n  )\n}\n","// THIS FILE IS AUTO GENERATED\nimport { GenIcon } from '../lib';\nexport function CgAbstract (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M5 5H19V19H16L16 8H5V5Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M10 19C12.7614 19 15 16.7614 15 14C15 11.2386 12.7614 9 10 9C7.23858 9 5 11.2386 5 14C5 16.7614 7.23858 19 10 19ZM10 16C11.1046 16 12 15.1046 12 14C12 12.8954 11.1046 12 10 12C8.89543 12 8 12.8954 8 14C8 15.1046 8.89543 16 10 16Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgAddR (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 6C12.5523 6 13 6.44772 13 7V11H17C17.5523 11 18 11.4477 18 12C18 12.5523 17.5523 13 17 13H13V17C13 17.5523 12.5523 18 12 18C11.4477 18 11 17.5523 11 17V13H7C6.44772 13 6 12.5523 6 12C6 11.4477 6.44772 11 7 11H11V7C11 6.44772 11.4477 6 12 6Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M5 22C3.34315 22 2 20.6569 2 19V5C2 3.34315 3.34315 2 5 2H19C20.6569 2 22 3.34315 22 5V19C22 20.6569 20.6569 22 19 22H5ZM4 19C4 19.5523 4.44772 20 5 20H19C19.5523 20 20 19.5523 20 19V5C20 4.44772 19.5523 4 19 4H5C4.44772 4 4 4.44772 4 5V19Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgAdd (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M2 12C2 6.47715 6.47715 2 12 2C17.5228 2 22 6.47715 22 12C22 17.5228 17.5228 22 12 22C6.47715 22 2 17.5228 2 12ZM12 4C7.58172 4 4 7.58172 4 12C4 16.4183 7.58172 20 12 20C16.4183 20 20 16.4183 20 12C20 7.58172 16.4183 4 12 4Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M13 7C13 6.44772 12.5523 6 12 6C11.4477 6 11 6.44772 11 7V11H7C6.44772 11 6 11.4477 6 12C6 12.5523 6.44772 13 7 13H11V17C11 17.5523 11.4477 18 12 18C12.5523 18 13 17.5523 13 17V13H17C17.5523 13 18 12.5523 18 12C18 11.4477 17.5523 11 17 11H13V7Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgAdidas (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M1.3294 19L0.731323 17.9641L5.06145 15.4641L7.1029 19H1.3294Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M15.1858 19H9.4123L5.7935 12.7321L10.1236 10.2321L15.1858 19Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M23.2687 19H17.4952L10.8557 7.5L15.1858 5L23.2687 19Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgAirplane (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M9.00967 5.12761H11.0097C12.1142 5.12761 13.468 5.89682 14.0335 6.8457L16.5089 11H21.0097C21.562 11 22.0097 11.4477 22.0097 12C22.0097 12.5523 21.562 13 21.0097 13H16.4138L13.9383 17.1543C13.3729 18.1032 12.0191 18.8724 10.9145 18.8724H8.91454L12.4138 13H5.42485L3.99036 15.4529H1.99036L4.00967 12L4.00967 11.967L2.00967 8.54712H4.00967L5.44417 11H12.5089L9.00967 5.12761Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgAlarm (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M5.45887 2L1 6.01478L2.33826 7.50107L6.79713 3.48629L5.45887 2Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M11 8H13V12H16V14H11V8Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M3 12C3 7.02944 7.02944 3 12 3C16.9706 3 21 7.02944 21 12C21 16.9706 16.9706 21 12 21C7.02944 21 3 16.9706 3 12ZM5 12C5 8.13401 8.13401 5 12 5C15.866 5 19 8.13401 19 12C19 15.866 15.866 19 12 19C8.13401 19 5 15.866 5 12Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M18.5411 2L23 6.01478L21.6617 7.50107L17.2029 3.48629L18.5411 2Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgAlbum (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M2 19C2 20.6569 3.34315 22 5 22H19C20.6569 22 22 20.6569 22 19V5C22 3.34315 20.6569 2 19 2H5C3.34315 2 2 3.34315 2 5V19ZM20 19C20 19.5523 19.5523 20 19 20H5C4.44772 20 4 19.5523 4 19V5C4 4.44772 4.44772 4 5 4H10V12.0111L12.395 12.0112L14.0001 9.86419L15.6051 12.0112H18.0001L18 4H19C19.5523 4 20 4.44772 20 5V19ZM16 4H12V9.33585L14.0001 6.66046L16 9.33571V4Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgAlignBottom (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M13 10H17V16H13V10Z\",\"fill\":\"currentColor\",\"fillOpacity\":\"0.5\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M11 4H7V16H11V4Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M18 18H6V20H18V18Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgAlignCenter (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M9 13H15V17H9V13Z\",\"fill\":\"currentColor\",\"fillOpacity\":\"0.5\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M6 7H18V11H6V7Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgAlignLeft (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M8 13H14V17H8V13Z\",\"fill\":\"currentColor\",\"fillOpacity\":\"0.5\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M6 6H4V18H6V6Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M20 7H8V11H20V7Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgAlignMiddle (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M13 9H17V15H13V9Z\",\"fill\":\"currentColor\",\"fillOpacity\":\"0.5\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M7 6H11V18H7V6Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgAlignRight (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M15.9991 13.0039L9.99907 12.9911L9.99054 16.9911L15.9905 17.0039L15.9991 13.0039Z\",\"fill\":\"currentColor\",\"fillOpacity\":\"0.5\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M19.978 18.0021L20.0036 6.00214L18.0036 5.99788L17.978 17.9979L19.978 18.0021Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M3.9964 10.9851L15.9964 11.0107L16.0049 7.0107L4.00493 6.98512L3.9964 10.9851Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgAlignTop (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M13.0352 7.98797L13.0374 13.988L17.0374 13.9865L17.0352 7.98653L13.0352 7.98797Z\",\"fill\":\"currentColor\",\"fillOpacity\":\"0.5\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M17.9996 4.01189L5.99963 4.01837L6.00038 6.01837L18.0004 6.01189L17.9996 4.01189Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M11.0374 19.9864L11.0321 7.98637L7.03207 7.98813L7.03736 19.9881L11.0374 19.9864Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgAnchor (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M15 6C15 7.30622 14.1652 8.41746 13 8.82929V16.874C14.7252 16.4299 16 14.8638 16 13H18C18 15.973 15.8377 18.441 13 18.917V20C13 20.5523 12.5523 21 12 21C11.4477 21 11 20.5523 11 20V18.917C8.16229 18.441 6 15.973 6 13H8C8 14.8638 9.27477 16.4299 11 16.874V8.82929C9.83481 8.41746 9 7.30622 9 6C9 4.34315 10.3431 3 12 3C13.6569 3 15 4.34315 15 6ZM12 7C12.5523 7 13 6.55228 13 6C13 5.44772 12.5523 5 12 5C11.4477 5 11 5.44772 11 6C11 6.55228 11.4477 7 12 7Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgAppleWatch (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M16.4975 5.02988C16.4973 5.07798 16.4959 5.12581 16.4934 5.17335C17.662 5.58332 18.5 6.69628 18.5 8.00496V9.00493H19.5V13.0049H18.5V16.005C18.5 17.3129 17.663 18.4254 16.4953 18.8359C16.4984 18.8919 16.5 18.9482 16.5 19.005C16.5 20.6618 15.1569 22.005 13.5 22.005H9.5C7.84315 22.005 6.5 20.6618 6.5 19.005C6.5 18.9482 6.50158 18.8919 6.50468 18.8359C5.33705 18.4254 4.5 17.3129 4.5 16.005V8.00496C4.5 6.69767 5.33618 5.58568 6.50286 5.17465C6.49907 5.11032 6.4973 5.04546 6.49763 4.98011C6.50587 3.32328 7.85569 1.98683 9.51252 1.99508L13.5125 2.01499C15.1693 2.02324 16.5058 3.37305 16.4975 5.02988ZM8.49764 5.00496H14.4975C14.4922 4.45954 14.0498 4.01769 13.5025 4.01496L9.50257 3.99505C8.95029 3.99231 8.50035 4.43779 8.4976 4.99006L8.49764 5.00496ZM15.7049 7.02596L11.4846 7.00496H7.5C6.94772 7.00496 6.5 7.45267 6.5 8.00496V16.005C6.5 16.5568 6.94696 17.0042 7.4986 17.005H15.5014C16.053 17.0042 16.5 16.5568 16.5 16.005V8.00496C16.5 7.52289 16.1589 7.12049 15.7049 7.02596ZM8.5 19.005C8.5 19.5572 8.94772 20.005 9.5 20.005H13.5C14.0523 20.005 14.5 19.5572 14.5 19.005H8.5Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgArrangeBack (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M3 3H11V7H17V13H21V21H13V17H7V11H3V3ZM15 13H13V15H9V11H11V9H15V13Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgArrangeFront (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M3 3H11V7H17V13H21V21H13V17H7V11H3V3ZM15 9H9V15H15V9Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgArrowAlignH (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M13 7H11V17H13V7Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M5.99996 7.75732L7.41418 9.17154L5.58572 11L9.99996 11V13L5.58579 13L7.41418 14.8284L5.99996 16.2426L1.75732 12L5.99996 7.75732Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M18 16.2427L16.5858 14.8285L18.4143 13H14V11L18.4142 11L16.5858 9.17161L18 7.75739L22.2427 12L18 16.2427Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgArrowAlignV (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M7 11L7 13H17V11H7Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M7.75732 18L9.17154 16.5858L11 18.4143V14H13V18.4142L14.8284 16.5858L16.2426 18L12 22.2427L7.75732 18Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M16.2427 5.99996L14.8285 7.41418L13 5.58572V9.99996H11L11 5.58579L9.17161 7.41418L7.75739 5.99996L12 1.75732L16.2427 5.99996Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgArrowBottomLeftO (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M10 10.0367L8.00002 10.0367L8 16.0367L14 16.0367L14 14.0367L11.4143 14.0366L16.7438 8.7071L15.3296 7.29289L10 12.6224L10 10.0367Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M23 12C23 18.0751 18.0751 23 12 23C5.92487 23 1 18.0751 1 12C1 5.92487 5.92487 1 12 1C18.0751 1 23 5.92487 23 12ZM21 12C21 16.9706 16.9706 21 12 21C7.02944 21 3 16.9706 3 12C3 7.02944 7.02944 3 12 3C16.9706 3 21 7.02944 21 12Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgArrowBottomLeftR (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M10 10.0367H8V16.0367H14V14.0367H11.4142L16.7438 8.70712L15.3296 7.2929L10 12.6225V10.0367Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M1 5C1 2.79086 2.79086 1 5 1H19C21.2091 1 23 2.79086 23 5V19C23 21.2091 21.2091 23 19 23H5C2.79086 23 1 21.2091 1 19V5ZM5 3H19C20.1046 3 21 3.89543 21 5V19C21 20.1046 20.1046 21 19 21H5C3.89543 21 3 20.1046 3 19V5C3 3.89543 3.89543 3 5 3Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgArrowBottomLeft (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M18.2426 7.17154L16.8284 5.75732L7.75739 14.8283L7.75739 10.2427H5.75739L5.75739 18.2427H13.7574V16.2427L9.17144 16.2427L18.2426 7.17154Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgArrowBottomRightO (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M14.0367 10.0367H16.0367V16.0367H10.0367V14.0367H12.6225L7.29297 8.70713L8.70718 7.29291L14.0367 12.6225L14.0367 10.0367Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M23 12C23 18.0751 18.0751 23 12 23C5.92487 23 1 18.0751 1 12C1 5.92487 5.92487 1 12 1C18.0751 1 23 5.92487 23 12ZM21 12C21 16.9706 16.9706 21 12 21C7.02944 21 3 16.9706 3 12C3 7.02944 7.02944 3 12 3C16.9706 3 21 7.02944 21 12Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgArrowBottomRightR (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M14.0367 10.0367H16.0367V16.0367H10.0367V14.0367H12.6225L7.29297 8.70713L8.70718 7.29292L14.0367 12.6225L14.0367 10.0367Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M1 5C1 2.79086 2.79086 1 5 1H19C21.2091 1 23 2.79086 23 5V19C23 21.2091 21.2091 23 19 23H5C2.79086 23 1 21.2091 1 19V5ZM5 3H19C20.1046 3 21 3.89543 21 5V19C21 20.1046 20.1046 21 19 21H5C3.89543 21 3 20.1046 3 19V5C3 3.89543 3.89543 3 5 3Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgArrowBottomRight (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M5.75739 7.17154L7.1716 5.75732L16.2426 14.8283L16.2426 10.2427H18.2426L18.2426 18.2427H10.2426V16.2427L14.8285 16.2427L5.75739 7.17154Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgArrowDownO (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M14.8285 12.0259L16.2427 13.4402L12 17.6828L7.7574 13.4402L9.17161 12.0259L11 13.8544V6.31724H13V13.8544L14.8285 12.0259Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M19.7782 19.7782C15.4824 24.0739 8.51759 24.0739 4.22183 19.7782C-0.0739417 15.4824 -0.0739417 8.51759 4.22183 4.22183C8.51759 -0.0739419 15.4824 -0.0739419 19.7782 4.22183C24.0739 8.51759 24.0739 15.4824 19.7782 19.7782ZM18.364 18.364C14.8492 21.8787 9.15076 21.8787 5.63604 18.364C2.12132 14.8492 2.12132 9.15076 5.63604 5.63604C9.15076 2.12132 14.8492 2.12132 18.364 5.63604C21.8787 9.15076 21.8787 14.8492 18.364 18.364Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgArrowDownR (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M14.8284 12.0259L16.2426 13.4402L12 17.6828L7.75733 13.4402L9.17155 12.0259L11 13.8544V6.31724H13V13.8544L14.8284 12.0259Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M1 5C1 2.79086 2.79086 1 5 1H19C21.2091 1 23 2.79086 23 5V19C23 21.2091 21.2091 23 19 23H5C2.79086 23 1 21.2091 1 19V5ZM5 3H19C20.1046 3 21 3.89543 21 5V19C21 20.1046 20.1046 21 19 21H5C3.89543 21 3 20.1046 3 19V5C3 3.89543 3.89543 3 5 3Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgArrowDown (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M11.0001 3.67157L13.0001 3.67157L13.0001 16.4999L16.2426 13.2574L17.6568 14.6716L12 20.3284L6.34314 14.6716L7.75735 13.2574L11.0001 16.5001L11.0001 3.67157Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgArrowLeftO (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M11.9481 14.8285L10.5339 16.2427L6.29122 12L10.5339 7.7574L11.9481 9.17161L10.1196 11H17.6568V13H10.1196L11.9481 14.8285Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M4.22183 19.7782C-0.0739419 15.4824 -0.0739419 8.51759 4.22183 4.22183C8.51759 -0.0739419 15.4824 -0.0739419 19.7782 4.22183C24.0739 8.51759 24.0739 15.4824 19.7782 19.7782C15.4824 24.0739 8.51759 24.0739 4.22183 19.7782ZM5.63604 18.364C2.12132 14.8492 2.12132 9.15076 5.63604 5.63604C9.15076 2.12132 14.8492 2.12132 18.364 5.63604C21.8787 9.15076 21.8787 14.8492 18.364 18.364C14.8492 21.8787 9.15076 21.8787 5.63604 18.364Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgArrowLeftR (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M11.9481 14.8285L10.5339 16.2427L6.29126 12L10.5339 7.7574L11.9481 9.17161L10.1197 11H17.6568V13H10.1197L11.9481 14.8285Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M23 19C23 21.2091 21.2091 23 19 23H5C2.79086 23 1 21.2091 1 19V5C1 2.79086 2.79086 1 5 1H19C21.2091 1 23 2.79086 23 5V19ZM19 21H5C3.89543 21 3 20.1046 3 19V5C3 3.89543 3.89543 3 5 3H19C20.1046 3 21 3.89543 21 5V19C21 20.1046 20.1046 21 19 21Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgArrowLeft (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M20.3284 11.0001V13.0001L7.50011 13.0001L10.7426 16.2426L9.32842 17.6568L3.67157 12L9.32842 6.34314L10.7426 7.75735L7.49988 11.0001L20.3284 11.0001Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgArrowLongDownC (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M10.9991 6.84976C9.83339 6.43819 8.99813 5.32671 8.99813 4.02014C8.99813 2.36329 10.3413 1.02014 11.9981 1.02014C13.655 1.02014 14.9981 2.36329 14.9981 4.02014C14.9981 5.32601 14.1638 6.43701 12.9991 6.84911L13.0121 19.1375L14.8244 17.315L16.2426 18.7253L12.0119 22.9799L7.75739 18.7491L9.16763 17.3309L11.0122 19.1652L10.9991 6.84976ZM11.9981 5.02014C11.4458 5.02014 10.9981 4.57243 10.9981 4.02014C10.9981 3.46786 11.4458 3.02014 11.9981 3.02014C12.5504 3.02014 12.9981 3.46786 12.9981 4.02014C12.9981 4.57243 12.5504 5.02014 11.9981 5.02014Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgArrowLongDownE (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M14.998 1.02014H8.99801V7.02014H10.9991L11.012 19.1652L9.16751 17.3309L7.75726 18.7491L12.0118 22.9799L16.2427 18.7253L14.8246 17.315L13.012 19.1378L12.9991 7.02014H14.998V1.02014ZM10.998 3.02014H12.998V5.02014H10.998V3.02014Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgArrowLongDownL (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M8.99801 0.972107V2.97211H11.9983L10.998 2.97299L11.0124 19.2135L9.16751 17.379L7.75726 18.7972L12.0118 23.0279L16.2427 18.7734L14.8246 17.3632L13.0124 19.1856L12.998 2.97211H14.998V0.972107H8.99801Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgArrowLongDownR (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M16.2416 4.64146L11.9989 0.398819L7.75629 4.64146L11.0003 7.88551L11.013 19.7865L9.16846 17.9523L7.75821 19.3704L12.0127 23.6012L16.2437 19.3466L14.8255 17.9363L13.013 19.7591L13.0003 7.8827L16.2416 4.64146ZM10.5847 4.64146L11.9989 3.22725L13.4131 4.64146L11.9989 6.05567L10.5847 4.64146Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgArrowLongDown (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M13.0125 19.162L14.8246 17.3398L16.2427 18.7501L12.012 23.0046L7.75726 18.7739L9.16751 17.3557L11.0126 19.1905L10.998 0.997021L12.998 0.995422L13.0125 19.162Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgArrowLongLeftC (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M5.27 7.75737L1.0202 11.9928L5.25576 16.2426L6.67236 14.8308L4.85801 13.0103L17.1463 13.0525C17.5532 14.219 18.6604 15.0583 19.9663 15.0642C21.6231 15.0717 22.9723 13.7346 22.9798 12.0777C22.9872 10.4209 21.6501 9.07172 19.9933 9.06427C18.6867 9.05841 17.5715 9.88865 17.1547 11.0525L4.83934 11.0102L6.68182 9.17397L5.27 7.75737ZM18.9798 12.0598C18.9823 11.5075 19.432 11.0618 19.9843 11.0643C20.5366 11.0667 20.9823 11.5165 20.9798 12.0687C20.9773 12.621 20.5276 13.0667 19.9753 13.0642C19.423 13.0618 18.9773 12.612 18.9798 12.0598Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgArrowLongLeftE (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M5.26323 7.75737L1.01343 11.9928L5.24893 16.2426L6.66553 14.8308L4.85123 13.0104L16.9685 13.0519L16.9596 15.0507L22.9595 15.0777L22.9865 9.07773L16.9865 9.05079L16.9775 11.0519L4.83252 11.0103L6.67505 9.17397L5.26323 7.75737ZM20.9775 11.0687L20.9685 13.0687L18.9685 13.0597L18.9775 11.0597L20.9775 11.0687Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgArrowLongLeftL (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M5.20837 7.75725L0.969116 12.0033L5.21515 16.2428L6.62823 14.8274L4.80949 13.0116L21.0229 13.0298L21.0189 15.0297L23.0189 15.0338L23.0309 9.03377L21.0309 9.02976L21.0249 12.019L21.0261 11.0298L4.78543 11.0115L6.62371 9.17033L5.20837 7.75725Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgArrowLongLeftR (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M4.64872 7.72528L0.398926 11.9608L4.63443 16.2105L6.05103 14.7987L4.23673 12.9783L16.1027 13.019L19.3585 16.2747L23.6011 12.0321L19.3585 7.78945L16.1289 11.019L4.21801 10.9782L6.06055 9.14188L4.64872 7.72528ZM17.9443 12.0321L19.3585 10.6179L20.7727 12.0321L19.3585 13.4463L17.9443 12.0321Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgArrowLongLeft (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M1.02698 11.9929L5.26242 16.2426L6.67902 14.8308L4.85766 13.0033L22.9731 13.0012L22.9728 11.0012L4.85309 11.0033L6.6886 9.17398L5.27677 7.75739L1.02698 11.9929Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgArrowLongRightC (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M18.73 7.75739L22.9798 11.9929L18.7443 16.2426L17.3277 14.8308L19.142 13.0103L6.85364 13.0525C6.44678 14.219 5.33954 15.0584 4.03368 15.0642C2.37684 15.0717 1.02767 13.7346 1.02023 12.0777C1.01279 10.4209 2.34989 9.07173 4.00673 9.06429C5.31328 9.05842 6.4285 9.88867 6.84531 11.0525L19.1607 11.0103L17.3182 9.17398L18.73 7.75739ZM5.02019 12.0598C5.01771 11.5075 4.56799 11.0618 4.01571 11.0643C3.46343 11.0667 3.01773 11.5165 3.02021 12.0687C3.02269 12.621 3.47242 13.0667 4.02469 13.0642C4.57697 13.0618 5.02267 12.612 5.02019 12.0598Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgArrowLongRightE (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M22.9865 11.9929L18.7511 16.2426L17.3345 14.8308L19.1488 13.0104L7.0314 13.0519L7.04038 15.0507L1.04044 15.0777L1.01349 9.07773L7.01343 9.05079L7.02242 11.0519L19.1674 11.0103L17.3249 9.17398L18.7367 7.75739L22.9865 11.9929ZM3.02245 11.0687L3.03143 13.0687L5.03141 13.0597L5.02243 11.0597L3.02245 11.0687Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgArrowLongRightL (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M18.9164 7.75739L23.1662 11.9929L18.9305 16.2426L17.5139 14.8308L19.3325 13.0061L2.8338 13.0285V15.0299H0.833801V9.02988H2.8338V11.0285L19.3429 11.0061L17.5046 9.17398L18.9164 7.75739Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgArrowLongRightR (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M19.3514 7.72525L23.6012 11.9607L19.3655 16.2105L17.9489 14.7987L19.7633 12.9781L7.89744 13.0188L4.64151 16.2748L0.398865 12.0321L4.64151 7.78947L7.87093 11.0189L19.782 10.9781L17.9395 9.14185L19.3514 7.72525ZM4.64151 13.4463L6.05572 12.0321L4.64151 10.6179L3.22729 12.0321L4.64151 13.4463Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgArrowLongRight (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M23.0677 11.9929L18.818 7.75739L17.4061 9.17398L19.2415 11.0032L0.932469 11.0012L0.932251 13.0012L19.2369 13.0032L17.4155 14.8308L18.8321 16.2426L23.0677 11.9929Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgArrowLongUpC (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M7.75751 5.23078L12.0321 1.02029L16.2425 5.29492L14.8177 6.69842L13.0141 4.86736L12.9427 17.1555C14.1054 17.5732 14.9345 18.6881 14.9283 19.994C14.9204 21.6508 13.5709 22.9876 11.9141 22.9797C10.2572 22.9718 8.92049 21.6223 8.92836 19.9655C8.93456 18.6589 9.77508 17.5514 10.9427 17.1454L11.0142 4.83017L9.161 6.65563L7.75751 5.23078ZM11.9331 18.9797C11.3808 18.9771 10.931 19.4227 10.9283 19.975C10.9257 20.5273 11.3713 20.9771 11.9236 20.9797C12.4759 20.9823 12.9257 20.5367 12.9283 19.9845C12.9309 19.4322 12.4853 18.9824 11.9331 18.9797Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgArrowLongUpE (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M12.0321 1.01318L16.2425 5.28781L14.8177 6.69131L13.014 4.86019L12.9436 16.9774L14.9425 16.9869L14.914 22.9868L8.91412 22.9583L8.9426 16.9584L10.9436 16.9679L11.0142 4.82318L9.16107 6.64852L7.75757 5.22367L12.0321 1.01318ZM10.9236 20.9678L12.9236 20.9773L12.9331 18.9773L10.9331 18.9678L10.9236 20.9678Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgArrowLongUpL (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12.0321 1.01865L16.2425 5.29327L14.8177 6.69677L13.0192 4.87094L12.9676 20.9813H14.9644V22.9813H8.96441V20.9813H10.9676L11.0194 4.82354L9.16107 6.65399L7.75757 5.22914L12.0321 1.01865Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgArrowLongUpR (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M7.79337 4.60945L12.0679 0.398956L16.2785 4.67358L14.8536 6.07708L13.0499 4.24596L12.9809 16.1324L16.2068 19.3584L11.9642 23.601L7.72156 19.3584L10.981 16.0989L11.0501 4.20883L9.19686 6.0343L7.79337 4.60945ZM11.9642 20.7726L13.3784 19.3584L11.9642 17.9442L10.55 19.3584L11.9642 20.7726Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgArrowLongUp (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12.0321 1.01712L7.75751 5.22761L9.161 6.65246L11.0197 4.82165L10.9644 22.9768L12.9644 22.9829L13.0195 4.86974L14.8177 6.69525L16.2425 5.29175L12.0321 1.01712Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgArrowRightO (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12.0519 14.8285L13.4661 16.2427L17.7088 12L13.4661 7.7574L12.0519 9.17161L13.8804 11H6.34321V13H13.8803L12.0519 14.8285Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M19.7782 19.7782C24.0739 15.4824 24.0739 8.51759 19.7782 4.22183C15.4824 -0.0739417 8.51759 -0.0739417 4.22183 4.22183C-0.0739417 8.51759 -0.0739417 15.4824 4.22183 19.7782C8.51759 24.0739 15.4824 24.0739 19.7782 19.7782ZM18.364 18.364C21.8787 14.8492 21.8787 9.15076 18.364 5.63604C14.8492 2.12132 9.15076 2.12132 5.63604 5.63604C2.12132 9.15076 2.12132 14.8492 5.63604 18.364C9.15076 21.8787 14.8492 21.8787 18.364 18.364Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgArrowRightR (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12.0519 14.8285L13.4661 16.2427L17.7087 12L13.4661 7.7574L12.0519 9.17161L13.8803 11H6.34318V13H13.8803L12.0519 14.8285Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M1 19C1 21.2091 2.79086 23 5 23H19C21.2091 23 23 21.2091 23 19V5C23 2.79086 21.2091 1 19 1H5C2.79086 1 1 2.79086 1 5V19ZM5 21H19C20.1046 21 21 20.1046 21 19V5C21 3.89543 20.1046 3 19 3H5C3.89543 3 3 3.89543 3 5V19C3 20.1046 3.89543 21 5 21Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgArrowRight (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M15.0378 6.34317L13.6269 7.76069L16.8972 11.0157L3.29211 11.0293L3.29413 13.0293L16.8619 13.0157L13.6467 16.2459L15.0643 17.6568L20.7079 11.9868L15.0378 6.34317Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgArrowTopLeftO (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M10 13.9633H8V7.96331H14V9.96331H11.4142L16.7438 15.2929L15.3296 16.7071L10 11.3775L10 13.9633Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M23 12C23 5.92487 18.0751 1 12 1C5.92487 1 1 5.92487 1 12C1 18.0751 5.92487 23 12 23C18.0751 23 23 18.0751 23 12ZM21 12C21 7.02944 16.9706 3 12 3C7.02944 3 3 7.02944 3 12C3 16.9706 7.02944 21 12 21C16.9706 21 21 16.9706 21 12Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgArrowTopLeftR (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M10 13.9633H8V7.96331H14V9.96331H11.4142L16.7438 15.2929L15.3296 16.7071L10 11.3775L10 13.9633Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M1 19C1 21.2091 2.79086 23 5 23H19C21.2091 23 23 21.2091 23 19V5C23 2.79086 21.2091 1 19 1H5C2.79086 1 1 2.79086 1 5V19ZM5 21H19C20.1046 21 21 20.1046 21 19V5C21 3.89543 20.1046 3 19 3H5C3.89543 3 3 3.89543 3 5V19C3 20.1046 3.89543 21 5 21Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgArrowTopLeft (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M13.4747 5.49475L13.4793 7.49475L8.92175 7.50541L18.5253 17.0896L17.1125 18.5052L7.48259 8.89473L7.49339 13.5088L5.49339 13.5134L5.47467 5.51345L13.4747 5.49475Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgArrowTopRightO (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M14 13.9633H16V7.96331H10V9.96331H12.5858L7.25623 15.2929L8.67044 16.7071L14 11.3775L14 13.9633Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M1 12C1 5.92487 5.92487 1 12 1C18.0751 1 23 5.92487 23 12C23 18.0751 18.0751 23 12 23C5.92487 23 1 18.0751 1 12ZM3 12C3 7.02944 7.02944 3 12 3C16.9706 3 21 7.02944 21 12C21 16.9706 16.9706 21 12 21C7.02944 21 3 16.9706 3 12Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgArrowTopRightR (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M14 13.9633H16V7.96331H10V9.96331H12.5858L7.25623 15.2929L8.67044 16.7071L14 11.3775V13.9633Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M23 19C23 21.2091 21.2091 23 19 23H5C2.79086 23 1 21.2091 1 19V5C1 2.79086 2.79086 1 5 1H19C21.2091 1 23 2.79086 23 5V19ZM19 21H5C3.89543 21 3 20.1046 3 19V5C3 3.89543 3.89543 3 5 3H19C20.1046 3 21 3.89543 21 5V19C21 20.1046 20.1046 21 19 21Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgArrowTopRight (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M10.5253 5.49475L10.5206 7.49475L15.0782 7.50541L5.47473 17.0896L6.88752 18.5052L16.5173 8.89479L16.5065 13.5088L18.5065 13.5134L18.5253 5.51345L10.5253 5.49475Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgArrowUpO (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M14.8285 11.9481L16.2427 10.5339L12 6.29122L7.7574 10.5339L9.17161 11.9481L11 10.1196V17.6568H13V10.1196L14.8285 11.9481Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M19.7782 4.22183C15.4824 -0.0739415 8.51759 -0.0739422 4.22183 4.22183C-0.0739415 8.51759 -0.0739422 15.4824 4.22183 19.7782C8.51759 24.0739 15.4824 24.0739 19.7782 19.7782C24.0739 15.4824 24.0739 8.51759 19.7782 4.22183ZM18.364 5.63604C14.8492 2.12132 9.15076 2.12132 5.63604 5.63604C2.12132 9.15076 2.12132 14.8492 5.63604 18.364C9.15076 21.8787 14.8492 21.8787 18.364 18.364C21.8787 14.8492 21.8787 9.15076 18.364 5.63604Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgArrowUpR (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M14.8543 11.9741L16.2686 10.5599L12.0259 6.31724L7.78327 10.5599L9.19749 11.9741L11.0259 10.1457V17.6828H13.0259V10.1457L14.8543 11.9741Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M1 19C1 21.2091 2.79086 23 5 23H19C21.2091 23 23 21.2091 23 19V5C23 2.79086 21.2091 1 19 1H5C2.79086 1 1 2.79086 1 5V19ZM5 21H19C20.1046 21 21 20.1046 21 19V5C21 3.89543 20.1046 3 19 3H5C3.89543 3 3 3.89543 3 5V19C3 20.1046 3.89543 21 5 21Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgArrowUp (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M17.6568 8.96219L16.2393 10.3731L12.9843 7.10285L12.9706 20.7079L10.9706 20.7059L10.9843 7.13806L7.75404 10.3532L6.34314 8.93572L12.0132 3.29211L17.6568 8.96219Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgArrowsBreakeH (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M9.24268 7H11.2427V11.0001H11.2477V13.0001H11.2427V17H9.24268V13.0001L4.82846 13L6.65685 14.8284L5.24264 16.2426L1 12L5.24264 7.75732L6.65685 9.17154L4.82839 11H9.24264L9.24268 7Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M15.2527 7.00012H13.2527V11.0001H13.2477V13.0001H13.2527V17.0001H15.2527V13.0001L19.667 13L17.8385 14.8285L19.2527 16.2427L23.4954 12L19.2527 7.75739L17.8385 9.17161L19.6669 11H15.2527L15.2527 7.00012Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgArrowsBreakeV (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M16.2427 5.24264L14.8285 6.65685L13 4.82839L13.0001 9.24268H17.0001V11.2427H7.00012V9.24268H11.0001L11 4.82846L9.17161 6.65685L7.75739 5.24264L12 1L16.2427 5.24264Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M7 15.2527V13.2527H17V15.2527H13.0001L13 19.6669L14.8284 17.8385L16.2426 19.2527L12 23.4954L7.75732 19.2527L9.17154 17.8385L11 19.667V15.2527L7 15.2527Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgArrowsExchangeAltV (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12.9841 4.99255C12.9841 4.44027 13.4318 3.99255 13.9841 3.99255C14.3415 3.99255 14.6551 4.18004 14.8319 4.46202L17.5195 7.14964C17.9101 7.54016 17.9101 8.17333 17.5195 8.56385C17.129 8.95438 16.4958 8.95438 16.1053 8.56385L14.9841 7.44263V14.9926C14.9841 15.5448 14.5364 15.9926 13.9841 15.9926C13.4318 15.9926 12.9841 15.5448 12.9841 14.9926V5.042C12.984 5.03288 12.984 5.02376 12.9841 5.01464V4.99255Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M11.0159 19.0074C11.0159 19.5597 10.5682 20.0074 10.0159 20.0074C9.6585 20.0074 9.3449 19.82 9.16807 19.538L6.48045 16.8504C6.08993 16.4598 6.08993 15.8267 6.48045 15.4361C6.87098 15.0456 7.50414 15.0456 7.89467 15.4361L9.01589 16.5574V9.00745C9.01589 8.45516 9.46361 8.00745 10.0159 8.00745C10.5682 8.00745 11.0159 8.45516 11.0159 9.00745V18.958C11.016 18.9671 11.016 18.9762 11.0159 18.9854V19.0074Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgArrowsExchangeAlt (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M4.99255 11.0159C4.44027 11.0159 3.99255 10.5682 3.99255 10.0159C3.99255 9.6585 4.18004 9.3449 4.46202 9.16807L7.14964 6.48045C7.54016 6.08993 8.17333 6.08993 8.56385 6.48045C8.95438 6.87098 8.95438 7.50414 8.56385 7.89467L7.44263 9.0159L14.9926 9.01589C15.5448 9.01589 15.9926 9.46361 15.9926 10.0159C15.9926 10.5682 15.5448 11.0159 14.9926 11.0159L5.042 11.0159C5.03288 11.016 5.02376 11.016 5.01464 11.0159H4.99255Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M19.0074 12.9841C19.5597 12.9841 20.0074 13.4318 20.0074 13.9841C20.0074 14.3415 19.82 14.6551 19.538 14.8319L16.8504 17.5195C16.4598 17.9101 15.8267 17.9101 15.4361 17.5195C15.0456 17.129 15.0456 16.4958 15.4361 16.1053L16.5574 14.9841H9.00745C8.45516 14.9841 8.00745 14.5364 8.00745 13.9841C8.00745 13.4318 8.45516 12.9841 9.00745 12.9841L18.958 12.9841C18.9671 12.984 18.9762 12.984 18.9854 12.9841H19.0074Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgArrowsExchangeV (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12.9842 15C12.9842 15.5523 13.4319 16 13.9842 16C14.3416 16 14.6552 15.8125 14.832 15.5305L17.5196 12.8429C17.9101 12.4524 17.9101 11.8192 17.5196 11.4287C17.1291 11.0382 16.4959 11.0382 16.1054 11.4287L14.9842 12.5499L14.9842 5C14.9842 4.44771 14.5364 4 13.9842 4C13.4319 4 12.9842 4.44772 12.9842 5L12.9842 14.9506C12.984 14.9597 12.984 14.9688 12.9842 14.9779V15Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M11.016 9C11.016 8.44771 10.5682 8 10.016 8C9.65856 8 9.34496 8.18748 9.16813 8.46947L6.48052 11.1571C6.08999 11.5476 6.08999 12.1808 6.48051 12.5713C6.87104 12.9618 7.5042 12.9618 7.89473 12.5713L9.01596 11.4501L9.01596 19C9.01596 19.5523 9.46367 20 10.016 20C10.5682 20 11.016 19.5523 11.016 19L11.016 9.04945C11.0161 9.04033 11.0161 9.03121 11.016 9.02208V9Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgArrowsExchange (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M4.99255 12.9841C4.44027 12.9841 3.99255 13.4318 3.99255 13.9841C3.99255 14.3415 4.18004 14.6551 4.46202 14.8319L7.14964 17.5195C7.54016 17.9101 8.17333 17.9101 8.56385 17.5195C8.95438 17.129 8.95438 16.4958 8.56385 16.1053L7.44263 14.9841H14.9926C15.5448 14.9841 15.9926 14.5364 15.9926 13.9841C15.9926 13.4318 15.5448 12.9841 14.9926 12.9841L5.042 12.9841C5.03288 12.984 5.02376 12.984 5.01464 12.9841H4.99255Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M19.0074 11.0159C19.5597 11.0159 20.0074 10.5682 20.0074 10.0159C20.0074 9.6585 19.82 9.3449 19.538 9.16807L16.8504 6.48045C16.4598 6.08993 15.8267 6.08993 15.4361 6.48045C15.0456 6.87098 15.0456 7.50414 15.4361 7.89467L16.5574 9.01589L9.00745 9.01589C8.45516 9.01589 8.00745 9.46361 8.00745 10.0159C8.00745 10.5682 8.45516 11.0159 9.00745 11.0159L18.958 11.0159C18.9671 11.016 18.9762 11.016 18.9854 11.0159H19.0074Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgArrowsExpandDownLeft (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M13 5C13 3.89543 13.8954 3 15 3H19C20.1046 3 21 3.89543 21 5V9C21 10.1046 20.1046 11 19 11H15C13.8954 11 13 10.1046 13 9V5ZM15 5H19V9H15V5Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M5 13H3V21H11V19H6.41424L11.7782 13.6361C12.1687 13.2456 12.1687 12.6124 11.7782 12.2219C11.3876 11.8314 10.7545 11.8314 10.3639 12.2219L5 17.5858V13Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgArrowsExpandDownRight (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M11 5C11 3.89543 10.1046 3 9 3H5C3.89543 3 3 3.89543 3 5V9C3 10.1046 3.89543 11 5 11H9C10.1046 11 11 10.1046 11 9V5ZM9 5H5V9H9V5Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M19 13H21V21H13V19H17.5858L12.2218 13.6361C11.8313 13.2456 11.8313 12.6124 12.2218 12.2219C12.6124 11.8314 13.2455 11.8314 13.6361 12.2219L19 17.5858V13Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgArrowsExpandLeftAlt (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M10.1005 2.10052V4.10052H5.51471L11.293 9.87878L9.87875 11.293L4.10046 5.51471L4.10046 10.1005H2.10046L2.10046 2.10052H10.1005Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M21.8995 13.8995H19.8995V18.4853L14.1212 12.707L12.707 14.1213L18.4853 19.8995H13.8995V21.8995H21.8995V13.8995Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M16.2426 9.1716L14.8284 7.75739L7.7573 14.8285L9.17151 16.2427L16.2426 9.1716Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgArrowsExpandLeft (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M10.1005 4.10052V2.10052H2.10046L2.10046 10.1005H4.10046L4.10046 5.51471L9.87875 11.293L11.293 9.87878L5.51471 4.10052H10.1005Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M19.8995 13.8995H21.8995V21.8995H13.8995V19.8995H18.4853L12.7071 14.1212L14.1213 12.707L19.8995 18.4853V13.8995Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgArrowsExpandRightAlt (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M13.8995 2.10052V4.10052H18.4852L12.707 9.87878L14.1212 11.293L19.8995 5.51471V10.1005H21.8995V2.10052H13.8995Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M5.51468 19.8995H10.1005V21.8995H2.10046V13.8995H4.10046V18.4853L9.87872 12.707L11.2929 14.1213L5.51468 19.8995Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M9.17154 7.75739L7.75732 9.1716L14.8284 16.2427L16.2426 14.8285L9.17154 7.75739Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgArrowsExpandRight (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M13.8995 4.10052V2.10052H21.8995V10.1005H19.8995V5.51477L14.1213 11.293L12.7071 9.87878L18.4854 4.10052H13.8995Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M4.10046 13.8995H2.10046V21.8995H10.1005V19.8995H5.51468L11.2929 14.1212L9.87872 12.707L4.10046 18.4853V13.8995Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgArrowsExpandUpLeft (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M5 11H3L3 3L11 3V5L6.41419 5L11.7781 10.3639C12.1686 10.7545 12.1686 11.3876 11.7781 11.7782C11.3876 12.1687 10.7544 12.1687 10.3639 11.7782L5 6.41424L5 11Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M19 13C20.1046 13 21 13.8954 21 15V19C21 20.1046 20.1046 21 19 21H15C13.8954 21 13 20.1046 13 19V15C13 13.8954 13.8954 13 15 13H19ZM19 15V19H15V15H19Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgArrowsExpandUpRight (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M13 5V3L21 3V11H19V6.41424L13.6361 11.7782C13.2456 12.1687 12.6124 12.1687 12.2219 11.7782C11.8314 11.3876 11.8314 10.7545 12.2219 10.3639L17.5858 5L13 5Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M5 13C3.89543 13 3 13.8954 3 15L3 19C3 20.1046 3.89543 21 5 21H9C10.1046 21 11 20.1046 11 19V15C11 13.8954 10.1046 13 9 13H5ZM5 15L5 19H9V15H5Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgArrowsHAlt (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M4.24267 7.75735L5.65688 9.17157L3.82842 11H20.1716L18.3431 9.17157L19.7573 7.75735L24 12L19.7572 16.2426L18.343 14.8284L20.1714 13H3.82845L5.65685 14.8284L4.24264 16.2426L0 12L4.24267 7.75735Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgArrowsH (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M5.65698 9.17157L4.24276 7.75735L0.00012207 12L4.24276 16.2426L5.65698 14.8284L3.82858 13H10.0001V11H3.82851L5.65698 9.17157Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M14.0001 11V13H20.1716L18.3432 14.8284L19.7574 16.2426L24.0001 12L19.7574 7.75735L18.3432 9.17157L20.1717 11H14.0001Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgArrowsMergeAltH (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M1.5033 6H3.5033V11H7.6749L5.84644 9.17154L7.26066 7.75732L11.5033 12L7.26066 16.2426L5.84644 14.8284L7.67483 13H3.5033V18H1.5033V6Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M20.4967 6H22.4967V18H20.4967V13H16.3251L18.1536 14.8285L16.7393 16.2427L12.4967 12L16.7393 7.75739L18.1536 9.17161L16.3252 11H20.4967V6Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgArrowsMergeAltV (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M18 1.5033V3.5033L13 3.5033V7.6749L14.8285 5.84644L16.2427 7.26066L12 11.5033L7.75739 7.26066L9.17161 5.84644L11 7.67483V3.5033L6 3.5033V1.5033L18 1.5033Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M18 20.4967V22.4967H6V20.4967H11V16.3251L9.17154 18.1536L7.75732 16.7393L12 12.4967L16.2426 16.7393L14.8284 18.1536L13 16.3252V20.4967H18Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgArrowsScrollH (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M15.3052 12L18.1299 9.17526L16.7157 7.76105L13.891 10.5858L13.8873 10.5821L12.4731 11.9963L12.4768 12L12.4731 12.0037L13.8873 13.4179L13.891 13.4142L16.7157 16.239L18.1299 14.8248L15.3052 12Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M10.1091 10.5858L10.1128 10.5821L11.527 11.9963L11.5233 12L11.527 12.0037L10.1128 13.4179L10.1091 13.4142L7.28433 16.239L5.87012 14.8248L8.69487 12L5.87012 9.17526L7.28433 7.76105L10.1091 10.5858Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgArrowsScrollV (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M13.4142 10.1091L13.4179 10.1128L12.0037 11.527L12 11.5233L11.9963 11.527L10.5821 10.1128L10.5858 10.1091L7.76105 7.28433L9.17526 5.87012L12 8.69486L14.8247 5.87012L16.239 7.28433L13.4142 10.1091Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M12 15.3052L14.8247 18.1299L16.239 16.7157L13.4142 13.891L13.4179 13.8873L12.0037 12.4731L12 12.4767L11.9963 12.4731L10.5821 13.8873L10.5858 13.891L7.76105 16.7157L9.17526 18.1299L12 15.3052Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgArrowsShrinkH (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M1 7H3V17H1V7Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M8.44769 7.75732L9.86191 9.17154L8.03344 11H15.9664L14.138 9.17154L15.5522 7.75732L19.7948 12L15.5522 16.2426L14.138 14.8284L15.9664 13H8.03354L9.86194 14.8284L8.44773 16.2426L4.20505 12L8.44769 7.75732Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M23 7H21V17H23V7Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgArrowsShrinkV (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M17 1V3L7 3V1L17 1Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M16.2427 8.44772L14.8285 9.86194L13 8.03347L13 15.9665L14.8285 14.138L16.2427 15.5522L12 19.7949L7.75742 15.5522L9.17163 14.138L11 15.9664L11 8.03357L9.17163 9.86194L7.75742 8.44772L12 4.20508L16.2427 8.44772Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M17 23V21H7V23H17Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgArrowsVAlt (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M9.1716 6.45504L7.75739 5.04083L12 0.798187L16.2426 5.04083L14.8284 6.45504L13.0001 4.62667V19.3733L14.8284 17.5449L16.2426 18.9592L12 23.2018L7.75739 18.9592L9.1716 17.5449L11.0001 19.3734V4.62658L9.1716 6.45504Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgArrowsV (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M7.75739 5.04077L9.1716 6.45498L11.0001 4.62652V10H13.0001V4.62661L14.8284 6.45498L16.2426 5.04077L12 0.798126L7.75739 5.04077Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M16.2426 18.9593L14.8284 17.545L13.0001 19.3734V14H11.0001V19.3735L9.1716 17.545L7.75739 18.9593L12 23.2019L16.2426 18.9593Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgAssign (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M6 6H10V4H4V10H6V6Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M10 18H6V14H4V20H10V18Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M14 6H18V10H20V4H14V6Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M14 18H18V14H20V20H14V18Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M12 8.5C10.067 8.5 8.5 10.067 8.5 12C8.5 13.933 10.067 15.5 12 15.5C13.933 15.5 15.5 13.933 15.5 12C15.5 10.067 13.933 8.5 12 8.5Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgAsterisk (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M11 6H13V10.079L16.3413 7.73938L17.4885 9.37768L13.7434 12L17.4885 14.6223L16.3413 16.2606L13 13.921V18H11V13.921L7.65864 16.2606L6.51148 14.6223L10.2565 12L6.51147 9.37769L7.65863 7.73938L11 10.079V6Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgAtlasian (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"opacity\":\"0.8\",\"d\":\"M8.50705 11.5562C8.19028 11.1038 7.78219 11.1585 7.59556 11.6783L5 18.9075H10.1778C10.6982 16.85 10.2481 14.0427 9.08063 12.3754L8.50705 11.5562Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M12.8745 7.12641C11.6074 8.93603 11.1992 12.0835 11.9627 14.1565L13.7126 18.9074H18.9644L14.3673 6.42648C14.1764 5.90823 13.7649 5.85485 13.4481 6.30726L12.8745 7.12641Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgAttachment (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M14 0C16.7614 0 19 2.23858 19 5V17C19 20.866 15.866 24 12 24C8.13401 24 5 20.866 5 17V9H7V17C7 19.7614 9.23858 22 12 22C14.7614 22 17 19.7614 17 17V5C17 3.34315 15.6569 2 14 2C12.3431 2 11 3.34315 11 5V17C11 17.5523 11.4477 18 12 18C12.5523 18 13 17.5523 13 17V6H15V17C15 18.6569 13.6569 20 12 20C10.3431 20 9 18.6569 9 17V5C9 2.23858 11.2386 0 14 0Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgAttribution (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M6 8C6.74028 8 7.38663 7.5978 7.73244 7H14C15.1046 7 16 7.89543 16 9C16 10.1046 15.1046 11 14 11H10C7.79086 11 6 12.7909 6 15C6 17.2091 7.79086 19 10 19H16.2676C16.6134 19.5978 17.2597 20 18 20C19.1046 20 20 19.1046 20 18C20 16.8954 19.1046 16 18 16C17.2597 16 16.6134 16.4022 16.2676 17H10C8.89543 17 8 16.1046 8 15C8 13.8954 8.89543 13 10 13H14C16.2091 13 18 11.2091 18 9C18 6.79086 16.2091 5 14 5H7.73244C7.38663 4.4022 6.74028 4 6 4C4.89543 4 4 4.89543 4 6C4 7.10457 4.89543 8 6 8Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgAwards (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M19 9C19 11.3787 17.8135 13.4804 16 14.7453V22H13.4142L12 20.5858L10.5858 22H8V14.7453C6.18652 13.4804 5 11.3787 5 9C5 5.13401 8.13401 2 12 2C15.866 2 19 5.13401 19 9ZM17 9C17 11.7614 14.7614 14 12 14C9.23858 14 7 11.7614 7 9C7 6.23858 9.23858 4 12 4C14.7614 4 17 6.23858 17 9ZM10 19.7573L12 17.7573L14 19.7574V15.7101C13.3663 15.8987 12.695 16 12 16C11.305 16 10.6337 15.8987 10 15.7101V19.7573Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgBackspace (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M17.7427 8.46448L19.1569 9.87869L17.0356 12L19.157 14.1214L17.7428 15.5356L15.6214 13.4142L13.5 15.5355L12.0858 14.1213L14.2072 12L12.0859 9.87878L13.5002 8.46457L15.6214 10.5858L17.7427 8.46448Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M8.58579 19L2.29289 12.7071C1.90237 12.3166 1.90237 11.6834 2.29289 11.2929L8.58579 5H22.5857V19H8.58579ZM9.41421 7L4.41421 12L9.41421 17H20.5857V7H9.41421Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgBandAid (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M11.9389 9.76478C11.7055 10.2653 11.1105 10.4819 10.61 10.2485C10.1094 10.0151 9.89288 9.42008 10.1263 8.91954C10.3597 8.419 10.9547 8.20244 11.4552 8.43585C11.9558 8.66925 12.1723 9.26423 11.9389 9.76478Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M8.9195 13.8737C9.42004 14.1071 10.015 13.8905 10.2484 13.39C10.4818 12.8895 10.2653 12.2945 9.76474 12.0611C9.2642 11.8277 8.66922 12.0442 8.43581 12.5448C8.20241 13.0453 8.41896 13.6403 8.9195 13.8737Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M13.8737 15.0805C13.6403 15.581 13.0453 15.7976 12.5447 15.5642C12.0442 15.3308 11.8276 14.7358 12.061 14.2352C12.2944 13.7347 12.8894 13.5181 13.39 13.7516C13.8905 13.985 14.1071 14.5799 13.8737 15.0805Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M14.2352 11.9389C14.7357 12.1723 15.3307 11.9558 15.5641 11.4552C15.7975 10.9547 15.581 10.3597 15.0804 10.1263C14.5799 9.89292 13.9849 10.1095 13.7515 10.61C13.5181 11.1106 13.7347 11.7055 14.2352 11.9389Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M17.0714 1.12432C14.0682 -0.276119 10.4983 1.02321 9.09783 4.02645L4.02641 14.9021C2.62598 17.9054 3.92531 21.4753 6.92855 22.8757C9.93179 24.2761 13.5017 22.9768 14.9021 19.9736L19.9735 9.09787C21.374 6.09463 20.0746 2.52475 17.0714 1.12432ZM13.9347 17.3157L17.3157 10.0653L10.0652 6.6843L6.68427 13.9348L13.9347 17.3157ZM13.0895 19.1283L5.83903 15.7474C4.90541 17.7495 5.77163 20.1295 7.77379 21.0631C9.77595 21.9967 12.1559 21.1305 13.0895 19.1283ZM16.2262 2.93693C18.2283 3.87055 19.0945 6.25047 18.1609 8.25264L10.9104 4.87169C11.8441 2.86953 14.224 2.00331 16.2262 2.93693Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgBatteryEmpty (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M18 6H5C3.34315 6 2 7.34315 2 9V15C2 16.6569 3.34315 18 5 18H18C19.6569 18 21 16.6569 21 15C21.5523 15 22 14.5523 22 14V10C22 9.44772 21.5523 9 21 9C21 7.34315 19.6569 6 18 6ZM18 8H5C4.44772 8 4 8.44772 4 9V15C4 15.5523 4.44772 16 5 16H18C18.5523 16 19 15.5523 19 15V9C19 8.44772 18.5523 8 18 8Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgBatteryFull (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M6 15C5.44772 15 5 14.5523 5 14V10C5 9.44772 5.44772 9 6 9H17C17.5523 9 18 9.44772 18 10V14C18 14.5523 17.5523 15 17 15H6Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M18 6H5C3.34315 6 2 7.34315 2 9V15C2 16.6569 3.34315 18 5 18H18C19.6569 18 21 16.6569 21 15C21.5523 15 22 14.5523 22 14V10C22 9.44772 21.5523 9 21 9C21 7.34315 19.6569 6 18 6ZM18 8H5C4.44772 8 4 8.44772 4 9V15C4 15.5523 4.44772 16 5 16H18C18.5523 16 19 15.5523 19 15V9C19 8.44772 18.5523 8 18 8Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgBattery (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M6 15C5.44772 15 5 14.5523 5 14V10C5 9.44772 5.44772 9 6 9H12V15H6Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M18 6H5C3.34315 6 2 7.34315 2 9V15C2 16.6569 3.34315 18 5 18H18C19.6569 18 21 16.6569 21 15C21.5523 15 22 14.5523 22 14V10C22 9.44772 21.5523 9 21 9C21 7.34315 19.6569 6 18 6ZM18 8H5C4.44772 8 4 8.44772 4 9V15C4 15.5523 4.44772 16 5 16H18C18.5523 16 19 15.5523 19 15V9C19 8.44772 18.5523 8 18 8Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgBee (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M17.9513 15.571C17.7695 17.2187 16.9205 18.6654 15.6805 19.635C15.332 20.4692 14.7092 21.1601 13.9247 21.5951C13.7025 22.4574 12.9196 23.0944 11.9879 23.0944C11.0562 23.0944 10.2733 22.4574 10.0511 21.5951C9.26672 21.1602 8.64392 20.4693 8.29547 19.6353C7.05955 18.6691 6.21203 17.229 6.02621 15.5883C4.93527 16.4161 3.37955 16.4118 2.28618 15.4944C1.01696 14.4294 0.851409 12.5371 1.91641 11.2679L6.00966 6.38975C6.27125 3.31753 8.84785 0.905579 11.9878 0.905579C15.1166 0.905579 17.6861 3.30046 17.9631 6.35711L22.0837 11.2679C23.1487 12.5371 22.9831 14.4294 21.7139 15.4944C20.613 16.4182 19.0433 16.4161 17.9513 15.571ZM15.6254 12.9056L13.9472 10.9056H10.0529L8.37467 12.9056H15.6254ZM17.9878 12.6095L19.0195 13.839C19.3745 14.2621 20.0053 14.3173 20.4283 13.9623C20.8514 13.6073 20.9066 12.9765 20.5516 12.5535L17.9878 9.49803V12.6095ZM15.9878 8.90558V6.90558C15.9878 4.69644 14.1969 2.90558 11.9878 2.90558C9.77865 2.90558 7.98779 4.69644 7.98779 6.90558V8.90558H15.9878ZM4.98059 13.839L5.98779 12.6387V9.52726L3.4485 12.5535C3.0935 12.9765 3.14869 13.6073 3.57176 13.9623C3.99483 14.3173 4.62559 14.2621 4.98059 13.839ZM11.9878 18.9056C9.77865 18.9056 7.98779 17.1147 7.98779 14.9056H15.9878C15.9878 17.1147 14.1969 18.9056 11.9878 18.9056Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgBell (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M14 3V3.28988C16.8915 4.15043 19 6.82898 19 10V17H20V19H4V17H5V10C5 6.82898 7.10851 4.15043 10 3.28988V3C10 1.89543 10.8954 1 12 1C13.1046 1 14 1.89543 14 3ZM7 17H17V10C17 7.23858 14.7614 5 12 5C9.23858 5 7 7.23858 7 10V17ZM14 21V20H10V21C10 22.1046 10.8954 23 12 23C13.1046 23 14 22.1046 14 21Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgBitbucket (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M4.5831 4.63507C4.03082 4.63507 3.66768 5.07472 3.77202 5.61706L6.22804 18.383C6.33238 18.9253 6.86468 19.3649 7.41696 19.3649H16.583C17.1353 19.3649 17.6676 18.9253 17.7719 18.383L20.2279 5.61706C20.3323 5.07472 19.9691 4.63507 19.4168 4.63507H4.5831ZM13.5449 14.3649L14.4549 9.63507H9.54504L10.455 14.3649H13.5449Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgBlock (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M8.46457 14.1213C8.07404 14.5118 8.07404 15.145 8.46457 15.5355C8.85509 15.926 9.48825 15.926 9.87878 15.5355L15.5356 9.87862C15.9262 9.4881 15.9262 8.85493 15.5356 8.46441C15.1451 8.07388 14.5119 8.07388 14.1214 8.46441L8.46457 14.1213Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M6.34315 17.6569C9.46734 20.781 14.5327 20.781 17.6569 17.6569C20.781 14.5327 20.781 9.46734 17.6569 6.34315C14.5327 3.21895 9.46734 3.21895 6.34315 6.34315C3.21895 9.46734 3.21895 14.5327 6.34315 17.6569ZM16.2426 16.2426C13.8995 18.5858 10.1005 18.5858 7.75736 16.2426C5.41421 13.8995 5.41421 10.1005 7.75736 7.75736C10.1005 5.41421 13.8995 5.41421 16.2426 7.75736C18.5858 10.1005 18.5858 13.8995 16.2426 16.2426Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgBmw (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M21 12C21 16.9706 16.9706 21 12 21C7.02944 21 3 16.9706 3 12C3 7.02944 7.02944 3 12 3C16.9706 3 21 7.02944 21 12ZM5 12C5 15.866 8.13401 19 12 19V12H19C19 8.13401 15.866 5 12 5V12H5Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgBoard (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M6 4C3.79086 4 2 5.79086 2 8V16C2 18.2091 3.79086 20 6 20H18C20.2091 20 22 18.2091 22 16V8C22 5.79086 20.2091 4 18 4H6ZM14 6H10V18H14V6ZM16 6V18H18C19.1046 18 20 17.1046 20 16V8C20 6.89543 19.1046 6 18 6H16ZM6 18H8V6H6C4.89543 6 4 6.89543 4 8V16C4 17.1046 4.89543 18 6 18Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgBolt (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M9 21.5L17.5 13L13 10L15 2.5L6.5 11L11 14L9 21.5Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgBookmark (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M19 20H17.1717L12.7072 15.5354C12.3166 15.1449 11.6835 15.1449 11.2929 15.5354L6.82843 20L5 20V7C5 5.34315 6.34315 4 8 4H16C17.6569 4 19 5.34314 19 7V20ZM17 7C17 6.44772 16.5523 6 16 6H8C7.44772 6 7 6.44772 7 7V17L9.87873 14.1212C11.0503 12.9497 12.9498 12.9497 14.1214 14.1212L17 16.9999V7Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgBorderAll (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M6.5 6.5H17.5V17.5H6.5V6.5Z\",\"stroke\":\"currentColor\",\"strokeWidth\":\"3\"}}]})(props);\n};\nexport function CgBorderBottom (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M8 8H16V15H19V5H5V15H8V8Z\",\"fill\":\"currentColor\",\"fillOpacity\":\"0.3\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M5 17H19V20H5V17Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgBorderLeft (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M16 8V16H9L9 19H19L19 5L9 5V8H16Z\",\"fill\":\"currentColor\",\"fillOpacity\":\"0.3\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M7 5L7 19H4L4 5L7 5Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgBorderRight (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M8 16V8H15V5L5 5L5 19H15L15 16H8Z\",\"fill\":\"currentColor\",\"fillOpacity\":\"0.3\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M17 19L17 5L20 5L20 19H17Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgBorderStyleDashed (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M4 11H8V13H4V11Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M10 11H14V13H10V11Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M20 11H16V13H20V11Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgBorderStyleDotted (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M3 11H1V13H3V11Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M7 11H5V13H7V11Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M9 11H11V13H9V11Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M15 11H13V13H15V11Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M17 11H19V13H17V11Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M23 11H21V13H23V11Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgBorderStyleSolid (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M2 11H22V13H2V11Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgBorderTop (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M8 16H16V9L19 9L19 19L5 19L5 9L8 9V16Z\",\"fill\":\"currentColor\",\"fillOpacity\":\"0.3\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M5 7L19 7V4L5 4L5 7Z\"}}]})(props);\n};\nexport function CgBot (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M14.1254 13H10.1254V15H14.1254V13Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M8.12537 13C9.22994 13 10.1254 12.1046 10.1254 11C10.1254 9.89543 9.22994 9 8.12537 9C7.0208 9 6.12537 9.89543 6.12537 11C6.12537 12.1046 7.0208 13 8.12537 13ZM8.12537 11.5C8.40151 11.5 8.62537 11.2761 8.62537 11C8.62537 10.7239 8.40151 10.5 8.12537 10.5C7.84922 10.5 7.62537 10.7239 7.62537 11C7.62537 11.2761 7.84922 11.5 8.12537 11.5Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M18.1254 11C18.1254 12.1046 17.2299 13 16.1254 13C15.0208 13 14.1254 12.1046 14.1254 11C14.1254 9.89543 15.0208 9 16.1254 9C17.2299 9 18.1254 9.89543 18.1254 11ZM16.6254 11C16.6254 11.2761 16.4015 11.5 16.1254 11.5C15.8492 11.5 15.6254 11.2761 15.6254 11C15.6254 10.7239 15.8492 10.5 16.1254 10.5C16.4015 10.5 16.6254 10.7239 16.6254 11Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M2.74884 14.6663C3.73056 16.6421 5.76939 18 8.12537 18H16.1254C18.5654 18 20.6652 16.5435 21.6029 14.4525C22.3722 13.9093 22.8746 13.0133 22.8746 12C22.8746 10.9867 22.3722 10.0907 21.6029 9.54753C20.6652 7.45651 18.5654 6 16.1254 6H8.12537C5.76939 6 3.73056 7.3579 2.74884 9.33375C1.78448 9.83263 1.12537 10.8393 1.12537 12C1.12537 13.1607 1.78448 14.1674 2.74884 14.6663ZM8.12537 8H16.1254C17.5088 8 18.7282 8.70234 19.4465 9.76991C19.7227 10.4593 19.8746 11.2119 19.8746 12C19.8746 12.7881 19.7227 13.5407 19.4465 14.2301C18.7282 15.2977 17.5088 16 16.1254 16H8.12537C5.91623 16 4.12537 14.2091 4.12537 12C4.12537 9.79086 5.91623 8 8.12537 8Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgBowl (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M20.5468 3.67162C20.1563 3.28109 19.5231 3.28109 19.1326 3.67162L13.7687 9.03555H2V11.0356H2.00842C2.22563 16.3663 6.61591 20.6213 12 20.6213C17.3841 20.6213 21.7744 16.3663 21.9916 11.0356H22V9.03555H16.5971L20.5468 5.08583C20.9374 4.69531 20.9374 4.06214 20.5468 3.67162ZM14.1762 11.0356C14.1806 11.0356 14.1851 11.0356 14.1896 11.0356H19.9895C19.7739 15.2613 16.2793 18.6213 12 18.6213C7.72066 18.6213 4.22609 15.2613 4.01054 11.0356H14.1762Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgBox (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M10 12C9.44769 12 9 12.4477 9 13C9 13.5523 9.44769 14 10 14H14C14.5522 14 15 13.5523 15 13C15 12.4477 14.5522 12 14 12H10Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M4 2C2.34314 2 1 3.34314 1 5V19C1 20.6569 2.34314 22 4 22H20C21.6569 22 23 20.6569 23 19V5C23 3.34314 21.6569 2 20 2H4ZM20 4H4C3.44769 4 3 4.44769 3 5V8H21V5C21 4.44769 20.5522 4 20 4ZM3 19V10H21V19C21 19.5523 20.5522 20 20 20H4C3.44769 20 3 19.5523 3 19Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgBoy (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M9 14C9.55228 14 10 13.5523 10 13C10 12.4477 9.55228 12 9 12C8.44771 12 8 12.4477 8 13C8 13.5523 8.44771 14 9 14Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M16 13C16 13.5523 15.5523 14 15 14C14.4477 14 14 13.5523 14 13C14 12.4477 14.4477 12 15 12C15.5523 12 16 12.4477 16 13Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M12 22C17.5228 22 22 17.5228 22 12C22 6.47715 17.5228 2 12 2C6.47715 2 2 6.47715 2 12C2 17.5228 6.47715 22 12 22ZM12 20C16.4183 20 20 16.4183 20 12C20 11.1637 19.8717 10.3574 19.6337 9.59973C18.7991 9.82556 17.9212 9.94604 17.0152 9.94604C13.2921 9.94604 10.0442 7.91139 8.32277 4.89334C5.75469 6.22486 4 8.90751 4 12C4 16.4183 7.58172 20 12 20Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgBrackets (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M11 7V9H9V15H11V17H7V7H11Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M15 15H13V17H17V7H13V9H15V15Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M3 6C3 4.34315 4.34315 3 6 3H18C19.6569 3 21 4.34315 21 6V18C21 19.6569 19.6569 21 18 21H6C4.34315 21 3 19.6569 3 18V6ZM6 5H18C18.5523 5 19 5.44772 19 6V18C19 18.5523 18.5523 19 18 19H6C5.44772 19 5 18.5523 5 18V6C5 5.44772 5.44772 5 6 5Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgBriefcase (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M14 11H10V13H14V11Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M7 5V4C7 2.89545 7.89539 2 9 2H15C16.1046 2 17 2.89545 17 4V5H20C21.6569 5 23 6.34314 23 8V18C23 19.6569 21.6569 21 20 21H4C2.34314 21 1 19.6569 1 18V8C1 6.34314 2.34314 5 4 5H7ZM9 4H15V5H9V4ZM4 7C3.44775 7 3 7.44769 3 8V14H21V8C21 7.44769 20.5522 7 20 7H4ZM3 18V16H21V18C21 18.5523 20.5522 19 20 19H4C3.44775 19 3 18.5523 3 18Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgBrowse (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M14.364 13.1214C15.2876 14.045 15.4831 15.4211 14.9504 16.5362L16.4853 18.0711C16.8758 18.4616 16.8758 19.0948 16.4853 19.4853C16.0948 19.8758 15.4616 19.8758 15.0711 19.4853L13.5361 17.9504C12.421 18.4831 11.045 18.2876 10.1213 17.364C8.94975 16.1924 8.94975 14.2929 10.1213 13.1214C11.2929 11.9498 13.1924 11.9498 14.364 13.1214ZM12.9497 15.9498C13.3403 15.5593 13.3403 14.9261 12.9497 14.5356C12.5592 14.145 11.9261 14.145 11.5355 14.5356C11.145 14.9261 11.145 15.5593 11.5355 15.9498C11.9261 16.3403 12.5592 16.3403 12.9497 15.9498Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M8 5H16V7H8V5Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M16 9H8V11H16V9Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M4 4C4 2.34315 5.34315 1 7 1H17C18.6569 1 20 2.34315 20 4V20C20 21.6569 18.6569 23 17 23H7C5.34315 23 4 21.6569 4 20V4ZM7 3H17C17.5523 3 18 3.44772 18 4V20C18 20.5523 17.5523 21 17 21H7C6.44772 21 6 20.5523 6 20V4C6 3.44772 6.44771 3 7 3Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgBrowser (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M4 8C4.55228 8 5 7.55228 5 7C5 6.44772 4.55228 6 4 6C3.44772 6 3 6.44772 3 7C3 7.55228 3.44772 8 4 8Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M8 7C8 7.55228 7.55228 8 7 8C6.44772 8 6 7.55228 6 7C6 6.44772 6.44772 6 7 6C7.55228 6 8 6.44772 8 7Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M10 8C10.5523 8 11 7.55228 11 7C11 6.44772 10.5523 6 10 6C9.44771 6 9 6.44772 9 7C9 7.55228 9.44771 8 10 8Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M3 3C1.34315 3 0 4.34315 0 6V18C0 19.6569 1.34315 21 3 21H21C22.6569 21 24 19.6569 24 18V6C24 4.34315 22.6569 3 21 3H3ZM21 5H3C2.44772 5 2 5.44772 2 6V9H22V6C22 5.44772 21.5523 5 21 5ZM2 18V11H22V18C22 18.5523 21.5523 19 21 19H3C2.44772 19 2 18.5523 2 18Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgBrush (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M15 11H18C18.5523 11 19 11.4477 19 12V18C19 19.6569 17.6569 21 16 21H8C6.34315 21 5 19.6569 5 18V12C5 11.4477 5.44772 11 6 11H9V6C9 4.34315 10.3431 3 12 3C13.6569 3 15 4.34315 15 6V11ZM13 6C13 5.44772 12.5523 5 12 5C11.4477 5 11 5.44772 11 6V13H7V18C7 18.5523 7.44772 19 8 19H9V16H11V19H13V16H15V19H16C16.5523 19 17 18.5523 17 18V13H13V6Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgBulb (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M4 9C4 11.9611 5.60879 14.5465 8 15.9297V15.9999C8 18.2091 9.79086 19.9999 12 19.9999C14.2091 19.9999 16 18.2091 16 15.9999V15.9297C18.3912 14.5465 20 11.9611 20 9C20 4.58172 16.4183 1 12 1C7.58172 1 4 4.58172 4 9ZM16 13.4722C17.2275 12.3736 18 10.777 18 9C18 5.68629 15.3137 3 12 3C8.68629 3 6 5.68629 6 9C6 10.777 6.7725 12.3736 8 13.4722L10 13.4713V16C10 17.1045 10.8954 17.9999 12 17.9999C13.1045 17.9999 14 17.1045 14 15.9999V13.4713L16 13.4722Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M10 21.0064V21C10.5883 21.3403 11.2714 21.5351 12 21.5351C12.7286 21.5351 13.4117 21.3403 14 21V21.0064C14 22.111 13.1046 23.0064 12 23.0064C10.8954 23.0064 10 22.111 10 21.0064Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgCPlusPlus (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12.207 16.278C11.1241 17.343 9.63879 18 8 18C4.68629 18 2 15.3137 2 12C2 8.68629 4.68629 6 8 6C9.67492 6 11.1896 6.6863 12.278 7.79303L13.6923 6.37878C12.2418 4.91014 10.2272 4 8 4C3.58172 4 0 7.58172 0 12C0 16.4183 3.58172 20 8 20C10.1911 20 12.1764 19.1192 13.6212 17.6923L12.207 16.278Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M15 9H13V11H11V13H13V15H15V13H17V11H15V9Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M20 9H22V11H24V13H22V15H20V13H18V11H20V9Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgCalculator (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M17 5H7V7H17V5Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M7 9H9V11H7V9Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M9 13H7V15H9V13Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M7 17H9V19H7V17Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M13 9H11V11H13V9Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M11 13H13V15H11V13Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M13 17H11V19H13V17Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M15 9H17V11H15V9Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M17 13H15V19H17V13Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M3 3C3 1.89543 3.89543 1 5 1H19C20.1046 1 21 1.89543 21 3V21C21 22.1046 20.1046 23 19 23H5C3.89543 23 3 22.1046 3 21V3ZM5 3H19V21H5V3Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgCalendarDates (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M8 13C7.44772 13 7 12.5523 7 12C7 11.4477 7.44772 11 8 11C8.55228 11 9 11.4477 9 12C9 12.5523 8.55228 13 8 13Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M8 17C7.44772 17 7 16.5523 7 16C7 15.4477 7.44772 15 8 15C8.55228 15 9 15.4477 9 16C9 16.5523 8.55228 17 8 17Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M11 16C11 16.5523 11.4477 17 12 17C12.5523 17 13 16.5523 13 16C13 15.4477 12.5523 15 12 15C11.4477 15 11 15.4477 11 16Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M16 17C15.4477 17 15 16.5523 15 16C15 15.4477 15.4477 15 16 15C16.5523 15 17 15.4477 17 16C17 16.5523 16.5523 17 16 17Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M11 12C11 12.5523 11.4477 13 12 13C12.5523 13 13 12.5523 13 12C13 11.4477 12.5523 11 12 11C11.4477 11 11 11.4477 11 12Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M16 13C15.4477 13 15 12.5523 15 12C15 11.4477 15.4477 11 16 11C16.5523 11 17 11.4477 17 12C17 12.5523 16.5523 13 16 13Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M8 7C7.44772 7 7 7.44772 7 8C7 8.55228 7.44772 9 8 9H16C16.5523 9 17 8.55228 17 8C17 7.44772 16.5523 7 16 7H8Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M6 3C4.34315 3 3 4.34315 3 6V18C3 19.6569 4.34315 21 6 21H18C19.6569 21 21 19.6569 21 18V6C21 4.34315 19.6569 3 18 3H6ZM18 5H6C5.44772 5 5 5.44772 5 6V18C5 18.5523 5.44772 19 6 19H18C18.5523 19 19 18.5523 19 18V6C19 5.44772 18.5523 5 18 5Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgCalendarDue (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M7 8C7 7.44772 7.44772 7 8 7H16C16.5523 7 17 7.44772 17 8C17 8.55228 16.5523 9 16 9H8C7.44772 9 7 8.55228 7 8Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M12 16C13.1046 16 14 15.1046 14 14C14 12.8954 13.1046 12 12 12C10.8954 12 10 12.8954 10 14C10 15.1046 10.8954 16 12 16Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M6 3C4.34315 3 3 4.34315 3 6V18C3 19.6569 4.34315 21 6 21H18C19.6569 21 21 19.6569 21 18V6C21 4.34315 19.6569 3 18 3H6ZM18 5H6C5.44772 5 5 5.44772 5 6V18C5 18.5523 5.44772 19 6 19H18C18.5523 19 19 18.5523 19 18V6C19 5.44772 18.5523 5 18 5Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgCalendarNext (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M11.7249 16.5461L16.2249 13.9481L11.7249 11.35V12.9481H7.7749V14.9481H11.7249V16.5461Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M8 7C7.44772 7 7 7.44772 7 8C7 8.55228 7.44772 9 8 9H16C16.5523 9 17 8.55228 17 8C17 7.44772 16.5523 7 16 7H8Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M6 3C4.34315 3 3 4.34315 3 6V18C3 19.6569 4.34315 21 6 21H18C19.6569 21 21 19.6569 21 18V6C21 4.34315 19.6569 3 18 3H6ZM18 5H6C5.44772 5 5 5.44772 5 6V18C5 18.5523 5.44772 19 6 19H18C18.5523 19 19 18.5523 19 18V6C19 5.44772 18.5523 5 18 5Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgCalendarToday (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M15 17C16.1046 17 17 16.1046 17 15C17 13.8954 16.1046 13 15 13C13.8954 13 13 13.8954 13 15C13 16.1046 13.8954 17 15 17Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M6 3C4.34315 3 3 4.34315 3 6V18C3 19.6569 4.34315 21 6 21H18C19.6569 21 21 19.6569 21 18V6C21 4.34315 19.6569 3 18 3H6ZM5 18V7H19V18C19 18.5523 18.5523 19 18 19H6C5.44772 19 5 18.5523 5 18Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgCalendarTwo (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M8 7C7.44772 7 7 7.44772 7 8C7 8.55228 7.44772 9 8 9H16C16.5523 9 17 8.55228 17 8C17 7.44772 16.5523 7 16 7H8Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M3 6C3 4.34315 4.34315 3 6 3H18C19.6569 3 21 4.34315 21 6V18C21 19.6569 19.6569 21 18 21H6C4.34315 21 3 19.6569 3 18V6ZM6 5H18C18.5523 5 19 5.44772 19 6V18C19 18.5523 18.5523 19 18 19H6C5.44772 19 5 18.5523 5 18V6C5 5.44772 5.44772 5 6 5Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgCalendar (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M8 9C7.44772 9 7 9.44771 7 10C7 10.5523 7.44772 11 8 11H16C16.5523 11 17 10.5523 17 10C17 9.44771 16.5523 9 16 9H8Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M6 3C4.34315 3 3 4.34315 3 6V18C3 19.6569 4.34315 21 6 21H18C19.6569 21 21 19.6569 21 18V6C21 4.34315 19.6569 3 18 3H6ZM5 18V7H19V18C19 18.5523 18.5523 19 18 19H6C5.44772 19 5 18.5523 5 18Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgCalibrate (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12.0503 5C14.51 5 16.7393 5.98676 18.3638 7.58602L14.1208 11.8291C13.5824 11.3154 12.8531 11 12.0503 11C11.1963 11 10.4256 11.3568 9.87927 11.9295L5.63623 7.68651C7.26871 6.0282 9.53941 5 12.0503 5Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M12.0503 19C13.7071 19 15.0503 17.6569 15.0503 16C15.0503 14.3431 13.7071 13 12.0503 13C10.3934 13 9.05029 14.3431 9.05029 16C9.05029 17.6569 10.3934 19 12.0503 19Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgCamera (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M4 4.5V6.5H12V7.5H3C1.34315 7.5 0 8.84315 0 10.5V16.5C0 18.1569 1.34315 19.5 3 19.5H15C16.5731 19.5 17.8634 18.2892 17.9898 16.7487L24 17.5V9.5L17.9898 10.2513C17.8634 8.71078 16.5731 7.5 15 7.5H14V5.5C14 4.94772 13.5523 4.5 13 4.5H4ZM18 12.2656V14.7344L22 15.2344V11.7656L18 12.2656ZM16 10.5C16 9.94772 15.5523 9.5 15 9.5H3C2.44772 9.5 2 9.94772 2 10.5V16.5C2 17.0523 2.44772 17.5 3 17.5H15C15.5523 17.5 16 17.0523 16 16.5V10.5Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgCap (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M8 18V20H16V18H8Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M13.988 3.2203C13.9959 3.14796 14 3.07446 14 3C14 1.89543 13.1046 1 12 1C10.8954 1 10 1.89543 10 3C10 3.07446 10.0041 3.14796 10.012 3.2203C5.99799 4.12533 3 7.71255 3 12C3 12.3883 3.02459 12.7709 3.0723 13.1462C1.86949 13.5369 1 14.6669 1 16V20C1 21.6569 2.34315 23 4 23H20C21.6569 23 23 21.6569 23 20V16C23 14.6669 22.1305 13.5369 20.9277 13.1462C20.9754 12.7709 21 12.3883 21 12C21 7.71255 18.002 4.12533 13.988 3.2203ZM12 5C8.13401 5 5 8.13401 5 12C5 12.3402 5.02412 12.674 5.07063 13H18.9294C18.9759 12.674 19 12.3402 19 12C19 8.13401 15.866 5 12 5ZM3 16C3 15.4477 3.44772 15 4 15H20C20.5523 15 21 15.4477 21 16V20C21 20.5523 20.5523 21 20 21H4C3.44772 21 3 20.5523 3 20V16Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgCaptions (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M11 8V10H8V14H11V16H6V8H11Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M18 8V10H15V14H18V16H13V8H18Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M2 5C2 4.44772 2.44772 4 3 4H21C21.5523 4 22 4.44772 22 5V19C22 19.5523 21.5523 20 21 20H3C2.44772 20 2 19.5523 2 19V5ZM4 18V6H20V18H4Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgCardClubs (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 11C13.1046 11 14 10.1046 14 9C14 7.89543 13.1046 7 12 7C10.8954 7 10 7.89543 10 9C10 10.1046 10.8954 11 12 11Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M11 13C11 14.1046 10.1046 15 9 15C7.89543 15 7 14.1046 7 13C7 11.8954 7.89543 11 9 11C10.1046 11 11 11.8954 11 13Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M15 15C16.1046 15 17 14.1046 17 13C17 11.8954 16.1046 11 15 11C13.8954 11 13 11.8954 13 13C13 14.1046 13.8954 15 15 15Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M3 4C3 2.34315 4.34315 1 6 1H18C19.6569 1 21 2.34315 21 4V20C21 21.6569 19.6569 23 18 23H6C4.34315 23 3 21.6569 3 20V4ZM6 3H18C18.5523 3 19 3.44772 19 4V20C19 20.5523 18.5523 21 18 21H6C5.44772 21 5 20.5523 5 20V4C5 3.44772 5.44772 3 6 3Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgCardDiamonds (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 7.75736L7.75736 12L12 16.2426L16.2426 12L12 7.75736Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M3 4C3 2.34315 4.34315 1 6 1H18C19.6569 1 21 2.34315 21 4V20C21 21.6569 19.6569 23 18 23H6C4.34315 23 3 21.6569 3 20V4ZM6 3H18C18.5523 3 19 3.44772 19 4V20C19 20.5523 18.5523 21 18 21H6C5.44772 21 5 20.5523 5 20V4C5 3.44772 5.44772 3 6 3Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgCardHearts (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M9.14648 12.2929C8.36544 11.5118 8.36544 10.2455 9.14648 9.46444C9.92753 8.68339 11.1939 8.68339 11.9749 9.46444L12 9.48955L12.0251 9.46449C12.8061 8.68345 14.0725 8.68345 14.8535 9.46449C15.6346 10.2455 15.6346 11.5119 14.8535 12.2929L12.0251 15.1213L12 15.0962L11.9749 15.1213L9.14648 12.2929Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M3 4C3 2.34315 4.34315 1 6 1H18C19.6569 1 21 2.34315 21 4V20C21 21.6569 19.6569 23 18 23H6C4.34315 23 3 21.6569 3 20V4ZM6 3H18C18.5523 3 19 3.44772 19 4V20C19 20.5523 18.5523 21 18 21H6C5.44772 21 5 20.5523 5 20V4C5 3.44772 5.44772 3 6 3Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgCardSpades (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M9.14648 11.7071C8.36544 12.4882 8.36544 13.7545 9.14648 14.5356C9.92753 15.3166 11.1939 15.3166 11.9749 14.5356L12 14.5104L12.0251 14.5355C12.8061 15.3166 14.0725 15.3166 14.8535 14.5355C15.6346 13.7545 15.6346 12.4881 14.8535 11.7071L12.0251 8.87865L12 8.90377L11.9749 8.87871L9.14648 11.7071Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M3 20C3 21.6569 4.34315 23 6 23H18C19.6569 23 21 21.6569 21 20V4C21 2.34315 19.6569 1 18 1H6C4.34315 1 3 2.34315 3 4V20ZM6 21H18C18.5523 21 19 20.5523 19 20V4C19 3.44772 18.5523 3 18 3H6C5.44772 3 5 3.44772 5 4V20C5 20.5523 5.44772 21 6 21Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgCarousel (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M4 3C2.34315 3 1 4.34315 1 6V10C1 11.6569 2.34315 13 4 13H20C21.6569 13 23 11.6569 23 10V6C23 4.34315 21.6569 3 20 3H4ZM20 5H4C3.44772 5 3 5.44772 3 6V10C3 10.5523 3.44772 11 4 11H20C20.5523 11 21 10.5523 21 10V6C21 5.44771 20.5523 5 20 5Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M7 20C7 19.4477 7.44772 19 8 19H16C16.5523 19 17 19.4477 17 20C17 20.5523 16.5523 21 16 21H8C7.44772 21 7 20.5523 7 20Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M5 15C4.44772 15 4 15.4477 4 16C4 16.5523 4.44772 17 5 17H19C19.5523 17 20 16.5523 20 16C20 15.4477 19.5523 15 19 15H5Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgCast (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M20 6H4V8H2V6C2 4.89543 2.89543 4 4 4H20C21.1046 4 22 4.89543 22 6V18C22 19.1046 21.1046 20 20 20H15V18H20V6Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M2 13C5.86599 13 9 16.134 9 20H7C7 17.2386 4.76142 15 2 15V13Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M2 17C3.65685 17 5 18.3431 5 20H2V17Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M2 9C8.07513 9 13 13.9249 13 20H11C11 15.0294 6.97056 11 2 11V9Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgChanel (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M6.07178 3.17291C4.32593 3.5202 2.72229 4.37738 1.46362 5.63605L3.59332 7.76575C4.43079 6.92835 5.4978 6.35803 6.65936 6.12695C7.53564 5.95264 8.43604 5.9773 9.29523 6.19452C9.0791 6.45056 8.87671 6.71936 8.68927 6.99988C7.70032 8.47992 7.17249 10.22 7.17249 12C7.17249 13.78 7.70032 15.5201 8.68927 17.0001C8.87671 17.2806 9.07916 17.5494 9.29529 17.8055C8.4361 18.0227 7.53564 18.0474 6.65936 17.873C5.4978 17.642 4.43079 17.0717 3.59332 16.2343L1.46362 18.364C2.72229 19.6226 4.32593 20.4798 6.07178 20.8271C7.81757 21.1743 9.6272 20.9961 11.2717 20.3149C11.5201 20.212 11.7632 20.0983 12.0001 19.9744C12.2369 20.0983 12.4799 20.212 12.7283 20.3149C14.3729 20.9961 16.1825 21.1743 17.9283 20.8271C19.6741 20.4798 21.2778 19.6226 22.5364 18.364L20.4067 16.2343C19.5693 17.0717 18.5023 17.642 17.3407 17.873C16.4644 18.0474 15.564 18.0227 14.7048 17.8055C14.9209 17.5494 15.1234 17.2806 15.3108 17.0001C16.2997 15.5201 16.8276 13.78 16.8276 12C16.8276 10.22 16.2997 8.47992 15.3108 6.99988C15.1234 6.71936 14.921 6.45056 14.7048 6.19452C15.564 5.9773 16.4644 5.95264 17.3407 6.12695C18.5023 6.35803 19.5693 6.92835 20.4067 7.76575L22.5364 5.63605C21.2778 4.37738 19.6741 3.5202 17.9283 3.17291C16.1825 2.82568 14.3729 3.00391 12.7283 3.68506C12.4799 3.78796 12.2369 3.90167 12.0001 4.02564C11.7632 3.90167 11.5201 3.78796 11.2717 3.68506C9.6272 3.00391 7.81757 2.82568 6.07178 3.17291ZM12.0001 7.7049C11.6994 7.99695 11.4288 8.32117 11.1935 8.67316C10.5356 9.6579 10.1844 10.8157 10.1844 12C10.1844 13.1843 10.5356 14.3421 11.1935 15.3268C11.4288 15.6788 11.6994 16.0031 12.0001 16.2951C12.3007 16.0031 12.5713 15.6788 12.8065 15.3268C13.4645 14.3421 13.8157 13.1843 13.8157 12C13.8157 10.8157 13.4645 9.6579 12.8065 8.67316C12.5713 8.32117 12.3007 7.99695 12.0001 7.7049Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgChart (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M22.775 8C22.9242 8.65461 23 9.32542 23 10H14V1C14.6746 1 15.3454 1.07584 16 1.22504C16.4923 1.33724 16.9754 1.49094 17.4442 1.68508C18.5361 2.13738 19.5282 2.80031 20.364 3.63604C21.1997 4.47177 21.8626 5.46392 22.3149 6.55585C22.5091 7.02455 22.6628 7.5077 22.775 8ZM20.7082 8C20.6397 7.77018 20.5593 7.54361 20.4672 7.32122C20.1154 6.47194 19.5998 5.70026 18.9497 5.05025C18.2997 4.40024 17.5281 3.88463 16.6788 3.53284C16.4564 3.44073 16.2298 3.36031 16 3.2918V8H20.7082Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M1 14C1 9.02944 5.02944 5 10 5C10.6746 5 11.3454 5.07584 12 5.22504V12H18.775C18.9242 12.6546 19 13.3254 19 14C19 18.9706 14.9706 23 10 23C5.02944 23 1 18.9706 1 14ZM16.8035 14H10V7.19648C6.24252 7.19648 3.19648 10.2425 3.19648 14C3.19648 17.7575 6.24252 20.8035 10 20.8035C13.7575 20.8035 16.8035 17.7575 16.8035 14Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgCheckO (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M10.2426 16.3137L6 12.071L7.41421 10.6568L10.2426 13.4853L15.8995 7.8284L17.3137 9.24262L10.2426 16.3137Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M1 12C1 5.92487 5.92487 1 12 1C18.0751 1 23 5.92487 23 12C23 18.0751 18.0751 23 12 23C5.92487 23 1 18.0751 1 12ZM12 21C7.02944 21 3 16.9706 3 12C3 7.02944 7.02944 3 12 3C16.9706 3 21 7.02944 21 12C21 16.9706 16.9706 21 12 21Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgCheckR (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M10.2426 16.3137L6 12.071L7.41421 10.6568L10.2426 13.4853L15.8995 7.8284L17.3137 9.24262L10.2426 16.3137Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M1 5C1 2.79086 2.79086 1 5 1H19C21.2091 1 23 2.79086 23 5V19C23 21.2091 21.2091 23 19 23H5C2.79086 23 1 21.2091 1 19V5ZM5 3H19C20.1046 3 21 3.89543 21 5V19C21 20.1046 20.1046 21 19 21H5C3.89543 21 3 20.1046 3 19V5C3 3.89543 3.89543 3 5 3Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgCheck (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M10.5858 13.4142L7.75735 10.5858L6.34314 12L10.5858 16.2427L17.6568 9.1716L16.2426 7.75739L10.5858 13.4142Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgChevronDoubleDownO (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M7.75732 8.46448L9.17154 7.05026L12 9.87869L14.8284 7.05029L16.2426 8.46451L12 12.7071L7.75732 8.46448Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M9.17154 11.2929L7.75732 12.7071L11.9999 16.9498L16.2426 12.7071L14.8284 11.2929L12 14.1213L9.17154 11.2929Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M23 12C23 18.0751 18.0751 23 12 23C5.92487 23 1 18.0751 1 12C1 5.92487 5.92487 1 12 1C18.0751 1 23 5.92487 23 12ZM21 12C21 16.9706 16.9706 21 12 21C7.02944 21 3 16.9706 3 12C3 7.02944 7.02944 3 12 3C16.9706 3 21 7.02944 21 12Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgChevronDoubleDownR (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M7.75732 8.46448L9.17154 7.05026L12 9.87869L14.8284 7.05029L16.2426 8.46451L12 12.7071L7.75732 8.46448Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M9.17154 11.2929L7.75732 12.7071L11.9999 16.9498L16.2426 12.7071L14.8284 11.2929L12 14.1213L9.17154 11.2929Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M1 5C1 2.79086 2.79086 1 5 1H19C21.2091 1 23 2.79086 23 5V19C23 21.2091 21.2091 23 19 23H5C2.79086 23 1 21.2091 1 19V5ZM5 3H19C20.1046 3 21 3.89543 21 5V19C21 20.1046 20.1046 21 19 21H5C3.89543 21 3 20.1046 3 19V5C3 3.89543 3.89543 3 5 3Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgChevronDoubleDown (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M7.75735 5.63605L6.34314 7.05026L12 12.7071L17.6569 7.05029L16.2427 5.63608L12 9.87872L7.75735 5.63605Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M6.34314 12.7071L7.75735 11.2929L12 15.5356L16.2427 11.2929L17.6569 12.7071L12 18.364L6.34314 12.7071Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgChevronDoubleLeftO (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12.7071 9.1716L11.2929 7.75739L7.05024 12L11.2929 16.2426L12.7071 14.8284L9.87869 12L12.7071 9.1716Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M15.5355 7.75739L16.9497 9.1716L14.1213 12L16.9497 14.8284L15.5355 16.2426L11.2929 12L15.5355 7.75739Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M23 12C23 18.0751 18.0751 23 12 23C5.92487 23 1 18.0751 1 12C1 5.92487 5.92487 1 12 1C18.0751 1 23 5.92487 23 12ZM21 12C21 16.9706 16.9706 21 12 21C7.02944 21 3 16.9706 3 12C3 7.02944 7.02944 3 12 3C16.9706 3 21 7.02944 21 12Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgChevronDoubleLeftR (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12.7071 9.1716L11.2929 7.75739L7.05024 12L11.2929 16.2426L12.7071 14.8284L9.87869 12L12.7071 9.1716Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M15.5355 7.75739L16.9497 9.1716L14.1213 12L16.9497 14.8284L15.5355 16.2426L11.2929 12L15.5355 7.75739Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M1 5C1 2.79086 2.79086 1 5 1H19C21.2091 1 23 2.79086 23 5V19C23 21.2091 21.2091 23 19 23H5C2.79086 23 1 21.2091 1 19V5ZM5 3H19C20.1046 3 21 3.89543 21 5V19C21 20.1046 20.1046 21 19 21H5C3.89543 21 3 20.1046 3 19V5C3 3.89543 3.89543 3 5 3Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgChevronDoubleLeft (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M18.3639 7.75735L16.9497 6.34314L11.2929 12L16.9497 17.6568L18.3639 16.2426L14.1213 12L18.3639 7.75735Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M11.2929 6.34314L12.7071 7.75735L8.46447 12L12.7071 16.2426L11.2929 17.6568L5.63605 12L11.2929 6.34314Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgChevronDoubleRightO (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M8.46448 7.75739L7.05026 9.1716L9.87869 12L7.05029 14.8284L8.46451 16.2426L12.7071 12L8.46448 7.75739Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M11.2929 9.1716L12.7071 7.75739L16.9498 12L12.7071 16.2426L11.2929 14.8284L14.1213 12L11.2929 9.1716Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M1 12C1 18.0751 5.92487 23 12 23C18.0751 23 23 18.0751 23 12C23 5.92487 18.0751 1 12 1C5.92487 1 1 5.92487 1 12ZM3 12C3 16.9706 7.02944 21 12 21C16.9706 21 21 16.9706 21 12C21 7.02944 16.9706 3 12 3C7.02944 3 3 7.02944 3 12Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgChevronDoubleRightR (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M8.46448 7.75739L7.05026 9.1716L9.87869 12L7.05029 14.8284L8.46451 16.2426L12.7071 12L8.46448 7.75739Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M11.2929 9.1716L12.7071 7.75739L16.9498 12L12.7071 16.2426L11.2929 14.8284L14.1213 12L11.2929 9.1716Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M23 5C23 2.79086 21.2091 1 19 1H5C2.79086 1 1 2.79086 1 5V19C1 21.2091 2.79086 23 5 23H19C21.2091 23 23 21.2091 23 19V5ZM19 3H5C3.89543 3 3 3.89543 3 5V19C3 20.1046 3.89543 21 5 21H19C20.1046 21 21 20.1046 21 19V5C21 3.89543 20.1046 3 19 3Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgChevronDoubleRight (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M5.63605 7.75735L7.05026 6.34314L12.7071 12L7.05029 17.6568L5.63608 16.2426L9.87869 12L5.63605 7.75735Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M12.7071 6.34314L11.2929 7.75735L15.5356 12L11.2929 16.2426L12.7072 17.6568L18.364 12L12.7071 6.34314Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgChevronDoubleUpO (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M14.8284 12.7071L16.2426 11.2929L12 7.05027L7.75739 11.2929L9.1716 12.7071L12 9.87869L14.8284 12.7071Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M14.8284 16.9497L16.2426 15.5355L12 11.2929L7.75739 15.5355L9.1716 16.9497L12 14.1213L14.8284 16.9497Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M1 12C1 18.0751 5.92487 23 12 23C18.0751 23 23 18.0751 23 12C23 5.92487 18.0751 1 12 1C5.92487 1 1 5.92487 1 12ZM3 12C3 16.9706 7.02944 21 12 21C16.9706 21 21 16.9706 21 12C21 7.02944 16.9706 3 12 3C7.02944 3 3 7.02944 3 12Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgChevronDoubleUpR (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M14.8284 12.4813L16.2426 11.067L12 6.82444L7.75732 11.0671L9.17154 12.4813L12 9.65286L14.8284 12.4813Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M14.8284 16.7239L16.2426 15.3097L12 11.0671L7.75732 15.3097L9.17154 16.7239L12 13.8955L14.8284 16.7239Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M23 4.77411C23 2.56497 21.2091 0.774109 19 0.774109H5C2.79086 0.774109 1 2.56497 1 4.77411V18.7741C1 20.9832 2.79086 22.7741 5 22.7741H19C21.2091 22.7741 23 20.9832 23 18.7741V4.77411ZM19 2.77411H5C3.89543 2.77411 3 3.66954 3 4.77411V18.7741C3 19.8787 3.89543 20.7741 5 20.7741H19C20.1046 20.7741 21 19.8787 21 18.7741V4.77411C21 3.66954 20.1046 2.77411 19 2.77411Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgChevronDoubleUp (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M17.6569 11.2929L16.2427 12.7071L12 8.46444L7.75735 12.7071L6.34314 11.2929L12 5.63605L17.6569 11.2929Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M17.6569 16.9497L16.2427 18.3639L12 14.1213L7.75735 18.364L6.34314 16.9498L12 11.2929L17.6569 16.9497Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgChevronDownO (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M7.75745 10.5858L9.17166 9.17154L12.0001 12L14.8285 9.17157L16.2427 10.5858L12.0001 14.8284L7.75745 10.5858Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M1 12C1 5.92487 5.92487 1 12 1C18.0751 1 23 5.92487 23 12C23 18.0751 18.0751 23 12 23C5.92487 23 1 18.0751 1 12ZM12 21C7.02944 21 3 16.9706 3 12C3 7.02944 7.02944 3 12 3C16.9706 3 21 7.02944 21 12C21 16.9706 16.9706 21 12 21Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgChevronDownR (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M7.75739 10.5858L9.1716 9.17154L12 12L14.8284 9.17157L16.2426 10.5858L12 14.8284L7.75739 10.5858Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M1 5C1 2.79086 2.79086 1 5 1H19C21.2091 1 23 2.79086 23 5V19C23 21.2091 21.2091 23 19 23H5C2.79086 23 1 21.2091 1 19V5ZM5 3H19C20.1046 3 21 3.89543 21 5V19C21 20.1046 20.1046 21 19 21H5C3.89543 21 3 20.1046 3 19V5C3 3.89543 3.89543 3 5 3Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgChevronDown (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M6.34317 7.75732L4.92896 9.17154L12 16.2426L19.0711 9.17157L17.6569 7.75735L12 13.4142L6.34317 7.75732Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgChevronLeftO (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 7.75739L13.4142 9.1716L10.5858 12L13.4142 14.8285L12 16.2427L7.75736 12L12 7.75739Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M12 1C18.0751 1 23 5.92487 23 12C23 18.0751 18.0751 23 12 23C5.92487 23 1 18.0751 1 12C1 5.92487 5.92487 1 12 1ZM3 12C3 7.02944 7.02944 3 12 3C16.9706 3 21 7.02944 21 12C21 16.9706 16.9706 21 12 21C7.02944 21 3 16.9706 3 12Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgChevronLeftR (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M13 7.75739L14.4142 9.1716L11.5858 12L14.4142 14.8284L13 16.2426L8.75736 12L13 7.75739Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M19 1C21.2091 1 23 2.79086 23 5V19C23 21.2091 21.2091 23 19 23H5C2.79086 23 1 21.2091 1 19V5C1 2.79086 2.79086 1 5 1H19ZM21 5V19C21 20.1046 20.1046 21 19 21H5C3.89543 21 3 20.1046 3 19L3 5C3 3.89543 3.89543 3 5 3L19 3C20.1046 3 21 3.89543 21 5Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgChevronLeft (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M16.2426 6.34317L14.8284 4.92896L7.75739 12L14.8285 19.0711L16.2427 17.6569L10.5858 12L16.2426 6.34317Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgChevronRightO (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M11.0858 7.75739L15.3284 12L11.0858 16.2427L9.67157 14.8285L12.5 12L9.67157 9.1716L11.0858 7.75739Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M12 1C5.92487 1 1 5.92487 1 12C1 18.0751 5.92487 23 12 23C18.0751 23 23 18.0751 23 12C23 5.92487 18.0751 1 12 1ZM21 12C21 7.02944 16.9706 3 12 3C7.02944 3 3 7.02944 3 12C3 16.9706 7.02944 21 12 21C16.9706 21 21 16.9706 21 12Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgChevronRightR (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M16.4853 12.0451L12.2426 7.80249L10.8284 9.2167L13.6568 12.0451L10.8284 14.8736L12.2426 16.2878L16.4853 12.0451Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M1 4C1 2.34315 2.34315 1 4 1H20C21.6569 1 23 2.34315 23 4V20C23 21.6569 21.6569 23 20 23H4C2.34315 23 1 21.6569 1 20V4ZM4 3H20C20.5523 3 21 3.44772 21 4V20C21 20.5523 20.5523 21 20 21H4C3.44772 21 3 20.5523 3 20V4C3 3.44772 3.44772 3 4 3Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgChevronRight (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M10.5858 6.34317L12 4.92896L19.0711 12L12 19.0711L10.5858 17.6569L16.2427 12L10.5858 6.34317Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgChevronUpO (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M14.8285 14.8284L16.2427 13.4142L12.0001 9.17161L7.75745 13.4142L9.17166 14.8285L12.0001 12L14.8285 14.8284Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M1 12C1 18.0751 5.92487 23 12 23C18.0751 23 23 18.0751 23 12C23 5.92487 18.0751 1 12 1C5.92487 1 1 5.92487 1 12ZM12 3C7.02944 3 3 7.02944 3 12C3 16.9706 7.02944 21 12 21C16.9706 21 21 16.9706 21 12C21 7.02944 16.9706 3 12 3Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgChevronUpR (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M14.8285 14.8284L16.2427 13.4142L12.0001 9.17161L7.75745 13.4142L9.17166 14.8285L12.0001 12L14.8285 14.8284Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M1 19C1 21.2091 2.79086 23 5 23H19C21.2091 23 23 21.2091 23 19V5C23 2.79086 21.2091 1 19 1H5C2.79086 1 1 2.79086 1 5V19ZM5 21H19C20.1046 21 21 20.1046 21 19V5C21 3.89543 20.1046 3 19 3H5C3.89543 3 3 3.89543 3 5V19C3 20.1046 3.89543 21 5 21Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgChevronUp (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M17.6569 16.2427L19.0711 14.8285L12.0001 7.75739L4.92896 14.8285L6.34317 16.2427L12.0001 10.5858L17.6569 16.2427Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgCircleci (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M12 0C5.37258 0 0 5.37258 0 12C0 18.6274 5.37258 24 12 24C18.6274 24 24 18.6274 24 12C24 5.37258 18.6274 0 12 0ZM4.14355 13.5165C4.85219 17.2096 8.10023 20 12 20C16.4183 20 20 16.4183 20 12C20 7.58172 16.4183 4 12 4C8.0886 4 4.83283 6.80704 4.13728 10.5165L6.72824 10.5071C7.37819 8.20738 9.49236 6.52222 12.0001 6.52222C15.0254 6.52222 17.4779 8.9747 17.4779 12C17.4779 15.0253 15.0254 17.4778 12.0001 17.4778C9.49752 17.4778 7.3869 15.7995 6.73228 13.5071L4.14355 13.5165ZM9.52234 12C9.52234 13.3684 10.6317 14.4778 12.0001 14.4778C13.3685 14.4778 14.4779 13.3684 14.4779 12C14.4779 10.6316 13.3685 9.52222 12.0001 9.52222C10.6317 9.52222 9.52234 10.6316 9.52234 12Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgClapperBoard (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M20.1702 3L20.1663 3.00453C21.7458 3.09084 23 4.39896 23 6V18C23 19.6569 21.6569 21 20 21H4C2.34315 21 1 19.6569 1 18V6C1 4.34315 2.34315 3 4 3H20.1702ZM10.4764 5H16.4764L13.089 9H7.08899L10.4764 5ZM5.08899 9L8.47644 5H4C3.44772 5 3 5.44772 3 6V9H5.08899ZM3 11V18C3 18.5523 3.44772 19 4 19H20C20.5523 19 21 18.5523 21 18V11H3ZM21 9V6C21 5.44771 20.5523 5 20 5H18.4764L15.089 9H21Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgClipboard (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M8 11C7.44772 11 7 11.4477 7 12C7 12.5523 7.44772 13 8 13H15.9595C16.5118 13 16.9595 12.5523 16.9595 12C16.9595 11.4477 16.5118 11 15.9595 11H8Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M8.04053 15.0665C7.48824 15.0665 7.04053 15.5142 7.04053 16.0665C7.04053 16.6188 7.48824 17.0665 8.04053 17.0665H16C16.5523 17.0665 17 16.6188 17 16.0665C17 15.5142 16.5523 15.0665 16 15.0665H8.04053Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M5 3C3.89543 3 3 3.89543 3 5V19C3 20.1046 3.89543 21 5 21H19C20.1046 21 21 20.1046 21 19V5C21 3.89543 20.1046 3 19 3H5ZM7 5H5L5 19H19V5H17V6C17 7.65685 15.6569 9 14 9H10C8.34315 9 7 7.65685 7 6V5ZM9 5V6C9 6.55228 9.44772 7 10 7H14C14.5523 7 15 6.55228 15 6V5H9Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgCloseO (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M16.3394 9.32245C16.7434 8.94589 16.7657 8.31312 16.3891 7.90911C16.0126 7.50509 15.3798 7.48283 14.9758 7.85938L12.0497 10.5866L9.32245 7.66048C8.94589 7.25647 8.31312 7.23421 7.90911 7.61076C7.50509 7.98731 7.48283 8.62008 7.85938 9.0241L10.5866 11.9502L7.66048 14.6775C7.25647 15.054 7.23421 15.6868 7.61076 16.0908C7.98731 16.4948 8.62008 16.5171 9.0241 16.1405L11.9502 13.4133L14.6775 16.3394C15.054 16.7434 15.6868 16.7657 16.0908 16.3891C16.4948 16.0126 16.5171 15.3798 16.1405 14.9758L13.4133 12.0497L16.3394 9.32245Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M1 12C1 5.92487 5.92487 1 12 1C18.0751 1 23 5.92487 23 12C23 18.0751 18.0751 23 12 23C5.92487 23 1 18.0751 1 12ZM12 21C7.02944 21 3 16.9706 3 12C3 7.02944 7.02944 3 12 3C16.9706 3 21 7.02944 21 12C21 16.9706 16.9706 21 12 21Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgCloseR (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M16.3956 7.75734C16.7862 8.14786 16.7862 8.78103 16.3956 9.17155L13.4142 12.153L16.0896 14.8284C16.4802 15.2189 16.4802 15.8521 16.0896 16.2426C15.6991 16.6331 15.0659 16.6331 14.6754 16.2426L12 13.5672L9.32458 16.2426C8.93405 16.6331 8.30089 16.6331 7.91036 16.2426C7.51984 15.8521 7.51984 15.2189 7.91036 14.8284L10.5858 12.153L7.60436 9.17155C7.21383 8.78103 7.21383 8.14786 7.60436 7.75734C7.99488 7.36681 8.62805 7.36681 9.01857 7.75734L12 10.7388L14.9814 7.75734C15.372 7.36681 16.0051 7.36681 16.3956 7.75734Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M4 1C2.34315 1 1 2.34315 1 4V20C1 21.6569 2.34315 23 4 23H20C21.6569 23 23 21.6569 23 20V4C23 2.34315 21.6569 1 20 1H4ZM20 3H4C3.44772 3 3 3.44772 3 4V20C3 20.5523 3.44772 21 4 21H20C20.5523 21 21 20.5523 21 20V4C21 3.44772 20.5523 3 20 3Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgClose (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M6.2253 4.81108C5.83477 4.42056 5.20161 4.42056 4.81108 4.81108C4.42056 5.20161 4.42056 5.83477 4.81108 6.2253L10.5858 12L4.81114 17.7747C4.42062 18.1652 4.42062 18.7984 4.81114 19.1889C5.20167 19.5794 5.83483 19.5794 6.22535 19.1889L12 13.4142L17.7747 19.1889C18.1652 19.5794 18.7984 19.5794 19.1889 19.1889C19.5794 18.7984 19.5794 18.1652 19.1889 17.7747L13.4142 12L19.189 6.2253C19.5795 5.83477 19.5795 5.20161 19.189 4.81108C18.7985 4.42056 18.1653 4.42056 17.7748 4.81108L12 10.5858L6.2253 4.81108Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgCloud (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M14.738 19.9964C14.8186 19.9988 14.8994 20 14.9806 20C19.3989 20 22.9806 16.4183 22.9806 12C22.9806 7.58172 19.3989 4 14.9806 4C12.4542 4 10.2013 5.17108 8.73522 7H7.51941C3.92956 7 1.01941 9.91015 1.01941 13.5C1.01941 17.0899 3.92956 20 7.51941 20H14.5194C14.5926 20 14.6654 19.9988 14.738 19.9964ZM16.6913 17.721C19.0415 16.9522 20.9806 14.6815 20.9806 12C20.9806 8.68629 18.2943 6 14.9806 6C11.6669 6 8.98059 8.68629 8.98059 12H6.98059C6.98059 10.9391 7.1871 9.92643 7.56211 9H7.51941C5.03413 9 3.01941 11.0147 3.01941 13.5C3.01941 15.9853 5.03413 18 7.51941 18H14.5194C15.0691 18 15.9041 17.9014 16.6913 17.721Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgCodeClimate (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M9.49506 8.1109L3.1311 14.4749L4.54532 15.8891L9.49506 10.9393L14.4448 15.8891L15.859 14.4749L9.49506 8.1109Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M14.5049 8.11092L12.5317 10.0842L13.9503 11.494L14.5049 10.9393L19.4547 15.8891L20.8689 14.4749L14.5049 8.11092Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgCodeSlash (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M13.325 3.05011L8.66741 20.4323L10.5993 20.9499L15.2568 3.56775L13.325 3.05011Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M7.61197 18.3608L8.97136 16.9124L8.97086 16.8933L3.87657 12.1121L8.66699 7.00798L7.20868 5.63928L1.04956 12.2017L7.61197 18.3608Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M16.388 18.3608L15.0286 16.9124L15.0291 16.8933L20.1234 12.1121L15.333 7.00798L16.7913 5.63928L22.9504 12.2017L16.388 18.3608Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgCode (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M9.95263 16.9123L8.59323 18.3608L2.03082 12.2016L8.18994 5.63922L9.64826 7.00791L4.85783 12.112L9.95212 16.8932L9.95263 16.9123Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M14.0474 16.9123L15.4068 18.3608L21.9692 12.2016L15.8101 5.63922L14.3517 7.00791L19.1422 12.112L14.0479 16.8932L14.0474 16.9123Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgCoffee (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M6 2.5C5.44772 2.5 5 2.94772 5 3.5V5.5C5 6.05228 5.44772 6.5 6 6.5C6.55228 6.5 7 6.05228 7 5.5V3.5C7 2.94772 6.55228 2.5 6 2.5Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M13 21.5C15.973 21.5 18.441 19.3377 18.917 16.5H19C21.2091 16.5 23 14.7091 23 12.5C23 10.2909 21.2091 8.5 19 8.5V7.5H1V15.5C1 18.8137 3.68629 21.5 7 21.5H13ZM3 9.5V15.5C3 17.7091 4.79086 19.5 7 19.5H13C15.2091 19.5 17 17.7091 17 15.5V9.5H3ZM21 12.5C21 13.6046 20.1046 14.5 19 14.5V10.5C20.1046 10.5 21 11.3954 21 12.5Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M9 3.5C9 2.94772 9.44771 2.5 10 2.5C10.5523 2.5 11 2.94772 11 3.5V5.5C11 6.05228 10.5523 6.5 10 6.5C9.44771 6.5 9 6.05228 9 5.5V3.5Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M14 2.5C13.4477 2.5 13 2.94772 13 3.5V5.5C13 6.05228 13.4477 6.5 14 6.5C14.5523 6.5 15 6.05228 15 5.5V3.5C15 2.94772 14.5523 2.5 14 2.5Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgCollage (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M4 5C4 3.34315 5.34315 2 7 2H17C18.6569 2 20 3.34315 20 5V19C20 20.6569 18.6569 22 17 22H7C5.34315 22 4 20.6569 4 19V5ZM13 4H17C17.5523 4 18 4.44772 18 5V13H13V4ZM13 15V20H17C17.5523 20 18 19.5523 18 19V15H13ZM11 4H7C6.44771 4 6 4.44772 6 5V8H11V4ZM6 19V10H11V20H7C6.44772 20 6 19.5523 6 19Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgColorBucket (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M8.20348 2.00378C9.46407 2.00378 10.5067 3.10742 10.6786 4.54241L19.1622 13.0259L11.384 20.8041C10.2124 21.9757 8.31291 21.9757 7.14134 20.8041L2.8987 16.5615C1.72713 15.3899 1.72713 13.4904 2.8987 12.3188L5.70348 9.51404V4.96099C5.70348 3.32777 6.82277 2.00378 8.20348 2.00378ZM8.70348 4.96099V6.51404L7.70348 7.51404V4.96099C7.70348 4.63435 7.92734 4.36955 8.20348 4.36955C8.47963 4.36955 8.70348 4.63435 8.70348 4.96099ZM8.70348 10.8754V9.34247L4.31291 13.733C3.92239 14.1236 3.92239 14.7567 4.31291 15.1473L8.55555 19.3899C8.94608 19.7804 9.57924 19.7804 9.96977 19.3899L16.3337 13.0259L10.7035 7.39569V10.8754C10.7035 10.9184 10.7027 10.9612 10.7012 11.0038H8.69168C8.69941 10.9625 8.70348 10.9195 8.70348 10.8754Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M16.8586 16.8749C15.687 18.0465 15.687 19.946 16.8586 21.1175C18.0302 22.2891 19.9297 22.2891 21.1013 21.1175C22.2728 19.946 22.2728 18.0465 21.1013 16.8749L18.9799 14.7536L16.8586 16.8749Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgColorPicker (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M20.3847 2.87868C19.2132 1.70711 17.3137 1.70711 16.1421 2.87868L14.0202 5.00052L13.313 4.29332C12.9225 3.9028 12.2894 3.9028 11.8988 4.29332C11.5083 4.68385 11.5083 5.31701 11.8988 5.70754L17.5557 11.3644C17.9462 11.7549 18.5794 11.7549 18.9699 11.3644C19.3604 10.9739 19.3604 10.3407 18.9699 9.95018L18.2629 9.24316L20.3847 7.12132C21.5563 5.94975 21.5563 4.05025 20.3847 2.87868Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M11.9297 7.09116L4.1515 14.8693C3.22786 15.793 3.03239 17.169 3.5651 18.2842L1.99994 19.8493L3.41415 21.2635L4.97931 19.6984C6.09444 20.2311 7.4705 20.0356 8.39414 19.112L16.1723 11.3338L11.9297 7.09116ZM13.3439 11.3338L11.9297 9.91959L5.56571 16.2835C5.17518 16.6741 5.17518 17.3072 5.56571 17.6978C5.95623 18.0883 6.5894 18.0883 6.97992 17.6978L13.3439 11.3338Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgComedyCentral (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M10.5445 19C14.4105 19 17.5445 15.866 17.5445 12C17.5445 8.13401 14.4105 5 10.5445 5C8.61148 5 6.86148 5.7835 5.59473 7.05025L3.47343 4.92896L3.45544 4.94694C5.26649 3.12672 7.7739 2 10.5445 2C16.0673 2 20.5445 6.47715 20.5445 12C20.5445 17.5228 16.0673 22 10.5445 22C7.78307 22 5.28308 20.8807 3.47343 19.0711L5.59475 16.9498C6.8615 18.2165 8.61149 19 10.5445 19Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M10.5445 14C11.1376 14 11.6704 13.7418 12.0367 13.3317L14.1594 15.4544C13.249 16.4068 11.966 17 10.5445 17C7.78305 17 5.54447 14.7614 5.54447 12C5.54447 9.23858 7.78305 7 10.5445 7C11.966 7 13.249 7.59323 14.1594 8.54563L12.0367 10.6683C11.6704 10.2582 11.1376 10 10.5445 10C9.4399 10 8.54447 10.8954 8.54447 12C8.54447 13.1046 9.4399 14 10.5445 14Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgComment (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M17 9H7V7H17V9Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M7 13H17V11H7V13Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M2 18V2H22V18H16V22H14C11.7909 22 10 20.2091 10 18H2ZM12 16V18C12 19.1046 12.8954 20 14 20V16H20V4H4V16H12Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgCommunity (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M12 17.456C11.2389 17.8053 10.3922 18 9.5 18C6.18629 18 3.5 15.3137 3.5 12C3.5 8.68629 6.18629 6 9.5 6C10.3922 6 11.2389 6.19474 12 6.54404C12.7611 6.19474 13.6078 6 14.5 6C17.8137 6 20.5 8.68629 20.5 12C20.5 15.3137 17.8137 18 14.5 18C13.6078 18 12.7611 17.8053 12 17.456ZM10.0003 15.969C9.83637 15.9895 9.66942 16 9.5 16C7.29086 16 5.5 14.2091 5.5 12C5.5 9.79086 7.29086 8 9.5 8C9.66942 8 9.83637 8.01053 10.0003 8.03098C9.06656 9.08871 8.5 10.4782 8.5 12C8.5 13.5218 9.06656 14.9113 10.0003 15.969ZM13.9998 8.03098C14.1636 8.01054 14.3306 8 14.5 8C16.7091 8 18.5 9.79086 18.5 12C18.5 14.2091 16.7091 16 14.5 16C14.3306 16 14.1636 15.9895 13.9998 15.969C14.9334 14.9113 15.5 13.5218 15.5 12C15.5 10.4782 14.9334 9.08872 13.9998 8.03098ZM12 8.87732C12.9145 9.61038 13.5 10.7368 13.5 12C13.5 13.2632 12.9145 14.3896 12 15.1227C11.0855 14.3896 10.5 13.2632 10.5 12C10.5 10.7368 11.0855 9.61038 12 8.87732Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgComponents (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M7.7572 6.3431L11.9998 2.10046L16.2425 6.3431L11.9998 10.5857L7.7572 6.3431ZM10.5856 6.3431L11.9998 4.92889L13.4141 6.3431L11.9998 7.75732L10.5856 6.3431Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M2.10046 11.9999L6.3431 7.75726L10.5857 11.9999L6.3431 16.2425L2.10046 11.9999ZM4.92889 11.9999L6.3431 10.5857L7.75732 11.9999L6.3431 13.4141L4.92889 11.9999Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M13.4142 11.9999L17.6568 16.2425L21.8995 11.9999L17.6568 7.75726L13.4142 11.9999ZM17.6568 10.5857L16.2426 11.9999L17.6568 13.4141L19.071 11.9999L17.6568 10.5857Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M7.7572 17.6569L11.9998 13.4142L16.2425 17.6569L11.9998 21.8995L7.7572 17.6569ZM10.5856 17.6569L11.9998 16.2427L13.4141 17.6569L11.9998 19.0711L10.5856 17.6569Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgCompressLeft (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M7.97867 9.45703L4.40883 9.45423L4.40726 11.4542L11.4073 11.4597L11.4127 4.45972L9.41274 4.45815L9.40992 8.05978L3.09616 1.76935L1.68457 3.18618L7.97867 9.45703Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M19.5615 14.5521L19.5535 12.5521L12.5536 12.58L12.5814 19.5799L14.5814 19.572L14.5671 15.9706L20.9105 22.2307L22.3153 20.8071L15.9914 14.5663L19.5615 14.5521Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgCompressRight (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M14.567 8.02947L20.9105 1.76929L22.3153 3.19282L15.9916 9.43352L19.5614 9.44772L19.5534 11.4477L12.5535 11.4199L12.5813 4.41992L14.5813 4.42788L14.567 8.02947Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M7.97879 14.5429L4.40886 14.5457L4.40729 12.5457L11.4073 12.5402L11.4128 19.5402L9.41277 19.5417L9.40995 15.9402L3.09623 22.2306L1.68463 20.8138L7.97879 14.5429Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgCompressV (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M13.0338 7.3559L15.4999 4.85376L16.9244 6.25768L12.0107 11.2432L7.02515 6.32948L8.42907 4.90505L11.0329 7.47139L11.0834 0.843506L13.0833 0.858735L13.0338 7.3559Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M15.5627 18.532L16.9749 17.1159L12.0184 12.1729L7.07543 17.1295L8.49159 18.5418L11.0762 15.95L11.1019 23.1566L13.1019 23.1495L13.0765 16.0528L15.5627 18.532Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgCompress (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M19.0954 8.42986L17.6711 7.02576L12.7568 12.0107L17.7417 16.925L19.1458 15.5007L16.644 13.0344L23.1411 13.0847L23.1565 11.0848L16.5286 11.0334L19.0954 8.42986Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M5.46742 15.5618L6.88341 16.9742L11.827 12.0183L6.87102 7.07476L5.45857 8.49074L8.04995 11.0756L0.843506 11.1004L0.850384 13.1004L7.94701 13.076L5.46742 15.5618Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgController (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M14.8284 6.34313L16.2426 4.92892L12 0.686279L7.75735 4.92892L9.17156 6.34313L12 3.51471L14.8284 6.34313Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M4.92892 16.2426L6.34313 14.8284L3.51471 12L6.34313 9.17156L4.92892 7.75735L0.686279 12L4.92892 16.2426Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M7.75735 19.0711L12 23.3137L16.2426 19.0711L14.8284 17.6568L12 20.4853L9.17156 17.6568L7.75735 19.0711Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M17.6568 9.17156L20.4853 12L17.6568 14.8284L19.0711 16.2426L23.3137 12L19.0711 7.75735L17.6568 9.17156Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M12 8C14.2091 8 16 9.79086 16 12C16 14.2091 14.2091 16 12 16C9.79086 16 8 14.2091 8 12C8 9.79086 9.79086 8 12 8ZM12 10C13.1046 10 14 10.8954 14 12C14 13.1046 13.1046 14 12 14C10.8954 14 10 13.1046 10 12C10 10.8954 10.8954 10 12 10Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgCopy (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M13 7H7V5H13V7Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M13 11H7V9H13V11Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M7 15H13V13H7V15Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M3 19V1H17V5H21V23H7V19H3ZM15 17V3H5V17H15ZM17 7V19H9V21H19V7H17Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgCopyright (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M13.392 10.4362L14.8106 9.0176C14.1031 8.38476 13.169 8 12.145 8C9.93588 8 8.14502 9.79086 8.14502 12C8.14502 14.2091 9.93588 16 12.145 16C13.2563 16 14.2617 15.5468 14.9866 14.8152L13.674 13.5026L13.4646 13.503C13.1124 13.8124 12.6506 14 12.145 14C11.0405 14 10.145 13.1046 10.145 12C10.145 10.8954 11.0405 10 12.145 10C12.6166 10 13.0501 10.1632 13.392 10.4362Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M12 3C16.9706 3 21 7.02944 21 12C21 16.9706 16.9706 21 12 21C7.02944 21 3 16.9706 3 12C3 7.02944 7.02944 3 12 3ZM12 5C15.866 5 19 8.13401 19 12C19 15.866 15.866 19 12 19C8.13401 19 5 15.866 5 12C5 8.13401 8.13401 5 12 5Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgCornerDoubleDownLeft (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M11.2952 7.69432L16.1357 2.6377L21.1924 7.47821L19.8094 8.92296L17.3474 6.56617L17.5094 12.6C17.5805 15.25 15.49 17.456 12.8399 17.5271L6.91369 17.6863L9.20765 19.9335L7.80805 21.3622L2.80768 16.4636L7.70628 11.4632L9.13495 12.8628L6.75759 15.2896L12.7755 15.128C14.1005 15.0924 15.1458 13.9895 15.1102 12.6645L14.9519 6.76668L12.74 9.07732L11.2952 7.69432Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgCornerDoubleDownRight (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12.6004 7.67915L7.63814 2.74194L2.70093 7.7042L4.11871 9.11483L6.52249 6.69886L6.5075 12.7348C6.50092 15.3857 8.64461 17.5401 11.2956 17.5467L17.224 17.5614L14.9855 19.8638L16.4195 21.258L21.299 16.239L16.2801 11.3595L14.8859 12.7934L17.3217 15.1616L11.3015 15.1467C9.97605 15.1434 8.9042 14.0662 8.9075 12.7407L8.92214 6.84077L11.1898 9.09694L12.6004 7.67915Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgCornerDoubleLeftDown (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M21.299 7.7609L16.2801 12.6405L14.8859 11.2065L17.3217 8.83829L11.3015 8.85324C9.97605 8.85653 8.9042 9.93371 8.9075 11.2592L8.92214 17.1591L11.1898 14.903L12.6004 16.3208L7.63814 21.258L2.70093 16.2957L4.11871 14.8851L6.52249 17.3011L6.5075 11.2652C6.50092 8.61419 8.64461 6.45983 11.2956 6.45325L17.224 6.43853L14.9855 4.1361L16.4195 2.74194L21.299 7.7609Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgCornerDoubleLeftUp (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M7.78372 9.25045L6.36951 7.83624L10.6121 3.59363L14.8548 7.83627L13.4406 9.25048L10.6121 6.42205L7.78372 9.25045Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M13.4406 13.4932L14.8548 12.0789L10.6121 7.83628L6.36951 12.0789L7.78372 13.4931L9.63052 11.6463V16.4063C9.63052 18.6155 11.4214 20.4063 13.6305 20.4063H17.6305V18.4063H13.6305C12.526 18.4063 11.6305 17.5109 11.6305 16.4063V11.6831L13.4406 13.4932Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgCornerDoubleRightDown (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M7.69438 12.7048L2.63776 7.86424L7.47827 2.80762L8.92302 4.19062L6.56623 6.65263L12.6002 6.49061C15.2502 6.41945 17.4561 8.51002 17.5273 11.16L17.6864 17.0862L19.9335 14.7924L21.3622 16.192L16.4636 21.1924L11.4632 16.2938L12.8628 14.8651L15.2897 17.2426L15.1281 11.2245C15.0926 9.89945 13.9896 8.85417 12.6646 8.88974L6.76674 9.04811L9.07738 11.26L7.69438 12.7048Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgCornerDoubleRightUp (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M16.2163 9.25045L17.6305 7.83624L13.3879 3.59363L9.14526 7.83627L10.5595 9.25048L13.3879 6.42205L16.2163 9.25045Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M10.5595 13.4932L9.14526 12.0789L13.3879 7.83628L17.6305 12.0789L16.2163 13.4931L14.3695 11.6463V16.4063C14.3695 18.6155 12.5786 20.4063 10.3695 20.4063H6.36951V18.4063H10.3695C11.4741 18.4063 12.3695 17.5109 12.3695 16.4063V11.6831L10.5595 13.4932Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgCornerDoubleUpLeft (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M9.25045 7.78369L7.83624 6.36948L3.59363 10.6121L7.83627 14.8547L9.25048 13.4405L6.42205 10.6121L9.25045 7.78369Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M13.4932 13.4405L12.0789 14.8547L7.83627 10.6121L12.0789 6.36948L13.4931 7.78369L11.6463 9.63049L16.4063 9.63049C18.6155 9.63049 20.4063 11.4214 20.4063 13.6305L20.4063 17.6305L18.4063 17.6305L18.4063 13.6305C18.4063 12.5259 17.5109 11.6305 16.4063 11.6305L11.6831 11.6305L13.4932 13.4405Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgCornerDoubleUpRight (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M14.7495 7.78369L16.1638 6.36948L20.4064 10.6121L16.1637 14.8547L14.7495 13.4405L17.5779 10.6121L14.7495 7.78369Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M10.5068 13.4405L11.9211 14.8547L16.1637 10.6121L11.9211 6.36948L10.5069 7.78369L12.3537 9.63049L7.59366 9.63049C5.38452 9.63049 3.59366 11.4214 3.59366 13.6305L3.59366 17.6305L5.59366 17.6305L5.59366 13.6305C5.59366 12.5259 6.48909 11.6305 7.59366 11.6305L12.3169 11.6305L10.5068 13.4405Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgCornerDownLeft (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M17.1495 13.4005C18.2541 13.4005 19.1495 12.5051 19.1495 11.4005V3.40051H21.1495V11.4005C21.1495 13.6097 19.3587 15.4005 17.1495 15.4005H6.84398L10.6286 19.1852L9.21443 20.5994L2.85046 14.2354L9.21443 7.87146L10.6286 9.28567L6.5138 13.4005H17.1495Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgCornerDownRight (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M6.85046 13.4005C5.74589 13.4005 4.85046 12.5051 4.85046 11.4005V3.40051H2.85046V11.4005C2.85046 13.6097 4.64132 15.4005 6.85046 15.4005H17.156L13.3714 19.1852L14.7856 20.5994L21.1495 14.2354L14.7856 7.87146L13.3714 9.28567L17.4862 13.4005H6.85046Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgCornerLeftDown (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M10.6013 6.84996C10.6023 5.74539 11.4986 4.85079 12.6032 4.85181L20.6032 4.8592L20.605 2.8592L12.605 2.85181C10.3959 2.84977 8.60335 4.63897 8.60131 6.84811L8.59179 17.1538L4.81054 13.3656L3.39502 14.7785L9.7531 21.1483L16.1229 14.7902L14.71 13.3747L10.5915 17.4856L10.6013 6.84996Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgCornerLeftUp (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M14.71 10.6254L16.1229 9.20989L9.7531 2.85181L3.39502 9.22164L4.81054 10.6346L8.59179 6.84631L8.60131 17.152C8.60335 19.3611 10.3959 21.1503 12.605 21.1483L20.605 21.1409L20.6032 19.1409L12.6032 19.1483C11.4986 19.1493 10.6023 18.2547 10.6013 17.1501L10.5915 6.51446L14.71 10.6254Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgCornerRightDown (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M13.3987 6.84996C13.3977 5.74539 12.5014 4.85079 11.3969 4.85181L3.39687 4.8592L3.39502 2.8592L11.395 2.85181C13.6042 2.84977 15.3967 4.63897 15.3987 6.84811L15.4082 17.1538L19.1895 13.3656L20.605 14.7785L14.2469 21.1483L7.87709 14.7902L9.28999 13.3747L13.4085 17.4856L13.3987 6.84996Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgCornerRightUp (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M9.28999 10.6254L7.87709 9.20989L14.2469 2.85181L20.605 9.22164L19.1895 10.6346L15.4082 6.84631L15.3987 17.152C15.3967 19.3611 13.6042 21.1503 11.395 21.1483L3.39502 21.1409L3.39687 19.1409L11.3969 19.1483C12.5014 19.1493 13.3977 18.2547 13.3987 17.1501L13.4085 6.51446L9.28999 10.6254Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgCornerUpLeft (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M10.6276 14.7219L9.21641 16.1391L2.83875 9.78892L9.18897 3.41125L10.6062 4.82242L6.82971 8.61526L17.1353 8.59304C19.3445 8.58828 21.1392 10.3753 21.144 12.5844L21.1612 20.5844L19.1612 20.5887L19.144 12.5887C19.1416 11.4841 18.2442 10.5907 17.1396 10.593L6.50391 10.616L10.6276 14.7219Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgCornerUpRight (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M13.3724 14.7219L14.7835 16.1391L21.1612 9.78892L14.811 3.41125L13.3937 4.82242L17.1702 8.61526L6.86461 8.59304C4.65547 8.58828 2.86076 10.3753 2.85599 12.5844L2.83875 20.5844L4.83874 20.5887L4.85599 12.5887C4.85837 11.4841 5.75573 10.5907 6.8603 10.593L17.496 10.616L13.3724 14.7219Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgCreditCard (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M4 9C4 8.44772 4.44772 8 5 8H9C9.55228 8 10 8.44772 10 9C10 9.55228 9.55228 10 9 10H5C4.44772 10 4 9.55228 4 9Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M4 3C1.79086 3 0 4.79086 0 7V17C0 19.2091 1.79086 21 4 21H20C22.2091 21 24 19.2091 24 17V7C24 4.79086 22.2091 3 20 3H4ZM20 5H4C2.89543 5 2 5.89543 2 7V14H22V7C22 5.89543 21.1046 5 20 5ZM22 16H2V17C2 18.1046 2.89543 19 4 19H20C21.1046 19 22 18.1046 22 17V16Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgCrop (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M7.93164 9.00891V16H15V20.0089H17V16H20.9316V14H17V7.00891H9.93164V3H7.93164V7.00891H4V9.00891H7.93164ZM9.93164 9.00891V14H15V9.00891H9.93164Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgCross (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M13 6C13 5.44772 12.5523 5 12 5C11.4477 5 11 5.44772 11 6V9H7C6.44772 9 6 9.44772 6 10C6 10.5523 6.44772 11 7 11H11V18C11 18.5523 11.4477 19 12 19C12.5523 19 13 18.5523 13 18V11H17C17.5523 11 18 10.5523 18 10C18 9.44772 17.5523 9 17 9H13V6Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgCrowdfire (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M2 12C2 6.47715 6.47715 2 12 2V4H20V12H22C22 17.5228 17.5228 22 12 22C6.47715 22 2 17.5228 2 12ZM18 12H16V8H12V6C8.68629 6 6 8.68629 6 12C6 15.3137 8.68629 18 12 18C15.3137 18 18 15.3137 18 12Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgCrown (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M2.5 6.09143L7.21997 10.8114L12.0005 6.03088L16.7811 10.8114L21.5 6.09245V14.9691C21.5 16.626 20.1569 17.9691 18.5 17.9691H5.5C3.84314 17.9691 2.5 16.626 2.5 14.9691V6.09143ZM19.5 10.9087V14.9691C19.5 15.5214 19.0523 15.9691 18.5 15.9691H5.5C4.94771 15.9691 4.5 15.5214 4.5 14.9691V10.9077L7.21997 13.6277L12.0005 8.84717L16.7811 13.6277L19.5 10.9087Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgDanger (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 6C12.5523 6 13 6.44772 13 7V13C13 13.5523 12.5523 14 12 14C11.4477 14 11 13.5523 11 13V7C11 6.44772 11.4477 6 12 6Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M12 16C11.4477 16 11 16.4477 11 17C11 17.5523 11.4477 18 12 18C12.5523 18 13 17.5523 13 17C13 16.4477 12.5523 16 12 16Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M12 2C6.47715 2 2 6.47715 2 12C2 17.5228 6.47715 22 12 22C17.5228 22 22 17.5228 22 12C22 6.47715 17.5228 2 12 2ZM4 12C4 16.4183 7.58172 20 12 20C16.4183 20 20 16.4183 20 12C20 7.58172 16.4183 4 12 4C7.58172 4 4 7.58172 4 12Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgDarkMode (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 16C14.2091 16 16 14.2091 16 12C16 9.79086 14.2091 8 12 8V16Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M12 2C6.47715 2 2 6.47715 2 12C2 17.5228 6.47715 22 12 22C17.5228 22 22 17.5228 22 12C22 6.47715 17.5228 2 12 2ZM12 4V8C9.79086 8 8 9.79086 8 12C8 14.2091 9.79086 16 12 16V20C16.4183 20 20 16.4183 20 12C20 7.58172 16.4183 4 12 4Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgData (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M12 8.88916C13.6569 8.88916 15 10.2323 15 11.8892C15 13.1954 14.1652 14.3066 13 14.7185V19.8892H11V14.7185C9.83481 14.3066 9 13.1954 9 11.8892C9 10.2323 10.3431 8.88916 12 8.88916ZM12 10.8892C12.5523 10.8892 13 11.3369 13 11.8892C13 12.4414 12.5523 12.8892 12 12.8892C11.4477 12.8892 11 12.4414 11 11.8892C11 11.3369 11.4477 10.8892 12 10.8892Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M7.05019 6.93938C5.78348 8.20612 5 9.9561 5 11.8891C5 14.0666 5.99426 16.0119 7.55355 17.2957L8.97712 15.8721C7.7757 14.9589 7 13.5146 7 11.8891C7 10.5084 7.55962 9.25841 8.46441 8.35359L7.05019 6.93938Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M15.5355 8.35348C16.4403 9.25831 17 10.5083 17 11.8891C17 13.5146 16.2243 14.959 15.0228 15.8722L16.4463 17.2958C18.0057 16.012 19 14.0666 19 11.8891C19 9.95604 18.2165 8.20602 16.9497 6.93927L15.5355 8.35348Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M1 11.8891C1 8.85152 2.23119 6.10155 4.22176 4.11095L5.63598 5.52516C4.00733 7.15383 3 9.40381 3 11.8891C3 14.3743 4.00733 16.6243 5.63597 18.2529L4.22175 19.6672C2.23119 17.6766 1 14.9266 1 11.8891Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M19.7781 19.6673C21.7688 17.6767 23 14.9266 23 11.8891C23 8.85147 21.7688 6.10145 19.7781 4.11084L18.3639 5.52505C19.9926 7.15374 21 9.40376 21 11.8891C21 14.3744 19.9926 16.6244 18.3639 18.2531L19.7781 19.6673Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgDatabase (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M5 9V7H7V9H5Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M9 9H19V7H9V9Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M5 15V17H7V15H5Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M19 17H9V15H19V17Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M1 6C1 4.34315 2.34315 3 4 3H20C21.6569 3 23 4.34315 23 6V18C23 19.6569 21.6569 21 20 21H4C2.34315 21 1 19.6569 1 18V6ZM4 5H20C20.5523 5 21 5.44772 21 6V11H3V6C3 5.44772 3.44772 5 4 5ZM3 13V18C3 18.5523 3.44772 19 4 19H20C20.5523 19 21 18.5523 21 18V13H3Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgDebug (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M10 11C10 10.4477 10.4477 10 11 10H13C13.5523 10 14 10.4477 14 11C14 11.5523 13.5523 12 13 12H11C10.4477 12 10 11.5523 10 11Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M11 14C10.4477 14 10 14.4477 10 15C10 15.5523 10.4477 16 11 16H13C13.5523 16 14 15.5523 14 15C14 14.4477 13.5523 14 13 14H11Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M9.09447 4.74918C8.41606 4.03243 8 3.0648 8 2H10C10 3.10457 10.8954 4 12 4C13.1046 4 14 3.10457 14 2H16C16 3.0648 15.5839 4.03243 14.9055 4.74918C16.1782 5.45491 17.1673 6.6099 17.6586 8H19C19.5523 8 20 8.44772 20 9C20 9.55229 19.5523 10 19 10H18V12H19C19.5523 12 20 12.4477 20 13C20 13.5523 19.5523 14 19 14H18V16H19C19.5523 16 20 16.4477 20 17C20 17.5523 19.5523 18 19 18H17.6586C16.8349 20.3304 14.6124 22 12 22C9.38756 22 7.16508 20.3304 6.34141 18H5C4.44772 18 4 17.5523 4 17C4 16.4477 4.44772 16 5 16H6V14H5C4.44772 14 4 13.5523 4 13C4 12.4477 4.44772 12 5 12H6V10H5C4.44772 10 4 9.55229 4 9C4 8.44772 4.44772 8 5 8H6.34141C6.83274 6.6099 7.82181 5.45491 9.09447 4.74918ZM8 16V10C8 7.79086 9.79086 6 12 6C14.2091 6 16 7.79086 16 10V16C16 18.2091 14.2091 20 12 20C9.79086 20 8 18.2091 8 16Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgDesignmodo (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M7 4.05444C4.23858 4.05444 2 6.29302 2 9.05444C2 11.8159 4.23858 14.0544 7 14.0544C9.76142 14.0544 12 11.8159 12 9.05444C12 6.29302 9.76142 4.05444 7 4.05444ZM5 9.05444C5 10.159 5.89543 11.0544 7 11.0544C8.10457 11.0544 9 10.159 9 9.05444C9 7.94987 8.10457 7.05444 7 7.05444C5.89543 7.05444 5 7.94987 5 9.05444Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M22 10.5544H17V7.55444H22V10.5544Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M11.5503 16.9457C12.6786 16.9457 13.6977 16.4786 14.4249 15.7272C14.4097 15.7429 14.3943 15.7585 14.3788 15.774L16.5001 17.8954C15.2334 19.1621 13.4834 19.9457 11.5503 19.9457C9.61734 19.9457 7.86734 19.1622 6.60059 17.8954L8.72191 15.7741C9.44576 16.498 10.4458 16.9457 11.5503 16.9457Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgDesktop (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M8 15C7.44772 15 7 15.4477 7 16C7 16.5523 7.44772 17 8 17C8.55228 17 9 16.5523 9 16C9 15.4477 8.55228 15 8 15Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M11 16C11 15.4477 11.4477 15 12 15C12.5523 15 13 15.4477 13 16C13 16.5523 12.5523 17 12 17C11.4477 17 11 16.5523 11 16Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M16 15C15.4477 15 15 15.4477 15 16C15 16.5523 15.4477 17 16 17C16.5523 17 17 16.5523 17 16C17 15.4477 16.5523 15 16 15Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M4 3C2.34315 3 1 4.34315 1 6V18C1 19.6569 2.34315 21 4 21H20C21.6569 21 23 19.6569 23 18V6C23 4.34315 21.6569 3 20 3H4ZM20 5H4C3.44772 5 3 5.44772 3 6V7H21V6C21 5.44772 20.5523 5 20 5ZM3 18V9H21V18C21 18.5523 20.5523 19 20 19H4C3.44772 19 3 18.5523 3 18Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgDetailsLess (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M3 9C2.44772 9 2 9.44772 2 10C2 10.5523 2.44772 11 3 11H21C21.5523 11 22 10.5523 22 10C22 9.44772 21.5523 9 21 9H3Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M3 13C2.44772 13 2 13.4477 2 14C2 14.5523 2.44772 15 3 15H15C15.5523 15 16 14.5523 16 14C16 13.4477 15.5523 13 15 13H3Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgDetailsMore (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M2 8C2 7.44772 2.44772 7 3 7H21C21.5523 7 22 7.44772 22 8C22 8.55228 21.5523 9 21 9H3C2.44772 9 2 8.55228 2 8Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M2 12C2 11.4477 2.44772 11 3 11H21C21.5523 11 22 11.4477 22 12C22 12.5523 21.5523 13 21 13H3C2.44772 13 2 12.5523 2 12Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M3 15C2.44772 15 2 15.4477 2 16C2 16.5523 2.44772 17 3 17H15C15.5523 17 16 16.5523 16 16C16 15.4477 15.5523 15 15 15H3Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgDialpad (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M5.5 3H8.5V6H5.5V3Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M5.5 8H8.5V11H5.5V8Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M5.5 13V16H8.5V13H5.5Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M10.5 3H13.5V6H10.5V3Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M10.5 8V11H13.5V8H10.5Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M10.5 13H13.5V16H10.5V13Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M10.5 18V21H13.5V18H10.5Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M15.5 3H18.5V6H15.5V3Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M15.5 8V11H18.5V8H15.5Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M15.5 13H18.5V16H15.5V13Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgDice1 (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M10 12C10 10.8954 10.8954 10 12 10C13.1046 10 14 10.8954 14 12C14 13.1046 13.1046 14 12 14C10.8954 14 10 13.1046 10 12Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M1 4C1 2.34315 2.34315 1 4 1H20C21.6569 1 23 2.34315 23 4V20C23 21.6569 21.6569 23 20 23H4C2.34315 23 1 21.6569 1 20V4ZM4 3H20C20.5523 3 21 3.44772 21 4V20C21 20.5523 20.5523 21 20 21H4C3.44772 21 3 20.5523 3 20V4C3 3.44772 3.44772 3 4 3Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgDice2 (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M17.2 14.9431C16.0954 14.9431 15.2 15.8385 15.2 16.9431C15.2 18.0477 16.0954 18.9431 17.2 18.9431C18.3045 18.9431 19.2 18.0477 19.2 16.9431C19.2 15.8385 18.3045 14.9431 17.2 14.9431Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M5.05518 7.05518C5.05518 5.95061 5.95061 5.05518 7.05518 5.05518C8.15975 5.05518 9.05518 5.95061 9.05518 7.05518C9.05518 8.15975 8.15975 9.05518 7.05518 9.05518C5.95061 9.05518 5.05518 8.15975 5.05518 7.05518Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M4 1C2.34315 1 1 2.34315 1 4V20C1 21.6569 2.34315 23 4 23H20C21.6569 23 23 21.6569 23 20V4C23 2.34315 21.6569 1 20 1H4ZM20 3H4C3.44772 3 3 3.44772 3 4V20C3 20.5523 3.44772 21 4 21H20C20.5523 21 21 20.5523 21 20V4C21 3.44772 20.5523 3 20 3Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgDice3 (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M10 12C10 10.8954 10.8954 10 12 10C13.1046 10 14 10.8954 14 12C14 13.1046 13.1046 14 12 14C10.8954 14 10 13.1046 10 12Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M16.9451 14.8921C15.8405 14.8921 14.9451 15.7875 14.9451 16.8921C14.9451 17.9967 15.8405 18.8921 16.9451 18.8921C18.0496 18.8921 18.9451 17.9967 18.9451 16.8921C18.9451 15.7875 18.0496 14.8921 16.9451 14.8921Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M5.05518 7.05518C5.05518 5.95061 5.95061 5.05518 7.05518 5.05518C8.15975 5.05518 9.05518 5.95061 9.05518 7.05518C9.05518 8.15975 8.15975 9.05518 7.05518 9.05518C5.95061 9.05518 5.05518 8.15975 5.05518 7.05518Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M1 4C1 2.34315 2.34315 1 4 1H20C21.6569 1 23 2.34315 23 4V20C23 21.6569 21.6569 23 20 23H4C2.34315 23 1 21.6569 1 20V4ZM4 3H20C20.5523 3 21 3.44772 21 4V20C21 20.5523 20.5523 21 20 21H4C3.44772 21 3 20.5523 3 20V4C3 3.44772 3.44772 3 4 3Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgDice4 (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M16.9451 5.05518C15.8405 5.05518 14.9451 5.95061 14.9451 7.05518C14.9451 8.15975 15.8405 9.05518 16.9451 9.05518C18.0496 9.05518 18.9451 8.15975 18.9451 7.05518C18.9451 5.95061 18.0496 5.05518 16.9451 5.05518Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M14.9451 16.8921C14.9451 15.7875 15.8405 14.8921 16.9451 14.8921C18.0496 14.8921 18.9451 15.7875 18.9451 16.8921C18.9451 17.9967 18.0496 18.8921 16.9451 18.8921C15.8405 18.8921 14.9451 17.9967 14.9451 16.8921Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M7.05518 14.8921C5.95061 14.8921 5.05518 15.7875 5.05518 16.8921C5.05518 17.9967 5.95061 18.8921 7.05518 18.8921C8.15975 18.8921 9.05518 17.9967 9.05518 16.8921C9.05518 15.7875 8.15975 14.8921 7.05518 14.8921Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M5.05518 7.05518C5.05518 5.95061 5.95061 5.05518 7.05518 5.05518C8.15975 5.05518 9.05518 5.95061 9.05518 7.05518C9.05518 8.15975 8.15975 9.05518 7.05518 9.05518C5.95061 9.05518 5.05518 8.15975 5.05518 7.05518Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M4 1C2.34315 1 1 2.34315 1 4V20C1 21.6569 2.34315 23 4 23H20C21.6569 23 23 21.6569 23 20V4C23 2.34315 21.6569 1 20 1H4ZM20 3H4C3.44772 3 3 3.44772 3 4V20C3 20.5523 3.44772 21 4 21H20C20.5523 21 21 20.5523 21 20V4C21 3.44772 20.5523 3 20 3Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgDice5 (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M14.9451 7.05518C14.9451 5.95061 15.8405 5.05518 16.9451 5.05518C18.0496 5.05518 18.9451 5.95061 18.9451 7.05518C18.9451 8.15975 18.0496 9.05518 16.9451 9.05518C15.8405 9.05518 14.9451 8.15975 14.9451 7.05518Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M16.9451 14.8921C15.8405 14.8921 14.9451 15.7875 14.9451 16.8921C14.9451 17.9967 15.8405 18.8921 16.9451 18.8921C18.0496 18.8921 18.9451 17.9967 18.9451 16.8921C18.9451 15.7875 18.0496 14.8921 16.9451 14.8921Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M5.05518 16.8921C5.05518 15.7875 5.95061 14.8921 7.05518 14.8921C8.15975 14.8921 9.05518 15.7875 9.05518 16.8921C9.05518 17.9967 8.15975 18.8921 7.05518 18.8921C5.95061 18.8921 5.05518 17.9967 5.05518 16.8921Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M7.05518 5.05518C5.95061 5.05518 5.05518 5.95061 5.05518 7.05518C5.05518 8.15975 5.95061 9.05518 7.05518 9.05518C8.15975 9.05518 9.05518 8.15975 9.05518 7.05518C9.05518 5.95061 8.15975 5.05518 7.05518 5.05518Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M10 12C10 10.8954 10.8954 10 12 10C13.1046 10 14 10.8954 14 12C14 13.1046 13.1046 14 12 14C10.8954 14 10 13.1046 10 12Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M1 4C1 2.34315 2.34315 1 4 1H20C21.6569 1 23 2.34315 23 4V20C23 21.6569 21.6569 23 20 23H4C2.34315 23 1 21.6569 1 20V4ZM4 3H20C20.5523 3 21 3.44772 21 4V20C21 20.5523 20.5523 21 20 21H4C3.44772 21 3 20.5523 3 20V4C3 3.44772 3.44772 3 4 3Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgDice6 (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M16.9451 5.05518C15.8405 5.05518 14.9451 5.95061 14.9451 7.05518C14.9451 8.15975 15.8405 9.05518 16.9451 9.05518C18.0496 9.05518 18.9451 8.15975 18.9451 7.05518C18.9451 5.95061 18.0496 5.05518 16.9451 5.05518Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M14.9451 16.8921C14.9451 15.7875 15.8405 14.8921 16.9451 14.8921C18.0496 14.8921 18.9451 15.7875 18.9451 16.8921C18.9451 17.9967 18.0496 18.8921 16.9451 18.8921C15.8405 18.8921 14.9451 17.9967 14.9451 16.8921Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M7.05518 14.8921C5.95061 14.8921 5.05518 15.7875 5.05518 16.8921C5.05518 17.9967 5.95061 18.8921 7.05518 18.8921C8.15975 18.8921 9.05518 17.9967 9.05518 16.8921C9.05518 15.7875 8.15975 14.8921 7.05518 14.8921Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M5.05518 7.05518C5.05518 5.95061 5.95061 5.05518 7.05518 5.05518C8.15975 5.05518 9.05518 5.95061 9.05518 7.05518C9.05518 8.15975 8.15975 9.05518 7.05518 9.05518C5.95061 9.05518 5.05518 8.15975 5.05518 7.05518Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M16.9451 9.97363C15.8405 9.97363 14.9451 10.8691 14.9451 11.9736C14.9451 13.0782 15.8405 13.9736 16.9451 13.9736C18.0496 13.9736 18.9451 13.0782 18.9451 11.9736C18.9451 10.8691 18.0496 9.97363 16.9451 9.97363Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M5.05518 11.9736C5.05518 10.8691 5.95061 9.97363 7.05518 9.97363C8.15975 9.97363 9.05518 10.8691 9.05518 11.9736C9.05518 13.0782 8.15975 13.9736 7.05518 13.9736C5.95061 13.9736 5.05518 13.0782 5.05518 11.9736Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M4 1C2.34315 1 1 2.34315 1 4V20C1 21.6569 2.34315 23 4 23H20C21.6569 23 23 21.6569 23 20V4C23 2.34315 21.6569 1 20 1H4ZM20 3H4C3.44772 3 3 3.44772 3 4V20C3 20.5523 3.44772 21 4 21H20C20.5523 21 21 20.5523 21 20V4C21 3.44772 20.5523 3 20 3Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgDigitalocean (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 6C8.68629 6 6 8.68629 6 12H1C1 5.92487 5.92487 1 12 1C18.0751 1 23 5.92487 23 12C23 18.0751 18.0751 23 12 23V18C15.3137 18 18 15.3137 18 12C18 8.68629 15.3137 6 12 6Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M7 18V13H12V18H7Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M3 18V22H7V18H3Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M3 18H1V16H3V18Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgDisc (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M12 9C10.3431 9 9 10.3431 9 12C9 13.6569 10.3431 15 12 15C13.6569 15 15 13.6569 15 12C15 10.3431 13.6569 9 12 9ZM11 12C11 12.5523 11.4477 13 12 13C12.5523 13 13 12.5523 13 12C13 11.4477 12.5523 11 12 11C11.4477 11 11 11.4477 11 12Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M5 12C5 8.13401 8.13401 5 12 5V7C9.23858 7 7 9.23858 7 12H5Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M12 17C14.7614 17 17 14.7614 17 12H19C19 15.866 15.866 19 12 19V17Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M12 1C5.92487 1 1 5.92487 1 12C1 18.0751 5.92487 23 12 23C18.0751 23 23 18.0751 23 12C23 5.92487 18.0751 1 12 1ZM3 12C3 16.9706 7.02944 21 12 21C16.9706 21 21 16.9706 21 12C21 7.02944 16.9706 3 12 3C7.02944 3 3 7.02944 3 12Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgDisplayFlex (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M6 17V7H8V17H6Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M16 7V17H18V7H16Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M2 3H22V21H2V3ZM4 5V19H20V5H4Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgDisplayFullwidth (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M2 5H22V3H2V5Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M2 21H22V19H2V21Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M2 7V17H22V7H2ZM4 9H20V15H4V9Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgDisplayGrid (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M7 7V11H11V7H7Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M13 7H17V11H13V7Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M13 13V17H17V13H13Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M7 13H11V17H7V13Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M3 3H21V21H3V3ZM5 5V19H19V5H5Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgDisplaySpacing (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M3 21V3H5V21H3Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M7 3H17V21H7V3ZM9 5V19H15V5H9Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M19 3V21H21V3H19Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgDistributeHorizontal (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M11 9H13V15H11V9Z\",\"stroke\":\"currentColor\",\"strokeOpacity\":\"0.5\",\"strokeWidth\":\"2\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M5 5V19H7V5H5Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M17 5V19H19V5H17Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgDistributeVertical (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M9 11H15V13H9V11Z\",\"stroke\":\"currentColor\",\"strokeOpacity\":\"0.5\",\"strokeWidth\":\"2\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M19 7H5V5H19V7Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M19 19H5V17H19V19Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgDockBottom (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M2 20V4H22V20H2ZM4 6H20V14H4V6Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgDockLeft (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M2 4H22V20H2V4ZM8 6H20V18H8V6Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgDockRight (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M2 4H22V20H2V4ZM16 18V6H4V18H16Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgDockWindow (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M2 20V4H22V20H2ZM20 6H6V16L20 16V6Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgDolby (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M0 4V20H24V4H0ZM10 12C10 9.79086 8.20914 8 6 8H4V16H6C8.20914 16 10 14.2091 10 12ZM18 16H20V8H18C15.7909 8 14 9.79086 14 12C14 14.2091 15.7909 16 18 16Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgDollar (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M11 19V22H13V19H14C16.2091 19 18 17.2091 18 15C18 12.7909 16.2091 11 14 11H13V7H15V9H17V5H13V2H11V5H10C7.79086 5 6 6.79086 6 9C6 11.2091 7.79086 13 10 13H11V17H9V15H7V19H11ZM13 17H14C15.1046 17 16 16.1046 16 15C16 13.8954 15.1046 13 14 13H13V17ZM11 11V7H10C8.89543 7 8 7.89543 8 9C8 10.1046 8.89543 11 10 11H11Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgDribbble (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M1 11.9554V12.0446C1.01066 14.7301 1.98363 17.1885 3.59196 19.0931C4.05715 19.6439 4.57549 20.1485 5.13908 20.5987C5.70631 21.0519 6.31937 21.4501 6.97019 21.7853C7.90271 22.2656 8.91275 22.6165 9.97659 22.8143C10.5914 22.9286 11.2243 22.9918 11.8705 22.9993C11.9136 22.9998 11.9567 23 11.9999 23C15.6894 23 18.9547 21.1836 20.9502 18.3962C21.3681 17.8125 21.7303 17.1861 22.0291 16.525C22.6528 15.1448 22.9999 13.613 22.9999 12C22.9999 8.73978 21.5816 5.81084 19.3283 3.79653C18.8064 3.32998 18.2397 2.91249 17.6355 2.55132C15.9873 1.56615 14.0597 1 11.9999 1C11.888 1 11.7764 1.00167 11.6653 1.00499C9.99846 1.05479 8.42477 1.47541 7.0239 2.18719C6.07085 2.67144 5.19779 3.29045 4.42982 4.01914C3.7166 4.69587 3.09401 5.4672 2.58216 6.31302C2.22108 6.90969 1.91511 7.54343 1.6713 8.20718C1.24184 9.37631 1.00523 10.6386 1 11.9554ZM20.4812 15.0186C20.8171 14.075 20.9999 13.0588 20.9999 12C20.9999 9.54265 20.0151 7.31533 18.4186 5.6912C17.5975 7.05399 16.5148 8.18424 15.2668 9.0469C15.7351 10.2626 15.9886 11.5603 16.0045 12.8778C16.7692 13.0484 17.5274 13.304 18.2669 13.6488C19.0741 14.0252 19.8141 14.487 20.4812 15.0186ZM15.8413 14.8954C16.3752 15.0321 16.904 15.22 17.4217 15.4614C18.222 15.8346 18.9417 16.3105 19.5723 16.8661C18.0688 19.2008 15.5151 20.7953 12.5788 20.9817C13.5517 20.0585 14.3709 18.9405 14.972 17.6514C15.3909 16.7531 15.678 15.8272 15.8413 14.8954ZM13.9964 12.6219C13.9583 11.7382 13.7898 10.8684 13.5013 10.0408C10.6887 11.2998 7.36584 11.3765 4.35382 9.97197C4.01251 9.81281 3.68319 9.63837 3.36632 9.44983C3.12787 10.2584 2.99991 11.1142 2.99991 12C2.99991 13.9462 3.61763 15.748 4.6677 17.2203C6.83038 14.1875 10.3685 12.4987 13.9964 12.6219ZM6.047 18.7502C7.77258 16.059 10.7714 14.5382 13.8585 14.6191C13.723 15.3586 13.4919 16.093 13.1594 16.8062C12.3777 18.4825 11.1453 19.805 9.67385 20.6965C8.31043 20.3328 7.07441 19.6569 6.047 18.7502ZM11.9999 3C13.7846 3 15.4479 3.51946 16.847 4.41543C16.2113 5.54838 15.3593 6.4961 14.368 7.23057C13.3472 5.57072 11.8752 4.16433 10.027 3.21692C10.6619 3.07492 11.3222 3 11.9999 3ZM8.80619 4.84582C10.4462 5.61056 11.7474 6.80659 12.6379 8.23588C10.3464 9.24654 7.64722 9.30095 5.19906 8.15936C4.83384 7.98905 4.48541 7.79735 4.15458 7.58645C4.91365 6.24006 6.00929 5.10867 7.32734 4.30645C7.82672 4.44058 8.32138 4.61975 8.80619 4.84582Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgDrive (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M19 11C18.4477 11 18 11.4477 18 12C18 12.5523 18.4477 13 19 13C19.5523 13 20 12.5523 20 12C20 11.4477 19.5523 11 19 11Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M14 12C14 11.4477 14.4477 11 15 11C15.5523 11 16 11.4477 16 12C16 12.5523 15.5523 13 15 13C14.4477 13 14 12.5523 14 12Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M2 8C0.895431 8 0 8.89543 0 10V14C0 15.1046 0.89543 16 2 16H22C23.1046 16 24 15.1046 24 14V10C24 8.89543 23.1046 8 22 8H2ZM22 10H2L2 14H22V10Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgDropInvert (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M12.0001 1.13611L5.63604 7.50002C2.12132 11.0147 2.12132 16.7132 5.63604 20.2279C7.39343 21.9853 9.69679 22.864 12.0001 22.864C12.288 22.864 12.5759 22.8502 12.8627 22.8228C14.8706 22.6306 16.8264 21.7657 18.3641 20.2279C21.8788 16.7132 21.8788 11.0147 18.3641 7.50002L12.0001 1.13611ZM7.05025 8.91423L12 3.96448L12.0001 20.864C10.2086 20.864 8.41711 20.1806 7.05025 18.8137C4.31658 16.0801 4.31658 11.6479 7.05025 8.91423Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgDropOpacity (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M15.9451 21.9559C12.5884 23.5927 8.42477 23.0167 5.63598 20.2279C2.12126 16.7132 2.12126 11.0147 5.63598 7.49995L11.9999 1.13599L18.3639 7.49995C19.2521 8.38814 19.9158 9.41578 20.3551 10.5124C21.6543 13.7553 20.9906 17.6012 18.364 20.2278C17.6381 20.9538 16.8189 21.5298 15.9451 21.9559ZM7.05019 8.91416L11.9999 3.96441L16.9497 8.91416C18.274 10.2385 18.9568 11.9615 18.998 13.6968H5.00192C5.04309 11.9615 5.72585 10.2385 7.05019 8.91416Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgDrop (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M6.34315 19.5208C3.21895 16.3966 3.21895 11.3312 6.34315 8.20705L12 2.5502L17.6569 8.20705C20.781 11.3312 20.781 16.3966 17.6569 19.5208C14.5327 22.645 9.46734 22.645 6.34315 19.5208Z\",\"stroke\":\"currentColor\",\"strokeWidth\":\"2\"}}]})(props);\n};\nexport function CgDuplicate (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M19 5H7V3H21V17H19V5Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M9 13V11H11V13H13V15H11V17H9V15H7V13H9Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M3 7H17V21H3V7ZM5 9H15V19H5V9Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgEditBlackPoint (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M8 12C8 9.79086 9.79086 8 12 8C14.2091 8 16 9.79086 16 12C16 14.2091 14.2091 16 12 16C9.79086 16 8 14.2091 8 12ZM12 13C11.4477 13 11 12.5523 11 12C11 11.4477 11.4477 11 12 11C12.5523 11 13 11.4477 13 12C13 12.5523 12.5523 13 12 13Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M3 12C3 7.02944 7.02944 3 12 3C16.9706 3 21 7.02944 21 12C21 16.9706 16.9706 21 12 21C7.02944 21 3 16.9706 3 12ZM12 19C8.13401 19 5 15.866 5 12C5 8.13401 8.13401 5 12 5C15.866 5 19 8.13401 19 12C19 15.866 15.866 19 12 19Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgEditContrast (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 18C10.4633 18 9.06151 17.4223 8 16.4722C6.7725 15.3736 6 13.777 6 12C6 10.223 6.7725 8.62643 8 7.52779C9.06151 6.57771 10.4633 6 12 6V18Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M2 12C2 6.47715 6.47715 2 12 2C17.5228 2 22 6.47715 22 12C22 17.5228 17.5228 22 12 22C6.47715 22 2 17.5228 2 12ZM12 20C7.58172 20 4 16.4183 4 12C4 7.58172 7.58172 4 12 4C16.4183 4 20 7.58172 20 12C20 16.4183 16.4183 20 12 20Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgEditExposure (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M12 20C7.58172 20 4 16.4183 4 12C4 7.58172 7.58172 4 12 4C16.4183 4 20 7.58172 20 12C20 16.4183 16.4183 20 12 20ZM2 12C2 6.47715 6.47715 2 12 2C17.5228 2 22 6.47715 22 12C22 17.5228 17.5228 22 12 22C6.47715 22 2 17.5228 2 12ZM11 7V9H9V11H11V13H13V11H15V9H13V7H11ZM9 15V17H15V15H9Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgEditFade (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M8 12C8 10.5194 8.8044 9.22675 10 8.53513V15.4649C8.8044 14.7733 8 13.4806 8 12Z\",\"stroke\":\"currentColor\",\"strokeOpacity\":\"0.3\",\"strokeWidth\":\"4\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M14 15.4649V8.53513C15.1956 9.22675 16 10.5194 16 12C16 13.4806 15.1956 14.7733 14 15.4649Z\",\"stroke\":\"currentColor\",\"strokeOpacity\":\"0.6\",\"strokeWidth\":\"4\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M3 12C3 7.02944 7.02944 3 12 3C16.9706 3 21 7.02944 21 12C21 16.9706 16.9706 21 12 21C7.02944 21 3 16.9706 3 12Z\",\"stroke\":\"currentColor\",\"strokeWidth\":\"2\"}}]})(props);\n};\nexport function CgEditFlipH (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M18 7C18.5523 7 19 7.44772 19 8V16C19 16.5523 18.5523 17 18 17H15V19H18C19.6569 19 21 17.6569 21 16V8C21 6.34315 19.6569 5 18 5H15V7H18Z\",\"fill\":\"currentColor\",\"fillOpacity\":\"0.5\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M13 3H11V21H13V3Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M5 8C5 7.44772 5.44772 7 6 7H9V5H6C4.34315 5 3 6.34315 3 8V16C3 17.6569 4.34315 19 6 19H9V17H6C5.44772 17 5 16.5523 5 16V8Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgEditFlipV (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M17 18C17 18.5523 16.5523 19 16 19L8 19C7.44772 19 7 18.5523 7 18L7 15L5 15L5 18C5 19.6569 6.34315 21 8 21L16 21C17.6569 21 19 19.6569 19 18V15L17 15V18Z\",\"fill\":\"currentColor\",\"fillOpacity\":\"0.5\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M16 5C16.5523 5 17 5.44772 17 6V9H19V6C19 4.34315 17.6569 3 16 3L8 3C6.34315 3 5 4.34315 5 6V9H7V6C7 5.44772 7.44772 5 8 5L16 5Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M21 13V11L3 11V13H21Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgEditHighlight (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 6C10.7785 6 9.64223 6.36502 8.69435 6.99194H12V7.99194H7.53501C7.00911 8.57742 6.59669 9.26689 6.33237 10.0258H12V11.0258H6.07869C6.02692 11.3428 6 11.6683 6 12C6 12.3379 6.02793 12.6693 6.08161 12.9919H12V13.9919H6.33857C6.60189 14.7404 7.00941 15.4208 7.52779 16H12V17H8.68221C9.63251 17.6318 10.7733 18 12 18C15.3137 18 18 15.3137 18 12C18 8.68629 15.3137 6 12 6Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M2 12C2 6.47715 6.47715 2 12 2C17.5228 2 22 6.47715 22 12C22 17.5228 17.5228 22 12 22C6.47715 22 2 17.5228 2 12ZM12 20C7.58172 20 4 16.4183 4 12C4 7.58172 7.58172 4 12 4C16.4183 4 20 7.58172 20 12C20 16.4183 16.4183 20 12 20Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgEditMarkup (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M12 24C18.6274 24 24 18.6274 24 12C24 5.37258 18.6274 0 12 0C5.37258 0 0 5.37258 0 12C0 18.6274 5.37258 24 12 24ZM18.5793 19.531C20.6758 17.698 22 15.0036 22 12C22 6.47715 17.5228 2 12 2C6.47715 2 2 6.47715 2 12C2 14.9616 3.28743 17.6225 5.33317 19.4535L6.99999 10.9738H9.17026L12 6.07251L14.8297 10.9738H17L18.5793 19.531ZM16.0919 21.1272L15.2056 12.9738H8.79438L7.90814 21.1272C9.15715 21.688 10.5421 22 12 22C13.4579 22 14.8428 21.688 16.0919 21.1272Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgEditMask (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 14C13.1046 14 14 13.1046 14 12C14 10.8954 13.1046 10 12 10C10.8954 10 10 10.8954 10 12C10 13.1046 10.8954 14 12 14Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M12 22C6.47716 22 2 17.5228 2 12C2 6.47717 6.47716 2 12 2C17.5228 2 22 6.47717 22 12C22 17.5228 17.5228 22 12 22ZM9.0307 19.4308C9.01047 19.29 9 19.1462 9 19C9 17.3431 10.3431 16 12 16C13.6569 16 15 17.3431 15 19C15 19.1462 14.9895 19.29 14.9693 19.4308C16.9993 18.6189 18.619 16.9993 19.4308 14.9692C19.2901 14.9895 19.1463 15 19 15C17.3431 15 16 13.6569 16 12C16 10.3431 17.3431 9 19 9C19.0637 9 19.127 9.00195 19.1897 9.00586C19.271 9.01099 19.3514 9.01929 19.4308 9.03076C18.6189 7.00073 16.9993 5.3811 14.9693 4.56921C14.9895 4.70996 15 4.85376 15 5C15 6.65686 13.6569 8 12 8C10.3431 8 9 6.65686 9 5C9 4.85376 9.01048 4.70996 9.03072 4.56921C7.0007 5.3811 5.38106 7.00073 4.56915 9.03076C4.64857 9.01929 4.729 9.01099 4.8103 9.00586C4.87303 9.00195 4.93628 9 5 9C6.65686 9 8 10.3431 8 12C8 13.6569 6.65686 15 5 15C4.8537 15 4.70985 14.9895 4.56915 14.9692C5.38104 16.9993 7.00069 18.6189 9.0307 19.4308Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgEditNoise (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M10.4044 17.7657C10.419 17.7803 10.4329 17.7953 10.446 17.8108C10.1948 17.7439 9.95005 17.661 9.71293 17.5634C9.95429 17.5106 10.2167 17.578 10.4044 17.7657Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M8.43574 16.705C8.40862 16.7321 8.37994 16.7567 8.34999 16.7788C7.95661 16.4775 7.60163 16.1285 7.29364 15.7406C7.31765 15.7068 7.3448 15.6746 7.37508 15.6443C7.66797 15.3514 8.14285 15.3514 8.43574 15.6443C8.72863 15.9372 8.72863 16.4121 8.43574 16.705Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M6.37104 13.6475C6.59701 13.8735 6.64864 14.2077 6.52594 14.4832C6.38527 14.1723 6.27034 13.8472 6.18387 13.5107C6.25129 13.5454 6.31455 13.591 6.37104 13.6475Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M6.37104 10.6753C6.29401 10.7523 6.2044 10.8091 6.10883 10.8456C6.18637 10.4523 6.30234 10.0728 6.45268 9.71119C6.66079 10.004 6.63357 10.4128 6.37104 10.6753Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M7.37508 8.70669C7.28995 8.62156 7.22957 8.52106 7.19392 8.41413C7.45907 8.06093 7.76228 7.73793 8.09747 7.45124C8.22139 7.48394 8.33858 7.54887 8.43574 7.64603C8.72863 7.93892 8.72863 8.41379 8.43574 8.70669C8.14285 8.99958 7.66797 8.99958 7.37508 8.70669Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M9.34371 6.76662C9.31335 6.73627 9.28614 6.70396 9.26208 6.6701C9.6881 6.45171 10.1437 6.28277 10.6212 6.17088C10.6397 6.38399 10.5675 6.60352 10.4044 6.76662C10.1115 7.05952 9.6366 7.05952 9.34371 6.76662Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M13.2872 17.8734C13.5967 17.8055 13.8973 17.7136 14.1868 17.6C13.9165 17.4914 13.5957 17.5466 13.3766 17.7657C13.3429 17.7993 13.3131 17.8354 13.2872 17.8734Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M15.5312 16.8608C15.935 16.5658 16.3005 16.2216 16.619 15.8369C16.6005 15.8133 16.5803 15.7906 16.5586 15.7688C16.2657 15.4759 15.7908 15.4759 15.4979 15.7688C15.205 16.0617 15.205 16.5366 15.4979 16.8295C15.5088 16.8403 15.5199 16.8508 15.5312 16.8608Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M17.3654 14.6921C17.5637 14.2953 17.7194 13.8735 17.8264 13.4326C17.6636 13.451 17.5058 13.5227 17.3809 13.6475C17.0933 13.9351 17.0881 14.3982 17.3654 14.6921Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M17.8911 10.8934C17.8032 10.4272 17.6613 9.98016 17.4722 9.55885C17.4507 9.57609 17.4299 9.59469 17.4099 9.61465C17.117 9.90755 17.117 10.3824 17.4099 10.6753C17.5439 10.8093 17.7159 10.882 17.8911 10.8934Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M16.7556 8.35985C16.4971 8.02355 16.2038 7.71542 15.8811 7.44086C15.7407 7.46881 15.6068 7.5372 15.4979 7.64603C15.205 7.93892 15.205 8.41379 15.4979 8.70669C15.7908 8.99958 16.2657 8.99958 16.5586 8.70669C16.658 8.60729 16.7237 8.48694 16.7556 8.35985Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M14.4373 6.76662C14.4906 6.71331 14.5342 6.65397 14.5681 6.59079C14.1273 6.38127 13.6569 6.22392 13.1649 6.12671C13.1317 6.35331 13.2022 6.59223 13.3766 6.76662C13.6695 7.05952 14.1444 7.05952 14.4373 6.76662Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M12.5257 7.64603C12.8186 7.93892 12.8186 8.41379 12.5257 8.70669C12.2328 8.99958 11.7579 8.99958 11.465 8.70669C11.1721 8.41379 11.1721 7.93892 11.465 7.64603C11.7579 7.35313 12.2328 7.35313 12.5257 7.64603Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M10.4044 9.61465C10.6973 9.90755 10.6973 10.3824 10.4044 10.6753C10.1115 10.9682 9.6366 10.9682 9.34371 10.6753C9.05081 10.3824 9.05081 9.90755 9.34371 9.61465C9.6366 9.32176 10.1115 9.32176 10.4044 9.61465Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M8.43574 12.7967C8.72863 12.5038 8.72863 12.0289 8.43574 11.736C8.14285 11.4431 7.66797 11.4431 7.37508 11.736C7.08218 12.0289 7.08218 12.5038 7.37508 12.7967C7.66797 13.0895 8.14285 13.0895 8.43574 12.7967Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M10.4044 13.6475C10.6973 13.9404 10.6973 14.4153 10.4044 14.7082C10.1115 15.001 9.6366 15.001 9.34371 14.7082C9.05081 14.4153 9.05081 13.9404 9.34371 13.6475C9.6366 13.3546 10.1115 13.3546 10.4044 13.6475Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M12.5257 12.7967C12.8186 12.5038 12.8186 12.0289 12.5257 11.736C12.2328 11.4431 11.7579 11.4431 11.465 11.736C11.1721 12.0289 11.1721 12.5038 11.465 12.7967C11.7579 13.0895 12.2328 13.0895 12.5257 12.7967Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M14.4373 9.61465C14.7302 9.90755 14.7302 10.3824 14.4373 10.6753C14.1444 10.9682 13.6695 10.9682 13.3766 10.6753C13.0837 10.3824 13.0837 9.90755 13.3766 9.61465C13.6695 9.32176 14.1444 9.32176 14.4373 9.61465Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M16.5586 12.7681C16.8515 12.4752 16.8515 12.0003 16.5586 11.7074C16.2657 11.4145 15.7908 11.4145 15.4979 11.7074C15.205 12.0003 15.205 12.4752 15.4979 12.7681C15.7908 13.061 16.2657 13.061 16.5586 12.7681Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M14.423 13.6902C14.7159 13.9831 14.7159 14.458 14.423 14.7509C14.1301 15.0438 13.6552 15.0438 13.3623 14.7509C13.0694 14.458 13.0694 13.9831 13.3623 13.6902C13.6552 13.3973 14.1301 13.3973 14.423 13.6902Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M12.3159 16.705C12.6088 16.4121 12.6088 15.9372 12.3159 15.6443C12.023 15.3514 11.5482 15.3514 11.2553 15.6443C10.9624 15.9372 10.9624 16.4121 11.2553 16.705C11.5482 16.9979 12.023 16.9979 12.3159 16.705Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M22 12C22 17.5228 17.5228 22 12 22C6.47715 22 2 17.5228 2 12C2 6.47715 6.47715 2 12 2C17.5228 2 22 6.47715 22 12ZM20 12C20 16.4183 16.4183 20 12 20C7.58172 20 4 16.4183 4 12C4 7.58172 7.58172 4 12 4C16.4183 4 20 7.58172 20 12Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgEditShadows (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M15.3056 6.99194C14.3578 6.36502 13.2215 6 12 6C8.68629 6 6 8.68629 6 12C6 15.3137 8.68629 18 12 18C13.2267 18 14.3675 17.6318 15.3178 17H12V16H16.4722C16.9906 15.4208 17.3981 14.7404 17.6614 13.9919H12V12.9919H17.9184C17.9721 12.6693 18 12.3379 18 12C18 11.6683 17.9731 11.3428 17.9213 11.0258H12V10.0258H17.6676C17.4033 9.26689 16.9909 8.57742 16.465 7.99194H12V6.99194H15.3056Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M22 12C22 6.47715 17.5228 2 12 2C6.47715 2 2 6.47715 2 12C2 17.5228 6.47715 22 12 22C17.5228 22 22 17.5228 22 12ZM12 20C16.4183 20 20 16.4183 20 12C20 7.58172 16.4183 4 12 4C7.58172 4 4 7.58172 4 12C4 16.4183 7.58172 20 12 20Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgEditStraight (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 4C15.866 4 19 7.13401 19 11H5C5 7.13401 8.13401 4 12 4Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M5 13H1V11H5V13Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M19 13C19 16.866 15.866 20 12 20C8.13401 20 5 16.866 5 13H19Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M19 13V11H23V13H19Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgEditUnmask (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M15 5C15 6.65685 13.6569 8 12 8C10.3431 8 9 6.65685 9 5C9 3.34315 10.3431 2 12 2C13.6569 2 15 3.34315 15 5Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M14 12C14 13.1046 13.1046 14 12 14C10.8954 14 10 13.1046 10 12C10 10.8954 10.8954 10 12 10C13.1046 10 14 10.8954 14 12Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M12 22C13.6569 22 15 20.6569 15 19C15 17.3431 13.6569 16 12 16C10.3431 16 9 17.3431 9 19C9 20.6569 10.3431 22 12 22Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M22 12C22 13.6569 20.6569 15 19 15C17.3431 15 16 13.6569 16 12C16 10.3431 17.3431 9 19 9C20.6569 9 22 10.3431 22 12Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M5 15C6.65685 15 8 13.6569 8 12C8 10.3431 6.65685 9 5 9C3.34315 9 2 10.3431 2 12C2 13.6569 3.34315 15 5 15Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgEject (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M16.9498 14.3948L18.364 12.9805L12 6.61658L5.63605 12.9805L7.05026 14.3948L12 9.445L16.9498 14.3948Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M6.00014 17.3835H18.0001V15.3835H6.00014V17.3835Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgEnter (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M20 5H8V9H6V3H22V21H6V15H8V19H20V5Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M13.0743 16.9498L11.6601 15.5356L14.1957 13H2V11H14.1956L11.6601 8.46451L13.0743 7.05029L18.024 12L13.0743 16.9498Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgErase (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M3.49997 12.8995C2.71892 13.6805 2.71892 14.9468 3.49997 15.7279L7.35785 19.5858H4.08576C3.53347 19.5858 3.08576 20.0335 3.08576 20.5858C3.08576 21.1381 3.53347 21.5858 4.08576 21.5858H20.0858C20.638 21.5858 21.0858 21.1381 21.0858 20.5858C21.0858 20.0335 20.638 19.5858 20.0858 19.5858H10.9558L20.4705 10.071C21.2516 9.28999 21.2516 8.02366 20.4705 7.24261L16.2279 2.99997C15.4468 2.21892 14.1805 2.21892 13.3995 2.99997L3.49997 12.8995ZM7.82579 11.4021L4.91418 14.3137L9.15683 18.5563L12.0684 15.6447L7.82579 11.4021ZM9.24 9.98787L13.4826 14.2305L19.0563 8.65683L14.8137 4.41418L9.24 9.98787Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgEreader (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M16 7C15.4477 7 15 7.44772 15 8C15 8.55228 15.4477 9 16 9H19C19.5523 9 20 8.55228 20 8C20 7.44772 19.5523 7 19 7H16Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M15 12C15 11.4477 15.4477 11 16 11H19C19.5523 11 20 11.4477 20 12C20 12.5523 19.5523 13 19 13H16C15.4477 13 15 12.5523 15 12Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M16 15C15.4477 15 15 15.4477 15 16C15 16.5523 15.4477 17 16 17H19C19.5523 17 20 16.5523 20 16C20 15.4477 19.5523 15 19 15H16Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M3 3C1.34315 3 0 4.34315 0 6V18C0 19.6569 1.34315 21 3 21H21C22.6569 21 24 19.6569 24 18V6C24 4.34315 22.6569 3 21 3H3ZM21 5H13V19H21C21.5523 19 22 18.5523 22 18V6C22 5.44772 21.5523 5 21 5ZM3 5H11V19H3C2.44772 19 2 18.5523 2 18V6C2 5.44772 2.44772 5 3 5Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgEricsson (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M7.71689 5.72315C6.71581 6.18996 6.2827 7.37992 6.74951 8.381C7.21632 9.38208 8.40628 9.81519 9.40736 9.34838L20.2831 4.27696C21.2841 3.81015 21.7172 2.62019 21.2504 1.61911C20.7836 0.618028 19.5937 0.184918 18.5926 0.651729L7.71689 5.72315Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M4.74951 15.381C4.2827 14.3799 4.71581 13.19 5.71689 12.7231L16.5926 7.65173C17.5937 7.18492 18.7836 7.61803 19.2504 8.61911C19.7172 9.62019 19.2841 10.8101 18.2831 11.277L7.40736 16.3484C6.40628 16.8152 5.21632 16.3821 4.74951 15.381Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M2.74951 22.381C2.2827 21.3799 2.71581 20.19 3.71689 19.7231L14.5926 14.6517C15.5937 14.1849 16.7836 14.618 17.2504 15.6191C17.7172 16.6202 17.2841 17.8101 16.2831 18.277L5.40736 23.3484C4.40628 23.8152 3.21632 23.3821 2.74951 22.381Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgEthernet (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M4 0.5V20.5H11V23.5H13V20.5H20V0.5H4ZM18 2.5H6V8.5H10V14.5H14V8.5H18V2.5ZM6 18.5V10.5H8V16.5H16V10.5H18V18.5H6Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgEuro (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M18.5535 15.5355C17.6487 16.4404 16.3987 17 15.018 17C13.1416 17 11.5066 15.9664 10.6513 14.4374H13.0323L13.7284 12.5625H10.0493C10.0286 12.3779 10.018 12.1902 10.018 12C10.018 11.8098 10.0286 11.6221 10.0493 11.4374H14.3362L15.0324 9.5625H10.6514C11.5066 8.0336 13.1416 7 15.018 7C16.3987 7 17.6487 7.55964 18.5535 8.46447L19.9677 7.05025C18.701 5.7835 16.951 5 15.018 5C12.0092 5 9.44381 6.89827 8.45407 9.5625H6.03241L5.33624 11.4374H8.04028C8.02552 11.623 8.018 11.8106 8.018 12C8.018 12.1894 8.02552 12.3769 8.04027 12.5625H4.72845L4.03229 14.4374H8.45404C9.44377 17.1017 12.0092 19 15.018 19C16.951 19 18.701 18.2165 19.9677 16.9497L18.5535 15.5355Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgEventbrite (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M14.6734 17.4378C12.3057 18.5419 9.5858 17.9679 7.85444 16.2039L21.8647 9.67074C21.7105 9.02969 21.4902 8.39446 21.2008 7.77376C18.8667 2.76836 12.9169 0.602811 7.91152 2.93687C2.90612 5.27092 0.740567 11.2207 3.07462 16.2261C5.40868 21.2315 11.3585 23.3971 16.3639 21.063C19.016 19.8263 20.8708 17.5746 21.6815 14.986H17.3424C16.7484 16.0235 15.8393 16.8941 14.6734 17.4378ZM9.60199 6.5621C7.23436 7.66615 5.92572 10.1185 6.16403 12.5786L16.4208 7.79583C14.6894 6.03194 11.9696 5.45805 9.60199 6.5621Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgExpand (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12.3062 16.5933L12.2713 18.593L5.2724 18.4708L5.39457 11.4719L7.39426 11.5068L7.33168 15.092L15.2262 7.46833L11.6938 7.40668L11.7287 5.40698L18.7277 5.52915L18.6055 12.5281L16.6058 12.4932L16.6693 8.85507L8.72095 16.5307L12.3062 16.5933Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgExport (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M16.9498 5.96781L15.5356 7.38203L13 4.84646V17.0421H11V4.84653L8.46451 7.38203L7.05029 5.96781L12 1.01807L16.9498 5.96781Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M5 20.9819V10.9819H9V8.98193H3V22.9819H21V8.98193H15V10.9819H19V20.9819H5Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgExtensionAdd (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M16 4H18V6H20V8H18V10H16V8H14V6H16V4Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M12 12V6H4V20H18V12H12ZM6 8H10V12H6V8ZM10 14V18H6V14H10ZM16 14V18H12V14H16Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgExtensionAlt (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M5 5V19H13V13H19V5H5ZM11 7H7V11H11V7ZM11 13H7V17H11V13ZM13 11H17V7H13V11Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgExtensionRemove (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M12 11V5H4V19H18V11H12ZM6 7H10V11H6V7ZM10 13V17H6V13H10ZM16 13V17H12V13H16Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M20 7H14V9H20V7Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgExtension (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M13 3H21V11H13V3ZM15 5H19V9H15V5Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M17 21V13H11V7H3V21H17ZM9 9H5V13H9V9ZM5 19L5 15H9V19H5ZM11 19V15H15V19H11Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgExternal (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M15.6396 7.02527H12.0181V5.02527H19.0181V12.0253H17.0181V8.47528L12.1042 13.3892L10.6899 11.975L15.6396 7.02527Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M10.9819 6.97473H4.98193V18.9747H16.9819V12.9747H14.9819V16.9747H6.98193V8.97473H10.9819V6.97473Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgEyeAlt (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M14 12C14 13.1046 13.1046 14 12 14C10.8954 14 10 13.1046 10 12C10 10.8954 10.8954 10 12 10C13.1046 10 14 10.8954 14 12Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M12 3C6.40848 3 1.71018 6.82432 0.378052 12C1.71018 17.1757 6.40848 21 12 21C17.5915 21 22.2898 17.1757 23.6219 12C22.2898 6.82432 17.5915 3 12 3ZM16 12C16 14.2091 14.2091 16 12 16C9.79086 16 8 14.2091 8 12C8 9.79086 9.79086 8 12 8C14.2091 8 16 9.79086 16 12Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgEye (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M16 12C16 14.2091 14.2091 16 12 16C9.79086 16 8 14.2091 8 12C8 9.79086 9.79086 8 12 8C14.2091 8 16 9.79086 16 12ZM14 12C14 13.1046 13.1046 14 12 14C10.8954 14 10 13.1046 10 12C10 10.8954 10.8954 10 12 10C13.1046 10 14 10.8954 14 12Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M12 3C17.5915 3 22.2898 6.82432 23.6219 12C22.2898 17.1757 17.5915 21 12 21C6.40848 21 1.71018 17.1757 0.378052 12C1.71018 6.82432 6.40848 3 12 3ZM12 19C7.52443 19 3.73132 16.0581 2.45723 12C3.73132 7.94186 7.52443 5 12 5C16.4756 5 20.2687 7.94186 21.5428 12C20.2687 16.0581 16.4756 19 12 19Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgFacebook (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M9.19795 21.5H13.198V13.4901H16.8021L17.198 9.50977H13.198V7.5C13.198 6.94772 13.6457 6.5 14.198 6.5H17.198V2.5H14.198C11.4365 2.5 9.19795 4.73858 9.19795 7.5V9.50977H7.19795L6.80206 13.4901H9.19795V21.5Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgFeed (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12.552 8C11.9997 8 11.552 8.44772 11.552 9C11.552 9.55228 11.9997 10 12.552 10H16.552C17.1043 10 17.552 9.55228 17.552 9C17.552 8.44772 17.1043 8 16.552 8H12.552Z\",\"fill\":\"currentColor\",\"fillOpacity\":\"0.5\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M12.552 17C11.9997 17 11.552 17.4477 11.552 18C11.552 18.5523 11.9997 19 12.552 19H16.552C17.1043 19 17.552 18.5523 17.552 18C17.552 17.4477 17.1043 17 16.552 17H12.552Z\",\"fill\":\"currentColor\",\"fillOpacity\":\"0.5\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M12.552 5C11.9997 5 11.552 5.44772 11.552 6C11.552 6.55228 11.9997 7 12.552 7H20.552C21.1043 7 21.552 6.55228 21.552 6C21.552 5.44772 21.1043 5 20.552 5H12.552Z\",\"fill\":\"currentColor\",\"fillOpacity\":\"0.8\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M12.552 14C11.9997 14 11.552 14.4477 11.552 15C11.552 15.5523 11.9997 16 12.552 16H20.552C21.1043 16 21.552 15.5523 21.552 15C21.552 14.4477 21.1043 14 20.552 14H12.552Z\",\"fill\":\"currentColor\",\"fillOpacity\":\"0.8\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M3.448 4.00208C2.89571 4.00208 2.448 4.44979 2.448 5.00208V10.0021C2.448 10.5544 2.89571 11.0021 3.448 11.0021H8.448C9.00028 11.0021 9.448 10.5544 9.448 10.0021V5.00208C9.448 4.44979 9.00028 4.00208 8.448 4.00208H3.448Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M3.448 12.9979C2.89571 12.9979 2.448 13.4456 2.448 13.9979V18.9979C2.448 19.5502 2.89571 19.9979 3.448 19.9979H8.448C9.00028 19.9979 9.448 19.5502 9.448 18.9979V13.9979C9.448 13.4456 9.00028 12.9979 8.448 12.9979H3.448Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgFigma (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M8.5 2C6.84315 2 5.5 3.34315 5.5 5C5.5 6.65685 6.84315 8 8.5 8H15.5C17.1569 8 18.5 6.65685 18.5 5C18.5 3.34315 17.1569 2 15.5 2H8.5Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M15.5 9C13.8431 9 12.5 10.3431 12.5 12C12.5 13.6569 13.8431 15 15.5 15C17.1569 15 18.5 13.6569 18.5 12C18.5 10.3431 17.1569 9 15.5 9Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M5.5 12C5.5 10.3431 6.84315 9 8.5 9H11.5V15H8.5C6.84315 15 5.5 13.6569 5.5 12Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M8.5 16C6.84315 16 5.5 17.3431 5.5 19C5.5 20.6569 6.84315 22 8.5 22C10.1569 22 11.5 20.6569 11.5 19V16H8.5Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgFileAdd (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M10 18V16H8V14H10V12H12V14H14V16H12V18H10Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M6 2C4.34315 2 3 3.34315 3 5V19C3 20.6569 4.34315 22 6 22H18C19.6569 22 21 20.6569 21 19V9C21 5.13401 17.866 2 14 2H6ZM6 4H13V9H19V19C19 19.5523 18.5523 20 18 20H6C5.44772 20 5 19.5523 5 19V5C5 4.44772 5.44772 4 6 4ZM15 4.10002C16.6113 4.4271 17.9413 5.52906 18.584 7H15V4.10002Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgFileDocument (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M7 18H17V16H7V18Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M17 14H7V12H17V14Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M7 10H11V8H7V10Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M6 2C4.34315 2 3 3.34315 3 5V19C3 20.6569 4.34315 22 6 22H18C19.6569 22 21 20.6569 21 19V9C21 5.13401 17.866 2 14 2H6ZM6 4H13V9H19V19C19 19.5523 18.5523 20 18 20H6C5.44772 20 5 19.5523 5 19V5C5 4.44772 5.44772 4 6 4ZM15 4.10002C16.6113 4.4271 17.9413 5.52906 18.584 7H15V4.10002Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgFileRemove (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M9 15H15V13H9V15Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M6 2C4.34315 2 3 3.34315 3 5V19C3 20.6569 4.34315 22 6 22H18C19.6569 22 21 20.6569 21 19V9C21 5.13401 17.866 2 14 2H6ZM6 4H13V9H19V19C19 19.5523 18.5523 20 18 20H6C5.44772 20 5 19.5523 5 19V5C5 4.44772 5.44772 4 6 4ZM15 4.10002C16.6113 4.4271 17.9413 5.52906 18.584 7H15V4.10002Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgFile (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M3 5C3 3.34315 4.34315 2 6 2H14C17.866 2 21 5.13401 21 9V19C21 20.6569 19.6569 22 18 22H6C4.34315 22 3 20.6569 3 19V5ZM13 4H6C5.44772 4 5 4.44772 5 5V19C5 19.5523 5.44772 20 6 20H18C18.5523 20 19 19.5523 19 19V9H13V4ZM18.584 7C17.9413 5.52906 16.6113 4.4271 15 4.10002V7H18.584Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgFilm (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M6 7C5.44772 7 5 7.44772 5 8C5 8.55228 5.44772 9 6 9C6.55228 9 7 8.55228 7 8C7 7.44772 6.55228 7 6 7Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M17 8C17 7.44772 17.4477 7 18 7C18.5523 7 19 7.44772 19 8C19 8.55228 18.5523 9 18 9C17.4477 9 17 8.55228 17 8Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M6 11C5.44772 11 5 11.4477 5 12C5 12.5523 5.44772 13 6 13C6.55228 13 7 12.5523 7 12C7 11.4477 6.55228 11 6 11Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M17 12C17 11.4477 17.4477 11 18 11C18.5523 11 19 11.4477 19 12C19 12.5523 18.5523 13 18 13C17.4477 13 17 12.5523 17 12Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M6 15C5.44772 15 5 15.4477 5 16C5 16.5523 5.44772 17 6 17C6.55228 17 7 16.5523 7 16C7 15.4477 6.55228 15 6 15Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M17 16C17 15.4477 17.4477 15 18 15C18.5523 15 19 15.4477 19 16C19 16.5523 18.5523 17 18 17C17.4477 17 17 16.5523 17 16Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M4 3C2.34315 3 1 4.34315 1 6V18C1 19.6569 2.34315 21 4 21H20C21.6569 21 23 19.6569 23 18V6C23 4.34315 21.6569 3 20 3H4ZM20 5H4C3.44772 5 3 5.44772 3 6V18C3 18.5523 3.44772 19 4 19H20C20.5523 19 21 18.5523 21 18V6C21 5.44772 20.5523 5 20 5Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgFilters (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M4.70834 15.4397C5.92663 16.2928 7.3222 16.7038 8.70461 16.7063C9.17977 18.0045 10.0433 19.1753 11.2616 20.0284C14.4284 22.2458 18.7932 21.4762 21.0107 18.3093C23.2281 15.1425 22.4585 10.7777 19.2916 8.56024C18.0734 7.70719 16.6778 7.29621 15.2954 7.29371C14.8202 5.99552 13.9567 4.82467 12.7384 3.97161C9.57158 1.75417 5.20676 2.52381 2.98931 5.69064C0.771871 8.85748 1.54151 13.2223 4.70834 15.4397ZM5.8555 13.8014C6.6016 14.3239 7.44081 14.6142 8.28736 14.6875C8.20112 13.1725 8.60464 11.6187 9.54254 10.2793C10.4804 8.9398 11.8025 8.0292 13.2556 7.59209C12.8972 6.82166 12.3374 6.13235 11.5913 5.60992C9.32924 4.02603 6.21151 4.57577 4.62762 6.8378C3.04373 9.09982 3.59347 12.2176 5.8555 13.8014ZM18.1445 10.1985C17.3984 9.67611 16.5592 9.38581 15.7126 9.31251C15.7989 10.8275 15.3953 12.3813 14.4574 13.7207C13.5195 15.0602 12.1975 15.9708 10.7444 16.4079C11.1028 17.1783 11.6626 17.8676 12.4087 18.3901C14.6707 19.9739 17.7885 19.4242 19.3724 17.1622C20.9562 14.9002 20.4065 11.7824 18.1445 10.1985Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgFlagAlt (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M12.4388 7L14.8387 4H7V10H14.8387L12.4388 7ZM19 12H7V22H5V2H19L15 7L19 12Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgFlag (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M4 21H6V11H12V13H20V5H13V3H4V21ZM12 5H6V9H13V11H18V7H12V5Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgFolderAdd (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M11 14.5V16.5H13V14.5H15V12.5H13V10.5H11V12.5H9V14.5H11Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M4 1.5C2.89543 1.5 2 2.39543 2 3.5V4.5C2 4.55666 2.00236 4.61278 2.00698 4.66825C0.838141 5.07811 0 6.19118 0 7.5V19.5C0 21.1569 1.34315 22.5 3 22.5H21C22.6569 22.5 24 21.1569 24 19.5V7.5C24 5.84315 22.6569 4.5 21 4.5H11.874C11.4299 2.77477 9.86384 1.5 8 1.5H4ZM9.73244 4.5C9.38663 3.9022 8.74028 3.5 8 3.5H4V4.5H9.73244ZM3 6.5C2.44772 6.5 2 6.94772 2 7.5V19.5C2 20.0523 2.44772 20.5 3 20.5H21C21.5523 20.5 22 20.0523 22 19.5V7.5C22 6.94772 21.5523 6.5 21 6.5H3Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgFolderRemove (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M9 14.5V12.5H15V14.5H9Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M4 1.5C2.89543 1.5 2 2.39543 2 3.5V4.5C2 4.55666 2.00236 4.61278 2.00698 4.66825C0.838141 5.07811 0 6.19118 0 7.5V19.5C0 21.1569 1.34315 22.5 3 22.5H21C22.6569 22.5 24 21.1569 24 19.5V7.5C24 5.84315 22.6569 4.5 21 4.5H11.874C11.4299 2.77477 9.86384 1.5 8 1.5H4ZM9.73244 4.5C9.38663 3.9022 8.74028 3.5 8 3.5H4V4.5H9.73244ZM3 6.5C2.44772 6.5 2 6.94772 2 7.5V19.5C2 20.0523 2.44772 20.5 3 20.5H21C21.5523 20.5 22 20.0523 22 19.5V7.5C22 6.94772 21.5523 6.5 21 6.5H3Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgFolder (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M4 1.5C2.89543 1.5 2 2.39543 2 3.5V4.5C2 4.55666 2.00236 4.61278 2.00698 4.66825C0.838141 5.07811 0 6.19118 0 7.5V19.5C0 21.1569 1.34315 22.5 3 22.5H21C22.6569 22.5 24 21.1569 24 19.5V7.5C24 5.84315 22.6569 4.5 21 4.5H11.874C11.4299 2.77477 9.86384 1.5 8 1.5H4ZM9.73244 4.5C9.38663 3.9022 8.74028 3.5 8 3.5H4V4.5H9.73244ZM3 6.5C2.44772 6.5 2 6.94772 2 7.5V19.5C2 20.0523 2.44772 20.5 3 20.5H21C21.5523 20.5 22 20.0523 22 19.5V7.5C22 6.94772 21.5523 6.5 21 6.5H3Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgFontHeight (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M21 5V3H3V5H21Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M21 19V21H3V19H21Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M12.0001 7.37636C11.602 7.35207 11.2112 7.56874 11.0325 7.95204L7.65154 15.2025C7.41815 15.7031 7.6347 16.2981 8.13522 16.5315C8.63577 16.7649 9.23074 16.5484 9.46417 16.0477L9.95278 14.9999H14.0473L14.5359 16.0477C14.7693 16.5484 15.3643 16.7649 15.8648 16.5315C16.3654 16.2981 16.5819 15.7031 16.3485 15.2025L12.9676 7.95204C12.7888 7.56874 12.3981 7.35207 12.0001 7.37636ZM13.1147 12.9999H10.8854L12.0001 10.6095L13.1147 12.9999Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgFontSpacing (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M19 21H21V3H19L19 21Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M5 21H3V3H5L5 21Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M9.46416 16.0479L9.95281 14.9999H14.0473L14.5359 16.0478C14.7693 16.5484 15.3643 16.7649 15.8649 16.5315C16.3654 16.2981 16.582 15.7031 16.3485 15.2026L12.9676 7.95213C12.7888 7.56877 12.398 7.35199 11.9999 7.37637C11.6019 7.35214 11.2112 7.5689 11.0325 7.95216L7.65155 15.2026C7.41814 15.7032 7.6347 16.2981 8.13524 16.5315C8.63578 16.7649 9.23076 16.5484 9.46416 16.0479ZM12.0001 10.6096L10.8854 12.9999H13.1147L12.0001 10.6096Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgFormatBold (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12.946 10.7833L11.2754 12.209L13.4476 12.533C14.8919 12.7485 16 13.9957 16 15.5C16 13.8431 14.6569 12.5 13 12.5H9H8V11.5H9H11C12.6283 11.5 13.9536 10.2028 13.9988 8.58539C13.9743 9.4647 13.5724 10.2488 12.946 10.7833Z\",\"stroke\":\"currentColor\",\"strokeWidth\":\"2\"}}]})(props);\n};\nexport function CgFormatCenter (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M4 5C3.44772 5 3 5.44772 3 6C3 6.55228 3.44772 7 4 7H20C20.5523 7 21 6.55228 21 6C21 5.44772 20.5523 5 20 5H4Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M4 13C3.44772 13 3 13.4477 3 14C3 14.5523 3.44772 15 4 15H20C20.5523 15 21 14.5523 21 14C21 13.4477 20.5523 13 20 13H4Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M6 10C6 9.44772 6.44772 9 7 9H17C17.5523 9 18 9.44772 18 10C18 10.5523 17.5523 11 17 11H7C6.44772 11 6 10.5523 6 10Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M7 17C6.44772 17 6 17.4477 6 18C6 18.5523 6.44772 19 7 19H17C17.5523 19 18 18.5523 18 18C18 17.4477 17.5523 17 17 17H7Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgFormatColor (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M12.9479 3.20946C12.7721 2.83236 12.391 2.61645 11.9997 2.63269C11.6086 2.61666 11.2278 2.83255 11.0521 3.20948L5.1354 15.8978C4.90199 16.3983 5.11855 16.9933 5.61909 17.2267C6.11963 17.4601 6.71461 17.2436 6.94801 16.743L8.39869 13.632H15.6013L17.052 16.743C17.2854 17.2435 17.8804 17.4601 18.3809 17.2267C18.8814 16.9933 19.098 16.3983 18.8646 15.8978L12.9479 3.20946ZM14.6687 11.632L12 5.909L9.33131 11.632H14.6687Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M6 19.3682C5.44772 19.3682 5 19.816 5 20.3682C5 20.9205 5.44772 21.3682 6 21.3682H18C18.5523 21.3682 19 20.9205 19 20.3682C19 19.816 18.5523 19.3682 18 19.3682H6Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgFormatHeading (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M6 19V5H8V11H16V5H18V19H16V13H8V19H6Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgFormatIndentDecrease (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M20 7H4V5H20V7Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M20 11H12V9H20V11Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M12 15H20V13H12V15Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M9 9L4 12L9 15V9Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M4 17V19H20V17H4Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgFormatIndentIncrease (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M20 7H4V5H20V7Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M20 11H12V9H20V11Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M12 15H20V13H12V15Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M4 15L9 12L4 9V15Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M4 17V19H20V17H4Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgFormatItalic (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M11.4903 5.45801H17.4903L16.7788 7.32716H14.7788L11.2212 16.6729H13.2212L12.5097 18.5421H6.5097L7.22122 16.6729H9.22122L12.7788 7.32716H10.7788L11.4903 5.45801Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgFormatJustify (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M4 5C3.44772 5 3 5.44772 3 6C3 6.55228 3.44772 7 4 7H20C20.5523 7 21 6.55228 21 6C21 5.44772 20.5523 5 20 5H4Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M4 9C3.44772 9 3 9.44772 3 10C3 10.5523 3.44772 11 4 11H20C20.5523 11 21 10.5523 21 10C21 9.44772 20.5523 9 20 9H4Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M3 14C3 13.4477 3.44772 13 4 13H20C20.5523 13 21 13.4477 21 14C21 14.5523 20.5523 15 20 15H4C3.44772 15 3 14.5523 3 14Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M4 17C3.44772 17 3 17.4477 3 18C3 18.5523 3.44772 19 4 19H20C20.5523 19 21 18.5523 21 18C21 17.4477 20.5523 17 20 17H4Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgFormatLeft (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M4 5C3.44772 5 3 5.44772 3 6C3 6.55228 3.44772 7 4 7H20C20.5523 7 21 6.55228 21 6C21 5.44772 20.5523 5 20 5H4Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M4 9C3.44772 9 3 9.44772 3 10C3 10.5523 3.44772 11 4 11H12C12.5523 11 13 10.5523 13 10C13 9.44772 12.5523 9 12 9H4Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M3 14C3 13.4477 3.44772 13 4 13H20C20.5523 13 21 13.4477 21 14C21 14.5523 20.5523 15 20 15H4C3.44772 15 3 14.5523 3 14Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M4 17C3.44772 17 3 17.4477 3 18C3 18.5523 3.44772 19 4 19H12C12.5523 19 13 18.5523 13 18C13 17.4477 12.5523 17 12 17H4Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgFormatLineHeight (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M5.09668 6.99707H7.17358L4.17358 3.99707L1.17358 6.99707H3.09668V17.0031H1.15881L4.15881 20.0031L7.15881 17.0031H5.09668V6.99707Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M22.8412 7H8.84119V5H22.8412V7Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M22.8412 11H8.84119V9H22.8412V11Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M8.84119 15H22.8412V13H8.84119V15Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M22.8412 19H8.84119V17H22.8412V19Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgFormatRight (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M20 5C20.5523 5 21 5.44772 21 6C21 6.55228 20.5523 7 20 7H4C3.44772 7 3 6.55228 3 6C3 5.44772 3.44772 5 4 5H20Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M20 9C20.5523 9 21 9.44772 21 10C21 10.5523 20.5523 11 20 11H12C11.4477 11 11 10.5523 11 10C11 9.44772 11.4477 9 12 9H20Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M21 14C21 13.4477 20.5523 13 20 13H4C3.44772 13 3 13.4477 3 14C3 14.5523 3.44772 15 4 15H20C20.5523 15 21 14.5523 21 14Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M20 17C20.5523 17 21 17.4477 21 18C21 18.5523 20.5523 19 20 19H12C11.4477 19 11 18.5523 11 18C11 17.4477 11.4477 17 12 17H20Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgFormatSeparator (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"g\",\"attr\":{\"opacity\":\"0.5\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M16 5C16.5523 5 17 4.55229 17 4C17 3.44772 16.5523 3 16 3H8C7.44771 3 7 3.44772 7 4C7 4.55228 7.44771 5 8 5L16 5Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M16 7C16.5523 7 17 7.44772 17 8C17 8.55229 16.5523 9 16 9H8C7.44771 9 7 8.55229 7 8C7 7.44772 7.44771 7 8 7H16Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M17 12C17 12.5523 16.5523 13 16 13L8 13C7.44771 13 7 12.5523 7 12C7 11.4477 7.44771 11 8 11L16 11C16.5523 11 17 11.4477 17 12Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M16 21C16.5523 21 17 20.5523 17 20C17 19.4477 16.5523 19 16 19L8 19C7.44771 19 7 19.4477 7 20C7 20.5523 7.44771 21 8 21H16Z\",\"fill\":\"currentColor\"}}]},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M21 16C21 16.5523 20.5523 17 20 17L4 17C3.44772 17 3 16.5523 3 16C3 15.4477 3.44772 15 4 15L20 15C20.5523 15 21 15.4477 21 16Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgFormatSlash (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M14.526 6.10576C15.0265 6.33917 15.2667 6.88343 15.0625 7.3214L9.88541 18.4237C9.68118 18.8616 9.10985 19.0275 8.60931 18.7941C8.10877 18.5607 7.86857 18.0164 8.0728 17.5784L13.2499 6.47616C13.4541 6.03819 14.0254 5.87235 14.526 6.10576Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgFormatStrike (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M13 7H17V5H7V7H11V10H13V7Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M11 19V14H13V19H11Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M5 13H19V11H5V13Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgFormatText (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M6.5 3H3V6.5H4V4H6.5V3Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M8.5 4V3H11V4H8.5Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M13 4H15.5V3H13V4Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M17.5 3V4H20V6.5H21V3H17.5Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M21 8.5H20V11H21V8.5Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M21 13H20V15.5H21V13Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M21 17.5H20V20H17.5V21H21V17.5Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M15.5 21V20H13V21H15.5Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M11 21V20H8.5V21H11Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M6.5 21V20H4V17.5H3V21H6.5Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M3 15.5H4V13H3V15.5Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M3 11H4V8.5H3V11Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M11 9.5H7V7.5H17V9.5H13V16.5H11V9.5Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgFormatUnderline (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M6 10V4H8V10C8 12.2091 9.79086 14 12 14C14.2091 14 16 12.2091 16 10V4H18V10C18 13.3137 15.3137 16 12 16C8.68629 16 6 13.3137 6 10Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M7 18C6.44772 18 6 18.4477 6 19C6 19.5523 6.44771 20 7 20H17C17.5523 20 18 19.5523 18 19C18 18.4477 17.5523 18 17 18H7Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgFormatUppercase (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M13 9H10V17H8V9H5V7H13V9ZM18 13H16V17H14V13H12V11H18V13Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgFramer (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 21L12 9L6 9L6 15L12 21Z\",\"fill\":\"currentColor\",\"fillOpacity\":\"0.5\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M18 9V3H6L12 9H6V15H18L12 9H18Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgGames (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M15.4695 11.2929C15.0789 10.9024 14.4458 10.9024 14.0553 11.2929C13.6647 11.6834 13.6647 12.3166 14.0553 12.7071C14.4458 13.0976 15.0789 13.0976 15.4695 12.7071C15.86 12.3166 15.86 11.6834 15.4695 11.2929Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M16.1766 9.17156C16.5671 8.78103 17.2003 8.78103 17.5908 9.17156C17.9813 9.56208 17.9813 10.1952 17.5908 10.5858C17.2003 10.9763 16.5671 10.9763 16.1766 10.5858C15.7861 10.1952 15.7861 9.56208 16.1766 9.17156Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M19.7121 11.2929C19.3216 10.9024 18.6885 10.9024 18.2979 11.2929C17.9074 11.6834 17.9074 12.3166 18.2979 12.7071C18.6885 13.0976 19.3216 13.0976 19.7121 12.7071C20.1027 12.3166 20.1027 11.6834 19.7121 11.2929Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M16.1766 13.4142C16.5671 13.0237 17.2003 13.0237 17.5908 13.4142C17.9813 13.8048 17.9813 14.4379 17.5908 14.8284C17.2003 15.219 16.5671 15.219 16.1766 14.8284C15.7861 14.4379 15.7861 13.8048 16.1766 13.4142Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M6 13H4V11H6V9H8V11H10V13H8V15H6V13Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M7 5C3.13401 5 0 8.13401 0 12C0 15.866 3.13401 19 7 19H17C20.866 19 24 15.866 24 12C24 8.13401 20.866 5 17 5H7ZM17 7H7C4.23858 7 2 9.23858 2 12C2 14.7614 4.23858 17 7 17H17C19.7614 17 22 14.7614 22 12C22 9.23858 19.7614 7 17 7Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgGenderFemale (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M12 3C9.23858 3 7 5.23858 7 8C7 10.419 8.71776 12.4367 11 12.9V15H8V17H11V21H13V17H16V15H13V12.9C15.2822 12.4367 17 10.419 17 8C17 5.23858 14.7614 3 12 3ZM9 8C9 9.65685 10.3431 11 12 11C13.6569 11 15 9.65685 15 8C15 6.34315 13.6569 5 12 5C10.3431 5 9 6.34315 9 8Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgGenderMale (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M12.1888 7L12.1909 5L19.1909 5.00746L19.1834 12.0075L17.1834 12.0053L17.1873 8.41678L14.143 11.4611C15.4612 13.4063 15.2587 16.0743 13.5355 17.7975C11.5829 19.7501 8.41709 19.7501 6.46447 17.7975C4.51184 15.8449 4.51184 12.6791 6.46447 10.7264C8.16216 9.02873 10.777 8.80709 12.7141 10.0615L15.7718 7.00382L12.1888 7ZM7.87868 12.1406C9.05025 10.9691 10.9497 10.9691 12.1213 12.1406C13.2929 13.3122 13.2929 15.2117 12.1213 16.3833C10.9497 17.5549 9.05025 17.5549 7.87868 16.3833C6.70711 15.2117 6.70711 13.3122 7.87868 12.1406Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgGhostCharacter (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M10.9759 9C10.9759 9.55228 10.5282 10 9.97589 10C9.42361 10 8.97589 9.55228 8.97589 9C8.97589 8.44771 9.42361 8 9.97589 8C10.5282 8 10.9759 8.44771 10.9759 9Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M13.9712 10C14.5235 10 14.9712 9.55228 14.9712 9C14.9712 8.44771 14.5235 8 13.9712 8C13.4189 8 12.9712 8.44771 12.9712 9C12.9712 9.55228 13.4189 10 13.9712 10Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M19 20.9999V10C19 6.13401 15.866 3 12 3C8.13401 3 5 6.13401 5 10V21L7.82846 21L9.24264 19.5858L10.6569 21L13.3433 21L14.7574 19.5858L16.1717 21L19 20.9999ZM17 10C17 7.23858 14.7614 5 12 5C9.23858 5 7 7.23858 7 10V19L9.24264 16.7573L12 19.5147L14.7574 16.7573L17 18.9999V10Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgGhost (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M3 4H15V8H3V4Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M21 8H17V4H21V8Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M3 10H21V14H3V10Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M11 16H3V20H11V16Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M13 16V20H21V16H13Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgGift (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M17.5354 2.87868C16.3638 1.70711 14.4644 1.70711 13.2928 2.87868L11.8786 4.29289C11.8183 4.35317 11.7611 4.41538 11.707 4.47931C11.653 4.41539 11.5958 4.3532 11.5355 4.29293L10.1213 2.87871C8.94975 1.70714 7.05025 1.70714 5.87868 2.87871C4.70711 4.05029 4.70711 5.94978 5.87868 7.12136L6.75732 8H1V14H3V22H21V14H23V8H16.6567L17.5354 7.12132C18.707 5.94975 18.707 4.05025 17.5354 2.87868ZM14.707 7.12132L16.1212 5.70711C16.5117 5.31658 16.5117 4.68342 16.1212 4.29289C15.7307 3.90237 15.0975 3.90237 14.707 4.29289L13.2928 5.70711C12.9023 6.09763 12.9023 6.7308 13.2928 7.12132C13.6833 7.51184 14.3165 7.51184 14.707 7.12132ZM10.1213 5.70714L8.70711 4.29293C8.31658 3.9024 7.68342 3.9024 7.29289 4.29293C6.90237 4.68345 6.90237 5.31662 7.29289 5.70714L8.70711 7.12136C9.09763 7.51188 9.7308 7.51188 10.1213 7.12136C10.5118 6.73083 10.5118 6.09767 10.1213 5.70714ZM21 10V12H3V10H21ZM12.9167 14H19V20H12.9167V14ZM11.0834 14V20H5V14H11.0834Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgGirl (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M10 12C10 12.5523 9.55228 13 9 13C8.44772 13 8 12.5523 8 12C8 11.4477 8.44772 11 9 11C9.55228 11 10 11.4477 10 12Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M15 13C15.5523 13 16 12.5523 16 12C16 11.4477 15.5523 11 15 11C14.4477 11 14 11.4477 14 12C14 12.5523 14.4477 13 15 13Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M12.0244 2.00003L12 2C6.47715 2 2 6.47715 2 12C2 17.5228 6.47715 22 12 22C17.5228 22 22 17.5228 22 12C22 6.74235 17.9425 2.43237 12.788 2.03059L12.7886 2.0282C12.5329 2.00891 12.278 1.99961 12.0244 2.00003ZM12 20C16.4183 20 20 16.4183 20 12C20 11.3014 19.9105 10.6237 19.7422 9.97775C16.1597 10.2313 12.7359 8.52461 10.7605 5.60246C9.31322 7.07886 7.2982 7.99666 5.06879 8.00253C4.38902 9.17866 4 10.5439 4 12C4 16.4183 7.58172 20 12 20ZM11.9785 4.00003L12.0236 4.00003L12 4L11.9785 4.00003Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgGitBranch (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M9 3C7.89543 3 7 3.89543 7 5C7 5.74028 7.4022 6.38663 8 6.73244V17.2676C7.4022 17.6134 7 18.2597 7 19C7 20.1046 7.89543 21 9 21C9.74028 21 10.3866 20.5978 10.7324 20H11.9585C14.1676 20 15.9585 18.2091 15.9585 16V14.7324C16.5563 14.3866 16.9585 13.7403 16.9585 13C16.9585 11.8954 16.0631 11 14.9585 11C13.8539 11 12.9585 11.8954 12.9585 13C12.9585 13.7403 13.3607 14.3866 13.9585 14.7324V16C13.9585 17.1046 13.0631 18 11.9585 18H10.7324C10.5568 17.6964 10.3036 17.4432 10 17.2676V6.73244C10.5978 6.38663 11 5.74028 11 5C11 3.89543 10.1046 3 9 3Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgGitCommit (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M11 4C11 3.44772 11.4477 3 12 3C12.5523 3 13 3.44772 13 4V9.17071C14.1652 9.58254 15 10.6938 15 12C15 13.3062 14.1652 14.4175 13 14.8293V20C13 20.5523 12.5523 21 12 21C11.4477 21 11 20.5523 11 20V14.8293C9.83481 14.4175 9 13.3062 9 12C9 10.6938 9.83481 9.58254 11 9.17071V4ZM12 13C12.5523 13 13 12.5523 13 12C13 11.4477 12.5523 11 12 11C11.4477 11 11 11.4477 11 12C11 12.5523 11.4477 13 12 13Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgGitFork (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M7 5C7 3.89543 7.89543 3 9 3C10.1046 3 11 3.89543 11 5C11 5.74028 10.5978 6.38663 10 6.73244V14.0396H11.7915C12.8961 14.0396 13.7915 13.1441 13.7915 12.0396V10.7838C13.1823 10.4411 12.7708 9.78837 12.7708 9.03955C12.7708 7.93498 13.6662 7.03955 14.7708 7.03955C15.8753 7.03955 16.7708 7.93498 16.7708 9.03955C16.7708 9.77123 16.3778 10.4111 15.7915 10.7598V12.0396C15.7915 14.2487 14.0006 16.0396 11.7915 16.0396H10V17.2676C10.5978 17.6134 11 18.2597 11 19C11 20.1046 10.1046 21 9 21C7.89543 21 7 20.1046 7 19C7 18.2597 7.4022 17.6134 8 17.2676V6.73244C7.4022 6.38663 7 5.74028 7 5Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgGitPull (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M7 5C7 3.89543 7.89543 3 9 3C10.1046 3 11 3.89543 11 5C11 5.34168 10.9143 5.66336 10.7633 5.9447H11.3438C13.5529 5.9447 15.3438 7.73556 15.3438 9.9447V11.2244C15.9301 11.5731 16.323 12.213 16.323 12.9447C16.323 14.0493 15.4276 14.9447 14.323 14.9447C13.2184 14.9447 12.323 14.0493 12.323 12.9447C12.323 12.1959 12.7345 11.5432 13.3438 11.2004V9.9447C13.3438 8.84013 12.4483 7.9447 11.3438 7.9447H10V17.2676C10.5978 17.6134 11 18.2597 11 19C11 20.1046 10.1046 21 9 21C7.89543 21 7 20.1046 7 19C7 18.2597 7.4022 17.6134 8 17.2676V6.73244C7.4022 6.38663 7 5.74028 7 5Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgGitter (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M5 1.5H7V14.5H5V1.5Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M9 4.5H11V22.5H9V4.5Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M15 4.5H13V22.5H15V4.5Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M17 4.5H19V14.5H17V4.5Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgGlassAlt (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M5 2H19L17.3602 18.398C17.1557 20.4428 15.4351 22 13.38 22H10.62C8.56494 22 6.84428 20.4428 6.6398 18.398L5 2ZM7.50998 7L7.20998 4H16.79L16.49 7H7.50998ZM7.70998 9L8.62988 18.199C8.73212 19.2214 9.59245 20 10.62 20H13.38C14.4076 20 15.2679 19.2214 15.3701 18.199L16.29 9H7.70998Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgGlass (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M17 10C17 12.419 15.2822 14.4367 13 14.9V17H15V19H9V17H11V14.9C8.71776 14.4367 7 12.419 7 10V5H17V10ZM15 7H9V10C9 11.6569 10.3431 13 12 13C13.6569 13 15 11.6569 15 10V7Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgGlobeAlt (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M12 21C16.9706 21 21 16.9706 21 12C21 7.02944 16.9706 3 12 3C7.02944 3 3 7.02944 3 12C3 16.9706 7.02944 21 12 21ZM14.8055 18.4151C17.1228 17.4003 18.7847 15.1667 18.9806 12.525C18.1577 12.9738 17.12 13.3418 15.9371 13.598C15.7882 15.4676 15.3827 17.1371 14.8055 18.4151ZM9.1945 5.58487C7.24725 6.43766 5.76275 8.15106 5.22208 10.244C5.4537 10.4638 5.84813 10.7341 6.44832 11.0008C6.89715 11.2003 7.42053 11.3798 8.00537 11.5297C8.05853 9.20582 8.50349 7.11489 9.1945 5.58487ZM10.1006 13.9108C10.2573 15.3675 10.5852 16.6202 10.9992 17.5517C11.2932 18.2133 11.5916 18.6248 11.8218 18.8439C11.9037 18.9219 11.9629 18.9634 12 18.9848C12.0371 18.9634 12.0963 18.9219 12.1782 18.8439C12.4084 18.6248 12.7068 18.2133 13.0008 17.5517C13.4148 16.6202 13.7427 15.3675 13.8994 13.9108C13.2871 13.9692 12.6516 14 12 14C11.3484 14 10.7129 13.9692 10.1006 13.9108ZM8.06286 13.598C8.21176 15.4676 8.61729 17.1371 9.1945 18.4151C6.8772 17.4003 5.21525 15.1666 5.01939 12.525C5.84231 12.9738 6.88001 13.3418 8.06286 13.598ZM13.9997 11.8896C13.369 11.9609 12.6993 12 12 12C11.3008 12 10.631 11.9609 10.0003 11.8896C10.0135 9.66408 10.4229 7.74504 10.9992 6.44832C11.2932 5.78673 11.5916 5.37516 11.8218 5.15605C11.9037 5.07812 11.9629 5.03659 12 5.01516C12.0371 5.03659 12.0963 5.07812 12.1782 5.15605C12.4084 5.37516 12.7068 5.78673 13.0008 6.44832C13.5771 7.74504 13.9865 9.66408 13.9997 11.8896ZM15.9946 11.5297C15.9415 9.20582 15.4965 7.11489 14.8055 5.58487C16.7528 6.43766 18.2373 8.15107 18.7779 10.244C18.5463 10.4638 18.1519 10.7341 17.5517 11.0008C17.1029 11.2003 16.5795 11.3798 15.9946 11.5297Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgGlobe (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M6.85327 8C6.85327 5.23858 9.09185 3 11.8533 3C14.6147 3 16.8533 5.23858 16.8533 8C16.8533 10.7614 14.6147 13 11.8533 13C9.09185 13 6.85327 10.7614 6.85327 8ZM11.8533 11C10.1964 11 8.85327 9.65685 8.85327 8C8.85327 6.34315 10.1964 5 11.8533 5C13.5101 5 14.8533 6.34315 14.8533 8C14.8533 9.65685 13.5101 11 11.8533 11Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M5 12.1294C6.25216 14.2031 8.4189 15.6624 10.9414 15.9486V18H8.85327V20H14.8533V18H12.9414V15.9266C16.8449 15.3958 19.8532 12.0492 19.8532 8.00001C19.8532 6.43638 19.4046 4.97752 18.6291 3.74512L16.9253 4.79326C17.513 5.72084 17.8532 6.82069 17.8532 8.00001C17.8532 11.3137 15.167 14 11.8532 14C9.66611 14 7.75231 12.8298 6.70381 11.0813L5 12.1294Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgGoogleTasks (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M16.7679 5.71447C17.4779 4.86832 18.7394 4.75795 19.5856 5.46796C20.4317 6.17796 20.5421 7.43947 19.8321 8.28562L10.833 19.0102C10.123 19.8564 8.86153 19.9668 8.01538 19.2568C7.16923 18.5468 7.05886 17.2852 7.76886 16.4391L16.7679 5.71447Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M3 12.7396C3 11.6351 3.89543 10.7396 5 10.7396C6.10457 10.7396 7 11.6351 7 12.7396C7 13.8442 6.10457 14.7396 5 14.7396C3.89543 14.7396 3 13.8442 3 12.7396Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgGoogle (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M6 12C6 15.3137 8.68629 18 12 18C14.6124 18 16.8349 16.3304 17.6586 14H12V10H21.8047V14H21.8C20.8734 18.5645 16.8379 22 12 22C6.47715 22 2 17.5228 2 12C2 6.47715 6.47715 2 12 2C15.445 2 18.4831 3.742 20.2815 6.39318L17.0039 8.68815C15.9296 7.06812 14.0895 6 12 6C8.68629 6 6 8.68629 6 12Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgGym (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M20.2739 9.86883L16.8325 4.95392L18.4708 3.80676L21.9122 8.72167L20.2739 9.86883Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M18.3901 12.4086L16.6694 9.95121L8.47783 15.687L10.1985 18.1444L8.56023 19.2916L3.97162 12.7383L5.60992 11.5912L7.33068 14.0487L15.5222 8.31291L13.8015 5.8554L15.4398 4.70825L20.0284 11.2615L18.3901 12.4086Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M20.7651 7.08331L22.4034 5.93616L21.2562 4.29785L19.6179 5.445L20.7651 7.08331Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M7.16753 19.046L3.72607 14.131L2.08777 15.2782L5.52923 20.1931L7.16753 19.046Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M4.38208 18.5549L2.74377 19.702L1.59662 18.0637L3.23492 16.9166L4.38208 18.5549Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgHashtag (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M8 4V8H4V10H8V14H4V16H8V20H10V16H14V20H16V16H20V14H16V10H20V8H16V4H14V8H10V4H8ZM14 14V10H10V14H14Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgHeadset (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M17 21C15.8954 21 15 20.1046 15 19V15C15 13.8954 15.8954 13 17 13H19V12C19 8.13401 15.866 5 12 5C8.13401 5 5 8.13401 5 12V13H7C8.10457 13 9 13.8954 9 15V19C9 20.1046 8.10457 21 7 21H3V12C3 7.02944 7.02944 3 12 3C16.9706 3 21 7.02944 21 12V21H17ZM19 15H17V19H19V15ZM7 15H5V19H7V15Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgHeart (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M12.0122 5.57169L10.9252 4.48469C8.77734 2.33681 5.29493 2.33681 3.14705 4.48469C0.999162 6.63258 0.999162 10.115 3.14705 12.2629L11.9859 21.1017L11.9877 21.0999L12.014 21.1262L20.8528 12.2874C23.0007 10.1395 23.0007 6.65711 20.8528 4.50923C18.705 2.36134 15.2226 2.36134 13.0747 4.50923L12.0122 5.57169ZM11.9877 18.2715L16.9239 13.3352L18.3747 11.9342L18.3762 11.9356L19.4386 10.8732C20.8055 9.50635 20.8055 7.29028 19.4386 5.92344C18.0718 4.55661 15.8557 4.55661 14.4889 5.92344L12.0133 8.39904L12.006 8.3918L12.005 8.39287L9.51101 5.89891C8.14417 4.53207 5.92809 4.53207 4.56126 5.89891C3.19442 7.26574 3.19442 9.48182 4.56126 10.8487L7.10068 13.3881L7.10248 13.3863L11.9877 18.2715Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgHello (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M17.5 12C17.5 13.576 16.8371 14.9972 15.7749 16C14.7899 16.9299 13.4615 17.5 12 17.5C10.5385 17.5 9.21007 16.9299 8.22506 16C7.16289 14.9972 6.5 13.576 6.5 12H17.5Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M1 7C1 3.68629 3.68629 1 7 1H17C20.3137 1 23 3.68629 23 7V17C23 20.3137 20.3137 23 17 23H1V7ZM3.75 12C3.75 7.44365 7.44365 3.75 12 3.75C16.5563 3.75 20.25 7.44365 20.25 12C20.25 16.5563 16.5563 20.25 12 20.25C7.44365 20.25 3.75 16.5563 3.75 12Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgHomeAlt (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M6 22.8787C4.34315 22.8787 3 21.5355 3 19.8787V9.87866C3 9.84477 3.00169 9.81126 3.00498 9.77823H3C3 9.20227 3.2288 8.64989 3.63607 8.24262L9.87868 2.00002C11.0502 0.828445 12.9497 0.828445 14.1213 2.00002L20.3639 8.24264C20.7712 8.6499 21 9.20227 21 9.77823H20.995C20.9983 9.81126 21 9.84477 21 9.87866V19.8787C21 21.5355 19.6569 22.8787 18 22.8787H6ZM12.7071 3.41423L19 9.70713V19.8787C19 20.4309 18.5523 20.8787 18 20.8787H15V15.8787C15 14.2218 13.6569 12.8787 12 12.8787C10.3431 12.8787 9 14.2218 9 15.8787V20.8787H6C5.44772 20.8787 5 20.4309 5 19.8787V9.7072L11.2929 3.41423C11.6834 3.02371 12.3166 3.02371 12.7071 3.41423Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgHomeScreen (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M10 5C10 5.55228 9.55228 6 9 6C8.44771 6 8 5.55228 8 5C8 4.44772 8.44771 4 9 4C9.55228 4 10 4.44772 10 5Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M9 9C9.55228 9 10 8.55228 10 8C10 7.44772 9.55228 7 9 7C8.44771 7 8 7.44772 8 8C8 8.55228 8.44771 9 9 9Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M10 19C10 19.5523 9.55228 20 9 20C8.44771 20 8 19.5523 8 19C8 18.4477 8.44771 18 9 18C9.55228 18 10 18.4477 10 19Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M9 12C9.55228 12 10 11.5523 10 11C10 10.4477 9.55228 10 9 10C8.44771 10 8 10.4477 8 11C8 11.5523 8.44771 12 9 12Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M13 5C13 5.55228 12.5523 6 12 6C11.4477 6 11 5.55228 11 5C11 4.44772 11.4477 4 12 4C12.5523 4 13 4.44772 13 5Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M12 9C12.5523 9 13 8.55228 13 8C13 7.44772 12.5523 7 12 7C11.4477 7 11 7.44772 11 8C11 8.55228 11.4477 9 12 9Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M13 19C13 19.5523 12.5523 20 12 20C11.4477 20 11 19.5523 11 19C11 18.4477 11.4477 18 12 18C12.5523 18 13 18.4477 13 19Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M15 6C15.5523 6 16 5.55228 16 5C16 4.44772 15.5523 4 15 4C14.4477 4 14 4.44772 14 5C14 5.55228 14.4477 6 15 6Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M16 8C16 8.55228 15.5523 9 15 9C14.4477 9 14 8.55228 14 8C14 7.44772 14.4477 7 15 7C15.5523 7 16 7.44772 16 8Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M15 20C15.5523 20 16 19.5523 16 19C16 18.4477 15.5523 18 15 18C14.4477 18 14 18.4477 14 19C14 19.5523 14.4477 20 15 20Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M8 1C6.34315 1 5 2.34315 5 4V20C5 21.6569 6.34315 23 8 23H16C17.6569 23 19 21.6569 19 20V4C19 2.34315 17.6569 1 16 1H8ZM16 3H8C7.44771 3 7 3.44772 7 4V20C7 20.5523 7.44772 21 8 21H16C16.5523 21 17 20.5523 17 20V4C17 3.44772 16.5523 3 16 3Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgHome (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M21 8.77217L14.0208 1.79299C12.8492 0.621414 10.9497 0.621413 9.77817 1.79299L3 8.57116V23.0858H10V17.0858C10 15.9812 10.8954 15.0858 12 15.0858C13.1046 15.0858 14 15.9812 14 17.0858V23.0858H21V8.77217ZM11.1924 3.2072L5 9.39959V21.0858H8V17.0858C8 14.8767 9.79086 13.0858 12 13.0858C14.2091 13.0858 16 14.8767 16 17.0858V21.0858H19V9.6006L12.6066 3.2072C12.2161 2.81668 11.5829 2.81668 11.1924 3.2072Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgIcecream (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M15 17H19V8C19 4.13401 15.866 1 12 1C8.13401 1 5 4.13401 5 8V17H9V20C9 21.6569 10.3431 23 12 23C13.6569 23 15 21.6569 15 20V17ZM17 15V8C17 5.23858 14.7614 3 12 3C9.23858 3 7 5.23858 7 8V15H11V20C11 20.5523 11.4477 21 12 21C12.5523 21 13 20.5523 13 20V15H17Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgIfDesign (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M10 5H14V19H10V5Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M5 19V10H9V19H5Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M7 5C5.89543 5 5 5.89543 5 7C5 8.10457 5.89543 9 7 9C8.10457 9 9 8.10457 9 7C9 5.89543 8.10457 5 7 5Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M15 5H19V9H15V5Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M19 10H15V14H19V10Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgImage (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M7 7C5.34315 7 4 8.34315 4 10C4 11.6569 5.34315 13 7 13C8.65685 13 10 11.6569 10 10C10 8.34315 8.65685 7 7 7ZM6 10C6 9.44772 6.44772 9 7 9C7.55228 9 8 9.44772 8 10C8 10.5523 7.55228 11 7 11C6.44772 11 6 10.5523 6 10Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M3 3C1.34315 3 0 4.34315 0 6V18C0 19.6569 1.34315 21 3 21H21C22.6569 21 24 19.6569 24 18V6C24 4.34315 22.6569 3 21 3H3ZM21 5H3C2.44772 5 2 5.44772 2 6V18C2 18.5523 2.44772 19 3 19H7.31374L14.1924 12.1214C15.364 10.9498 17.2635 10.9498 18.435 12.1214L22 15.6863V6C22 5.44772 21.5523 5 21 5ZM21 19H10.1422L15.6066 13.5356C15.9971 13.145 16.6303 13.145 17.0208 13.5356L21.907 18.4217C21.7479 18.7633 21.4016 19 21 19Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgImport (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M5 9.98193V19.9819H19V9.98193H15V7.98193H21V21.9819H3V7.98193H9V9.98193H5Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M13.0001 2H11.0001V14.0531L8.46451 11.5175L7.05029 12.9317L12 17.8815L16.9498 12.9317L15.5356 11.5175L13.0001 14.053V2Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgInbox (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M2 5C2 3.34315 3.34315 2 5 2H19C20.6569 2 22 3.34315 22 5V20C22 21.1046 21.1046 22 20 22H8.1477C8.09893 22.0036 8.04968 22.0054 8 22.0054H4C2.89543 22.0054 2 21.1099 2 20.0054V5ZM5 4H19C19.5523 4 20 4.44771 20 5V14H16C14.8954 14 14 14.8954 14 16V17H10V16.0054C10 14.9008 9.10457 14.0054 8 14.0054H4V5C4 4.44772 4.44771 4 5 4Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgIndieHackers (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M4 6H7V18H4V6Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M10 6H13V10.5H17V6H20V18H17V13.5H13V18H10V6Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgInfinity (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M8.12132 9.87868L10.2044 11.9617L10.2106 11.9555L11.6631 13.408L11.6693 13.4142L13.7907 15.5355C15.7433 17.4882 18.9091 17.4882 20.8617 15.5355C22.8144 13.5829 22.8144 10.4171 20.8617 8.46447C18.9091 6.51184 15.7433 6.51184 13.7907 8.46447L13.0773 9.17786L14.4915 10.5921L15.2049 9.87868C16.3764 8.70711 18.2759 8.70711 19.4475 9.87868C20.6191 11.0503 20.6191 12.9497 19.4475 14.1213C18.2759 15.2929 16.3764 15.2929 15.2049 14.1213L13.1326 12.0491L13.1263 12.0554L9.53553 8.46447C7.58291 6.51184 4.41709 6.51184 2.46447 8.46447C0.511845 10.4171 0.511845 13.5829 2.46447 15.5355C4.41709 17.4882 7.58291 17.4882 9.53553 15.5355L10.2488 14.8222L8.83463 13.408L8.12132 14.1213C6.94975 15.2929 5.05025 15.2929 3.87868 14.1213C2.70711 12.9497 2.70711 11.0503 3.87868 9.87868C5.05025 8.70711 6.94975 8.70711 8.12132 9.87868Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgInfo (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M11 10.9794C11 10.4271 11.4477 9.97937 12 9.97937C12.5523 9.97937 13 10.4271 13 10.9794V16.9794C13 17.5317 12.5523 17.9794 12 17.9794C11.4477 17.9794 11 17.5317 11 16.9794V10.9794Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M12 6.05115C11.4477 6.05115 11 6.49886 11 7.05115C11 7.60343 11.4477 8.05115 12 8.05115C12.5523 8.05115 13 7.60343 13 7.05115C13 6.49886 12.5523 6.05115 12 6.05115Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M12 2C6.47715 2 2 6.47715 2 12C2 17.5228 6.47715 22 12 22C17.5228 22 22 17.5228 22 12C22 6.47715 17.5228 2 12 2ZM4 12C4 16.4183 7.58172 20 12 20C16.4183 20 20 16.4183 20 12C20 7.58172 16.4183 4 12 4C7.58172 4 4 7.58172 4 12Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgInpicture (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M20 12H14V17H20V12Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M1 6C1 4.89543 1.89543 4 3 4H21C22.1046 4 23 4.89543 23 6V18C23 19.1046 22.1046 20 21 20H3C1.89543 20 1 19.1046 1 18V6ZM3 6H21V18H3L3 6Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgInsertAfterO (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M9 8C8.44772 8 8 8.44772 8 9C8 9.55229 8.44772 10 9 10H11V12C11 12.5523 11.4477 13 12 13C12.5523 13 13 12.5523 13 12V10H15C15.5523 10 16 9.55229 16 9C16 8.44772 15.5523 8 15 8H13V6C13 5.44772 12.5523 5 12 5C11.4477 5 11 5.44772 11 6V8H9Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M4 9C4 4.58172 7.58172 1 12 1C16.4183 1 20 4.58172 20 9C20 13.4183 16.4183 17 12 17C7.58172 17 4 13.4183 4 9ZM12 15C8.68629 15 6 12.3137 6 9C6 5.68629 8.68629 3 12 3C15.3137 3 18 5.68629 18 9C18 12.3137 15.3137 15 12 15Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M5 20C4.44772 20 4 20.4477 4 21C4 21.5523 4.44772 22 5 22H19C19.5523 22 20 21.5523 20 21C20 20.4477 19.5523 20 19 20H5Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgInsertAfterR (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M9 8C8.44772 8 8 8.44772 8 9C8 9.55229 8.44772 10 9 10H11V12C11 12.5523 11.4477 13 12 13C12.5523 13 13 12.5523 13 12V10H15C15.5523 10 16 9.55229 16 9C16 8.44772 15.5523 8 15 8H13V6C13 5.44772 12.5523 5 12 5C11.4477 5 11 5.44772 11 6V8H9Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M4 4C4 2.34315 5.34315 1 7 1H17C18.6569 1 20 2.34315 20 4V14C20 15.6569 18.6569 17 17 17H7C5.34315 17 4 15.6569 4 14V4ZM7 3H17C17.5523 3 18 3.44772 18 4V14C18 14.5523 17.5523 15 17 15H7C6.44772 15 6 14.5523 6 14V4C6 3.44772 6.44772 3 7 3Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M5 20C4.44772 20 4 20.4477 4 21C4 21.5523 4.44772 22 5 22H19C19.5523 22 20 21.5523 20 21C20 20.4477 19.5523 20 19 20H5Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgInsertAfter (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 4C12.5523 4 13 4.44772 13 5V8H16C16.5523 8 17 8.44772 17 9C17 9.55228 16.5523 10 16 10H13V13C13 13.5523 12.5523 14 12 14C11.4477 14 11 13.5523 11 13V10H8C7.44772 10 7 9.55228 7 9C7 8.44772 7.44772 8 8 8H11V5C11 4.44772 11.4477 4 12 4Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M3 19C3 18.4477 3.44772 18 4 18H20C20.5523 18 21 18.4477 21 19C21 19.5523 20.5523 20 20 20H4C3.44772 20 3 19.5523 3 19Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgInsertBeforeO (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M5 3C4.44772 3 4 2.55228 4 2C4 1.44772 4.44772 1 5 1H19C19.5523 1 20 1.44772 20 2C20 2.55228 19.5523 3 19 3H5Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M9 15C8.44772 15 8 14.5523 8 14C8 13.4477 8.44772 13 9 13H11V11C11 10.4477 11.4477 10 12 10C12.5523 10 13 10.4477 13 11V13H15C15.5523 13 16 13.4477 16 14C16 14.5523 15.5523 15 15 15H13V17C13 17.5523 12.5523 18 12 18C11.4477 18 11 17.5523 11 17V15H9Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M4 14C4 18.4183 7.58172 22 12 22C16.4183 22 20 18.4183 20 14C20 9.58172 16.4183 6 12 6C7.58172 6 4 9.58172 4 14ZM12 8C8.68629 8 6 10.6863 6 14C6 17.3137 8.68629 20 12 20C15.3137 20 18 17.3137 18 14C18 10.6863 15.3137 8 12 8Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgInsertBeforeR (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M5 3C4.44772 3 4 2.55228 4 2C4 1.44772 4.44772 1 5 1H19C19.5523 1 20 1.44772 20 2C20 2.55228 19.5523 3 19 3H5Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M9 15C8.44772 15 8 14.5523 8 14C8 13.4477 8.44772 13 9 13H11V11C11 10.4477 11.4477 10 12 10C12.5523 10 13 10.4477 13 11V13H15C15.5523 13 16 13.4477 16 14C16 14.5523 15.5523 15 15 15H13V17C13 17.5523 12.5523 18 12 18C11.4477 18 11 17.5523 11 17V15H9Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M4 19C4 20.6569 5.34315 22 7 22H17C18.6569 22 20 20.6569 20 19V9C20 7.34315 18.6569 6 17 6H7C5.34315 6 4 7.34315 4 9V19ZM17 20C17.5523 20 18 19.5523 18 19V9C18 8.44772 17.5523 8 17 8H7C6.44772 8 6 8.44772 6 9V19C6 19.5523 6.44772 20 7 20H17Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgInsertBefore (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M3 5C3 5.55228 3.44772 6 4 6H20C20.5523 6 21 5.55228 21 5C21 4.44772 20.5523 4 20 4H4C3.44772 4 3 4.44772 3 5Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M12 20C12.5523 20 13 19.5523 13 19V16H16C16.5523 16 17 15.5523 17 15C17 14.4477 16.5523 14 16 14H13V11C13 10.4477 12.5523 10 12 10C11.4477 10 11 10.4477 11 11V14H8C7.44772 14 7 14.4477 7 15C7 15.5523 7.44772 16 8 16H11V19C11 19.5523 11.4477 20 12 20Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgInsights (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M15 8H19V20H5V10H9V4H15V8ZM13 6H11V18H13V6ZM15 10V18H17V10H15ZM9 12V18H7V12H9Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgInstagram (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M12 7C9.23858 7 7 9.23858 7 12C7 14.7614 9.23858 17 12 17C14.7614 17 17 14.7614 17 12C17 9.23858 14.7614 7 12 7ZM9 12C9 13.6569 10.3431 15 12 15C13.6569 15 15 13.6569 15 12C15 10.3431 13.6569 9 12 9C10.3431 9 9 10.3431 9 12Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M18 5C17.4477 5 17 5.44772 17 6C17 6.55228 17.4477 7 18 7C18.5523 7 19 6.55228 19 6C19 5.44772 18.5523 5 18 5Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M5 1C2.79086 1 1 2.79086 1 5V19C1 21.2091 2.79086 23 5 23H19C21.2091 23 23 21.2091 23 19V5C23 2.79086 21.2091 1 19 1H5ZM19 3H5C3.89543 3 3 3.89543 3 5V19C3 20.1046 3.89543 21 5 21H19C20.1046 21 21 20.1046 21 19V5C21 3.89543 20.1046 3 19 3Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgInternal (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M20.7084 4.41165L10.4586 14.6986H14.0488V16.6986H7.04883V9.69861H9.04883V13.2799L19.2916 3L20.7084 4.41165Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M11 4.70581V6.70581H5V18.7058H17V12.7058H19V20.7058H3V4.70581H11Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgKey (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M6 8C4.34315 8 3 9.34315 3 11V13C3 14.6569 4.34315 16 6 16C7.65685 16 9 14.6569 9 13H15V15H17V13H18V15H20V11H9C9 9.34315 7.65685 8 6 8ZM7 13V11C7 10.4477 6.55228 10 6 10C5.44772 10 5 10.4477 5 11V13C5 13.5523 5.44772 14 6 14C6.55228 14 7 13.5523 7 13Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgKeyboard (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M8 9C8.55228 9 9 8.55228 9 8C9 7.44772 8.55228 7 8 7C7.44772 7 7 7.44772 7 8C7 8.55228 7.44772 9 8 9Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M9 15C8.44772 15 8 15.4477 8 16C8 16.5523 8.44772 17 9 17H15C15.5523 17 16 16.5523 16 16C16 15.4477 15.5523 15 15 15H9Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M9 12C9 12.5523 8.55228 13 8 13C7.44772 13 7 12.5523 7 12C7 11.4477 7.44772 11 8 11C8.55228 11 9 11.4477 9 12Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M12 9C12.5523 9 13 8.55228 13 8C13 7.44772 12.5523 7 12 7C11.4477 7 11 7.44772 11 8C11 8.55228 11.4477 9 12 9Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M13 12C13 12.5523 12.5523 13 12 13C11.4477 13 11 12.5523 11 12C11 11.4477 11.4477 11 12 11C12.5523 11 13 11.4477 13 12Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M16 9C16.5523 9 17 8.55228 17 8C17 7.44772 16.5523 7 16 7C15.4477 7 15 7.44772 15 8C15 8.55228 15.4477 9 16 9Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M17 12C17 12.5523 16.5523 13 16 13C15.4477 13 15 12.5523 15 12C15 11.4477 15.4477 11 16 11C16.5523 11 17 11.4477 17 12Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M3 6C3 4.34315 4.34315 3 6 3H18C19.6569 3 21 4.34315 21 6V18C21 19.6569 19.6569 21 18 21H6C4.34315 21 3 19.6569 3 18V6ZM6 5H18C18.5523 5 19 5.44772 19 6V18C19 18.5523 18.5523 19 18 19H6C5.44772 19 5 18.5523 5 18V6C5 5.44772 5.44772 5 6 5Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgKeyhole (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M13 12.8293C14.1652 12.4175 15 11.3062 15 10C15 8.34315 13.6569 7 12 7C10.3431 7 9 8.34315 9 10C9 11.3062 9.83481 12.4175 11 12.8293V16C11 16.5523 11.4477 17 12 17C12.5523 17 13 16.5523 13 16V12.8293ZM11 10C11 10.5523 11.4477 11 12 11C12.5523 11 13 10.5523 13 10C13 9.44772 12.5523 9 12 9C11.4477 9 11 9.44772 11 10Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M12 2C6.47715 2 2 6.47715 2 12C2 17.5228 6.47715 22 12 22C17.5228 22 22 17.5228 22 12C22 6.47715 17.5228 2 12 2ZM4 12C4 16.4183 7.58172 20 12 20C16.4183 20 20 16.4183 20 12C20 7.58172 16.4183 4 12 4C7.58172 4 4 7.58172 4 12Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgLaptop (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M3 6C3 4.89543 3.89543 4 5 4H19C20.1046 4 21 4.89543 21 6V14C21 15.1046 20.1046 16 19 16H5C3.89543 16 3 15.1046 3 14V6ZM5 6H19V14H5V6Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M2 18C1.44772 18 1 18.4477 1 19C1 19.5523 1.44772 20 2 20H22C22.5523 20 23 19.5523 23 19C23 18.4477 22.5523 18 22 18H2Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgLastpass (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M21 6C20.4477 6 20 6.44771 20 7V17C20 17.5523 20.4477 18 21 18C21.5523 18 22 17.5523 22 17V7C22 6.44772 21.5523 6 21 6Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M4 14C5.10457 14 6 13.1046 6 12C6 10.8954 5.10457 10 4 10C2.89543 10 2 10.8954 2 12C2 13.1046 2.89543 14 4 14Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M12 12C12 13.1046 11.1046 14 10 14C8.89543 14 8 13.1046 8 12C8 10.8954 8.89543 10 10 10C11.1046 10 12 10.8954 12 12Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M16 14C17.1046 14 18 13.1046 18 12C18 10.8954 17.1046 10 16 10C14.8954 10 14 10.8954 14 12C14 13.1046 14.8954 14 16 14Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgLayoutGridSmall (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M7 7H9V9H7V7Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M11 7H13V9H11V7Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M17 7H15V9H17V7Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M7 11H9V13H7V11Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M13 11H11V13H13V11Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M15 11H17V13H15V11Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M9 15H7V17H9V15Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M11 15H13V17H11V15Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M17 15H15V17H17V15Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgLayoutGrid (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M11 7H7V11H11V7Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M11 13H7V17H11V13Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M13 13H17V17H13V13Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M17 7H13V11H17V7Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgLayoutList (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M9 7H7V9H9V7Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M7 13V11H9V13H7Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M7 15V17H9V15H7Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M11 15V17H17V15H11Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M17 13V11H11V13H17Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M17 7V9H11V7H17Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgLayoutPin (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M16.9307 4.01587H14.7655C14.3582 2.84239 13.2428 2 11.9307 2C10.6185 2 9.50313 2.84239 9.09581 4.01587H6.93066C5.27381 4.01587 3.93066 5.35901 3.93066 7.01587V9.21205C2.80183 9.64283 2 10.7357 2 12.0159C2 13.296 2.80183 14.3889 3.93066 14.8197V17.0159C3.93066 18.6727 5.27381 20.0159 6.93066 20.0159H9.08467C9.48247 21.2064 10.6064 22.0645 11.9307 22.0645C13.255 22.0645 14.3789 21.2064 14.7767 20.0159H16.9307C18.5875 20.0159 19.9307 18.6727 19.9307 17.0159V14.8446C21.095 14.4322 21.929 13.3214 21.929 12.0159C21.929 10.7103 21.095 9.5995 19.9307 9.18718V7.01587C19.9307 5.35901 18.5875 4.01587 16.9307 4.01587ZM5.93066 14.8687V17.0159C5.93066 17.5682 6.37838 18.0159 6.93066 18.0159H9.11902C9.54426 16.8761 10.6427 16.0645 11.9307 16.0645C13.2187 16.0645 14.3171 16.8761 14.7423 18.0159H16.9307C17.4829 18.0159 17.9307 17.5682 17.9307 17.0159V14.8458C16.7646 14.4344 15.929 13.3227 15.929 12.0159C15.929 10.709 16.7646 9.59732 17.9307 9.18597V7.01587C17.9307 6.46358 17.4829 6.01587 16.9307 6.01587H14.7543C14.338 7.17276 13.2309 8 11.9307 8C10.6304 8 9.52331 7.17276 9.10703 6.01587H6.93066C6.37838 6.01587 5.93066 6.46358 5.93066 7.01587V9.16302C7.13193 9.55465 8 10.6839 8 12.0159C8 13.3479 7.13193 14.4771 5.93066 14.8687Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgLinear (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M3.03509 12.9431C3.24245 14.9227 4.10472 16.8468 5.62188 18.364C7.13904 19.8811 9.0631 20.7434 11.0428 20.9508L3.03509 12.9431Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M3 11.4938L12.4921 20.9858C13.2976 20.9407 14.0981 20.7879 14.8704 20.5273L3.4585 9.11548C3.19793 9.88771 3.0451 10.6883 3 11.4938Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M3.86722 8.10999L15.8758 20.1186C16.4988 19.8201 17.0946 19.4458 17.6493 18.9956L4.99021 6.33659C4.54006 6.89125 4.16573 7.487 3.86722 8.10999Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M5.66301 5.59517C9.18091 2.12137 14.8488 2.135 18.3498 5.63604C21.8508 9.13708 21.8645 14.8049 18.3907 18.3228L5.66301 5.59517Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgLink (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M14.8284 12L16.2426 13.4142L19.071 10.5858C20.6331 9.02365 20.6331 6.49099 19.071 4.9289C17.509 3.3668 14.9763 3.3668 13.4142 4.9289L10.5858 7.75732L12 9.17154L14.8284 6.34311C15.6095 5.56206 16.8758 5.56206 17.6568 6.34311C18.4379 7.12416 18.4379 8.39049 17.6568 9.17154L14.8284 12Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M12 14.8285L13.4142 16.2427L10.5858 19.0711C9.02372 20.6332 6.49106 20.6332 4.92896 19.0711C3.36686 17.509 3.36686 14.9764 4.92896 13.4143L7.75739 10.5858L9.1716 12L6.34317 14.8285C5.56212 15.6095 5.56212 16.8758 6.34317 17.6569C7.12422 18.4379 8.39055 18.4379 9.1716 17.6569L12 14.8285Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M14.8285 10.5857C15.219 10.1952 15.219 9.56199 14.8285 9.17147C14.4379 8.78094 13.8048 8.78094 13.4142 9.17147L9.1716 13.4141C8.78107 13.8046 8.78107 14.4378 9.1716 14.8283C9.56212 15.2188 10.1953 15.2188 10.5858 14.8283L14.8285 10.5857Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgListTree (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M9 1H1V9H9V6H11V20H15V23H23V15H15V18H13V6H15V9H23V1H15V4H9V1ZM21 3H17V7H21V3ZM17 17H21V21H17V17Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgList (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M20 4H4C3.44771 4 3 4.44772 3 5V19C3 19.5523 3.44772 20 4 20H20C20.5523 20 21 19.5523 21 19V5C21 4.44771 20.5523 4 20 4ZM4 2C2.34315 2 1 3.34315 1 5V19C1 20.6569 2.34315 22 4 22H20C21.6569 22 23 20.6569 23 19V5C23 3.34315 21.6569 2 20 2H4ZM6 7H8V9H6V7ZM11 7C10.4477 7 10 7.44772 10 8C10 8.55228 10.4477 9 11 9H17C17.5523 9 18 8.55228 18 8C18 7.44772 17.5523 7 17 7H11ZM8 11H6V13H8V11ZM10 12C10 11.4477 10.4477 11 11 11H17C17.5523 11 18 11.4477 18 12C18 12.5523 17.5523 13 17 13H11C10.4477 13 10 12.5523 10 12ZM8 15H6V17H8V15ZM10 16C10 15.4477 10.4477 15 11 15H17C17.5523 15 18 15.4477 18 16C18 16.5523 17.5523 17 17 17H11C10.4477 17 10 16.5523 10 16Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgLivePhoto (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12.9805 21.9525C12.6579 21.9839 12.3308 22 12 22C11.6692 22 11.3421 21.9839 11.0194 21.9525L11.2132 19.9619C11.4715 19.9871 11.7339 20 12 20C12.2661 20 12.5285 19.9871 12.7868 19.9619L12.9805 21.9525Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M9.09617 21.5719L9.67608 19.6578C9.17124 19.5048 8.68725 19.3031 8.22951 19.058L7.28519 20.821C7.8578 21.1277 8.46374 21.3803 9.09617 21.5719Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M5.65597 19.7304L6.92562 18.1851C6.5202 17.852 6.14801 17.4798 5.81491 17.0744L4.2696 18.344C4.68539 18.8501 5.1499 19.3146 5.65597 19.7304Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M3.17901 16.7148L4.94204 15.7705C4.69686 15.3127 4.49516 14.8288 4.34221 14.3239L2.42813 14.9038C2.61974 15.5363 2.87231 16.1422 3.17901 16.7148Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M2.04746 12.9805L4.03806 12.7868C4.01292 12.5285 4 12.2661 4 12C4 11.7339 4.01292 11.4715 4.03806 11.2132L2.04746 11.0195C2.01607 11.3421 2 11.6692 2 12C2 12.3308 2.01607 12.6579 2.04746 12.9805Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M2.42813 9.09617L4.34221 9.67608C4.49517 9.17124 4.69686 8.68725 4.94204 8.22951L3.17901 7.28519C2.87231 7.8578 2.61974 8.46374 2.42813 9.09617Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M4.2696 5.65597L5.81491 6.92562C6.14801 6.5202 6.5202 6.14801 6.92562 5.81491L5.65597 4.2696C5.14991 4.68539 4.68539 5.1499 4.2696 5.65597Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M7.2852 3.17901L8.22951 4.94204C8.68726 4.69686 9.17124 4.49516 9.67608 4.34221L9.09617 2.42813C8.46374 2.61974 7.8578 2.87231 7.2852 3.17901Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M11.0195 2.04746C11.3421 2.01607 11.6692 2 12 2C12.3308 2 12.6579 2.01607 12.9805 2.04746L12.7868 4.03806C12.5285 4.01292 12.2661 4 12 4C11.7339 4 11.4715 4.01292 11.2132 4.03806L11.0195 2.04746Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M14.9038 2.42813L14.3239 4.34221C14.8288 4.49517 15.3127 4.69686 15.7705 4.94204L16.7148 3.17901C16.1422 2.87231 15.5363 2.61974 14.9038 2.42813Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M18.344 4.2696L17.0744 5.81491C17.4798 6.14801 17.852 6.5202 18.1851 6.92562L19.7304 5.65597C19.3146 5.14991 18.8501 4.68539 18.344 4.2696Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M20.821 7.2852L19.058 8.22951C19.3031 8.68726 19.5048 9.17124 19.6578 9.67608L21.5719 9.09617C21.3803 8.46374 21.1277 7.8578 20.821 7.2852Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M21.9525 11.0195L19.9619 11.2132C19.9871 11.4715 20 11.7339 20 12C20 12.2661 19.9871 12.5285 19.9619 12.7868L21.9525 12.9806C21.9839 12.6579 22 12.3308 22 12C22 11.6692 21.9839 11.3421 21.9525 11.0195Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M21.5719 14.9038L19.6578 14.3239C19.5048 14.8288 19.3031 15.3127 19.058 15.7705L20.821 16.7148C21.1277 16.1422 21.3803 15.5363 21.5719 14.9038Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M19.7304 18.344L18.1851 17.0744C17.852 17.4798 17.4798 17.852 17.0744 18.1851L18.344 19.7304C18.8501 19.3146 19.3146 18.8501 19.7304 18.344Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M16.7148 20.821L15.7705 19.058C15.3127 19.3031 14.8288 19.5048 14.3239 19.6578L14.9038 21.5719C15.5363 21.3803 16.1422 21.1277 16.7148 20.821Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M9 12C9 10.3431 10.3431 9 12 9C13.6569 9 15 10.3431 15 12C15 13.6569 13.6569 15 12 15C10.3431 15 9 13.6569 9 12ZM12 13C11.4477 13 11 12.5523 11 12C11 11.4477 11.4477 11 12 11C12.5523 11 13 11.4477 13 12C13 12.5523 12.5523 13 12 13Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M12 6C8.68629 6 6 8.68629 6 12C6 15.3137 8.68629 18 12 18C15.3137 18 18 15.3137 18 12C18 8.68629 15.3137 6 12 6ZM8 12C8 14.2091 9.79086 16 12 16C14.2091 16 16 14.2091 16 12C16 9.79086 14.2091 8 12 8C9.79086 8 8 9.79086 8 12Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgLoadbarAlt (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"rect\",\"attr\":{\"opacity\":\"0.3\",\"x\":\"3\",\"y\":\"10\",\"width\":\"18\",\"height\":\"4\",\"rx\":\"2\",\"fill\":\"currentColor\"}},{\"tag\":\"rect\",\"attr\":{\"x\":\"7\",\"y\":\"10\",\"width\":\"10\",\"height\":\"4\",\"rx\":\"2\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgLoadbarDoc (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M17 5H7C6.44772 5 6 5.44772 6 6V18C6 18.5523 6.44772 19 7 19H17C17.5523 19 18 18.5523 18 18V6C18 5.44772 17.5523 5 17 5ZM7 3C5.34315 3 4 4.34315 4 6V18C4 19.6569 5.34315 21 7 21H17C18.6569 21 20 19.6569 20 18V6C20 4.34315 18.6569 3 17 3H7Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M8 7H16V9H8V7Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M8 11H16V13H8V11Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M8 15H13V17H8V15Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgLoadbarSound (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M11 6H13V18H11V6Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M7 13H9V18H7V13Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M15 9H17V18H15V9Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgLoadbar (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"rect\",\"attr\":{\"x\":\"3\",\"y\":\"10\",\"width\":\"18\",\"height\":\"4\",\"rx\":\"2\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgLockUnlock (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M19 7H17C17 4.79086 15.2091 3 13 3C10.7909 3 9 4.79086 9 7V10H18C19.6569 10 21 11.3431 21 13V19C21 20.6569 19.6569 22 18 22H6C4.34315 22 3 20.6569 3 19V13C3 11.3431 4.34315 10 6 10H7V7C7 3.68629 9.68629 1 13 1C16.3137 1 19 3.68629 19 7ZM18 12H6C5.44772 12 5 12.4477 5 13V19C5 19.5523 5.44772 20 6 20H18C18.5523 20 19 19.5523 19 19V13C19 12.4477 18.5523 12 18 12Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgLock (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M18 10.5C19.6569 10.5 21 11.8431 21 13.5V19.5C21 21.1569 19.6569 22.5 18 22.5H6C4.34315 22.5 3 21.1569 3 19.5V13.5C3 11.8431 4.34315 10.5 6 10.5V7.5C6 4.18629 8.68629 1.5 12 1.5C15.3137 1.5 18 4.18629 18 7.5V10.5ZM12 3.5C14.2091 3.5 16 5.29086 16 7.5V10.5H8V7.5C8 5.29086 9.79086 3.5 12 3.5ZM18 12.5H6C5.44772 12.5 5 12.9477 5 13.5V19.5C5 20.0523 5.44772 20.5 6 20.5H18C18.5523 20.5 19 20.0523 19 19.5V13.5C19 12.9477 18.5523 12.5 18 12.5Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgLogIn (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M15.4857 20H19.4857C20.5903 20 21.4857 19.1046 21.4857 18V6C21.4857 4.89543 20.5903 4 19.4857 4H15.4857V6H19.4857V18H15.4857V20Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M10.1582 17.385L8.73801 15.9768L12.6572 12.0242L3.51428 12.0242C2.96199 12.0242 2.51428 11.5765 2.51428 11.0242C2.51429 10.4719 2.962 10.0242 3.51429 10.0242L12.6765 10.0242L8.69599 6.0774L10.1042 4.6572L16.4951 10.9941L10.1582 17.385Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgLogOff (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M13 4.00894C13.0002 3.45665 12.5527 3.00876 12.0004 3.00854C11.4481 3.00833 11.0002 3.45587 11 4.00815L10.9968 12.0116C10.9966 12.5639 11.4442 13.0118 11.9965 13.012C12.5487 13.0122 12.9966 12.5647 12.9968 12.0124L13 4.00894Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M4 12.9917C4 10.7826 4.89541 8.7826 6.34308 7.33488L7.7573 8.7491C6.67155 9.83488 6 11.3349 6 12.9917C6 16.3054 8.68629 18.9917 12 18.9917C15.3137 18.9917 18 16.3054 18 12.9917C18 11.3348 17.3284 9.83482 16.2426 8.74903L17.6568 7.33481C19.1046 8.78253 20 10.7825 20 12.9917C20 17.41 16.4183 20.9917 12 20.9917C7.58172 20.9917 4 17.41 4 12.9917Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgLogOut (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M8.51428 20H4.51428C3.40971 20 2.51428 19.1046 2.51428 18V6C2.51428 4.89543 3.40971 4 4.51428 4H8.51428V6H4.51428V18H8.51428V20Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M13.8418 17.385L15.262 15.9768L11.3428 12.0242L20.4857 12.0242C21.038 12.0242 21.4857 11.5765 21.4857 11.0242C21.4857 10.4719 21.038 10.0242 20.4857 10.0242L11.3236 10.0242L15.304 6.0774L13.8958 4.6572L7.5049 10.9941L13.8418 17.385Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgLoupe (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M11 11V8H13V11H16V13H13V16H11V13H8V11H11Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M3 12C3 16.9706 7.02944 21 12 21H18C19.6569 21 21 19.6569 21 18V12C21 7.02944 16.9706 3 12 3C7.02944 3 3 7.02944 3 12ZM12 5C15.866 5 19 8.13401 19 12C19 15.866 15.866 19 12 19C8.13401 19 5 15.866 5 12C5 8.13401 8.13401 5 12 5Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgMagnet (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M8 2.5H4V5.5H8V2.5Z\",\"fill\":\"currentColor\",\"fillOpacity\":\"0.5\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M20 2.5H16V5.5H20V2.5Z\",\"fill\":\"currentColor\",\"fillOpacity\":\"0.5\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M8 7.5H4V13.5C4 17.9183 7.58172 21.5 12 21.5C16.4183 21.5 20 17.9183 20 13.5V7.5H16V13.5C16 15.7091 14.2091 17.5 12 17.5C9.79086 17.5 8 15.7091 8 13.5V7.5Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgMailForward (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M13.6378 15.529L15.052 16.9432L20.0018 11.9934L15.052 7.0437L13.6378 8.45791L16.1363 10.9564H7.99823C5.78909 10.9564 3.99823 12.7472 3.99823 14.9564V16.9564H5.99823V14.9564C5.99823 13.8518 6.89366 12.9564 7.99823 12.9564H16.2104L13.6378 15.529Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgMailOpen (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M3.05002 10.0151C2.79178 9.30708 2.94668 8.48233 3.51474 7.91427L9.8787 1.55031C11.0503 0.378738 12.9498 0.378738 14.1213 1.55031L20.4853 7.91427C21.0534 8.48239 21.2083 9.30727 20.9499 10.0154C20.9824 10.1139 20.9999 10.2191 20.9999 10.3285V21.3285C20.9999 22.4331 20.1045 23.3285 18.9999 23.3285H4.99994C3.89537 23.3285 2.99994 22.4331 2.99994 21.3285V10.3285C2.99994 10.219 3.01752 10.1137 3.05002 10.0151ZM4.92896 9.32848L11.2929 2.96452C11.6834 2.574 12.3166 2.574 12.7071 2.96452L19.0711 9.32848H19.0408V9.3588L12.7071 15.6924C12.3166 16.083 11.6834 16.083 11.2929 15.6924L4.92896 9.32848ZM18.9999 12.2281L14.1213 17.1067C12.9498 18.2782 11.0503 18.2782 9.8787 17.1067L4.99994 12.2279L4.99994 21.3285H18.9999V12.2281Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgMailReply (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M10.3623 15.529L8.94804 16.9432L3.99829 11.9934L8.94804 7.0437L10.3623 8.45791L7.86379 10.9564H16.0018C18.2109 10.9564 20.0018 12.7472 20.0018 14.9564V16.9564H18.0018V14.9564C18.0018 13.8518 17.1063 12.9564 16.0018 12.9564H7.78965L10.3623 15.529Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgMail (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M3.00977 5.83789C3.00977 5.28561 3.45748 4.83789 4.00977 4.83789H20C20.5523 4.83789 21 5.28561 21 5.83789V17.1621C21 18.2667 20.1046 19.1621 19 19.1621H5C3.89543 19.1621 3 18.2667 3 17.1621V6.16211C3 6.11449 3.00333 6.06765 3.00977 6.0218V5.83789ZM5 8.06165V17.1621H19V8.06199L14.1215 12.9405C12.9499 14.1121 11.0504 14.1121 9.87885 12.9405L5 8.06165ZM6.57232 6.80554H17.428L12.7073 11.5263C12.3168 11.9168 11.6836 11.9168 11.2931 11.5263L6.57232 6.80554Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgMathDivide (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M14 7C14 8.10457 13.1046 9 12 9C10.8954 9 10 8.10457 10 7C10 5.89543 10.8954 5 12 5C13.1046 5 14 5.89543 14 7Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M3 12C3 11.4477 3.44772 11 4 11H20C20.5523 11 21 11.4477 21 12C21 12.5523 20.5523 13 20 13H4C3.44772 13 3 12.5523 3 12Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M12 19C13.1046 19 14 18.1046 14 17C14 15.8954 13.1046 15 12 15C10.8954 15 10 15.8954 10 17C10 18.1046 10.8954 19 12 19Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgMathEqual (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M5 9C4.44772 9 4 9.44771 4 10C4 10.5523 4.44772 11 5 11H19C19.5523 11 20 10.5523 20 10C20 9.44771 19.5523 9 19 9H5Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M5 13C4.44772 13 4 13.4477 4 14C4 14.5523 4.44772 15 5 15H19C19.5523 15 20 14.5523 20 14C20 13.4477 19.5523 13 19 13H5Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgMathMinus (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M4 12C4 11.4477 4.44772 11 5 11H19C19.5523 11 20 11.4477 20 12C20 12.5523 19.5523 13 19 13H5C4.44772 13 4 12.5523 4 12Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgMathPercent (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M16.2426 6.34319C16.6331 5.95266 17.2663 5.95266 17.6568 6.34319C18.0474 6.73371 18.0474 7.36688 17.6568 7.7574L7.75734 17.6569C7.36681 18.0474 6.73365 18.0474 6.34313 17.6569C5.9526 17.2664 5.9526 16.6332 6.34313 16.2427L16.2426 6.34319Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M9.87866 9.87872C9.09761 10.6598 7.83128 10.6598 7.05023 9.87872C6.26918 9.09767 6.26918 7.83134 7.05023 7.05029C7.83128 6.26924 9.09761 6.26924 9.87866 7.05029C10.6597 7.83134 10.6597 9.09767 9.87866 9.87872Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M14.1213 16.9498C14.9023 17.7308 16.1687 17.7308 16.9497 16.9498C17.7308 16.1687 17.7308 14.9024 16.9497 14.1214C16.1687 13.3403 14.9023 13.3403 14.1213 14.1214C13.3403 14.9024 13.3403 16.1687 14.1213 16.9498Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgMathPlus (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 4C11.4477 4 11 4.44772 11 5V11H5C4.44772 11 4 11.4477 4 12C4 12.5523 4.44772 13 5 13H11V19C11 19.5523 11.4477 20 12 20C12.5523 20 13 19.5523 13 19V13H19C19.5523 13 20 12.5523 20 12C20 11.4477 19.5523 11 19 11H13V5C13 4.44772 12.5523 4 12 4Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgMaximizeAlt (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M3 3H9V5H6.46173L11.3047 9.84298L9.8905 11.2572L5 6.3667V9H3V3Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M3 21H9V19H6.3764L11.3046 14.0718L9.89038 12.6576L5 17.548V15H3V21Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M15 21H21V15H19V17.5244L14.1332 12.6576L12.719 14.0718L17.6472 19H15V21Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M21 3H15V5H17.5619L12.7189 9.84301L14.1331 11.2572L19 6.39032V9H21V3Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgMaximize (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M3 3H9V5H5V9H3V3Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M3 21H9V19H5V15H3V21Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M15 21H21V15H19V19H15V21Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M21 3H15V5H19V9H21V3Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgMaze (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M11.3709 9.59273L8.77816 7L1 14.7782L3.59272 17.3709L11.3709 9.59273Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M15.2218 7L23 14.7782L20.424 17.3542L15.2218 12.152L10.0197 17.3542L7.44367 14.7782L15.2218 7Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgMediaLive (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M15 12C15 13.6569 13.6569 15 12 15C10.3431 15 9 13.6569 9 12C9 10.3431 10.3431 9 12 9C13.6569 9 15 10.3431 15 12ZM13 12C13 12.5523 12.5523 13 12 13C11.4477 13 11 12.5523 11 12C11 11.4477 11.4477 11 12 11C12.5523 11 13 11.4477 13 12Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M12 19C15.866 19 19 15.866 19 12C19 8.13401 15.866 5 12 5C8.13401 5 5 8.13401 5 12C5 15.866 8.13401 19 12 19ZM12 17C14.7614 17 17 14.7614 17 12C17 9.23858 14.7614 7 12 7C9.23858 7 7 9.23858 7 12C7 14.7614 9.23858 17 12 17Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M12 23C18.0751 23 23 18.0751 23 12C23 5.92487 18.0751 1 12 1C5.92487 1 1 5.92487 1 12C1 18.0751 5.92487 23 12 23ZM12 21C16.9706 21 21 16.9706 21 12C21 7.02944 16.9706 3 12 3C7.02944 3 3 7.02944 3 12C3 16.9706 7.02944 21 12 21Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgMediaPodcast (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M5.6361 20.364C4.00738 18.7353 3 16.4853 3 14C3 9.02944 7.02944 5 12 5C16.9706 5 21 9.02944 21 14C21 16.4853 19.9926 18.7353 18.364 20.3639L19.7782 21.7782C21.7688 19.7875 23 17.0376 23 14C23 7.92487 18.0751 3 12 3C5.92487 3 1 7.92487 1 14C1 17.0376 2.23124 19.7876 4.22189 21.7782L5.6361 20.364Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M16.9498 18.9497C18.2165 17.683 19 15.933 19 14C19 10.134 15.866 7 12 7C8.13401 7 5 10.134 5 14C5 15.933 5.78353 17.6831 7.05031 18.9498L8.46453 17.5356C7.55967 16.6308 7 15.3807 7 14C7 11.2386 9.23858 9 12 9C14.7614 9 17 11.2386 17 14C17 15.3807 16.4404 16.6307 15.5356 17.5355L16.9498 18.9497Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M14.1213 16.1213C14.6642 15.5784 15 14.8284 15 14C15 12.3431 13.6569 11 12 11C10.3431 11 9 12.3431 9 14C9 14.8285 9.33581 15.5785 9.87874 16.1214L11.293 14.7072C11.112 14.5262 11 14.2762 11 14C11 13.4477 11.4477 13 12 13C12.5523 13 13 13.4477 13 14C13 14.2761 12.8881 14.5261 12.7071 14.7071L14.1213 16.1213Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgMenuBoxed (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M8.01562 6.98193C7.46334 6.98193 7.01562 7.43285 7.01562 7.98513C7.01562 8.53742 7.46334 8.98833 8.01563 8.98833H15.9659C16.5182 8.98833 16.9659 8.53742 16.9659 7.98513C16.9659 7.43285 16.5182 6.98193 15.9659 6.98193H8.01562Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M7.01562 12C7.01562 11.4477 7.46334 10.9968 8.01562 10.9968H15.9659C16.5182 10.9968 16.9659 11.4477 16.9659 12C16.9659 12.5523 16.5182 13.0032 15.9659 13.0032H8.01563C7.46334 13.0032 7.01562 12.5523 7.01562 12Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M8.0249 15.0122C7.47262 15.0122 7.0249 15.4631 7.0249 16.0154C7.0249 16.5677 7.47262 17.0186 8.0249 17.0186H15.9752C16.5275 17.0186 16.9752 16.5677 16.9752 16.0154C16.9752 15.4631 16.5275 15.0122 15.9752 15.0122H8.0249Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M3 6C3 4.34315 4.34315 3 6 3H18C19.6569 3 21 4.34315 21 6V18C21 19.6569 19.6569 21 18 21H6C4.34315 21 3 19.6569 3 18V6ZM6 5H18C18.5523 5 19 5.44772 19 6V18C19 18.5523 18.5523 19 18 19H6C5.44772 19 5 18.5523 5 18V6C5 5.44772 5.44772 5 6 5Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgMenuCake (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 8C13.1046 8 14 7.10457 14 6C14 4.89543 13.1046 4 12 4C10.8954 4 10 4.89543 10 6C10 7.10457 10.8954 8 12 8Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M5 10C4.44772 10 4 10.4477 4 11C4 11.5523 4.44772 12 5 12H19C19.5523 12 20 11.5523 20 11C20 10.4477 19.5523 10 19 10H5Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M4 15C4 14.4477 4.44772 14 5 14H19C19.5523 14 20 14.4477 20 15C20 15.5523 19.5523 16 19 16H5C4.44772 16 4 15.5523 4 15Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M5 18C4.44772 18 4 18.4477 4 19C4 19.5523 4.44772 20 5 20H19C19.5523 20 20 19.5523 20 19C20 18.4477 19.5523 18 19 18H5Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgMenuCheese (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M3 6C3 5.44772 3.44772 5 4 5H20C20.5523 5 21 5.44772 21 6C21 6.55228 20.5523 7 20 7H4C3.44772 7 3 6.55228 3 6Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M3 18C3 17.4477 3.44772 17 4 17H20C20.5523 17 21 17.4477 21 18C21 18.5523 20.5523 19 20 19H4C3.44772 19 3 18.5523 3 18Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M3 12C3 11.4477 3.44772 11 4 11H20C20.5523 11 21 11.4477 21 12C21 12.5523 20.5523 13 20 13H10.2625L7.61456 15.6479L4.96662 13H4C3.44772 13 3 12.5523 3 12Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgMenuGridO (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M8 6C8 7.10457 7.10457 8 6 8C4.89543 8 4 7.10457 4 6C4 4.89543 4.89543 4 6 4C7.10457 4 8 4.89543 8 6Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M8 12C8 13.1046 7.10457 14 6 14C4.89543 14 4 13.1046 4 12C4 10.8954 4.89543 10 6 10C7.10457 10 8 10.8954 8 12Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M6 20C7.10457 20 8 19.1046 8 18C8 16.8954 7.10457 16 6 16C4.89543 16 4 16.8954 4 18C4 19.1046 4.89543 20 6 20Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M14 6C14 7.10457 13.1046 8 12 8C10.8954 8 10 7.10457 10 6C10 4.89543 10.8954 4 12 4C13.1046 4 14 4.89543 14 6Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M12 14C13.1046 14 14 13.1046 14 12C14 10.8954 13.1046 10 12 10C10.8954 10 10 10.8954 10 12C10 13.1046 10.8954 14 12 14Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M14 18C14 19.1046 13.1046 20 12 20C10.8954 20 10 19.1046 10 18C10 16.8954 10.8954 16 12 16C13.1046 16 14 16.8954 14 18Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M18 8C19.1046 8 20 7.10457 20 6C20 4.89543 19.1046 4 18 4C16.8954 4 16 4.89543 16 6C16 7.10457 16.8954 8 18 8Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M20 12C20 13.1046 19.1046 14 18 14C16.8954 14 16 13.1046 16 12C16 10.8954 16.8954 10 18 10C19.1046 10 20 10.8954 20 12Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M18 20C19.1046 20 20 19.1046 20 18C20 16.8954 19.1046 16 18 16C16.8954 16 16 16.8954 16 18C16 19.1046 16.8954 20 18 20Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgMenuGridR (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M4 4H8V8H4V4Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M4 10H8V14H4V10Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M8 16H4V20H8V16Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M10 4H14V8H10V4Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M14 10H10V14H14V10Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M10 16H14V20H10V16Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M20 4H16V8H20V4Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M16 10H20V14H16V10Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M20 16H16V20H20V16Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgMenuHotdog (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M7 6C5.34315 6 4 7.34315 4 9H20C20 7.34315 18.6569 6 17 6H7Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M7 18C5.34315 18 4 16.6569 4 15H20C20 16.6569 18.6569 18 17 18H7Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M3 11C2.44772 11 2 11.4477 2 12C2 12.5523 2.44772 13 3 13H21C21.5523 13 22 12.5523 22 12C22 11.4477 21.5523 11 21 11H3Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgMenuLeftAlt (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M4 6C4 5.44772 4.44772 5 5 5H19C19.5523 5 20 5.44772 20 6C20 6.55228 19.5523 7 19 7H5C4.44772 7 4 6.55228 4 6Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M4 18C4 17.4477 4.44772 17 5 17H19C19.5523 17 20 17.4477 20 18C20 18.5523 19.5523 19 19 19H5C4.44772 19 4 18.5523 4 18Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M5 11C4.44772 11 4 11.4477 4 12C4 12.5523 4.44772 13 5 13H13C13.5523 13 14 12.5523 14 12C14 11.4477 13.5523 11 13 11H5Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgMenuLeft (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M2 5.99519C2 5.44556 2.44556 5 2.99519 5H11.0048C11.5544 5 12 5.44556 12 5.99519C12 6.54482 11.5544 6.99039 11.0048 6.99039H2.99519C2.44556 6.99039 2 6.54482 2 5.99519Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M2 11.9998C2 11.4501 2.44556 11.0046 2.99519 11.0046H21.0048C21.5544 11.0046 22 11.4501 22 11.9998C22 12.5494 21.5544 12.9949 21.0048 12.9949H2.99519C2.44556 12.9949 2 12.5494 2 11.9998Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M2.99519 17.0096C2.44556 17.0096 2 17.4552 2 18.0048C2 18.5544 2.44556 19 2.99519 19H15.0048C15.5544 19 16 18.5544 16 18.0048C16 17.4552 15.5544 17.0096 15.0048 17.0096H2.99519Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgMenuMotion (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 5C11.4477 5 11 5.44772 11 6C11 6.55228 11.4477 7 12 7H20C20.5523 7 21 6.55228 21 6C21 5.44772 20.5523 5 20 5H12Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M7 12C7 11.4477 7.44772 11 8 11H16C16.5523 11 17 11.4477 17 12C17 12.5523 16.5523 13 16 13H8C7.44772 13 7 12.5523 7 12Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M3 18C3 17.4477 3.44772 17 4 17H12C12.5523 17 13 17.4477 13 18C13 18.5523 12.5523 19 12 19H4C3.44772 19 3 18.5523 3 18Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgMenuOreos (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M7 3C5.34315 3 4 4.34315 4 6H20C20 4.34315 18.6569 3 17 3H7Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M7 11C5.34315 11 4 9.65685 4 8H20C20 9.65685 18.6569 11 17 11H7Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M7 13C5.34315 13 4 14.3431 4 16H20C20 14.3431 18.6569 13 17 13H7Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M7 21C5.34315 21 4 19.6569 4 18H20C20 19.6569 18.6569 21 17 21H7Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgMenuRightAlt (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M4 6C4 5.44772 4.44772 5 5 5H19C19.5523 5 20 5.44772 20 6C20 6.55228 19.5523 7 19 7H5C4.44772 7 4 6.55228 4 6Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M4 18C4 17.4477 4.44772 17 5 17H19C19.5523 17 20 17.4477 20 18C20 18.5523 19.5523 19 19 19H5C4.44772 19 4 18.5523 4 18Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M11 11C10.4477 11 10 11.4477 10 12C10 12.5523 10.4477 13 11 13H19C19.5523 13 20 12.5523 20 12C20 11.4477 19.5523 11 19 11H11Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgMenuRight (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M22 18.0048C22 18.5544 21.5544 19 21.0048 19H12.9952C12.4456 19 12 18.5544 12 18.0048C12 17.4552 12.4456 17.0096 12.9952 17.0096H21.0048C21.5544 17.0096 22 17.4552 22 18.0048Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M22 12.0002C22 12.5499 21.5544 12.9954 21.0048 12.9954H2.99519C2.44556 12.9954 2 12.5499 2 12.0002C2 11.4506 2.44556 11.0051 2.99519 11.0051H21.0048C21.5544 11.0051 22 11.4506 22 12.0002Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M21.0048 6.99039C21.5544 6.99039 22 6.54482 22 5.99519C22 5.44556 21.5544 5 21.0048 5H8.99519C8.44556 5 8 5.44556 8 5.99519C8 6.54482 8.44556 6.99039 8.99519 6.99039H21.0048Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgMenuRound (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M8 6.9834C7.44772 6.9834 7 7.43111 7 7.9834C7 8.53568 7.44772 8.9834 8 8.9834H16C16.5523 8.9834 17 8.53568 17 7.9834C17 7.43111 16.5523 6.9834 16 6.9834H8Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M7 12C7 11.4477 7.44772 11 8 11H16C16.5523 11 17 11.4477 17 12C17 12.5523 16.5523 13 16 13H8C7.44772 13 7 12.5523 7 12Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M8 15.017C7.44772 15.017 7 15.4647 7 16.017C7 16.5693 7.44772 17.017 8 17.017H16C16.5523 17.017 17 16.5693 17 16.017C17 15.4647 16.5523 15.017 16 15.017H8Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M22 12C22 17.5228 17.5228 22 12 22C6.47715 22 2 17.5228 2 12C2 6.47715 6.47715 2 12 2C17.5228 2 22 6.47715 22 12ZM20 12C20 16.4183 16.4183 20 12 20C7.58172 20 4 16.4183 4 12C4 7.58172 7.58172 4 12 4C16.4183 4 20 7.58172 20 12Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgMenu (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M2 6C2 5.44772 2.44772 5 3 5H21C21.5523 5 22 5.44772 22 6C22 6.55228 21.5523 7 21 7H3C2.44772 7 2 6.55228 2 6Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M2 12.0322C2 11.4799 2.44772 11.0322 3 11.0322H21C21.5523 11.0322 22 11.4799 22 12.0322C22 12.5845 21.5523 13.0322 21 13.0322H3C2.44772 13.0322 2 12.5845 2 12.0322Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M3 17.0645C2.44772 17.0645 2 17.5122 2 18.0645C2 18.6167 2.44772 19.0645 3 19.0645H21C21.5523 19.0645 22 18.6167 22 18.0645C22 17.5122 21.5523 17.0645 21 17.0645H3Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgMergeHorizontal (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 8.9757L16.2426 4.73306L14.8284 3.31885L12 6.14727L9.17157 3.31885L7.75736 4.73306L12 8.9757Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M5 11.9998C5 11.4475 5.44772 10.9997 6 10.9997H18C18.5523 10.9997 19 11.4475 19 11.9998C19 12.552 18.5523 12.9998 18 12.9998H6C5.44772 12.9998 5 12.552 5 11.9998Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M12 15.0242L7.75736 19.2668L9.17157 20.681L12 17.8526L14.8284 20.681L16.2426 19.2668L12 15.0242Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgMergeVertical (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M8.97576 12L4.73312 7.75736L3.31891 9.17157L6.14734 12L3.31891 14.8284L4.73312 16.2426L8.97576 12Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M11.9998 19C11.4475 19 10.9998 18.5523 10.9998 18V6C10.9998 5.44772 11.4475 5 11.9998 5C12.5521 5 12.9998 5.44772 12.9998 6V18C12.9998 18.5523 12.5521 19 11.9998 19Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M15.0242 12L19.2669 16.2426L20.6811 14.8284L17.8527 12L20.6811 9.17157L19.2669 7.75736L15.0242 12Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgMic (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M9 4C9 2.34315 10.3431 1 12 1C13.6569 1 15 2.34315 15 4V12C15 13.6569 13.6569 15 12 15C10.3431 15 9 13.6569 9 12V4ZM13 4V12C13 12.5523 12.5523 13 12 13C11.4477 13 11 12.5523 11 12V4C11 3.44772 11.4477 3 12 3C12.5523 3 13 3.44772 13 4Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M18 12C18 14.973 15.8377 17.441 13 17.917V21H17V23H7V21H11V17.917C8.16229 17.441 6 14.973 6 12V9H8V12C8 14.2091 9.79086 16 12 16C14.2091 16 16 14.2091 16 12V9H18V12Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgMicrobit (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M7 14C8.10457 14 9 13.1046 9 12C9 10.8954 8.10457 10 7 10C5.89543 10 5 10.8954 5 12C5 13.1046 5.89543 14 7 14Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M19 12C19 13.1046 18.1046 14 17 14C15.8954 14 15 13.1046 15 12C15 10.8954 15.8954 10 17 10C18.1046 10 19 10.8954 19 12Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M7 5C3.13401 5 0 8.13401 0 12C0 15.866 3.13401 19 7 19H17C20.866 19 24 15.866 24 12C24 8.13401 20.866 5 17 5H7ZM17 8H7C4.79086 8 3 9.79086 3 12C3 14.2091 4.79086 16 7 16H17C19.2091 16 21 14.2091 21 12C21 9.79086 19.2091 8 17 8Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgMicrosoft (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M3 3H11V11H3V3Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M3 13H11V21H3V13Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M13 3H21V11H13V3Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M13 13H21V21H13V13Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgMiniPlayer (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M3 6C3 4.34315 4.34315 3 6 3H18C19.6569 3 21 4.34315 21 6V18C21 19.6569 19.6569 21 18 21H6C4.34315 21 3 19.6569 3 18V6ZM6 5H18C18.5523 5 19 5.44772 19 6V12.2676C18.7058 12.0974 18.3643 12 18 12H14C12.8954 12 12 12.8954 12 14V18C12 18.3643 12.0974 18.7058 12.2676 19H6C5.44772 19 5 18.5523 5 18V6C5 5.44772 5.44772 5 6 5Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgMinimizeAlt (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M20.0735 2L21.4877 3.41421L15.6378 9.26416H18.1824V11.2642H12.1824V5.26416H14.1824V7.89111L20.0735 2Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M11.1824 12.2642V18.2642H9.1824V15.8422L3.41421 21.6104L2 20.1962L7.93203 14.2642H5.1824V12.2642H11.1824Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgMinimize (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M9 9H3V7H7V3H9V9Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M9 15H3V17H7V21H9V15Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M21 15H15V21H17V17H21V15Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M15 9.00012H21V7.00012H17V3.00012H15V9.00012Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgModem (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M18 16.6341C18 17.1864 17.5523 17.6341 17 17.6341C16.4477 17.6341 16 17.1864 16 16.6341C16 16.0819 16.4477 15.6341 17 15.6341C17.5523 15.6341 18 16.0819 18 16.6341Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M5.86603 3.13414C5.38773 2.858 4.77614 3.02187 4.5 3.50017C4.22386 3.97846 4.38773 4.59005 4.86603 4.86619L18.3205 12.6341H2V16.6341C2 18.8433 3.79086 20.6341 6 20.6341H18C20.2091 20.6341 22 18.8433 22 16.6341V12.6341L5.86603 3.13414ZM20 14.6341H4V16.6341C4 17.7387 4.89543 18.6341 6 18.6341H18C19.1046 18.6341 20 17.7387 20 16.6341V14.6341Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgMonday (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M6.77857 6.13915C7.7289 4.78193 9.59953 4.45209 10.9568 5.40242C12.314 6.35275 12.6438 8.22339 11.6935 9.58061L5.95771 17.7721C5.00738 19.1293 3.13674 19.4592 1.77953 18.5089C0.422312 17.5585 0.0924684 15.6879 1.0428 14.3307L6.77857 6.13915Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M15.2678 6.22811C16.2182 4.8709 18.0888 4.54105 19.446 5.49138C20.8032 6.44172 21.1331 8.31235 20.1827 9.66957L14.447 17.8611C13.4966 19.2183 11.626 19.5481 10.2688 18.5978C8.91158 17.6475 8.58173 15.7768 9.53207 14.4196L15.2678 6.22811Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M20.5 18.8596C22.1569 18.8596 23.5 17.5165 23.5 15.8596C23.5 14.2028 22.1569 12.8596 20.5 12.8596C18.8431 12.8596 17.5 14.2028 17.5 15.8596C17.5 17.5165 18.8431 18.8596 20.5 18.8596Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgMoon (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M12.2256 2.00253C9.59172 1.94346 6.93894 2.9189 4.92893 4.92891C1.02369 8.83415 1.02369 15.1658 4.92893 19.071C8.83418 22.9763 15.1658 22.9763 19.0711 19.071C21.0811 17.061 22.0565 14.4082 21.9975 11.7743C21.9796 10.9772 21.8669 10.1818 21.6595 9.40643C21.0933 9.9488 20.5078 10.4276 19.9163 10.8425C18.5649 11.7906 17.1826 12.4053 15.9301 12.6837C14.0241 13.1072 12.7156 12.7156 12 12C11.2844 11.2844 10.8928 9.97588 11.3163 8.0699C11.5947 6.81738 12.2094 5.43511 13.1575 4.08368C13.5724 3.49221 14.0512 2.90664 14.5935 2.34046C13.8182 2.13305 13.0228 2.02041 12.2256 2.00253ZM17.6569 17.6568C18.9081 16.4056 19.6582 14.8431 19.9072 13.2186C16.3611 15.2643 12.638 15.4664 10.5858 13.4142C8.53361 11.362 8.73568 7.63895 10.7814 4.09281C9.1569 4.34184 7.59434 5.09193 6.34315 6.34313C3.21895 9.46732 3.21895 14.5326 6.34315 17.6568C9.46734 20.781 14.5327 20.781 17.6569 17.6568Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgMoreAlt (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M8 12C8 13.1046 7.10457 14 6 14C4.89543 14 4 13.1046 4 12C4 10.8954 4.89543 10 6 10C7.10457 10 8 10.8954 8 12Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M14 12C14 13.1046 13.1046 14 12 14C10.8954 14 10 13.1046 10 12C10 10.8954 10.8954 10 12 10C13.1046 10 14 10.8954 14 12Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M18 14C19.1046 14 20 13.1046 20 12C20 10.8954 19.1046 10 18 10C16.8954 10 16 10.8954 16 12C16 13.1046 16.8954 14 18 14Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgMoreO (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M7 14C8.10457 14 9 13.1046 9 12C9 10.8954 8.10457 10 7 10C5.89543 10 5 10.8954 5 12C5 13.1046 5.89543 14 7 14Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M14 12C14 13.1046 13.1046 14 12 14C10.8954 14 10 13.1046 10 12C10 10.8954 10.8954 10 12 10C13.1046 10 14 10.8954 14 12Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M17 14C18.1046 14 19 13.1046 19 12C19 10.8954 18.1046 10 17 10C15.8954 10 15 10.8954 15 12C15 13.1046 15.8954 14 17 14Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M24 12C24 18.6274 18.6274 24 12 24C5.37258 24 0 18.6274 0 12C0 5.37258 5.37258 0 12 0C18.6274 0 24 5.37258 24 12ZM22 12C22 17.5228 17.5228 22 12 22C6.47715 22 2 17.5228 2 12C2 6.47715 6.47715 2 12 2C17.5228 2 22 6.47715 22 12Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgMoreR (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M7 14C8.10457 14 9 13.1046 9 12C9 10.8954 8.10457 10 7 10C5.89543 10 5 10.8954 5 12C5 13.1046 5.89543 14 7 14Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M14 12C14 13.1046 13.1046 14 12 14C10.8954 14 10 13.1046 10 12C10 10.8954 10.8954 10 12 10C13.1046 10 14 10.8954 14 12Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M17 14C18.1046 14 19 13.1046 19 12C19 10.8954 18.1046 10 17 10C15.8954 10 15 10.8954 15 12C15 13.1046 15.8954 14 17 14Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M0 5C0 3.34315 1.34315 2 3 2H21C22.6569 2 24 3.34315 24 5V19C24 20.6569 22.6569 22 21 22H3C1.34315 22 0 20.6569 0 19V5ZM3 4H21C21.5523 4 22 4.44772 22 5V19C22 19.5523 21.5523 20 21 20H3C2.44772 20 2 19.5523 2 19V5C2 4.44772 2.44771 4 3 4Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgMoreVerticalAlt (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M14 6C14 7.10457 13.1046 8 12 8C10.8954 8 10 7.10457 10 6C10 4.89543 10.8954 4 12 4C13.1046 4 14 4.89543 14 6Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M14 12C14 13.1046 13.1046 14 12 14C10.8954 14 10 13.1046 10 12C10 10.8954 10.8954 10 12 10C13.1046 10 14 10.8954 14 12Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M14 18C14 19.1046 13.1046 20 12 20C10.8954 20 10 19.1046 10 18C10 16.8954 10.8954 16 12 16C13.1046 16 14 16.8954 14 18Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgMoreVerticalO (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 9C13.1046 9 14 8.10457 14 7C14 5.89543 13.1046 5 12 5C10.8954 5 10 5.89543 10 7C10 8.10457 10.8954 9 12 9Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M14 12C14 13.1046 13.1046 14 12 14C10.8954 14 10 13.1046 10 12C10 10.8954 10.8954 10 12 10C13.1046 10 14 10.8954 14 12Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M12 19C13.1046 19 14 18.1046 14 17C14 15.8954 13.1046 15 12 15C10.8954 15 10 15.8954 10 17C10 18.1046 10.8954 19 12 19Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M24 12C24 18.6274 18.6274 24 12 24C5.37258 24 0 18.6274 0 12C0 5.37258 5.37258 0 12 0C18.6274 0 24 5.37258 24 12ZM22 12C22 17.5228 17.5228 22 12 22C6.47715 22 2 17.5228 2 12C2 6.47715 6.47715 2 12 2C17.5228 2 22 6.47715 22 12Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgMoreVerticalR (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 9C13.1046 9 14 8.10457 14 7C14 5.89543 13.1046 5 12 5C10.8954 5 10 5.89543 10 7C10 8.10457 10.8954 9 12 9Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M14 12C14 13.1046 13.1046 14 12 14C10.8954 14 10 13.1046 10 12C10 10.8954 10.8954 10 12 10C13.1046 10 14 10.8954 14 12Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M12 19C13.1046 19 14 18.1046 14 17C14 15.8954 13.1046 15 12 15C10.8954 15 10 15.8954 10 17C10 18.1046 10.8954 19 12 19Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M2 3C2 1.34315 3.34315 0 5 0H19C20.6569 0 22 1.34315 22 3V21C22 22.6569 20.6569 24 19 24H5C3.34315 24 2 22.6569 2 21V3ZM5 2H19C19.5523 2 20 2.44771 20 3V21C20 21.5523 19.5523 22 19 22H5C4.44772 22 4 21.5523 4 21V3C4 2.44772 4.44772 2 5 2Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgMoreVertical (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M12 5C12.5523 5 13 4.55228 13 4C13 3.44772 12.5523 3 12 3C11.4477 3 11 3.44772 11 4C11 4.55228 11.4477 5 12 5ZM12 13C12.5523 13 13 12.5523 13 12C13 11.4477 12.5523 11 12 11C11.4477 11 11 11.4477 11 12C11 12.5523 11.4477 13 12 13ZM12 21C12.5523 21 13 20.5523 13 20C13 19.4477 12.5523 19 12 19C11.4477 19 11 19.4477 11 20C11 20.5523 11.4477 21 12 21ZM15 4C15 5.65685 13.6569 7 12 7C10.3431 7 9 5.65685 9 4C9 2.34315 10.3431 1 12 1C13.6569 1 15 2.34315 15 4ZM15 12C15 13.6569 13.6569 15 12 15C10.3431 15 9 13.6569 9 12C9 10.3431 10.3431 9 12 9C13.6569 9 15 10.3431 15 12ZM12 23C13.6569 23 15 21.6569 15 20C15 18.3431 13.6569 17 12 17C10.3431 17 9 18.3431 9 20C9 21.6569 10.3431 23 12 23Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgMore (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M5 15C6.65685 15 8 13.6569 8 12C8 10.3431 6.65685 9 5 9C3.34315 9 2 10.3431 2 12C2 13.6569 3.34315 15 5 15ZM5 13C5.55228 13 6 12.5523 6 12C6 11.4477 5.55228 11 5 11C4.44772 11 4 11.4477 4 12C4 12.5523 4.44772 13 5 13Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M12 15C13.6569 15 15 13.6569 15 12C15 10.3431 13.6569 9 12 9C10.3431 9 9 10.3431 9 12C9 13.6569 10.3431 15 12 15ZM12 13C12.5523 13 13 12.5523 13 12C13 11.4477 12.5523 11 12 11C11.4477 11 11 11.4477 11 12C11 12.5523 11.4477 13 12 13Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M22 12C22 13.6569 20.6569 15 19 15C17.3431 15 16 13.6569 16 12C16 10.3431 17.3431 9 19 9C20.6569 9 22 10.3431 22 12ZM20 12C20 12.5523 19.5523 13 19 13C18.4477 13 18 12.5523 18 12C18 11.4477 18.4477 11 19 11C19.5523 11 20 11.4477 20 12Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgMouse (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 5C11.4477 5 11 5.44772 11 6V10C11 10.5523 11.4477 11 12 11C12.5523 11 13 10.5523 13 10V6C13 5.44772 12.5523 5 12 5Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M4 8C4 3.58172 7.58172 0 12 0C16.4183 0 20 3.58172 20 8V16C20 20.4183 16.4183 24 12 24C7.58172 24 4 20.4183 4 16V8ZM18 8V16C18 19.3137 15.3137 22 12 22C8.68629 22 6 19.3137 6 16V8C6 4.68629 8.68629 2 12 2C15.3137 2 18 4.68629 18 8Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgMoveDown (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M7 5H9V13H7V5Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M15 5H17V13H15V5Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M11.0001 5H13.0001V14.9999H16.0355L12.0356 19.071L8.03564 14.9999H11.0001V5Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgMoveLeft (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M19.071 17V15H11.071V17H19.071Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M19.071 9V7H11.071V9H19.071Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M19.071 12.9999V10.9999H9.07109V7.96454L5 11.9644L9.07109 15.9644V12.9999H19.071Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgMoveRight (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M5 17V15H13V17H5Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M5 9V7H13V9H5Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M5 12.9999V10.9999H14.9999V7.96454L19.071 11.9644L14.9999 15.9644V12.9999H5Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgMoveTask (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M18.9641 7H10.9641V9H18.9641V7Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M6 8.82864V15.1714L9.9642 12L6 8.82864Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M18.9641 11H10.9641V13H18.9641V11Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M10.9641 15H18.9641V17H10.9641V15Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgMoveUp (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M17 19.071H15V11.071H17V19.071Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M9 19.071H7V11.071H9V19.071Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M12.9999 19.071H10.9999V9.07109H7.96454L11.9644 5L15.9644 9.07109H12.9999V19.071Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgMusicNote (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M12 8.95439L17.6352 7.82736C19.0102 7.55235 20 6.34501 20 4.94274C20 3.08637 18.3017 1.69406 16.4813 2.05813L12.4117 2.87206C11.0094 3.15252 10 4.38376 10 5.8138V13.8895C9.41165 13.5492 8.72857 13.3544 8 13.3544C5.79086 13.3544 4 15.1453 4 17.3544C4 19.5635 5.79086 21.3544 8 21.3544C10.2091 21.3544 12 19.5635 12 17.3544V8.95439ZM16.8736 4.01929L12.8039 4.83322C12.3365 4.92671 12 5.33712 12 5.8138V6.91479L17.2429 5.8662C17.6831 5.77816 18 5.39165 18 4.94274C18 4.34846 17.4563 3.90274 16.8736 4.01929ZM10 17.3544C10 16.2498 9.10457 15.3544 8 15.3544C6.89543 15.3544 6 16.2498 6 17.3544C6 18.459 6.89543 19.3544 8 19.3544C9.10457 19.3544 10 18.459 10 17.3544Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgMusicSpeaker (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M12 18.939C14.2091 18.939 16 17.1482 16 14.939C16 12.7299 14.2091 10.939 12 10.939C9.79086 10.939 8 12.7299 8 14.939C8 17.1482 9.79086 18.939 12 18.939ZM12 16.939C13.1046 16.939 14 16.0436 14 14.939C14 13.8345 13.1046 12.939 12 12.939C10.8954 12.939 10 13.8345 10 14.939C10 16.0436 10.8954 16.939 12 16.939Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M12 9.04401C13.1046 9.04401 14 8.14858 14 7.04401C14 5.93944 13.1046 5.04401 12 5.04401C10.8954 5.04401 10 5.93944 10 7.04401C10 8.14858 10.8954 9.04401 12 9.04401Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M7 1C5.34315 1 4 2.34315 4 4V20C4 21.6569 5.34315 23 7 23H17C18.6569 23 20 21.6569 20 20V4C20 2.34315 18.6569 1 17 1H7ZM17 3H7C6.44772 3 6 3.44772 6 4V20C6 20.5523 6.44772 21 7 21H17C17.5523 21 18 20.5523 18 20V4C18 3.44772 17.5523 3 17 3Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgMusic (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M22 6.00086C22 3.54932 19.8148 1.6746 17.3918 2.04737L10.3918 3.1243C8.44044 3.4245 7 5.1035 7 7.07778V15.8407C6.54537 15.6248 6.0368 15.5039 5.5 15.5039C3.567 15.5039 2 17.0709 2 19.0039C2 20.9369 3.567 22.5039 5.5 22.5039C7.43296 22.5039 8.99994 20.937 9 19.004V7.07778C9 6.09064 9.72022 5.25114 10.6959 5.10104L17.6959 4.02412C18.9074 3.83773 20 4.77509 20 6.00086V12.8407C19.5454 12.6248 19.0368 12.5039 18.5 12.5039C16.567 12.5039 15 14.0709 15 16.0039C15 17.9369 16.567 19.5039 18.5 19.5039C20.433 19.5039 21.9999 17.937 22 16.004V6.00086ZM20 16.0039C20 15.1755 19.3284 14.5039 18.5 14.5039C17.6716 14.5039 17 15.1755 17 16.0039C17 16.8323 17.6716 17.5039 18.5 17.5039C19.3284 17.5039 19.9999 16.8323 20 16.0039ZM7 19.0039C7 18.1755 6.32843 17.5039 5.5 17.5039C4.67157 17.5039 4 18.1755 4 19.0039C4 19.8323 4.67157 20.5039 5.5 20.5039C6.32839 20.5039 6.99994 19.8323 7 19.0039Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgNametag (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M4 14V20H10V18H6V14H4Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M9 9V15H15V9H9ZM13 11H11V13H13V11Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M4 10V4H10V6H6V10H4Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M20 10V4H14V6H18V10H20Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M20 14V20H14V18H18V14H20Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgNotes (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M6 6C6 5.44772 6.44772 5 7 5H17C17.5523 5 18 5.44772 18 6C18 6.55228 17.5523 7 17 7H7C6.44771 7 6 6.55228 6 6Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M6 10C6 9.44771 6.44772 9 7 9H17C17.5523 9 18 9.44771 18 10C18 10.5523 17.5523 11 17 11H7C6.44771 11 6 10.5523 6 10Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M7 13C6.44772 13 6 13.4477 6 14C6 14.5523 6.44771 15 7 15H17C17.5523 15 18 14.5523 18 14C18 13.4477 17.5523 13 17 13H7Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M6 18C6 17.4477 6.44772 17 7 17H11C11.5523 17 12 17.4477 12 18C12 18.5523 11.5523 19 11 19H7C6.44772 19 6 18.5523 6 18Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M2 4C2 2.34315 3.34315 1 5 1H19C20.6569 1 22 2.34315 22 4V20C22 21.6569 20.6569 23 19 23H5C3.34315 23 2 21.6569 2 20V4ZM5 3H19C19.5523 3 20 3.44771 20 4V20C20 20.5523 19.5523 21 19 21H5C4.44772 21 4 20.5523 4 20V4C4 3.44772 4.44771 3 5 3Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgNotifications (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M20 7C20 8.65685 18.6569 10 17 10C15.3431 10 14 8.65685 14 7C14 5.34315 15.3431 4 17 4C18.6569 4 20 5.34315 20 7Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M12 6H4V20H18V12H16V18H6V8H12V6Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgNpm (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M5 21C3.89543 21 3 20.1046 3 19V5C3 3.89543 3.89543 3 5 3H19C20.1046 3 21 3.89543 21 5V19C21 20.1046 20.1046 21 19 21H5ZM6 18V6H18V18H15V9H12V18H6Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgOculus (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M16 10H8C6.89543 10 6 10.8954 6 12C6 13.1046 6.89543 14 8 14H16C17.1046 14 18 13.1046 18 12C18 10.8954 17.1046 10 16 10ZM8 6C4.68629 6 2 8.68629 2 12C2 15.3137 4.68629 18 8 18H16C19.3137 18 22 15.3137 22 12C22 8.68629 19.3137 6 16 6H8Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgOpenCollective (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M16.6818 15.7529L18.8116 17.8827C20.1752 16.3052 21 14.249 21 12.0001C21 9.78747 20.2016 7.76133 18.8771 6.19409L16.7444 8.32671C17.5315 9.34177 18 10.6162 18 12.0001C18 13.4203 17.5066 14.7253 16.6818 15.7529Z\",\"fill\":\"currentColor\",\"fillOpacity\":\"0.5\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M15.6734 16.7445C14.6583 17.5315 13.3839 18 12 18C8.68629 18 6 15.3137 6 12C6 8.68629 8.68629 6 12 6C13.4202 6 14.7252 6.49344 15.7528 7.31823L17.8826 5.18843C16.3051 3.82482 14.2489 3 12 3C7.02944 3 3 7.02944 3 12C3 16.9706 7.02944 21 12 21C14.2126 21 16.2387 20.2016 17.806 18.8771L15.6734 16.7445Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgOptions (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M7 3C8.86384 3 10.4299 4.27477 10.874 6H19V8H10.874C10.4299 9.72523 8.86384 11 7 11C4.79086 11 3 9.20914 3 7C3 4.79086 4.79086 3 7 3ZM7 9C8.10457 9 9 8.10457 9 7C9 5.89543 8.10457 5 7 5C5.89543 5 5 5.89543 5 7C5 8.10457 5.89543 9 7 9Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M17 20C15.1362 20 13.5701 18.7252 13.126 17H5V15H13.126C13.5701 13.2748 15.1362 12 17 12C19.2091 12 21 13.7909 21 16C21 18.2091 19.2091 20 17 20ZM17 18C18.1046 18 19 17.1046 19 16C19 14.8954 18.1046 14 17 14C15.8954 14 15 14.8954 15 16C15 17.1046 15.8954 18 17 18Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgOrganisation (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M17 15H19V17H17V15Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M19 11H17V13H19V11Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M13 7H23V21H1V3H13V7ZM8 5H11V7H8V5ZM11 19V17H8V19H11ZM11 15V13H8V15H11ZM11 11V9H8V11H11ZM21 19V9H13V11H15V13H13V15H15V17H13V19H21ZM3 19V17H6V19H3ZM3 15H6V13H3V15ZM6 11V9H3V11H6ZM3 7H6V5H3V7Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgOverflow (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"opacity\":\"0.2\",\"d\":\"M22 11C22 13.6522 20.9464 16.1957 19.0711 18.0711C17.1957 19.9464 14.6522 21 12 21C9.34784 21 6.8043 19.9464 4.92893 18.0711C3.05357 16.1957 2 13.6522 2 11L22 11Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"opacity\":\"0.3\",\"d\":\"M20 11C20 13.1217 19.1571 15.1566 17.6569 16.6569C16.1566 18.1571 14.1217 19 12 19C9.87827 19 7.84344 18.1571 6.34315 16.6569C4.84286 15.1566 4 13.1217 4 11L20 11Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M20 11C20 8.87827 19.1571 6.84344 17.6569 5.34315C16.1566 3.84285 14.1217 3 12 3C9.87827 3 7.84344 3.84285 6.34315 5.34315C4.84286 6.84344 4 8.87827 4 11L20 11Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgPacman (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M14.0636 8C14.6159 8 15.0636 7.55228 15.0636 7C15.0636 6.44772 14.6159 6 14.0636 6C13.5113 6 13.0636 6.44772 13.0636 7C13.0636 7.55228 13.5113 8 14.0636 8Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M13 3C15.1523 3 17.1281 3.7555 18.6768 5.01576L20.124 6.46299L18.8288 7.75818L18.828 7.75738L14.5854 12L18.2236 15.6383L18.2224 15.6396L20.1273 17.5445L18.7144 18.9575L18.7122 18.9553C17.1583 20.2329 15.1687 21 13 21C8.02944 21 4 16.9706 4 12C4 7.02944 8.02944 3 13 3ZM11.7569 12L17.2893 17.5323C16.1044 18.4523 14.6162 19 13 19C9.13401 19 6 15.866 6 12C6 8.13401 9.13401 5 13 5C14.6162 5 16.1045 5.54772 17.2893 6.46768L11.7569 12Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgPassword (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M6 12C6 12.5523 5.55228 13 5 13C4.44772 13 4 12.5523 4 12C4 11.4477 4.44772 11 5 11C5.55228 11 6 11.4477 6 12Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M9 13C9.55228 13 10 12.5523 10 12C10 11.4477 9.55228 11 9 11C8.44771 11 8 11.4477 8 12C8 12.5523 8.44771 13 9 13Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M14 12C14 12.5523 13.5523 13 13 13C12.4477 13 12 12.5523 12 12C12 11.4477 12.4477 11 13 11C13.5523 11 14 11.4477 14 12Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M20 11H16V13H20V11Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M2 6C0.895431 6 0 6.89543 0 8V16C0 17.1046 0.89543 18 2 18H22C23.1046 18 24 17.1046 24 16V8C24 6.89543 23.1046 6 22 6H2ZM22 8H2L2 16H22V8Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgPathBack (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M9 14H4V4H14V9H19V19H9V14ZM6 6H12V12H6V6Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgPathCrop (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"rect\",\"attr\":{\"opacity\":\"0.5\",\"x\":\"6\",\"y\":\"6\",\"width\":\"8\",\"height\":\"8\",\"stroke\":\"currentColor\",\"strokeWidth\":\"2\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M9 9H19V19H9V9ZM15 11H17V17H11V15H15V11Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgPathDivide (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M5 5H15V9H9V15H5V5Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M9 15V19H19V9H15V15H9Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M10 10H14V14H10V10Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgPathExclude (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M5 5H15V9H9V15H5V5ZM9 15V19H19V9H15V15H9Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgPathFront (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M5 5H15V9H19V19H9V15H5V5ZM11 11V17H17V11H11Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgPathIntersect (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M15 5H5V15H9V19H19V9H15V5ZM13 7H7V13H9V9H13V7ZM17 17H11V15H15V11H17V17Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgPathOutline (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M5 5H15V9H19V19H9V15H5V5ZM7 7H13V9H9V13H7V7ZM11 17H17V11H15V15H11V17ZM13 11H11V13H13V11Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgPathTrim (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M5 5H15V8H8V15H5V5Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M19 9H9V19H19V9Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgPathUnite (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M15 5H5V15H9V19H19V9H15V5Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgPatreon (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"opacity\":\"0.5\",\"d\":\"M21 10C21 13.3137 18.3137 16 15 16C11.6863 16 9 13.3137 9 10C9 6.68629 11.6863 4 15 4C18.3137 4 21 6.68629 21 10Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M3 4H7V20H3V4Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgPaypal (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M6.47005 3.54443H14.4701C16.1089 3.54443 17.4146 4.31866 18.0963 5.51496C19.3165 6.38743 19.9427 7.91487 19.6082 9.65332C19.0865 12.365 16.425 14.5633 13.6636 14.5633H11.6636L10.5301 20.4553H6.39824L6.62891 19.2563H3.44727L6.47005 3.54443ZM8.0922 5.50842H14.0922C15.7491 5.50842 16.8385 6.82737 16.5254 8.45439C16.2124 10.0814 14.6155 11.4004 12.9587 11.4004H8.95866L7.82511 17.2923H5.82511L8.0922 5.50842Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgPen (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M21.2635 2.29289C20.873 1.90237 20.2398 1.90237 19.8493 2.29289L18.9769 3.16525C17.8618 2.63254 16.4857 2.82801 15.5621 3.75165L4.95549 14.3582L10.6123 20.0151L21.2189 9.4085C22.1426 8.48486 22.338 7.1088 21.8053 5.99367L22.6777 5.12132C23.0682 4.7308 23.0682 4.09763 22.6777 3.70711L21.2635 2.29289ZM16.9955 10.8035L10.6123 17.1867L7.78392 14.3582L14.1671 7.9751L16.9955 10.8035ZM18.8138 8.98525L19.8047 7.99429C20.1953 7.60376 20.1953 6.9706 19.8047 6.58007L18.3905 5.16586C18 4.77534 17.3668 4.77534 16.9763 5.16586L15.9853 6.15683L18.8138 8.98525Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M2 22.9502L4.12171 15.1717L9.77817 20.8289L2 22.9502Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgPentagonBottomLeft (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M13.3301 9.23205L10 5L5 13.6603L8.33013 17.8923L13.6603 18.6603L18.6603 10L13.3301 9.23205ZM15.4512 11.5583L12.2531 11.0975L10.255 8.5583L7.40908 13.4876L9.40716 16.0268L12.6052 16.4876L15.4512 11.5583Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgPentagonBottomRight (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M10.3301 8.23205L13.6603 4L18.6603 12.6603L15.3301 16.8923L10 17.6603L5 9L10.3301 8.23205ZM8.20908 10.5583L11.4072 10.0975L13.4052 7.5583L16.2512 12.4876L14.2531 15.0268L11.055 15.4876L8.20908 10.5583Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgPentagonDown (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M12 8L7 6V16L12 18.5L17 16V6L12 8ZM15 8.95407L12 10.1541L9 8.95407V14.7639L12 16.2639L15 14.7639V8.95407Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgPentagonLeft (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M16 12L18 7H8L6 12L8 17H18L16 12ZM15.0459 15L13.8459 12L15.0459 9H9.35407L8.15407 12L9.35407 15H15.0459Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgPentagonRight (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M8 12L6 7H16L18 12L16 17H6L8 12ZM8.95407 15L10.1541 12L8.95407 9H14.6459L15.8459 12L14.6459 15H8.95407Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgPentagonTopLeft (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M14.3301 15.1601L11 19.3922L6 10.7319L9.33013 6.49988L14.6603 5.73193L19.6603 14.3922L14.3301 15.1601ZM16.4512 12.8339L13.2531 13.2947L11.255 15.8339L8.40908 10.9046L10.4072 8.36536L13.6052 7.90459L16.4512 12.8339Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgPentagonTopRight (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M10.3301 15.1601L5 14.3922L10 5.73193L15.3301 6.49988L18.6603 10.7319L13.6603 19.3922L10.3301 15.1601ZM13.4052 15.8339L11.4072 13.2947L8.20908 12.8339L11.055 7.90459L14.2531 8.36536L16.2512 10.9046L13.4052 15.8339Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgPentagonUp (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M12 16L17 18V8L12 6L7 8V18L12 16ZM9 15.0459L12 13.8459L15 15.0459V9.35407L12 8.15407L9 9.35407V15.0459Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgPerformance (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M11 9V13.1707C9.83481 13.5825 9 14.6938 9 16C9 17.6569 10.3431 19 12 19C13.6569 19 15 17.6569 15 16C15 14.6938 14.1652 13.5825 13 13.1707V9H11ZM11 16C11 15.4477 11.4477 15 12 15C12.5523 15 13 15.4477 13 16C13 16.5523 12.5523 17 12 17C11.4477 17 11 16.5523 11 16Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M12 5C15.866 5 19 8.13401 19 12V13H17V12C17 9.23858 14.7614 7 12 7C9.23858 7 7 9.23858 7 12V13H5V12C5 8.13401 8.13401 5 12 5Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M12 23C18.0751 23 23 18.0751 23 12C23 5.92487 18.0751 1 12 1C5.92487 1 1 5.92487 1 12C1 18.0751 5.92487 23 12 23ZM12 21C16.9706 21 21 16.9706 21 12C21 7.02944 16.9706 3 12 3C7.02944 3 3 7.02944 3 12C3 16.9706 7.02944 21 12 21Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgPexels (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M12 5C12.7111 5 13.3875 5.14845 14 5.41604C15.7659 6.1876 17 7.94968 17 10C17 12.0503 15.7659 13.8124 14 14.584C13.3875 14.8516 12.7111 15 12 15V19H6V5H12ZM8 7V17H10V13H12L12.0032 12.9988C13.6427 13.0303 15.0746 11.6934 15.0443 9.95469L15.0375 9.56529C15.0121 8.10183 13.7882 6.94549 12.3257 7.00299L12.0203 7.00762L12 7H8Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgPhone (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M22 12C22 10.6868 21.7413 9.38647 21.2388 8.1731C20.7362 6.95996 19.9997 5.85742 19.0711 4.92896C18.1425 4.00024 17.0401 3.26367 15.8268 2.76123C14.6136 2.25854 13.3132 2 12 2V4C13.0506 4 14.0909 4.20703 15.0615 4.60889C16.0321 5.01099 16.914 5.60034 17.6569 6.34326C18.3997 7.08594 18.989 7.96802 19.391 8.93848C19.7931 9.90918 20 10.9495 20 12H22Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M2 10V5C2 4.44775 2.44772 4 3 4H8C8.55228 4 9 4.44775 9 5V9C9 9.55225 8.55228 10 8 10H6C6 14.4182 9.58173 18 14 18V16C14 15.4478 14.4477 15 15 15H19C19.5523 15 20 15.4478 20 16V21C20 21.5522 19.5523 22 19 22H14C7.37259 22 2 16.6274 2 10Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M17.5433 9.70386C17.8448 10.4319 18 11.2122 18 12H16.2C16.2 11.4485 16.0914 10.9023 15.8803 10.3928C15.6692 9.88306 15.3599 9.42017 14.9698 9.03027C14.5798 8.64014 14.1169 8.33081 13.6073 8.11963C13.0977 7.90869 12.5515 7.80005 12 7.80005V6C12.7879 6 13.5681 6.15527 14.2961 6.45679C15.024 6.7583 15.6855 7.2002 16.2426 7.75732C16.7998 8.31445 17.2418 8.97583 17.5433 9.70386Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgPhotoscan (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M9 8C9.55228 8 10 7.55228 10 7C10 6.44772 9.55228 6 9 6C8.44772 6 8 6.44772 8 7C8 7.55228 8.44772 8 9 8Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M17 3C18.1046 3 19 3.89543 19 5V19C19 20.1046 18.1046 21 17 21H7C5.89543 21 5 20.1046 5 19V5C5 3.89543 5.89543 3 7 3H17ZM12.4649 5H17V16H7L7 10.4649C7.58835 10.8052 8.27143 11 9 11C11.2091 11 13 9.20914 13 7C13 6.27143 12.8052 5.58835 12.4649 5ZM9 5C7.89543 5 7 5.89543 7 7C7 8.10457 7.89543 9 9 9C10.1046 9 11 8.10457 11 7C11 5.89543 10.1046 5 9 5Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgPiano (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M22 21C23.1046 21 24 20.1046 24 19V5C24 3.89543 23.1046 3 22 3H3C1.89543 3 1 3.89543 1 5V19C1 20.1046 1.89543 21 3 21H22ZM11 5H8.98486V13H7.98511V19H12V13H11V5ZM18.0151 19H22V5H19.0151V13H18.0151V19ZM17.0151 13H16.0151V5H14V13H13V19H17.0151V13ZM6.98511 19V13H5.98486V5H3L3 19H6.98511Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgPill (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M12.6569 2.75736C15 0.414213 18.799 0.414214 21.1421 2.75736C23.4853 5.1005 23.4853 8.8995 21.1421 11.2426L11.2426 21.1421C8.89949 23.4853 5.1005 23.4853 2.75736 21.1421C0.414214 18.799 0.414213 15 2.75736 12.6569L12.6569 2.75736ZM19.7279 9.82843L15.4853 14.0711L9.82843 8.41421L14.0711 4.17157C15.6332 2.60948 18.1658 2.60948 19.7279 4.17157C21.29 5.73367 21.29 8.26633 19.7279 9.82843Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgPinAlt (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 11C13.1046 11 14 10.1046 14 9C14 7.89543 13.1046 7 12 7C10.8954 7 10 7.89543 10 9C10 10.1046 10.8954 11 12 11Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M18 9C18 11.973 15.8377 14.441 13 14.917V20C13 20.5523 12.5523 21 12 21C11.4477 21 11 20.5523 11 20V14.917C8.16229 14.441 6 11.973 6 9C6 5.68629 8.68629 3 12 3C15.3137 3 18 5.68629 18 9ZM12 13C14.2091 13 16 11.2091 16 9C16 6.79086 14.2091 5 12 5C9.79086 5 8 6.79086 8 9C8 11.2091 9.79086 13 12 13Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgPinBottom (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 11C13.1046 11 14 10.1046 14 9C14 7.89543 13.1046 7 12 7C10.8954 7 10 7.89543 10 9C10 10.1046 10.8954 11 12 11Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M18 9C18 11.973 15.8377 14.441 13 14.917V20H16C16.5523 20 17 20.4477 17 21C17 21.5523 16.5523 22 16 22H8C7.44772 22 7 21.5523 7 21C7 20.4477 7.44772 20 8 20H11V14.917C8.16229 14.441 6 11.973 6 9C6 5.68629 8.68629 3 12 3C15.3137 3 18 5.68629 18 9ZM12 13C14.2091 13 16 11.2091 16 9C16 6.79086 14.2091 5 12 5C9.79086 5 8 6.79086 8 9C8 11.2091 9.79086 13 12 13Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgPinTop (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 14C13.1046 14 14 14.8954 14 16C14 17.1046 13.1046 18 12 18C10.8954 18 10 17.1046 10 16C10 14.8954 10.8954 14 12 14Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M8 5C7.44772 5 7 4.55228 7 4C7 3.44772 7.44772 3 8 3H16C16.5523 3 17 3.44772 17 4C17 4.55228 16.5523 5 16 5H13V10.083C15.8377 10.559 18 13.027 18 16C18 19.3137 15.3137 22 12 22C8.68629 22 6 19.3137 6 16C6 13.027 8.16229 10.559 11 10.083V5H8ZM12 12C14.2091 12 16 13.7909 16 16C16 18.2091 14.2091 20 12 20C9.79086 20 8 18.2091 8 16C8 13.7909 9.79086 12 12 12Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgPin (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M16.2721 10.2721C16.2721 12.4813 14.4813 14.2721 12.2721 14.2721C10.063 14.2721 8.27214 12.4813 8.27214 10.2721C8.27214 8.06298 10.063 6.27212 12.2721 6.27212C14.4813 6.27212 16.2721 8.06298 16.2721 10.2721ZM14.2721 10.2721C14.2721 11.3767 13.3767 12.2721 12.2721 12.2721C11.1676 12.2721 10.2721 11.3767 10.2721 10.2721C10.2721 9.16755 11.1676 8.27212 12.2721 8.27212C13.3767 8.27212 14.2721 9.16755 14.2721 10.2721Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M5.79417 16.5183C2.19424 13.0909 2.05438 7.39409 5.48178 3.79417C8.90918 0.194243 14.6059 0.054383 18.2059 3.48178C21.8058 6.90918 21.9457 12.6059 18.5183 16.2059L12.3124 22.7241L5.79417 16.5183ZM17.0698 14.8268L12.243 19.8965L7.17324 15.0698C4.3733 12.404 4.26452 7.97318 6.93028 5.17324C9.59603 2.3733 14.0268 2.26452 16.8268 4.93028C19.6267 7.59603 19.7355 12.0268 17.0698 14.8268Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgPlayBackwards (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M2 7H5V17H2V7Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M6 12L13.0023 7.00003V17L6 12Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M21.0023 7.00003L14 12L21.0023 17V7.00003Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgPlayButtonO (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M12 21C16.9706 21 21 16.9706 21 12C21 7.02944 16.9706 3 12 3C7.02944 3 3 7.02944 3 12C3 16.9706 7.02944 21 12 21ZM12 23C18.0751 23 23 18.0751 23 12C23 5.92487 18.0751 1 12 1C5.92487 1 1 5.92487 1 12C1 18.0751 5.92487 23 12 23Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M16 12L10 16.3301V7.66987L16 12Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgPlayButtonR (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M19 3H5C3.89543 3 3 3.89543 3 5V19C3 20.1046 3.89543 21 5 21H19C20.1046 21 21 20.1046 21 19V5C21 3.89543 20.1046 3 19 3ZM5 1C2.79086 1 1 2.79086 1 5V19C1 21.2091 2.79086 23 5 23H19C21.2091 23 23 21.2091 23 19V5C23 2.79086 21.2091 1 19 1H5Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M16 12L10 16.3301V7.66987L16 12Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgPlayButton (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M15 12.3301L9 16.6603L9 8L15 12.3301Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgPlayForwards (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M21.0023 17H18.0023V7H21.0023V17Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M17.0023 12L10 17V7L17.0023 12Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M2 17L9.00232 12L2 7V17Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgPlayListAdd (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M2 5H14V7H2V5Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M2 9H14V11H2V9Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M10 13H2V15H10V13Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M16 9H18V13H22V15H18V19H16V15H12V13H16V9Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgPlayListCheck (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M15 6H3V8H15V6Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M15 10H3V12H15V10Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M3 14H11V16H3V14Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M11.9905 15.025L13.4049 13.6106L15.526 15.7321L19.7687 11.4895L21.1829 12.9037L15.526 18.5606L11.9905 15.025Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgPlayListRemove (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M15.9644 4.63379H3.96442V6.63379H15.9644V4.63379Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M15.9644 8.63379H3.96442V10.6338H15.9644V8.63379Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M3.96442 12.6338H11.9644V14.6338H3.96442V12.6338Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M12.9645 13.7093L14.3787 12.295L16.5 14.4163L18.6213 12.2951L20.0355 13.7093L17.9142 15.8305L20.0356 17.9519L18.6214 19.3661L16.5 17.2447L14.3786 19.3661L12.9644 17.9519L15.0858 15.8305L12.9645 13.7093Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgPlayListSearch (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M15.8787 4.87866H3.87872V6.87866H15.8787V4.87866Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M15.8787 8.87866H3.87872V10.8787H15.8787V8.87866Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M3.87872 12.8787H11.8787V14.8787H3.87872V12.8787Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M13.7574 12.7573C12.5858 13.9289 12.5858 15.8284 13.7574 17C14.681 17.9236 16.0571 18.1191 17.1722 17.5864L18.7071 19.1213L20.1213 17.7071L18.5864 16.1722C19.1191 15.057 18.9236 13.681 18 12.7573C16.8284 11.5858 14.9289 11.5858 13.7574 12.7573ZM15.1716 15.5858C15.5621 15.9763 16.1953 15.9763 16.5858 15.5858C16.9763 15.1952 16.9763 14.5621 16.5858 14.1716C16.1953 13.781 15.5621 13.781 15.1716 14.1716C14.7811 14.5621 14.7811 15.1952 15.1716 15.5858Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgPlayList (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M16 5H4V7H16V5Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M16 9H4V11H16V9Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M4 13H12V15H4V13Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M20 16L14 13V19L20 16Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgPlayPauseO (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M9 9H11V15H9V9Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M15 15H13V9H15V15Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M23 12C23 18.0751 18.0751 23 12 23C5.92487 23 1 18.0751 1 12C1 5.92487 5.92487 1 12 1C18.0751 1 23 5.92487 23 12ZM21 12C21 16.9706 16.9706 21 12 21C7.02944 21 3 16.9706 3 12C3 7.02944 7.02944 3 12 3C16.9706 3 21 7.02944 21 12Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgPlayPauseR (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M9 9H11V15H9V9Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M15 15H13V9H15V15Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M1 5C1 2.79086 2.79086 1 5 1H19C21.2091 1 23 2.79086 23 5V19C23 21.2091 21.2091 23 19 23H5C2.79086 23 1 21.2091 1 19V5ZM5 3H19C20.1046 3 21 3.89543 21 5V19C21 20.1046 20.1046 21 19 21H5C3.89543 21 3 20.1046 3 19V5C3 3.89543 3.89543 3 5 3Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgPlayPause (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M11 7H8V17H11V7Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M13 17H16V7H13V17Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgPlayStopO (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M15 9H9V15H15V9Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M23 12C23 18.0751 18.0751 23 12 23C5.92487 23 1 18.0751 1 12C1 5.92487 5.92487 1 12 1C18.0751 1 23 5.92487 23 12ZM21 12C21 16.9706 16.9706 21 12 21C7.02944 21 3 16.9706 3 12C3 7.02944 7.02944 3 12 3C16.9706 3 21 7.02944 21 12Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgPlayStopR (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M15 9H9V15H15V9Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M1 5C1 2.79086 2.79086 1 5 1H19C21.2091 1 23 2.79086 23 5V19C23 21.2091 21.2091 23 19 23H5C2.79086 23 1 21.2091 1 19V5ZM5 3H19C20.1046 3 21 3.89543 21 5V19C21 20.1046 20.1046 21 19 21H5C3.89543 21 3 20.1046 3 19V5C3 3.89543 3.89543 3 5 3Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgPlayStop (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M7 7H17V17H7V7Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgPlayTrackNextO (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M12 21C7.02944 21 3 16.9706 3 12C3 7.02944 7.02944 3 12 3C16.9706 3 21 7.02944 21 12C21 16.9706 16.9706 21 12 21ZM1 12C1 5.92487 5.92487 1 12 1C18.0751 1 23 5.92487 23 12C23 18.0751 18.0751 23 12 23C5.92487 23 1 18.0751 1 12ZM14 9C14 8.44772 14.4477 8 15 8C15.5523 8 16 8.44772 16 9V15C16 15.5523 15.5523 16 15 16C14.4477 16 14 15.5523 14 15V9ZM13 12L7 15.4641V8.5359L13 12Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgPlayTrackNextR (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M15 9C15 8.44772 15.4477 8 16 8C16.5523 8 17 8.44772 17 9V15C17 15.5523 16.5523 16 16 16C15.4477 16 15 15.5523 15 15V9Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M14 12L8 15.4641V8.5359L14 12Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M1 5C1 2.79086 2.79086 1 5 1H19C21.2091 1 23 2.79086 23 5V19C23 21.2091 21.2091 23 19 23H5C2.79086 23 1 21.2091 1 19V5ZM5 3H19C20.1046 3 21 3.89543 21 5V19C21 20.1046 20.1046 21 19 21H5C3.89543 21 3 20.1046 3 19V5C3 3.89543 3.89543 3 5 3Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgPlayTrackNext (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M6 17L14 12L6 7V17Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M18 7H15V12V17H18V7Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgPlayTrackPrevO (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M8 8C8.55228 8 9 8.44772 9 9V15C9 15.5523 8.55228 16 8 16C7.44771 16 7 15.5523 7 15V9C7 8.44772 7.44771 8 8 8ZM16 15.4641L10 12L16 8.5359V15.4641Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M3 12C3 16.9706 7.02944 21 12 21C16.9706 21 21 16.9706 21 12C21 7.02944 16.9706 3 12 3C7.02944 3 3 7.02944 3 12ZM12 1C5.92487 1 1 5.92487 1 12C1 18.0751 5.92487 23 12 23C18.0751 23 23 18.0751 23 12C23 5.92487 18.0751 1 12 1Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgPlayTrackPrevR (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M8 8C8.55228 8 9 8.44772 9 9V15C9 15.5523 8.55228 16 8 16C7.44771 16 7 15.5523 7 15V9C7 8.44772 7.44771 8 8 8ZM16 15.4641L10 12L16 8.5359V15.4641Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M19 3H5C3.89543 3 3 3.89543 3 5V19C3 20.1046 3.89543 21 5 21H19C20.1046 21 21 20.1046 21 19V5C21 3.89543 20.1046 3 19 3ZM5 1C2.79086 1 1 2.79086 1 5V19C1 21.2091 2.79086 23 5 23H19C21.2091 23 23 21.2091 23 19V5C23 2.79086 21.2091 1 19 1H5Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgPlayTrackPrev (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M18 17L10 12L18 7V17Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M6 7H9V17H6V7Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgPlug (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M9 2C8.44771 2 8 2.44772 8 3V5C8 5.55228 8.44771 6 9 6C9.55229 6 10 5.55228 10 5V3C10 2.44772 9.55229 2 9 2ZM8 9H16V11C16 13.2091 14.2091 15 12 15C9.79086 15 8 13.2091 8 11V9ZM13 16.917C15.8377 16.441 18 13.973 18 11V7H6V11C6 13.973 8.16229 16.441 11 16.917V22C11 22.5523 11.4477 23 12 23C12.5523 23 13 22.5523 13 22V16.917ZM14 3C14 2.44772 14.4477 2 15 2C15.5523 2 16 2.44772 16 3V5C16 5.55228 15.5523 6 15 6C14.4477 6 14 5.55228 14 5V3Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgPocket (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M3 4H21V11C21 15.9706 16.9706 20 12 20C7.02944 20 3 15.9706 3 11V4ZM1 2H23V11C23 17.0751 18.0751 22 12 22C5.92487 22 1 17.0751 1 11V2ZM11.2929 14.6935C11.6834 15.084 12.3166 15.084 12.7071 14.6935L16.9497 10.4508C17.3403 10.0603 17.3403 9.42714 16.9497 9.03661C16.5592 8.64609 15.9261 8.64609 15.5355 9.03661L12 12.5721L8.46447 9.03661C8.07394 8.64609 7.44078 8.64609 7.05025 9.03661C6.65973 9.42714 6.65973 10.0603 7.05025 10.4508L11.2929 14.6935Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgPokemon (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M3 12C3 7.02944 7.02944 3 12 3C16.9706 3 21 7.02944 21 12C21 16.9706 16.9706 21 12 21C7.02944 21 3 16.9706 3 12ZM5.07089 13C5.55612 16.3923 8.47353 19 12 19C15.5265 19 18.4439 16.3923 18.9291 13H14.8293C14.4174 14.1652 13.3062 15 12 15C10.6938 15 9.58251 14.1652 9.17068 13H5.07089ZM18.9291 11C18.4439 7.60771 15.5265 5 12 5C8.47353 5 5.55612 7.60771 5.07089 11H9.17068C9.58251 9.83481 10.6938 9 12 9C13.3062 9 14.4174 9.83481 14.8293 11H18.9291ZM12 13C12.5523 13 13 12.5523 13 12C13 11.4477 12.5523 11 12 11C11.4477 11 11 11.4477 11 12C11 12.5523 11.4477 13 12 13Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgPolaroid (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M3 4C3 2.89543 3.89543 2 5 2H19C20.1046 2 21 2.89543 21 4V20C21 21.1046 20.1046 22 19 22H5C3.89543 22 3 21.1046 3 20V4ZM5 4H19V15H5V4Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgPoll (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M19 4H5C4.44771 4 4 4.44772 4 5V19C4 19.5523 4.44772 20 5 20H19C19.5523 20 20 19.5523 20 19V5C20 4.44771 19.5523 4 19 4ZM5 2C3.34315 2 2 3.34315 2 5V19C2 20.6569 3.34315 22 5 22H19C20.6569 22 22 20.6569 22 19V5C22 3.34315 20.6569 2 19 2H5Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M11 7H13V17H11V7Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M15 13H17V17H15V13Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M7 10H9V17H7V10Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgPresentation (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M12 22C17.5228 22 22 17.5228 22 12C22 6.47715 17.5228 2 12 2C6.47715 2 2 6.47715 2 12C2 17.5228 6.47715 22 12 22ZM20 12H18C18 8.68629 15.3137 6 12 6C8.68629 6 6 8.68629 6 12H4C4 7.58172 7.58172 4 12 4C16.4183 4 20 7.58172 20 12ZM4.25204 14H19.748C18.8599 17.4505 15.7277 20 12 20C8.27232 20 5.14012 17.4505 4.25204 14ZM8 12C8 9.79086 9.79086 8 12 8C14.2091 8 16 9.79086 16 12H8Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgPrinter (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M8 4H16V6H8V4ZM18 6H22V18H18V22H6V18H2V6H6V2H18V6ZM20 16H18V14H6V16H4V8H20V16ZM8 16H16V20H8V16ZM8 10H6V12H8V10Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgProductHunt (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M12 19C8.13401 19 5 15.866 5 12C5 8.13401 8.13401 5 12 5C15.866 5 19 8.13401 19 12C19 15.866 15.866 19 12 19ZM3 12C3 7.02944 7.02944 3 12 3C16.9706 3 21 7.02944 21 12C21 16.9706 16.9706 21 12 21C7.02944 21 3 16.9706 3 12ZM9 16V8H13C14.6569 8 16 9.34315 16 11C16 12.6569 14.6569 14 13 14H11V16H9ZM14 11C14 11.5523 13.5523 12 13 12H11V10H13C13.5523 10 14 10.4477 14 11Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgProfile (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M16 9C16 11.2091 14.2091 13 12 13C9.79086 13 8 11.2091 8 9C8 6.79086 9.79086 5 12 5C14.2091 5 16 6.79086 16 9ZM14 9C14 10.1046 13.1046 11 12 11C10.8954 11 10 10.1046 10 9C10 7.89543 10.8954 7 12 7C13.1046 7 14 7.89543 14 9Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M12 1C5.92487 1 1 5.92487 1 12C1 18.0751 5.92487 23 12 23C18.0751 23 23 18.0751 23 12C23 5.92487 18.0751 1 12 1ZM3 12C3 14.0902 3.71255 16.014 4.90798 17.5417C6.55245 15.3889 9.14627 14 12.0645 14C14.9448 14 17.5092 15.3531 19.1565 17.4583C20.313 15.9443 21 14.0524 21 12C21 7.02944 16.9706 3 12 3C7.02944 3 3 7.02944 3 12ZM12 21C9.84977 21 7.87565 20.2459 6.32767 18.9878C7.59352 17.1812 9.69106 16 12.0645 16C14.4084 16 16.4833 17.1521 17.7538 18.9209C16.1939 20.2191 14.1881 21 12 21Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgPullClear (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M4 6H2V16C2 17.1046 2.89543 18 4 18H20C21.1046 18 22 17.1046 22 16V6H20V16H4V6Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M6 12H18V14H6V12Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M18 8H6V10H18V8Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgPushChevronDownO (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M16 14V16H8V14H16Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M7.75732 8.70261L9.17153 7.2884L12 10.1168L14.8284 7.28842L16.2426 8.70264L11.9999 12.9453L7.75732 8.70261Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M12 23C18.0751 23 23 18.0751 23 12C23 5.92487 18.0751 1 12 1C5.92487 1 1 5.92487 1 12C1 18.0751 5.92487 23 12 23ZM12 21C16.9706 21 21 16.9706 21 12C21 7.02944 16.9706 3 12 3C7.02944 3 3 7.02944 3 12C3 16.9706 7.02944 21 12 21Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgPushChevronDownR (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M9.17154 7.28839L7.75732 8.7026L11.9999 12.9453L16.2426 8.70263L14.8284 7.28842L12 10.1168L9.17154 7.28839Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M8.00001 14H16V16H8.00001V14Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M1 5C1 2.79086 2.79086 1 5 1H19C21.2091 1 23 2.79086 23 5V19C23 21.2091 21.2091 23 19 23H5C2.79086 23 1 21.2091 1 19V5ZM5 3H19C20.1046 3 21 3.89543 21 5V19C21 20.1046 20.1046 21 19 21H5C3.89543 21 3 20.1046 3 19V5C3 3.89543 3.89543 3 5 3Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgPushChevronDown (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M5 7.41421L6.41421 6L12.0711 11.6569L17.7279 6L19.1421 7.41421L12.0711 14.4853L5 7.41421Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M19 16.3432H5V18.3432H19V16.3432Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgPushChevronLeftO (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M10 16H8V8H10V16Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M15.2974 7.75732L16.7116 9.17153L13.8832 12L16.7116 14.8284L15.2974 16.2426L11.0547 11.9999L15.2974 7.75732Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M1 12C1 18.0751 5.92487 23 12 23C18.0751 23 23 18.0751 23 12C23 5.92487 18.0751 1 12 1C5.92487 1 1 5.92487 1 12ZM3 12C3 16.9706 7.02944 21 12 21C16.9706 21 21 16.9706 21 12C21 7.02944 16.9706 3 12 3C7.02944 3 3 7.02944 3 12Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgPushChevronLeftR (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M16.6743 9.1716L15.26 7.75739L11.0174 12L15.26 16.2426L16.6742 14.8284L13.8458 12L16.6743 9.1716Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M9.96265 8.00007V16.0001H7.96265V8.00007H9.96265Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M1 5C1 2.79086 2.79086 1 5 1H19C21.2091 1 23 2.79086 23 5V19C23 21.2091 21.2091 23 19 23H5C2.79086 23 1 21.2091 1 19V5ZM5 3H19C20.1046 3 21 3.89543 21 5V19C21 20.1046 20.1046 21 19 21H5C3.89543 21 3 20.1046 3 19V5C3 3.89543 3.89543 3 5 3Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgPushChevronLeft (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M16.929 5L18.3432 6.41421L12.6863 12.0711L18.3432 17.7279L16.929 19.1421L9.85789 12.0711L16.929 5Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M8 19V5H6V19H8Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgPushChevronRightO (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M14 8H16V16H14V8Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M8.70261 16.2427L7.2884 14.8285L10.1168 12L7.28842 9.17164L8.70264 7.75743L12.9453 12.0001L8.70261 16.2427Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M23 12C23 5.92487 18.0751 1 12 1C5.92487 1 1 5.92487 1 12C1 18.0751 5.92487 23 12 23C18.0751 23 23 18.0751 23 12ZM21 12C21 7.02944 16.9706 3 12 3C7.02944 3 3 7.02944 3 12C3 16.9706 7.02944 21 12 21C16.9706 21 21 16.9706 21 12Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgPushChevronRightR (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M7.64429 14.8284L9.0585 16.2426L13.3012 12L9.05853 7.75739L7.64432 9.1716L10.4727 12L7.64429 14.8284Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M14.3559 16L14.3559 7.99996H16.3559V16H14.3559Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M1 5C1 2.79086 2.79086 1 5 1H19C21.2091 1 23 2.79086 23 5V19C23 21.2091 21.2091 23 19 23H5C2.79086 23 1 21.2091 1 19V5ZM5 3H19C20.1046 3 21 3.89543 21 5V19C21 20.1046 20.1046 21 19 21H5C3.89543 21 3 20.1046 3 19V5C3 3.89543 3.89543 3 5 3Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgPushChevronRight (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M7.41421 5L6 6.41421L11.6569 12.0711L6 17.7279L7.41421 19.1421L14.4853 12.0711L7.41421 5Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M16.3432 19V5H18.3432V19H16.3432Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgPushChevronUpO (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M12 3C7.02944 3 3 7.02944 3 12C3 16.9706 7.02944 21 12 21C16.9706 21 21 16.9706 21 12C21 7.02944 16.9706 3 12 3ZM12 1C5.92487 1 1 5.92487 1 12C1 18.0751 5.92487 23 12 23C18.0751 23 23 18.0751 23 12C23 5.92487 18.0751 1 12 1ZM8 10V8H16V10H8ZM16.2427 15.2974L14.8285 16.7116L12 13.8832L9.17164 16.7116L7.75743 15.2974L12.0001 11.0547L16.2427 15.2974Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgPushChevronUpR (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M5 21H19C20.1046 21 21 20.1046 21 19V5C21 3.89543 20.1046 3 19 3H5C3.89543 3 3 3.89543 3 5V19C3 20.1046 3.89543 21 5 21ZM1 19C1 21.2091 2.79086 23 5 23H19C21.2091 23 23 21.2091 23 19V5C23 2.79086 21.2091 1 19 1H5C2.79086 1 1 2.79086 1 5V19ZM9.17154 16.7116L7.75732 15.2974L11.9999 11.0547L16.2426 15.2974L14.8284 16.7116L12 13.8832L9.17154 16.7116ZM8.00001 10H16V8H8.00001V10Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgPushChevronUp (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M5 16.929L6.41421 18.3432L12.0711 12.6863L17.7279 18.3432L19.1421 16.929L12.0711 9.85789L5 16.929Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M19 8H5V6H19V8Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgPushDown (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M11.0001 1H13.0001V15.4853L16.2428 12.2427L17.657 13.6569L12.0001 19.3137L6.34326 13.6569L7.75748 12.2427L11.0001 15.4853V1Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M18 20.2877H6V22.2877H18V20.2877Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgPushLeft (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M22.2877 11.0001V13.0001H7.80237L11.045 16.2428L9.63079 17.657L3.97394 12.0001L9.63079 6.34326L11.045 7.75748L7.80236 11.0001H22.2877Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M3 18V6H1V18H3Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgPushRight (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M1 12.9999V10.9999H15.4853L12.2427 7.75724L13.6569 6.34303L19.3137 11.9999L13.6569 17.6567L12.2427 16.2425L15.4853 12.9999H1Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M20.2877 6V18H22.2877V6H20.2877Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgPushUp (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M11.0001 22.2877H13.0001V7.80237L16.2428 11.045L17.657 9.63079L12.0001 3.97394L6.34326 9.63079L7.75748 11.045L11.0001 7.80236V22.2877ZM18 3H6V1H18V3Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgQr (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M9 3H3V9H5V5H9V3ZM3 21V15H5V19H9V21H3ZM15 3V5H19V9H21V3H15ZM19 15H21V21H15V19H19V15ZM7 7H11V11H7V7ZM7 13H11V17H7V13ZM17 7H13V11H17V7ZM13 13H17V17H13V13Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgQuoteO (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M20 5H4V19H20V5ZM4 3C2.89543 3 2 3.89543 2 5V19C2 20.1046 2.89543 21 4 21H20C21.1046 21 22 20.1046 22 19V5C22 3.89543 21.1046 3 20 3H4Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M9.06723 9.19629H12.0672L9.93267 14.8038H6.93267L9.06723 9.19629Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M14.0672 9.19629H17.0672L14.9327 14.8038H11.9327L14.0672 9.19629Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgQuote (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M9.13456 9H12.1346L10 14.6075H7L9.13456 9Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M14.1346 9H17.1346L15 14.6075H12L14.1346 9Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgRadioCheck (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M12 20C16.4183 20 20 16.4183 20 12C20 7.58172 16.4183 4 12 4C7.58172 4 4 7.58172 4 12C4 16.4183 7.58172 20 12 20ZM12 22C17.5228 22 22 17.5228 22 12C22 6.47715 17.5228 2 12 2C6.47715 2 2 6.47715 2 12C2 17.5228 6.47715 22 12 22Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgRadioChecked (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 16C14.2091 16 16 14.2091 16 12C16 9.79086 14.2091 8 12 8C9.79086 8 8 9.79086 8 12C8 14.2091 9.79086 16 12 16Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M22 12C22 17.5228 17.5228 22 12 22C6.47715 22 2 17.5228 2 12C2 6.47715 6.47715 2 12 2C17.5228 2 22 6.47715 22 12ZM20 12C20 16.4183 16.4183 20 12 20C7.58172 20 4 16.4183 4 12C4 7.58172 7.58172 4 12 4C16.4183 4 20 7.58172 20 12Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgRatio (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M4 6V12H6V8L10 8V6H4Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M20 18H14V16H18V12H20V18Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M4 2C1.79086 2 0 3.79086 0 6V18C0 20.2091 1.79086 22 4 22H20C22.2091 22 24 20.2091 24 18V6C24 3.79086 22.2091 2 20 2H4ZM20 4H4C2.89543 4 2 4.89543 2 6V18C2 19.1046 2.89543 20 4 20H20C21.1046 20 22 19.1046 22 18V6C22 4.89543 21.1046 4 20 4Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgRead (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M7 14C8.10457 14 9 13.1046 9 12C9 10.8954 8.10457 10 7 10C5.89543 10 5 10.8954 5 12C5 13.1046 5.89543 14 7 14ZM10.4649 10C9.77325 8.8044 8.48056 8 7 8C5.13616 8 3.57006 9.27477 3.12602 11H2C1.44772 11 1 11.4477 1 12C1 12.5523 1.44772 13 2 13H3.12602C3.57006 14.7252 5.13616 16 7 16C9.20914 16 11 14.2091 11 12H13C13 14.2091 14.7909 16 17 16C18.8638 16 20.4299 14.7252 20.874 13H22C22.5523 13 23 12.5523 23 12C23 11.4477 22.5523 11 22 11H20.874C20.4299 9.27477 18.8638 8 17 8C15.5194 8 14.2267 8.8044 13.5351 10H10.4649ZM15 12C15 13.1046 15.8954 14 17 14C18.1046 14 19 13.1046 19 12C19 10.8954 18.1046 10 17 10C15.8954 10 15 10.8954 15 12Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgReadme (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M4 5.5H9C10.1046 5.5 11 6.39543 11 7.5V16.5C11 17.0523 10.5523 17.5 10 17.5H4C3.44772 17.5 3 17.0523 3 16.5V6.5C3 5.94772 3.44772 5.5 4 5.5ZM14 19.5C13.6494 19.5 13.3128 19.4398 13 19.3293V19.5C13 20.0523 12.5523 20.5 12 20.5C11.4477 20.5 11 20.0523 11 19.5V19.3293C10.6872 19.4398 10.3506 19.5 10 19.5H4C2.34315 19.5 1 18.1569 1 16.5V6.5C1 4.84315 2.34315 3.5 4 3.5H9C10.1947 3.5 11.2671 4.02376 12 4.85418C12.7329 4.02376 13.8053 3.5 15 3.5H20C21.6569 3.5 23 4.84315 23 6.5V16.5C23 18.1569 21.6569 19.5 20 19.5H14ZM13 7.5V16.5C13 17.0523 13.4477 17.5 14 17.5H20C20.5523 17.5 21 17.0523 21 16.5V6.5C21 5.94772 20.5523 5.5 20 5.5H15C13.8954 5.5 13 6.39543 13 7.5ZM5 7.5H9V9.5H5V7.5ZM15 7.5H19V9.5H15V7.5ZM19 10.5H15V12.5H19V10.5ZM5 10.5H9V12.5H5V10.5ZM19 13.5H15V15.5H19V13.5ZM5 13.5H9V15.5H5V13.5Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgRecord (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 15C13.6569 15 15 13.6569 15 12C15 10.3431 13.6569 9 12 9C10.3431 9 9 10.3431 9 12C9 13.6569 10.3431 15 12 15Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M22 12C22 17.5228 17.5228 22 12 22C6.47715 22 2 17.5228 2 12C2 6.47715 6.47715 2 12 2C17.5228 2 22 6.47715 22 12ZM20 12C20 16.4183 16.4183 20 12 20C7.58172 20 4 16.4183 4 12C4 7.58172 7.58172 4 12 4C16.4183 4 20 7.58172 20 12Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgRedo (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M13.1459 11.0499L12.9716 9.05752L15.3462 8.84977C14.4471 7.98322 13.2242 7.4503 11.8769 7.4503C9.11547 7.4503 6.87689 9.68888 6.87689 12.4503C6.87689 15.2117 9.11547 17.4503 11.8769 17.4503C13.6977 17.4503 15.2911 16.4771 16.1654 15.0224L18.1682 15.5231C17.0301 17.8487 14.6405 19.4503 11.8769 19.4503C8.0109 19.4503 4.87689 16.3163 4.87689 12.4503C4.87689 8.58431 8.0109 5.4503 11.8769 5.4503C13.8233 5.4503 15.5842 6.24474 16.853 7.52706L16.6078 4.72412L18.6002 4.5498L19.1231 10.527L13.1459 11.0499Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgRemote (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M17.0514 4.32178L18.4656 5.73599L14.223 9.97863L18.4656 14.2213L17.0514 15.6355L11.3946 9.97863L17.0514 4.32178Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M6.94864 19.6785L5.53442 18.2643L9.77706 14.0216L5.53442 9.77897L6.94864 8.36476L12.6055 14.0216L6.94864 19.6785Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgRemoveR (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M8 11C7.44772 11 7 11.4477 7 12C7 12.5523 7.44772 13 8 13H16C16.5523 13 17 12.5523 17 12C17 11.4477 16.5523 11 16 11H8Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M1 5C1 2.79086 2.79086 1 5 1H19C21.2091 1 23 2.79086 23 5V19C23 21.2091 21.2091 23 19 23H5C2.79086 23 1 21.2091 1 19V5ZM5 3H19C20.1046 3 21 3.89543 21 5V19C21 20.1046 20.1046 21 19 21H5C3.89543 21 3 20.1046 3 19V5C3 3.89543 3.89543 3 5 3Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgRemove (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M8 11C7.44772 11 7 11.4477 7 12C7 12.5523 7.44772 13 8 13H16C16.5523 13 17 12.5523 17 12C17 11.4477 16.5523 11 16 11H8Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M23 12C23 18.0751 18.0751 23 12 23C5.92487 23 1 18.0751 1 12C1 5.92487 5.92487 1 12 1C18.0751 1 23 5.92487 23 12ZM21 12C21 16.9706 16.9706 21 12 21C7.02944 21 3 16.9706 3 12C3 7.02944 7.02944 3 12 3C16.9706 3 21 7.02944 21 12Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgRename (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M10 4H8V6H5C3.34315 6 2 7.34315 2 9V15C2 16.6569 3.34315 18 5 18H8V20H10V4ZM8 8V16H5C4.44772 16 4 15.5523 4 15V9C4 8.44772 4.44772 8 5 8H8Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M19 16H12V18H19C20.6569 18 22 16.6569 22 15V9C22 7.34315 20.6569 6 19 6H12V8H19C19.5523 8 20 8.44771 20 9V15C20 15.5523 19.5523 16 19 16Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgReorder (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M3 4C3 3.44772 3.44772 3 4 3H12C12.5523 3 13 3.44772 13 4C13 4.55228 12.5523 5 12 5H4C3.44772 5 3 4.55228 3 4Z\",\"fill\":\"currentColor\",\"fillOpacity\":\"0.5\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M3 12C3 11.4477 3.44772 11 4 11H12C12.5523 11 13 11.4477 13 12C13 12.5523 12.5523 13 12 13H4C3.44772 13 3 12.5523 3 12Z\",\"fill\":\"currentColor\",\"fillOpacity\":\"0.5\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M3 16C3 15.4477 3.44772 15 4 15H12C12.5523 15 13 15.4477 13 16C13 16.5523 12.5523 17 12 17H4C3.44772 17 3 16.5523 3 16Z\",\"fill\":\"currentColor\",\"fillOpacity\":\"0.5\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M3 20C3 19.4477 3.44772 19 4 19H12C12.5523 19 13 19.4477 13 20C13 20.5523 12.5523 21 12 21H4C3.44772 21 3 20.5523 3 20Z\",\"fill\":\"currentColor\",\"fillOpacity\":\"0.5\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M15.1707 9C15.5825 10.1652 16.6938 11 18 11C19.6569 11 21 9.65685 21 8C21 6.34315 19.6569 5 18 5C16.6938 5 15.5825 5.83481 15.1707 7H4C3.44772 7 3 7.44772 3 8C3 8.55228 3.44772 9 4 9H15.1707ZM19 8C19 8.55228 18.5523 9 18 9C17.4477 9 17 8.55228 17 8C17 7.44772 17.4477 7 18 7C18.5523 7 19 7.44772 19 8Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgRepeat (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M18.3701 7.99993L13.8701 10.598V8.99993H6.88989V12.9999H4.88989V6.99993H13.8701V5.40186L18.3701 7.99993Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M10.1299 16.9999H19.1101V10.9999H17.1101V14.9999H10.1299V13.4019L5.62988 15.9999L10.1299 18.598V16.9999Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgRing (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M6.34326 3.68567C6.83159 3.19735 7.36734 2.78535 7.93569 2.44968C10.4352 0.97348 13.5651 0.97348 16.0645 2.44968C16.6329 2.78535 17.1686 3.19735 17.657 3.68567L12.0001 9.34253L6.34326 3.68567ZM12.0001 6.5141L9.4131 3.92709C11.0447 3.14768 12.9556 3.14768 14.5871 3.92709L12.0001 6.5141Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M2 12.6576C2 9.52653 3.43899 6.73156 5.69172 4.89796L7.11528 6.32152C5.22043 7.78449 4 10.0785 4 12.6576C4 17.0759 7.58172 20.6576 12 20.6576C16.4183 20.6576 20 17.0759 20 12.6576C20 10.0785 18.7796 7.78451 16.8847 6.32154L18.3083 4.89798C20.561 6.73158 22 9.52654 22 12.6576C22 18.1804 17.5228 22.6576 12 22.6576C6.47715 22.6576 2 18.1804 2 12.6576Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgRowFirst (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"g\",\"attr\":{\"opacity\":\"0.5\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M6 11C5.44772 11 5 11.4477 5 12C5 12.5523 5.44772 13 6 13H14C14.5523 13 15 12.5523 15 12C15 11.4477 14.5523 11 14 11H6Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M6 15C5.44772 15 5 15.4477 5 16C5 16.5523 5.44772 17 6 17H14C14.5523 17 15 16.5523 15 16C15 15.4477 14.5523 15 14 15H6Z\",\"fill\":\"currentColor\"}}]},{\"tag\":\"path\",\"attr\":{\"d\":\"M5 8C5 7.44772 5.44772 7 6 7H18C18.5523 7 19 7.44772 19 8C19 8.55228 18.5523 9 18 9H6C5.44772 9 5 8.55228 5 8Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgRowLast (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"g\",\"attr\":{\"opacity\":\"0.5\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M6 13C5.44772 13 5 12.5523 5 12C5 11.4477 5.44772 11 6 11H14C14.5523 11 15 11.4477 15 12C15 12.5523 14.5523 13 14 13H6Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M6 9C5.44772 9 5 8.55228 5 8C5 7.44772 5.44772 7 6 7H14C14.5523 7 15 7.44772 15 8C15 8.55228 14.5523 9 14 9H6Z\",\"fill\":\"currentColor\"}}]},{\"tag\":\"path\",\"attr\":{\"d\":\"M5 16C5 16.5523 5.44772 17 6 17H18C18.5523 17 19 16.5523 19 16C19 15.4477 18.5523 15 18 15H6C5.44772 15 5 15.4477 5 16Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgRuler (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M3 6C1.34315 6 0 7.34315 0 9V16C0 17.6569 1.34315 19 3 19H21C22.6569 19 24 17.6569 24 16V9C24 7.34315 22.6569 6 21 6H3ZM9 8H7V13C7 13.5523 6.55228 14 6 14C5.44772 14 5 13.5523 5 13V8H3C2.44772 8 2 8.44772 2 9V16C2 16.5523 2.44772 17 3 17H21C21.5523 17 22 16.5523 22 16V9C22 8.44772 21.5523 8 21 8H19V11C19 11.5523 18.5523 12 18 12C17.4477 12 17 11.5523 17 11V8H15V13C15 13.5523 14.5523 14 14 14C13.4477 14 13 13.5523 13 13V8H11V11C11 11.5523 10.5523 12 10 12C9.44771 12 9 11.5523 9 11V8Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgSandClock (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M13 6H11V7C11 7.55228 11.4477 8 12 8C12.5523 8 13 7.55228 13 7V6Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M6 2V4H7V7C7 9.76142 9.23858 12 12 12C9.23858 12 7 14.2386 7 17V20H6V22H18V20H17V17C17 14.2386 14.7614 12 12 12C14.7614 12 17 9.76142 17 7V4H18V2H6ZM9 4H15V7C15 8.65685 13.6569 10 12 10C10.3431 10 9 8.65685 9 7V4ZM9 17V20H15V17C15 15.3431 13.6569 14 12 14C10.3431 14 9 15.3431 9 17Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgScan (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M11 3H13V21H11V3Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M5 8C5 7.44771 5.44772 7 6 7H9V5H6C4.34315 5 3 6.34315 3 8V16C3 17.6569 4.34315 19 6 19H9V17H6C5.44772 17 5 16.5523 5 16V8Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M19 8C19 7.44771 18.5523 7 18 7H15V5H18C19.6569 5 21 6.34315 21 8V16C21 17.6569 19.6569 19 18 19H15V17H18C18.5523 17 19 16.5523 19 16V8Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgScreenMirror (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M5 8H19V14H16V16H21V6H3V16H8V14H5V8Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M16.3301 19L12 13L7.66987 19H16.3301Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgScreenShot (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 8V6H8V10H10V8H12Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M14 14H16V18H12V16H14V14Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M4 3C4 2.44772 4.44772 2 5 2H19C19.5523 2 20 2.44772 20 3V21C20 21.5523 19.5523 22 19 22H5C4.44772 22 4 21.5523 4 21V3ZM6 20V4H18V20H6Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgScreenWide (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M11 16H3C1.34315 16 0 14.6569 0 13V8C0 6.34315 1.34315 5 3 5H21C22.6569 5 24 6.34315 24 8V13C24 14.6569 22.6569 16 21 16H13V17H15C15.5523 17 16 17.4477 16 18C16 18.5523 15.5523 19 15 19H9C8.44771 19 8 18.5523 8 18C8 17.4477 8.44771 17 9 17H11V16ZM3 7H21C21.5523 7 22 7.44772 22 8V13C22 13.5523 21.5523 14 21 14H3C2.44772 14 2 13.5523 2 13V8C2 7.44772 2.44772 7 3 7Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgScreen (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M11 17H4C2.34315 17 1 15.6569 1 14V6C1 4.34315 2.34315 3 4 3H20C21.6569 3 23 4.34315 23 6V14C23 15.6569 21.6569 17 20 17H13V19H16C16.5523 19 17 19.4477 17 20C17 20.5523 16.5523 21 16 21H8C7.44772 21 7 20.5523 7 20C7 19.4477 7.44772 19 8 19H11V17ZM4 5H20C20.5523 5 21 5.44772 21 6V14C21 14.5523 20.5523 15 20 15H4C3.44772 15 3 14.5523 3 14V6C3 5.44772 3.44772 5 4 5Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgScrollH (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M7.18188 9.17154L5.76766 7.75732L1.52502 12L5.76766 16.2426L7.18188 14.8284L4.35345 12L7.18188 9.17154Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M16.8181 14.8284L18.2323 16.2426L22.4749 12L18.2323 7.75733L16.8181 9.17155L19.6465 12L16.8181 14.8284Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M14.9999 12C14.9999 13.6569 13.6567 15 11.9999 15C10.343 15 8.99988 13.6569 8.99988 12C8.99988 10.3431 10.343 9 11.9999 9C13.6567 9 14.9999 10.3431 14.9999 12ZM12.9999 12C12.9999 12.5523 12.5522 13 11.9999 13C11.4476 13 10.9999 12.5523 10.9999 12C10.9999 11.4477 11.4476 11 11.9999 11C12.5522 11 12.9999 11.4477 12.9999 12Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgScrollV (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M9.17154 16.8182L7.75732 18.2324L12 22.475L16.2426 18.2324L14.8284 16.8182L12 19.6466L9.17154 16.8182Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M14.8284 7.182L16.2426 5.76779L12 1.52515L7.75733 5.76779L9.17155 7.182L12 4.35357L14.8284 7.182Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M12 9.00018C13.6569 9.00018 15 10.3433 15 12.0002C15 13.657 13.6569 15.0002 12 15.0002C10.3431 15.0002 9 13.657 9 12.0002C9 10.3433 10.3431 9.00018 12 9.00018ZM12 11.0002C12.5523 11.0002 13 11.4479 13 12.0002C13 12.5525 12.5523 13.0002 12 13.0002C11.4477 13.0002 11 12.5525 11 12.0002C11 11.4479 11.4477 11.0002 12 11.0002Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgSearchFound (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M7.66542 10.2366L9.19751 8.951L10.4831 10.4831L13.5473 7.91194L14.8328 9.44402L10.2366 13.3007L7.66542 10.2366Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M16.2071 4.89344C19.0923 7.77862 19.3131 12.3193 16.8693 15.4578C16.8846 15.4713 16.8996 15.4854 16.9143 15.5L21.1569 19.7427C21.5474 20.1332 21.5474 20.7664 21.1569 21.1569C20.7664 21.5474 20.1332 21.5474 19.7427 21.1569L15.5 16.9143C15.4854 16.8996 15.4713 16.8846 15.4578 16.8693C12.3193 19.3131 7.77862 19.0923 4.89344 16.2071C1.76924 13.083 1.76924 8.01763 4.89344 4.89344C8.01763 1.76924 13.083 1.76924 16.2071 4.89344ZM14.7929 14.7929C17.1361 12.4498 17.1361 8.6508 14.7929 6.30765C12.4498 3.96451 8.6508 3.96451 6.30765 6.30765C3.96451 8.6508 3.96451 12.4498 6.30765 14.7929C8.6508 17.1361 12.4498 17.1361 14.7929 14.7929Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgSearchLoading (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M8.55024 10.5503C8.55024 11.1026 8.10253 11.5503 7.55024 11.5503C6.99796 11.5503 6.55024 11.1026 6.55024 10.5503C6.55024 9.99801 6.99796 9.55029 7.55024 9.55029C8.10253 9.55029 8.55024 9.99801 8.55024 10.5503Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M10.5502 11.5503C11.1025 11.5503 11.5502 11.1026 11.5502 10.5503C11.5502 9.99801 11.1025 9.55029 10.5502 9.55029C9.99796 9.55029 9.55024 9.99801 9.55024 10.5503C9.55024 11.1026 9.99796 11.5503 10.5502 11.5503Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M13.5502 11.5503C14.1025 11.5503 14.5502 11.1026 14.5502 10.5503C14.5502 9.99801 14.1025 9.55029 13.5502 9.55029C12.998 9.55029 12.5502 9.99801 12.5502 10.5503C12.5502 11.1026 12.998 11.5503 13.5502 11.5503Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M16.2071 4.89344C19.0922 7.7786 19.313 12.3192 16.8693 15.4577C16.8846 15.4712 16.8996 15.4853 16.9142 15.4999L21.1568 19.7426C21.5473 20.1331 21.5473 20.7663 21.1568 21.1568C20.7663 21.5473 20.1331 21.5473 19.7426 21.1568L15.5 16.9141C15.4853 16.8995 15.4713 16.8846 15.4578 16.8693C12.3193 19.3131 7.77858 19.0923 4.89338 16.2071C1.76918 13.083 1.76918 8.01763 4.89338 4.89344C8.01757 1.76924 13.0829 1.76924 16.2071 4.89344ZM6.30759 14.7929C8.65074 17.1361 12.4497 17.1361 14.7929 14.7929C17.136 12.4498 17.136 8.6508 14.7929 6.30765C12.4497 3.96451 8.65074 3.96451 6.30759 6.30765C3.96445 8.6508 3.96445 12.4498 6.30759 14.7929Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgSearch (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M18.319 14.4326C20.7628 11.2941 20.542 6.75347 17.6569 3.86829C14.5327 0.744098 9.46734 0.744098 6.34315 3.86829C3.21895 6.99249 3.21895 12.0578 6.34315 15.182C9.22833 18.0672 13.769 18.2879 16.9075 15.8442C16.921 15.8595 16.9351 15.8745 16.9497 15.8891L21.1924 20.1317C21.5829 20.5223 22.2161 20.5223 22.6066 20.1317C22.9971 19.7412 22.9971 19.1081 22.6066 18.7175L18.364 14.4749C18.3493 14.4603 18.3343 14.4462 18.319 14.4326ZM16.2426 5.28251C18.5858 7.62565 18.5858 11.4246 16.2426 13.7678C13.8995 16.1109 10.1005 16.1109 7.75736 13.7678C5.41421 11.4246 5.41421 7.62565 7.75736 5.28251C10.1005 2.93936 13.8995 2.93936 16.2426 5.28251Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgSelectO (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M9.17154 11.508L7.75732 10.0938L12 5.85114L16.2426 10.0938L14.8284 11.508L12 8.67956L9.17154 11.508Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M9.17154 12.492L7.75732 13.9062L12 18.1489L16.2426 13.9062L14.8284 12.492L12 15.3204L9.17154 12.492Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M23 12C23 18.0751 18.0751 23 12 23C5.92487 23 1 18.0751 1 12C1 5.92487 5.92487 1 12 1C18.0751 1 23 5.92487 23 12ZM21 12C21 16.9706 16.9706 21 12 21C7.02944 21 3 16.9706 3 12C3 7.02944 7.02944 3 12 3C16.9706 3 21 7.02944 21 12Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgSelectR (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M9.17154 11.508L7.75732 10.0938L12 5.85113L16.2426 10.0938L14.8284 11.508L12 8.67956L9.17154 11.508Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M9.17154 12.492L7.75732 13.9062L12 18.1489L16.2426 13.9062L14.8284 12.492L12 15.3204L9.17154 12.492Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M1 5C1 2.79086 2.79086 1 5 1H19C21.2091 1 23 2.79086 23 5V19C23 21.2091 21.2091 23 19 23H5C2.79086 23 1 21.2091 1 19V5ZM5 3H19C20.1046 3 21 3.89543 21 5V19C21 20.1046 20.1046 21 19 21H5C3.89543 21 3 20.1046 3 19V5C3 3.89543 3.89543 3 5 3Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgSelect (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M6 9.65685L7.41421 11.0711L11.6569 6.82843L15.8995 11.0711L17.3137 9.65685L11.6569 4L6 9.65685Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M6 14.4433L7.41421 13.0291L11.6569 17.2717L15.8995 13.0291L17.3137 14.4433L11.6569 20.1001L6 14.4433Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgServer (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M9 6C8.44772 6 8 6.44772 8 7C8 7.55228 8.44772 8 9 8H15C15.5523 8 16 7.55228 16 7C16 6.44772 15.5523 6 15 6H9Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M9 10C8.44772 10 8 10.4477 8 11C8 11.5523 8.44772 12 9 12H15C15.5523 12 16 11.5523 16 11C16 10.4477 15.5523 10 15 10H9Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M13 17C13 17.5523 12.5523 18 12 18C11.4477 18 11 17.5523 11 17C11 16.4477 11.4477 16 12 16C12.5523 16 13 16.4477 13 17Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M4 5C4 3.34315 5.34315 2 7 2H17C18.6569 2 20 3.34315 20 5V19C20 20.6569 18.6569 22 17 22H7C5.34315 22 4 20.6569 4 19V5ZM7 4H17C17.5523 4 18 4.44772 18 5V19C18 19.5523 17.5523 20 17 20H7C6.44772 20 6 19.5523 6 19V5C6 4.44772 6.44771 4 7 4Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgServerless (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M11.7872 6H5V9H10.6953L11.7872 6Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M9.96735 11H5V14H8.87544L9.96735 11Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M11.0038 14L12.0957 11H20V14H11.0038Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M8.1475 16H5V19H7.05559L8.1475 16Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M9.18394 19L10.2759 16H20V19H9.18394Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M12.8236 9L13.9156 6H20V9H12.8236Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgShapeCircle (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M12 17C14.7614 17 17 14.7614 17 12C17 9.23858 14.7614 7 12 7C9.23858 7 7 9.23858 7 12C7 14.7614 9.23858 17 12 17ZM12 20C16.4183 20 20 16.4183 20 12C20 7.58172 16.4183 4 12 4C7.58172 4 4 7.58172 4 12C4 16.4183 7.58172 20 12 20Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgShapeHalfCircle (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M16 4C11.5817 4 8 7.58172 8 12C8 16.4183 11.5817 20 16 20V17C13.2386 17 11 14.7614 11 12C11 9.23858 13.2386 7 16 7V4Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgShapeHexagon (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M6 15.2348L12 18.5681L18 15.2348V8.76521L12 5.43188L6 8.76521V15.2348ZM12 2L3 7V17L12 22L21 17V7L12 2Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgShapeRhombus (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M12 6.34315L6.34317 12L12 17.6569L17.6569 12L12 6.34315ZM2.10052 12L12 21.8995L21.8995 12L12 2.10051L2.10052 12Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgShapeSquare (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M17 7H7V17H17V7ZM4 4V20H20V4H4Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgShapeTriangle (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M11.6603 5L3 20H20.3205L11.6603 5ZM11.6603 11L8.19615 17H15.1244L11.6603 11Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgShapeZigzag (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M2.31212 9L1 10.5094L4.77355 13.7897L6.28297 15.1018L7.59509 13.5924L9.13456 11.8214L11.3988 13.7897L12.9082 15.1018L14.2203 13.5924L15.7584 11.823L18.0209 13.7897L19.5303 15.1018L20.8424 13.5924L22.8106 11.3283L21.3012 10.0162L19.333 12.2803L15.5594 9L14.2473 10.5094L14.249 10.5109L12.7109 12.2803L8.93736 9L8.05395 10.0163L6.08567 12.2803L2.31212 9Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgShare (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M18 9C19.6569 9 21 7.65685 21 6C21 4.34315 19.6569 3 18 3C16.3431 3 15 4.34315 15 6C15 6.12549 15.0077 6.24919 15.0227 6.37063L8.08261 9.84066C7.54305 9.32015 6.80891 9 6 9C4.34315 9 3 10.3431 3 12C3 13.6569 4.34315 15 6 15C6.80891 15 7.54305 14.6798 8.08261 14.1593L15.0227 17.6294C15.0077 17.7508 15 17.8745 15 18C15 19.6569 16.3431 21 18 21C19.6569 21 21 19.6569 21 18C21 16.3431 19.6569 15 18 15C17.1911 15 16.457 15.3202 15.9174 15.8407L8.97733 12.3706C8.99229 12.2492 9 12.1255 9 12C9 11.8745 8.99229 11.7508 8.97733 11.6294L15.9174 8.15934C16.457 8.67985 17.1911 9 18 9Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgShield (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M7 8V13C7 15.7614 9.23858 18 12 18C14.7614 18 17 15.7614 17 13V8H7ZM5 4H19V13C19 16.866 15.866 20 12 20C8.13401 20 5 16.866 5 13V4Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgShoppingBag (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M5 4H19C19.5523 4 20 4.44771 20 5V19C20 19.5523 19.5523 20 19 20H5C4.44772 20 4 19.5523 4 19V5C4 4.44772 4.44771 4 5 4ZM2 5C2 3.34315 3.34315 2 5 2H19C20.6569 2 22 3.34315 22 5V19C22 20.6569 20.6569 22 19 22H5C3.34315 22 2 20.6569 2 19V5ZM12 12C9.23858 12 7 9.31371 7 6H9C9 8.56606 10.6691 10 12 10C13.3309 10 15 8.56606 15 6H17C17 9.31371 14.7614 12 12 12Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgShoppingCart (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M5.79166 2H1V4H4.2184L6.9872 16.6776H7V17H20V16.7519L22.1932 7.09095L22.5308 6H6.6552L6.08485 3.38852L5.79166 2ZM19.9869 8H7.092L8.62081 15H18.3978L19.9869 8Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M10 22C11.1046 22 12 21.1046 12 20C12 18.8954 11.1046 18 10 18C8.89543 18 8 18.8954 8 20C8 21.1046 8.89543 22 10 22Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M19 20C19 21.1046 18.1046 22 17 22C15.8954 22 15 21.1046 15 20C15 18.8954 15.8954 18 17 18C18.1046 18 19 18.8954 19 20Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgShortcut (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M16.1925 7.70711C15.8019 7.31658 15.1688 7.31658 14.7782 7.70711L7.70718 14.7782C7.31665 15.1687 7.31665 15.8019 7.70718 16.1924C8.0977 16.5829 8.73087 16.5829 9.12139 16.1924L16.1925 9.12132C16.583 8.7308 16.583 8.09763 16.1925 7.70711Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M3 6C3 4.34315 4.34315 3 6 3H18C19.6569 3 21 4.34315 21 6V18C21 19.6569 19.6569 21 18 21H6C4.34315 21 3 19.6569 3 18V6ZM6 5H18C18.5523 5 19 5.44772 19 6V18C19 18.5523 18.5523 19 18 19H6C5.44772 19 5 18.5523 5 18V6C5 5.44772 5.44772 5 6 5Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgShutterstock (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 17C12 17.5523 12.4477 18 13 18H17C17.5523 18 18 17.5523 18 17V13C18 12.4477 17.5523 12 17 12H16V16H12V17Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M11 6C11.5523 6 12 6.44772 12 7V8H8V12H7C6.44772 12 6 11.5523 6 11V7C6 6.44772 6.44772 6 7 6H11Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M5 2C3.34315 2 2 3.34315 2 5V19C2 20.6569 3.34315 22 5 22H19C20.6569 22 22 20.6569 22 19V5C22 3.34315 20.6569 2 19 2H5ZM19 4H5C4.44771 4 4 4.44772 4 5V19C4 19.5523 4.44772 20 5 20H19C19.5523 20 20 19.5523 20 19V5C20 4.44771 19.5523 4 19 4Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgSidebarOpen (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M3 4H21V20H3V4ZM9 6H19V18H9V6Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgSidebarRight (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M3 4H17V20H3V4ZM5 6H15V18H5V6Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M21 4H19V20H21V4Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgSidebar (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M21 20H7V4H21V20ZM19 18H9V6H19V18Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M3 20H5V4H3V20Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgSignal (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M15 7C15 6.44772 15.4477 6 16 6C16.5523 6 17 6.44772 17 7V17C17 17.5523 16.5523 18 16 18C15.4477 18 15 17.5523 15 17V7Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M7 15C7 14.4477 7.44772 14 8 14C8.55228 14 9 14.4477 9 15V17C9 17.5523 8.55228 18 8 18C7.44772 18 7 17.5523 7 17V15Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M12 10C11.4477 10 11 10.4477 11 11V17C11 17.5523 11.4477 18 12 18C12.5523 18 13 17.5523 13 17V11C13 10.4477 12.5523 10 12 10Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgSize (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M12 6V4H20V20H12V18H8V16H4V8H8V6H12ZM14 6H18V18H14V6ZM12 8H10V16H12V8ZM8 10V14H6V10H8Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgSketch (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M5.20879 3H18.903L20.1118 10.2527L12.0559 21.1858L4 10.2527L5.20879 3ZM6.90304 5L6.11184 9.74726L12.0559 17.8142L18 9.74726L17.2088 5H6.90304Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M8.05592 8H16.0559V10H8.05592V8Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgSlack (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M13 10C13 11.1046 13.8954 12 15 12C16.1046 12 17 11.1046 17 10V5C17 3.89543 16.1046 3 15 3C13.8954 3 13 3.89543 13 5V10ZM5 8C3.89543 8 3 8.89543 3 10C3 11.1046 3.89543 12 5 12H10C11.1046 12 12 11.1046 12 10C12 8.89543 11.1046 8 10 8H5ZM15 13C13.8954 13 13 13.8954 13 15C13 16.1046 13.8954 17 15 17H20C21.1046 17 22 16.1046 22 15C22 13.8954 21.1046 13 20 13H15ZM10 22C8.89543 22 8 21.1046 8 20L8 15C8 13.8954 8.89543 13 10 13C11.1046 13 12 13.8954 12 15V20C12 21.1046 11.1046 22 10 22ZM8 5C8 3.89543 8.89543 3 10 3C11.1046 3 12 3.89543 12 5V7H10C8.89543 7 8 6.10457 8 5ZM3 15C3 16.1046 3.89543 17 5 17C6.10457 17 7 16.1046 7 15V13H5C3.89543 13 3 13.8954 3 15ZM17 20C17 21.1046 16.1046 22 15 22C13.8954 22 13 21.1046 13 20V18H15C16.1046 18 17 18.8954 17 20ZM22 10C22 8.89543 21.1046 8 20 8C18.8954 8 18 8.89543 18 10V12H20C21.1046 12 22 11.1046 22 10Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgSleep (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M21 12C21 16.9706 16.9706 21 12 21C7.02944 21 3 16.9706 3 12C3 7.02944 7.02944 3 12 3C16.9706 3 21 7.02944 21 12ZM16.899 17C15.6364 18.2372 13.9073 19 12 19C10.0927 19 8.36355 18.2372 7.10102 17H16.899ZM18.3264 15C18.7583 14.0907 19 13.0736 19 12C19 8.13401 15.866 5 12 5C8.13401 5 5 8.13401 5 12C5 13.0736 5.24169 14.0907 5.67363 15H18.3264Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgSmartHomeBoiler (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M5 5C5 2.79086 6.79086 1 9 1H15C17.2091 1 19 2.79086 19 5V21H15.144L15.8865 22.9999H13.8865L13.144 21H11.144L11.8865 22.9999H9.88653L9.14397 21H5V5ZM9 3H15C16.1046 3 17 3.89543 17 5V7H7V5C7 3.89543 7.89543 3 9 3ZM7 9H17V19H7V9Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgSmartHomeCooker (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M15 16C15 17.6569 13.6569 19 12 19C10.3431 19 9 17.6569 9 16C9 14.3431 10.3431 13 12 13C13.6569 13 15 14.3431 15 16ZM13 16C13 16.5523 12.5523 17 12 17C11.4477 17 11 16.5523 11 16C11 15.4477 11.4477 15 12 15C12.5523 15 13 15.4477 13 16Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M15 1H9V3H11V5H7C4.79086 5 3 6.79086 3 9V19C3 21.2091 4.79086 23 7 23H17C19.2091 23 21 21.2091 21 19V9C21 6.79086 19.2091 5 17 5H13V3H15V1ZM17 7H7C5.89543 7 5 7.89543 5 9H19C19 7.89543 18.1046 7 17 7ZM19 11H5V19C5 20.1046 5.89543 21 7 21H17C18.1046 21 19 20.1046 19 19V11Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgSmartHomeHeat (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M17 11H7C6.44772 11 6 11.4477 6 12C6 12.5523 6.44772 13 7 13H10V15H7C5.34315 15 4 13.6569 4 12C4 10.3431 5.34315 9 7 9H17C18.6569 9 20 10.3431 20 12C20 13.6569 18.6569 15 17 15H14V13H17C17.5523 13 18 12.5523 18 12C18 11.4477 17.5523 11 17 11Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M0 12C0 8.13401 3.13401 5 7 5H17C20.866 5 24 8.13401 24 12C24 15.866 20.866 19 17 19H7C3.13401 19 0 15.866 0 12ZM7 7H17C19.7614 7 22 9.23858 22 12C22 14.7614 19.7614 17 17 17H7C4.23858 17 2 14.7614 2 12C2 9.23858 4.23858 7 7 7Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgSmartHomeLight (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M7.03435 6.5C7.03435 3.73858 9.27293 1.5 12.0344 1.5C14.7958 1.5 17.0344 3.73858 17.0344 6.5V10.5C17.0344 13.2614 14.7958 15.5 12.0344 15.5C9.27293 15.5 7.03435 13.2614 7.03435 10.5V6.5ZM15.0344 6.5V10.5C15.0344 12.1569 13.6912 13.5 12.0344 13.5C10.3775 13.5 9.03435 12.1569 9.03435 10.5V6.5C9.03435 4.84315 10.3775 3.5 12.0344 3.5C13.6912 3.5 15.0344 4.84315 15.0344 6.5Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M12.0344 16.5C11.4821 16.5 11.0344 16.9477 11.0344 17.5V21.5C11.0344 22.0523 11.4821 22.5 12.0344 22.5C12.5866 22.5 13.0344 22.0523 13.0344 21.5V17.5C13.0344 16.9477 12.5866 16.5 12.0344 16.5Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M7.74433 16.4397C7.93323 15.9207 8.50707 15.6531 9.02605 15.842C9.54502 16.0309 9.81261 16.6048 9.62372 17.1237L8.25564 20.8825C8.06675 21.4015 7.4929 21.6691 6.97393 21.4802C6.45495 21.2913 6.18736 20.7174 6.37625 20.1985L7.74433 16.4397Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M14.974 15.8421C14.4551 16.031 14.1875 16.6048 14.3764 17.1238L15.7445 20.8825C15.9333 21.4015 16.5072 21.6691 17.0262 21.4802C17.5451 21.2913 17.8127 20.7175 17.6238 20.1985L16.2558 16.4397C16.0669 15.9208 15.493 15.6532 14.974 15.8421Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgSmartHomeRefrigerator (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M9 6C9 5.44772 9.44772 5 10 5C10.5523 5 11 5.44772 11 6V8C11 8.55228 10.5523 9 10 9C9.44772 9 9 8.55228 9 8V6Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M10 13C9.44772 13 9 13.4477 9 14V16C9 16.5523 9.44772 17 10 17C10.5523 17 11 16.5523 11 16V14C11 13.4477 10.5523 13 10 13Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M5 4C5 2.34315 6.34315 1 8 1H16C17.6569 1 19 2.34315 19 4V20C19 21.6569 17.6569 23 16 23H8C6.34315 23 5 21.6569 5 20V4ZM8 3H16C16.5523 3 17 3.44772 17 4V10H7V4C7 3.44772 7.44772 3 8 3ZM7 12H17V20C17 20.5523 16.5523 21 16 21H8C7.44772 21 7 20.5523 7 20V12Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgSmartHomeWashMachine (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M6 4H18C18.5523 4 19 4.44772 19 5V8H5V5C5 4.44772 5.44771 4 6 4ZM19 19V10H5V19C5 19.5523 5.44772 20 6 20H18C18.5523 20 19 19.5523 19 19ZM3 5C3 3.34315 4.34315 2 6 2H18C19.6569 2 21 3.34315 21 5V19C21 20.6569 19.6569 22 18 22H6C4.34315 22 3 20.6569 3 19V5ZM7 5C6.44772 5 6 5.44772 6 6C6 6.55228 6.44772 7 7 7H9C9.55228 7 10 6.55228 10 6C10 5.44772 9.55228 5 9 5H7ZM14 7C14.5523 7 15 6.55228 15 6C15 5.44772 14.5523 5 14 5C13.4477 5 13 5.44772 13 6C13 6.55228 13.4477 7 14 7ZM18 6C18 6.55228 17.5523 7 17 7C16.4477 7 16 6.55228 16 6C16 5.44772 16.4477 5 17 5C17.5523 5 18 5.44772 18 6ZM14 15C14 16.1046 13.1046 17 12 17C10.8954 17 10 16.1046 10 15C10 13.8954 10.8954 13 12 13C13.1046 13 14 13.8954 14 15ZM16 15C16 17.2091 14.2091 19 12 19C9.79086 19 8 17.2091 8 15C8 12.7909 9.79086 11 12 11C14.2091 11 16 12.7909 16 15Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgSmartphoneChip (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M9 22C9 22.5523 8.55228 23 8 23C7.44772 23 7 22.5523 7 22C7 21.4477 7.44772 21 8 21C8.55228 21 9 21.4477 9 22ZM13 22C13 22.5523 12.5523 23 12 23C11.4477 23 11 22.5523 11 22C11 21.4477 11.4477 21 12 21C12.5523 21 13 21.4477 13 22ZM16 23C16.5523 23 17 22.5523 17 22C17 21.4477 16.5523 21 16 21C15.4477 21 15 21.4477 15 22C15 22.5523 15.4477 23 16 23Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M9 2C9 2.55228 8.55228 3 8 3C7.44772 3 7 2.55228 7 2C7 1.44772 7.44772 1 8 1C8.55228 1 9 1.44772 9 2ZM13 2C13 2.55228 12.5523 3 12 3C11.4477 3 11 2.55228 11 2C11 1.44772 11.4477 1 12 1C12.5523 1 13 1.44772 13 2ZM16 3C16.5523 3 17 2.55228 17 2C17 1.44772 16.5523 1 16 1C15.4477 1 15 1.44772 15 2C15 2.55228 15.4477 3 16 3ZM9 22C9 22.5523 8.55228 23 8 23C7.44772 23 7 22.5523 7 22C7 21.4477 7.44772 21 8 21C8.55228 21 9 21.4477 9 22ZM13 22C13 22.5523 12.5523 23 12 23C11.4477 23 11 22.5523 11 22C11 21.4477 11.4477 21 12 21C12.5523 21 13 21.4477 13 22ZM16 23C16.5523 23 17 22.5523 17 22C17 21.4477 16.5523 21 16 21C15.4477 21 15 21.4477 15 22C15 22.5523 15.4477 23 16 23ZM23 16C23 15.4477 22.5523 15 22 15C21.4477 15 21 15.4477 21 16C21 16.5523 21.4477 17 22 17C22.5523 17 23 16.5523 23 16ZM23 12C23 11.4477 22.5523 11 22 11C21.4477 11 21 11.4477 21 12C21 12.5523 21.4477 13 22 13C22.5523 13 23 12.5523 23 12ZM22 7C22.5523 7 23 7.44771 23 8C23 8.55229 22.5523 9 22 9C21.4477 9 21 8.55229 21 8C21 7.44771 21.4477 7 22 7ZM2 15C2.55228 15 3 15.4477 3 16C3 16.5523 2.55228 17 2 17C1.44772 17 1 16.5523 1 16C1 15.4477 1.44772 15 2 15ZM2 11C2.55228 11 3 11.4477 3 12C3 12.5523 2.55228 13 2 13C1.44772 13 1 12.5523 1 12C1 11.4477 1.44772 11 2 11ZM3 8C3 7.44771 2.55228 7 2 7C1.44772 7 1 7.44771 1 8C1 8.55229 1.44772 9 2 9C2.55228 9 3 8.55229 3 8ZM17 6H7C6.44772 6 6 6.44772 6 7V17C6 17.5523 6.44772 18 7 18H17C17.5523 18 18 17.5523 18 17V7C18 6.44772 17.5523 6 17 6ZM7 4C5.34315 4 4 5.34315 4 7V17C4 18.6569 5.34315 20 7 20H17C18.6569 20 20 18.6569 20 17V7C20 5.34315 18.6569 4 17 4H7ZM14 10H10V14H14V10ZM8 8V16H16V8H8Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgSmartphoneRam (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M5 4C5 4.55228 4.55228 5 4 5C3.44772 5 3 4.55228 3 4C3 3.44772 3.44772 3 4 3C4.55228 3 5 3.44772 5 4Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M9 4C9 4.55228 8.55228 5 8 5C7.44772 5 7 4.55228 7 4C7 3.44772 7.44772 3 8 3C8.55228 3 9 3.44772 9 4Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M12 5C12.5523 5 13 4.55228 13 4C13 3.44772 12.5523 3 12 3C11.4477 3 11 3.44772 11 4C11 4.55228 11.4477 5 12 5Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M17 4C17 4.55228 16.5523 5 16 5C15.4477 5 15 4.55228 15 4C15 3.44772 15.4477 3 16 3C16.5523 3 17 3.44772 17 4Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M20 5C20.5523 5 21 4.55228 21 4C21 3.44772 20.5523 3 20 3C19.4477 3 19 3.44772 19 4C19 4.55228 19.4477 5 20 5Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M5 20C5 20.5523 4.55228 21 4 21C3.44772 21 3 20.5523 3 20C3 19.4477 3.44772 19 4 19C4.55228 19 5 19.4477 5 20Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M9 20C9 20.5523 8.55228 21 8 21C7.44772 21 7 20.5523 7 20C7 19.4477 7.44772 19 8 19C8.55228 19 9 19.4477 9 20Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M12 21C12.5523 21 13 20.5523 13 20C13 19.4477 12.5523 19 12 19C11.4477 19 11 19.4477 11 20C11 20.5523 11.4477 21 12 21Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M17 20C17 20.5523 16.5523 21 16 21C15.4477 21 15 20.5523 15 20C15 19.4477 15.4477 19 16 19C16.5523 19 17 19.4477 17 20Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M20 21C20.5523 21 21 20.5523 21 20C21 19.4477 20.5523 19 20 19C19.4477 19 19 19.4477 19 20C19 20.5523 19.4477 21 20 21Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M5 12C5.55228 12 6 11.5523 6 11C6 10.4477 5.55228 10 5 10C4.44772 10 4 10.4477 4 11C4 11.5523 4.44772 12 5 12Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M20 13C20 13.5523 19.5523 14 19 14C18.4477 14 18 13.5523 18 13C18 12.4477 18.4477 12 19 12C19.5523 12 20 12.4477 20 13Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M0 9C0 7.34315 1.34315 6 3 6H21C22.6569 6 24 7.34315 24 9V15C24 16.6569 22.6569 18 21 18H3C1.34315 18 0 16.6569 0 15V9ZM3 8H21C21.5523 8 22 8.44772 22 9V15C22 15.5523 21.5523 16 21 16H3C2.44772 16 2 15.5523 2 15V9C2 8.44772 2.44772 8 3 8Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgSmartphoneShake (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M13 14H11V16H13V14Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M8 7C8 5.89543 8.89543 5 10 5H14C15.1046 5 16 5.89543 16 7V17C16 18.1046 15.1046 19 14 19H10C8.89543 19 8 18.1046 8 17V7ZM10 7H14V17H10V7Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M18 9H20V15H18V9Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M0 14H2V10H0V14Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M6 15H4V9H6V15Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M24 10H22V14H24V10Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgSmartphone (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M13 16H11V18H13V16Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M5 4C5 2.89543 5.89543 2 7 2H17C18.1046 2 19 2.89543 19 4V20C19 21.1046 18.1046 22 17 22H7C5.89543 22 5 21.1046 5 20V4ZM7 4H17V20H7L7 4Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgSmileMouthOpen (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 17C14.2091 17 16 15.2091 16 13H8C8 15.2091 9.79086 17 12 17Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M10 10C10 10.5523 9.55228 11 9 11C8.44772 11 8 10.5523 8 10C8 9.44772 8.44772 9 9 9C9.55228 9 10 9.44772 10 10Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M15 11C15.5523 11 16 10.5523 16 10C16 9.44772 15.5523 9 15 9C14.4477 9 14 9.44772 14 10C14 10.5523 14.4477 11 15 11Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M22 12C22 17.5228 17.5228 22 12 22C6.47715 22 2 17.5228 2 12C2 6.47715 6.47715 2 12 2C17.5228 2 22 6.47715 22 12ZM20 12C20 16.4183 16.4183 20 12 20C7.58172 20 4 16.4183 4 12C4 7.58172 7.58172 4 12 4C16.4183 4 20 7.58172 20 12Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgSmileNeutral (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M9 11C9.55228 11 10 10.5523 10 10C10 9.44772 9.55228 9 9 9C8.44772 9 8 9.44772 8 10C8 10.5523 8.44772 11 9 11Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M9 15C8.44772 15 8 15.4477 8 16C8 16.5523 8.44772 17 9 17H15C15.5523 17 16 16.5523 16 16C16 15.4477 15.5523 15 15 15H9Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M16 10C16 10.5523 15.5523 11 15 11C14.4477 11 14 10.5523 14 10C14 9.44772 14.4477 9 15 9C15.5523 9 16 9.44772 16 10Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M22 12C22 17.5228 17.5228 22 12 22C6.47715 22 2 17.5228 2 12C2 6.47715 6.47715 2 12 2C17.5228 2 22 6.47715 22 12ZM20 12C20 16.4183 16.4183 20 12 20C7.58172 20 4 16.4183 4 12C4 7.58172 7.58172 4 12 4C16.4183 4 20 7.58172 20 12Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgSmileNoMouth (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M10 10C10 10.5523 9.55228 11 9 11C8.44772 11 8 10.5523 8 10C8 9.44772 8.44772 9 9 9C9.55228 9 10 9.44772 10 10Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M15 11C15.5523 11 16 10.5523 16 10C16 9.44772 15.5523 9 15 9C14.4477 9 14 9.44772 14 10C14 10.5523 14.4477 11 15 11Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M12 22C17.5228 22 22 17.5228 22 12C22 6.47715 17.5228 2 12 2C6.47715 2 2 6.47715 2 12C2 17.5228 6.47715 22 12 22ZM12 20C16.4183 20 20 16.4183 20 12C20 7.58172 16.4183 4 12 4C7.58172 4 4 7.58172 4 12C4 16.4183 7.58172 20 12 20Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgSmileNone (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M8 9C7.44772 9 7 9.44772 7 10C7 10.5523 7.44772 11 8 11H9C9.55228 11 10 10.5523 10 10C10 9.44772 9.55228 9 9 9H8Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M15 9C14.4477 9 14 9.44772 14 10C14 10.5523 14.4477 11 15 11H16C16.5523 11 17 10.5523 17 10C17 9.44772 16.5523 9 16 9H15Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M9 15C8.44772 15 8 15.4477 8 16C8 16.5523 8.44772 17 9 17H15C15.5523 17 16 16.5523 16 16C16 15.4477 15.5523 15 15 15H9Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M12 22C17.5228 22 22 17.5228 22 12C22 6.47715 17.5228 2 12 2C6.47715 2 2 6.47715 2 12C2 17.5228 6.47715 22 12 22ZM12 20C16.4183 20 20 16.4183 20 12C20 7.58172 16.4183 4 12 4C7.58172 4 4 7.58172 4 12C4 16.4183 7.58172 20 12 20Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgSmileSad (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M9 11C9.55228 11 10 10.5523 10 10C10 9.44772 9.55228 9 9 9C8.44772 9 8 9.44772 8 10C8 10.5523 8.44772 11 9 11Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M14 17C14 15.8954 13.1046 15 12 15C10.8954 15 10 15.8954 10 17H8C8 14.7909 9.79086 13 12 13C14.2091 13 16 14.7909 16 17H14Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M16 10C16 10.5523 15.5523 11 15 11C14.4477 11 14 10.5523 14 10C14 9.44772 14.4477 9 15 9C15.5523 9 16 9.44772 16 10Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M22 12C22 17.5228 17.5228 22 12 22C6.47715 22 2 17.5228 2 12C2 6.47715 6.47715 2 12 2C17.5228 2 22 6.47715 22 12ZM20 12C20 16.4183 16.4183 20 12 20C7.58172 20 4 16.4183 4 12C4 7.58172 7.58172 4 12 4C16.4183 4 20 7.58172 20 12Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgSmileUpside (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M16 11H14C14 9.89543 13.1046 9 12 9C10.8954 9 10 9.89543 10 11H8C8 8.79086 9.79086 7 12 7C14.2091 7 16 8.79086 16 11Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M10 14C10 13.4477 9.55228 13 9 13C8.44772 13 8 13.4477 8 14C8 14.5523 8.44772 15 9 15C9.55228 15 10 14.5523 10 14Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M15 13C15.5523 13 16 13.4477 16 14C16 14.5523 15.5523 15 15 15C14.4477 15 14 14.5523 14 14C14 13.4477 14.4477 13 15 13Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M22 12C22 6.47715 17.5228 2 12 2C6.47715 2 2 6.47715 2 12C2 17.5228 6.47715 22 12 22C17.5228 22 22 17.5228 22 12ZM20 12C20 7.58172 16.4183 4 12 4C7.58172 4 4 7.58172 4 12C4 16.4183 7.58172 20 12 20C16.4183 20 20 16.4183 20 12Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgSmile (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M16 13H14C14 14.1046 13.1046 15 12 15C10.8954 15 10 14.1046 10 13H8C8 15.2091 9.79086 17 12 17C14.2091 17 16 15.2091 16 13Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M10 10C10 10.5523 9.55228 11 9 11C8.44772 11 8 10.5523 8 10C8 9.44771 8.44772 9 9 9C9.55228 9 10 9.44771 10 10Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M15 11C15.5523 11 16 10.5523 16 10C16 9.44771 15.5523 9 15 9C14.4477 9 14 9.44771 14 10C14 10.5523 14.4477 11 15 11Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M22 12C22 17.5228 17.5228 22 12 22C6.47715 22 2 17.5228 2 12C2 6.47715 6.47715 2 12 2C17.5228 2 22 6.47715 22 12ZM20 12C20 16.4183 16.4183 20 12 20C7.58172 20 4 16.4183 4 12C4 7.58172 7.58172 4 12 4C16.4183 4 20 7.58172 20 12Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgSoftwareDownload (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M11 5C11 4.44772 11.4477 4 12 4C12.5523 4 13 4.44772 13 5V12.1578L16.2428 8.91501L17.657 10.3292L12.0001 15.9861L6.34326 10.3292L7.75748 8.91501L11 12.1575V5Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M4 14H6V18H18V14H20V18C20 19.1046 19.1046 20 18 20H6C4.89543 20 4 19.1046 4 18V14Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgSoftwareUpload (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M11 14.9861C11 15.5384 11.4477 15.9861 12 15.9861C12.5523 15.9861 13 15.5384 13 14.9861V7.82831L16.2428 11.0711L17.657 9.65685L12.0001 4L6.34326 9.65685L7.75748 11.0711L11 7.82854V14.9861Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M4 14H6V18H18V14H20V18C20 19.1046 19.1046 20 18 20H6C4.89543 20 4 19.1046 4 18V14Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgSortAz (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M6 8C6 7.44772 6.44772 7 7 7H17C17.5523 7 18 7.44772 18 8C18 8.55228 17.5523 9 17 9H7C6.44772 9 6 8.55228 6 8Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M8 12C8 11.4477 8.44772 11 9 11H15C15.5523 11 16 11.4477 16 12C16 12.5523 15.5523 13 15 13H9C8.44772 13 8 12.5523 8 12Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M11 15C10.4477 15 10 15.4477 10 16C10 16.5523 10.4477 17 11 17H13C13.5523 17 14 16.5523 14 16C14 15.4477 13.5523 15 13 15H11Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgSortZa (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M6 16C6 16.5523 6.44772 17 7 17H17C17.5523 17 18 16.5523 18 16C18 15.4477 17.5523 15 17 15H7C6.44772 15 6 15.4477 6 16Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M8 12C8 12.5523 8.44772 13 9 13H15C15.5523 13 16 12.5523 16 12C16 11.4477 15.5523 11 15 11H9C8.44772 11 8 11.4477 8 12Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M11 9C10.4477 9 10 8.55229 10 8C10 7.44771 10.4477 7 11 7H13C13.5523 7 14 7.44771 14 8C14 8.55229 13.5523 9 13 9H11Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgSpaceBetweenV (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M5 5V9H19V5H17V7H7V5H5Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M5 19V15H19V19H17V17H7V19H5Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M7 11H17V13H7V11Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgSpaceBetween (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M19 5L15 5L15 19H19V17H17L17 7L19 7V5Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M5 5L9 5L9 19H5L5 17H7L7 7H5L5 5Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M13 7V17H11L11 7H13Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgSpectrum (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 16H16C16 11.5817 12.4183 8 8 8V12C10.2091 12 12 13.7909 12 16Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgSpinnerAlt (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M2 12C2 6.47715 6.47715 2 12 2V5C8.13401 5 5 8.13401 5 12H2Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgSpinnerTwoAlt (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 22C17.5228 22 22 17.5228 22 12H19C19 15.866 15.866 19 12 19V22Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M2 12C2 6.47715 6.47715 2 12 2V5C8.13401 5 5 8.13401 5 12H2Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgSpinnerTwo (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"opacity\":\"0.2\",\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M12 19C15.866 19 19 15.866 19 12C19 8.13401 15.866 5 12 5C8.13401 5 5 8.13401 5 12C5 15.866 8.13401 19 12 19ZM12 22C17.5228 22 22 17.5228 22 12C22 6.47715 17.5228 2 12 2C6.47715 2 2 6.47715 2 12C2 17.5228 6.47715 22 12 22Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M12 22C17.5228 22 22 17.5228 22 12H19C19 15.866 15.866 19 12 19V22Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M2 12C2 6.47715 6.47715 2 12 2V5C8.13401 5 5 8.13401 5 12H2Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgSpinner (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"opacity\":\"0.2\",\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M12 19C15.866 19 19 15.866 19 12C19 8.13401 15.866 5 12 5C8.13401 5 5 8.13401 5 12C5 15.866 8.13401 19 12 19ZM12 22C17.5228 22 22 17.5228 22 12C22 6.47715 17.5228 2 12 2C6.47715 2 2 6.47715 2 12C2 17.5228 6.47715 22 12 22Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M2 12C2 6.47715 6.47715 2 12 2V5C8.13401 5 5 8.13401 5 12H2Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgSquare (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M14 10H10V14H14V10Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M5 9C5 6.79086 6.79086 5 9 5H15C17.2091 5 19 6.79086 19 9V15C19 17.2091 17.2091 19 15 19H9C6.79086 19 5 17.2091 5 15V9ZM9 8H15C15.5523 8 16 8.44772 16 9V15C16 15.5523 15.5523 16 15 16H9C8.44772 16 8 15.5523 8 15V9C8 8.44772 8.44772 8 9 8Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgStack (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M20 4V16H22V2H8V4H20Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M2 8V22H16V8H2ZM14 10H4V20H14V10Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M17 7H5V5H19V19H17V7Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgStark (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M7.17222 18.0249C5.81662 17.2862 4.69522 16.1661 3.95526 14.791C3.01664 13.0467 2.75847 11.0163 3.23071 9.0927C3.70295 7.16908 4.87201 5.48904 6.51164 4.37775C8.15127 3.26646 10.1449 2.80295 12.1066 3.07692L11.67 6.20259C10.4822 6.03669 9.2751 6.31735 8.28231 6.99024C7.28951 7.66312 6.58164 8.68039 6.2957 9.84514C6.00976 11.0099 6.16608 12.2393 6.73442 13.2954C7.18247 14.1281 7.86148 14.8063 8.6823 15.2536L14.8278 3.97537L17.4621 5.4108C18.8177 6.14946 19.9391 7.26961 20.679 8.64469C21.6177 10.3889 21.8758 12.4193 21.4036 14.343C20.9314 16.2666 19.7623 17.9466 18.1227 19.0579C16.483 20.1692 14.4894 20.6327 12.5277 20.3587L12.9643 17.2331C14.1521 17.399 15.3592 17.1183 16.352 16.4454C17.3448 15.7725 18.0527 14.7553 18.3386 13.5905C18.6245 12.4258 18.4682 11.1964 17.8999 10.1402C17.4518 9.30761 16.7728 8.62938 15.952 8.18212L9.80647 19.4604L7.17222 18.0249Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgStopwatch (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M18.6214 2.55029L21.4498 5.37872L20.0356 6.79293L17.2071 3.96451L18.6214 2.55029Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M12.8225 8.60055H10.8225V12.6005H12.8225V8.60055Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M5.18633 18.8137C8.70105 22.3285 14.3995 22.3285 17.9143 18.8137C21.429 15.299 21.429 9.60055 17.9143 6.08583C14.3995 2.57111 8.70105 2.57111 5.18633 6.08583C1.67161 9.60054 1.67161 15.299 5.18633 18.8137ZM6.60054 17.3995C9.33422 20.1332 13.7664 20.1332 16.5 17.3995C19.2337 14.6659 19.2337 10.2337 16.5 7.50004C13.7664 4.76637 9.33422 4.76637 6.60054 7.50004C3.86688 10.2337 3.86688 14.6659 6.60054 17.3995Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgStories (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M15 6H9C8.44772 6 8 6.44772 8 7V17C8 17.5523 8.44772 18 9 18H15C15.5523 18 16 17.5523 16 17V7C16 6.44772 15.5523 6 15 6ZM9 4C7.34315 4 6 5.34315 6 7V17C6 18.6569 7.34315 20 9 20H15C16.6569 20 18 18.6569 18 17V7C18 5.34315 16.6569 4 15 4H9Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M2 6C2 5.44772 2.44772 5 3 5C3.55228 5 4 5.44772 4 6V18C4 18.5523 3.55228 19 3 19C2.44772 19 2 18.5523 2 18V6Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M20 6C20 5.44772 20.4477 5 21 5C21.5523 5 22 5.44772 22 6V18C22 18.5523 21.5523 19 21 19C20.4477 19 20 18.5523 20 18V6Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgStudio (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M17 13H13V17H17V13Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M3 3H21V21H3V3ZM5 5H19V19H5V5Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgStyle (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M13 21V13H21V21H13ZM15 15H19L19 19H15V15Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M3 11L3 3L11 3V11H3ZM5 5L9 5V9L5 9L5 5Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M18 6V12H16V8L12 8V6L18 6Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M12 18H6L6 12H8L8 16H12V18Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgSun (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M12 16C14.2091 16 16 14.2091 16 12C16 9.79086 14.2091 8 12 8C9.79086 8 8 9.79086 8 12C8 14.2091 9.79086 16 12 16ZM12 18C15.3137 18 18 15.3137 18 12C18 8.68629 15.3137 6 12 6C8.68629 6 6 8.68629 6 12C6 15.3137 8.68629 18 12 18Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M11 0H13V4.06189C12.6724 4.02104 12.3387 4 12 4C11.6613 4 11.3276 4.02104 11 4.06189V0ZM7.0943 5.68018L4.22173 2.80761L2.80752 4.22183L5.6801 7.09441C6.09071 6.56618 6.56608 6.0908 7.0943 5.68018ZM4.06189 11H0V13H4.06189C4.02104 12.6724 4 12.3387 4 12C4 11.6613 4.02104 11.3276 4.06189 11ZM5.6801 16.9056L2.80751 19.7782L4.22173 21.1924L7.0943 18.3198C6.56608 17.9092 6.09071 17.4338 5.6801 16.9056ZM11 19.9381V24H13V19.9381C12.6724 19.979 12.3387 20 12 20C11.6613 20 11.3276 19.979 11 19.9381ZM16.9056 18.3199L19.7781 21.1924L21.1923 19.7782L18.3198 16.9057C17.9092 17.4339 17.4338 17.9093 16.9056 18.3199ZM19.9381 13H24V11H19.9381C19.979 11.3276 20 11.6613 20 12C20 12.3387 19.979 12.6724 19.9381 13ZM18.3198 7.0943L21.1923 4.22183L19.7781 2.80762L16.9056 5.6801C17.4338 6.09071 17.9092 6.56608 18.3198 7.0943Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgSupport (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M12.2607 21.9966C12.174 21.9988 12.0871 22 12 22C11.9128 22 11.8259 21.9988 11.7393 21.9966C7.68318 21.8928 4.22762 19.3738 2.7573 15.8242C1.74192 13.3674 1.7476 10.588 2.77433 8.13481C3.27688 6.93672 4.00599 5.85718 4.90808 4.94979L4.94983 4.90804C5.85259 4.01056 6.92574 3.28429 8.1165 2.78202C10.5894 1.74123 13.3958 1.73933 15.87 2.77633C17.0688 3.27993 18.1488 4.01042 19.0562 4.91407L19.0859 4.94373C19.9989 5.86054 20.7351 6.95351 21.2392 8.16721C21.7279 9.34662 21.9812 10.6006 21.999 11.8573C21.9997 11.9047 22 11.9523 22 12C22 12.0506 21.9996 12.1012 21.9989 12.1516C21.9376 16.2743 19.3814 19.7925 15.7731 21.2637C14.6481 21.7213 13.4566 21.9656 12.2607 21.9966ZM14.0322 15.4464L16.906 18.3202C14.0281 20.5599 9.97192 20.5599 7.09402 18.3202L9.96779 15.4464C11.2175 16.1845 12.7825 16.1845 14.0322 15.4464ZM8.55358 14.0322L5.67981 16.906C3.44007 14.0281 3.44007 9.97192 5.67981 7.09402L8.55358 9.96779C7.81548 11.2175 7.81548 12.7825 8.55358 14.0322ZM10.0824 12.5694C10.0773 12.5523 10.0725 12.5351 10.0679 12.5179C9.97738 12.179 9.97738 11.821 10.0679 11.4821C10.1556 11.1537 10.3282 10.8434 10.5858 10.5858C10.8299 10.3417 11.1213 10.1739 11.4306 10.0824C11.4477 10.0773 11.4649 10.0725 11.4821 10.0679C11.821 9.97738 12.179 9.97737 12.5179 10.0679C12.8463 10.1556 13.1566 10.3282 13.4142 10.5858C13.6583 10.8299 13.8261 11.1213 13.9176 11.4306C13.9227 11.4477 13.9275 11.4649 13.9321 11.4821C14.0226 11.821 14.0226 12.179 13.9321 12.5179C13.8444 12.8462 13.6718 13.1566 13.4142 13.4142C13.1701 13.6583 12.8787 13.8261 12.5694 13.9176C12.5523 13.9227 12.5351 13.9275 12.5179 13.9321C12.179 14.0226 11.821 14.0226 11.4821 13.9321C11.1538 13.8444 10.8434 13.6718 10.5858 13.4142C10.3417 13.1701 10.1739 12.8787 10.0824 12.5694ZM14.0322 8.55357C12.7825 7.81548 11.2175 7.81548 9.96779 8.55357L7.09402 5.6798C9.97192 3.44007 14.0281 3.44007 16.906 5.6798L14.0322 8.55357ZM18.3202 16.906C20.5599 14.0281 20.5599 9.97192 18.3202 7.09402L15.4464 9.96779C16.1845 11.2175 16.1845 12.7825 15.4464 14.0322L18.3202 16.906Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgSwapVertical (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 16H13.5L13.5 10H15.5L15.5 16H17L14.5 19L12 16Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M8 8H9.5L9.5 14H11.5L11.5 8H13L10.5 5L8 8Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgSwap (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M16 13V11.5H10V9.5H16V8L19 10.5L16 13Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M8 17V15.5H14V13.5H8V12L5 14.5L8 17Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgSweden (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M23 4H10V11H23V4Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M23 13V20H10V13H23Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M8 13V20H1V13H8Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M1 11V4H8V11H1Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgSwiss (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M3 3V21H21V3H3ZM14 7H10V10H7V14H10V17H14V14H17V10H14V7Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgSync (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M4.56079 10.6418L6.35394 3.94971L8.25402 5.84979C11.7312 3.6588 16.3814 4.07764 19.41 7.1063L17.9958 8.52052C15.7536 6.27827 12.3686 5.87519 9.71551 7.31128L11.2529 8.84869L4.56079 10.6418Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M19.4392 13.3581L17.646 20.0502L15.7459 18.1501C12.2688 20.3411 7.61857 19.9223 4.58991 16.8936L6.00413 15.4794C8.24638 17.7217 11.6313 18.1247 14.2844 16.6887L12.747 15.1512L19.4392 13.3581Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgTab (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M18.9999 4C20.6568 4 21.9999 5.34315 21.9999 7V17C21.9999 18.6569 20.6568 20 18.9999 20H4.99994C3.34308 20 1.99994 18.6569 1.99994 17V7C1.99994 5.34315 3.34308 4 4.99994 4H18.9999ZM19.9999 9.62479H13C12.4478 9.62479 11.8442 9.20507 11.652 8.68732L10.6542 6H4.99994C4.44765 6 3.99994 6.44772 3.99994 7V17C3.99994 17.5523 4.44765 18 4.99994 18H18.9999C19.5522 18 19.9999 17.5523 19.9999 17V9.62479Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgTag (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M2 8V16C2 16.5523 2.44772 17 3 17H16.6202C16.9121 17 17.1895 16.8724 17.3795 16.6508L20.808 12.6508C21.129 12.2763 21.129 11.7237 20.808 11.3492L17.3795 7.34921C17.1895 7.12756 16.9121 7 16.6202 7H3C2.44772 7 2 7.44772 2 8ZM0 8V16C0 17.6569 1.34315 19 3 19H16.6202C17.496 19 18.328 18.6173 18.898 17.9524L22.3265 13.9524C23.2895 12.8289 23.2895 11.1711 22.3265 10.0476L18.898 6.04763C18.328 5.38269 17.496 5 16.6202 5H3C1.34315 5 0 6.34315 0 8Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M15 13C15.5523 13 16 12.5523 16 12C16 11.4477 15.5523 11 15 11C14.4477 11 14 11.4477 14 12C14 12.5523 14.4477 13 15 13ZM15 15C16.6569 15 18 13.6569 18 12C18 10.3431 16.6569 9 15 9C13.3431 9 12 10.3431 12 12C12 13.6569 13.3431 15 15 15Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgTally (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M3.66124 2.67117C3.71341 2.4 3.97956 2.18018 4.2557 2.18018H6.2557C6.53184 2.18018 6.71341 2.4 6.66124 2.67117L5.33877 9.54511C5.2866 9.81628 5.02045 10.0361 4.74431 10.0361H2.74431C2.46817 10.0361 2.2866 9.81628 2.33877 9.54511L3.66124 2.67117Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M8.66124 2.67117C8.71341 2.4 8.97956 2.18018 9.2557 2.18018H11.2557C11.5318 2.18018 11.7134 2.4 11.6612 2.67117L8.07168 21.329C8.01951 21.6002 7.75336 21.82 7.47722 21.82H5.47722C5.20108 21.82 5.01951 21.6002 5.07168 21.329L8.66124 2.67117Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M13.6612 2.67117C13.7134 2.4 13.9796 2.18018 14.2557 2.18018H16.2557C16.5318 2.18018 16.7134 2.4 16.6612 2.67117L13.0717 21.329C13.0195 21.6002 12.7534 21.82 12.4772 21.82H10.4772C10.2011 21.82 10.0195 21.6002 10.0717 21.329L13.6612 2.67117Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M18.6612 2.67117C18.7134 2.4 18.9796 2.18018 19.2557 2.18018H21.2557C21.5318 2.18018 21.7134 2.4 21.6612 2.67117L20.3388 9.54511C20.2866 9.81628 20.0205 10.0361 19.7443 10.0361H17.7443C17.4682 10.0361 17.2866 9.81628 17.3388 9.54511L18.6612 2.67117Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgTapDouble (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M14.9236 18V14C14.9236 12.3431 13.5804 11 11.9236 11C10.2667 11 8.92355 12.3431 8.92355 14V18C8.92355 19.6569 10.2667 21 11.9236 21C13.5804 21 14.9236 19.6569 14.9236 18ZM11.9236 9C9.16213 9 6.92355 11.2386 6.92355 14V18C6.92355 20.7614 9.16213 23 11.9236 23C14.685 23 16.9236 20.7614 16.9236 18V14C16.9236 11.2386 14.685 9 11.9236 9Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M10.9236 14C10.9236 13.4477 11.3713 13 11.9236 13C12.4758 13 12.9236 13.4477 12.9236 14V17H10.9236V14Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M11.9235 1C14.7023 1 17.2164 2.13339 19.0286 3.96311L17.6144 5.37735C16.1641 3.90955 14.15 3 11.9235 3C9.77436 3 7.82311 3.84749 6.38577 5.22651L4.97131 3.81205C6.7708 2.07122 9.22207 1 11.9235 1Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M11.9233 5C13.5809 5 15.1038 5.5761 16.3029 6.53898L14.8768 7.9651C14.0493 7.35833 13.0281 7 11.9233 7C10.848 7 9.85204 7.33943 9.03662 7.91699L7.60779 6.48816C8.79686 5.55586 10.2952 5 11.9233 5Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgTapSingle (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12.0491 3.11401C14.1927 3.11401 16.1393 3.95706 17.5756 5.32967L16.1609 6.74437C15.087 5.73346 13.6404 5.11401 12.0491 5.11401C10.4086 5.11401 8.92183 5.77243 7.83868 6.83944L6.42444 5.42519C7.86954 3.99627 9.85631 3.11401 12.0491 3.11401Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M10.9767 11.886C10.9767 11.3337 11.4244 10.886 11.9767 10.886C12.529 10.886 12.9767 11.3337 12.9767 11.886V13.886H10.9767V11.886Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M11.9767 6.88599C9.21526 6.88599 6.97668 9.12456 6.97668 11.886V15.886C6.97668 18.6474 9.21526 20.886 11.9767 20.886C14.7381 20.886 16.9767 18.6474 16.9767 15.886V11.886C16.9767 9.12456 14.7381 6.88599 11.9767 6.88599ZM14.9767 15.886V11.886C14.9767 10.2291 13.6335 8.88599 11.9767 8.88599C10.3198 8.88599 8.97668 10.2291 8.97668 11.886V15.886C8.97668 17.5428 10.3198 18.886 11.9767 18.886C13.6335 18.886 14.9767 17.5428 14.9767 15.886Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgTemplate (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M3 3V9H21V3H3ZM19 5H5V7H19V5Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M3 11V21H11V11H3ZM9 13H5V19H9V13Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M21 11H13V13H21V11Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M13 15H21V17H13V15Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M21 19H13V21H21V19Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgTennis (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M19.0711 19.0711C22.9763 15.1658 22.9763 8.83418 19.0711 4.92893C15.1658 1.02369 8.83418 1.02369 4.92893 4.92893C1.02369 8.83418 1.02369 15.1658 4.92893 19.0711C8.83418 22.9763 15.1658 22.9763 19.0711 19.0711ZM19.9426 11.0407C19.7364 9.32374 18.9745 7.6608 17.6569 6.34315C16.3343 5.0206 14.6639 4.25792 12.9402 4.0551L12.93 4.11139C12.1086 8.58308 8.58304 12.1086 4.11136 12.93L4.05511 12.9402C4.25793 14.6639 5.02061 16.3343 6.34315 17.6569C7.66079 18.9745 9.32373 19.7364 11.0407 19.9426C11.0449 19.9191 11.0491 19.8956 11.0534 19.8721C11.8748 15.4004 15.4003 11.8748 19.872 11.0534C19.8955 11.0491 19.9191 11.0449 19.9426 11.0407ZM19.872 13.4292V13.0951C16.5073 13.8586 13.8586 16.5073 13.095 19.8721H13.429C14.9777 19.5924 16.4598 18.8539 17.6569 17.6569C18.8539 16.4598 19.5923 14.9778 19.872 13.4292ZM4.11136 10.8884L4.11136 10.666C4.37766 9.08301 5.12159 7.5647 6.34315 6.34315C7.56465 5.12165 9.08288 4.37773 10.6658 4.11139L10.8883 4.11139C10.1248 7.47615 7.47612 10.1249 4.11136 10.8884Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgTerminal (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M5.0333 14.8284L6.44751 16.2426L10.6902 12L6.44751 7.75733L5.0333 9.17155L7.86172 12L5.0333 14.8284Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M15 14H11V16H15V14Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M2 2C0.895431 2 0 2.89543 0 4V20C0 21.1046 0.89543 22 2 22H22C23.1046 22 24 21.1046 24 20V4C24 2.89543 23.1046 2 22 2H2ZM22 4H2L2 20H22V4Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgTerrain (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M8 10L3 18H13L8 10Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M10.5286 10.7543L13.5 6L21 18H15.0572L10.5286 10.7543Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgThermometer (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M16.9498 5.63615C17.3403 5.24563 17.9735 5.24563 18.364 5.63615C18.7545 6.02668 18.7545 6.65984 18.364 7.05037L11.2929 14.1214C10.9024 14.512 10.2693 14.512 9.87873 14.1214C9.48821 13.7309 9.48821 13.0977 9.87873 12.7072L16.9498 5.63615Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M7.82813 17.5862C9.7695 18.8725 12.4109 18.6603 14.1214 16.9499L21.1924 9.8788C23.1451 7.92617 23.1451 4.76035 21.1924 2.80773C19.2398 0.855106 16.074 0.855106 14.1214 2.80773L7.0503 9.8788C5.33984 11.5893 5.12771 14.2307 6.41392 16.172L2.80766 19.7783C2.41714 20.1688 2.41714 20.802 2.80766 21.1925C3.19819 21.583 3.83135 21.583 4.22188 21.1925L7.82813 17.5862ZM12.7072 15.5356L19.7782 8.46458C20.9498 7.29301 20.9498 5.39351 19.7782 4.22194C18.6067 3.05037 16.7072 3.05037 15.5356 4.22194L8.46452 11.293C7.29294 12.4646 7.29294 14.3641 8.46452 15.5356C9.63609 16.7072 11.5356 16.7072 12.7072 15.5356Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgThermostat (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 19C12.5523 19 13 18.5523 13 18C13 17.4477 12.5523 17 12 17C11.4477 17 11 17.4477 11 18C11 18.5523 11.4477 19 12 19Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M15 13.9997C16.2144 14.9119 17 16.3642 17 18C17 20.7614 14.7614 23 12 23C9.23858 23 7 20.7614 7 18C7 16.3642 7.78555 14.9119 9 13.9997V4C9 2.34315 10.3431 1 12 1C13.6569 1 15 2.34315 15 4V13.9997ZM13 4V15.1707C14.1652 15.5826 15 16.6938 15 18C15 19.6569 13.6569 21 12 21C10.3431 21 9 19.6569 9 18C9 16.6938 9.83481 15.5826 11 15.1707V4C11 3.44772 11.4477 3 12 3C12.5523 3 13 3.44772 13 4Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgTikcode (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M9 5H5V9H9V5ZM3 3V11H11V3H3Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M19 5H15V9H19V5ZM13 3V11H21V3H13Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M9 15H5V19H9V15ZM3 13V21H11V13H3Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M13 13H15V21H13V13Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M16 13H18V21H16V13Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M19 13H21V21H19V13Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgTime (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M9 7H11V12H16V14H9V7Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M22 12C22 17.5228 17.5228 22 12 22C6.47715 22 2 17.5228 2 12C2 6.47715 6.47715 2 12 2C17.5228 2 22 6.47715 22 12ZM20 12C20 16.4183 16.4183 20 12 20C7.58172 20 4 16.4183 4 12C4 7.58172 7.58172 4 12 4C16.4183 4 20 7.58172 20 12Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgTimelapse (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 19C10.067 19 8.31704 18.2165 7.05029 16.9498L12 12L12 5C15.866 5 19 8.13401 19 12C19 15.866 15.866 19 12 19Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M23 12C23 18.0751 18.0751 23 12 23C5.92487 23 1 18.0751 1 12C1 5.92487 5.92487 1 12 1C18.0751 1 23 5.92487 23 12ZM21 12C21 16.9706 16.9706 21 12 21C7.02944 21 3 16.9706 3 12C3 7.02944 7.02944 3 12 3C16.9706 3 21 7.02944 21 12Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgTimer (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M13 5.07089C16.3923 5.55612 19 8.47353 19 12C19 15.866 15.866 19 12 19C8.13401 19 5 15.866 5 12C5 9.96159 5.87128 8.12669 7.26175 6.84738L5.84658 5.43221C4.09461 7.0743 3 9.40932 3 12C3 16.9706 7.02944 21 12 21C16.9706 21 21 16.9706 21 12C21 7.02944 16.9706 3 12 3C11.662 3 11.3283 3.01863 11 3.05493V9.08551H13V5.07089Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M7.70711 8.70708C7.31658 9.0976 7.31658 9.73077 7.70711 10.1213L10.5355 12.9497C10.9261 13.3402 11.5592 13.3402 11.9497 12.9497C12.3403 12.5592 12.3403 11.926 11.9497 11.5355L9.12132 8.70708C8.7308 8.31655 8.09763 8.31655 7.70711 8.70708Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgToday (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"rect\",\"attr\":{\"opacity\":\"0.5\",\"x\":\"7\",\"y\":\"9\",\"width\":\"10\",\"height\":\"10\",\"rx\":\"1\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M18 3H6C5.44772 3 5 3.44772 5 4V20C5 20.5523 5.44772 21 6 21H18C18.5523 21 19 20.5523 19 20V4C19 3.44772 18.5523 3 18 3ZM6 1C4.34315 1 3 2.34315 3 4V20C3 21.6569 4.34315 23 6 23H18C19.6569 23 21 21.6569 21 20V4C21 2.34315 19.6569 1 18 1H6Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M7 6C7 5.44772 7.44772 5 8 5H12C12.5523 5 13 5.44772 13 6C13 6.55228 12.5523 7 12 7H8C7.44772 7 7 6.55228 7 6Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgToggleOff (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M17 15C18.6569 15 20 13.6569 20 12C20 10.3431 18.6569 9 17 9C15.3431 9 14 10.3431 14 12C14 13.6569 15.3431 15 17 15Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M0 12C0 8.13401 3.13401 5 7 5H17C20.866 5 24 8.13401 24 12C24 15.866 20.866 19 17 19H7C3.13401 19 0 15.866 0 12ZM7 7H17C19.7614 7 22 9.23858 22 12C22 14.7614 19.7614 17 17 17H7C4.23858 17 2 14.7614 2 12C2 9.23858 4.23858 7 7 7Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgToggleOn (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M7 15C5.34315 15 4 13.6569 4 12C4 10.3431 5.34315 9 7 9C8.65685 9 10 10.3431 10 12C10 13.6569 8.65685 15 7 15Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M24 12C24 8.13401 20.866 5 17 5H7C3.13401 5 0 8.13401 0 12C0 15.866 3.13401 19 7 19H17C20.866 19 24 15.866 24 12ZM17 7H7C4.23858 7 2 9.23858 2 12C2 14.7614 4.23858 17 7 17H17C19.7614 17 22 14.7614 22 12C22 9.23858 19.7614 7 17 7Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgToggleSquareOff (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M15 9C14.4477 9 14 9.44772 14 10V14C14 14.5523 14.4477 15 15 15H19C19.5523 15 20 14.5523 20 14V10C20 9.44772 19.5523 9 19 9H15Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M0 7C0 5.89543 0.895431 5 2 5H22C23.1046 5 24 5.89543 24 7V17C24 18.1046 23.1046 19 22 19H2C0.89543 19 0 18.1046 0 17V7ZM2 7H22V17H2L2 7Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgToggleSquare (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M9 9C9.55228 9 10 9.44772 10 10V14C10 14.5523 9.55228 15 9 15H5C4.44772 15 4 14.5523 4 14V10C4 9.44772 4.44772 9 5 9H9Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M24 7C24 5.89543 23.1046 5 22 5H2C0.89543 5 0 5.89543 0 7V17C0 18.1046 0.895432 19 2 19H22C23.1046 19 24 18.1046 24 17V7ZM22 7H2V17H22V7Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgToolbarBottom (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M18 13H6V15H18V13Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M2 8C2 6.34315 3.34315 5 5 5H19C20.6569 5 22 6.34315 22 8V16C22 17.6569 20.6569 19 19 19H5C3.34315 19 2 17.6569 2 16V8ZM5 7H19C19.5523 7 20 7.44771 20 8V16C20 16.5523 19.5523 17 19 17H5C4.44772 17 4 16.5523 4 16V8C4 7.44772 4.44772 7 5 7Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgToolbarLeft (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M8 9H6V15H8V9Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M2 8C2 6.34315 3.34315 5 5 5H19C20.6569 5 22 6.34315 22 8V16C22 17.6569 20.6569 19 19 19H5C3.34315 19 2 17.6569 2 16V8ZM5 7H19C19.5523 7 20 7.44771 20 8V16C20 16.5523 19.5523 17 19 17H5C4.44772 17 4 16.5523 4 16V8C4 7.44772 4.44772 7 5 7Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgToolbarRight (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M16 9H18V15H16V9Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M22 8C22 6.34315 20.6569 5 19 5H5C3.34315 5 2 6.34315 2 8V16C2 17.6569 3.34315 19 5 19H19C20.6569 19 22 17.6569 22 16V8ZM19 7H5C4.44772 7 4 7.44771 4 8V16C4 16.5523 4.44772 17 5 17H19C19.5523 17 20 16.5523 20 16V8C20 7.44772 19.5523 7 19 7Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgToolbarTop (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M18 11H6V9H18V11Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M2 16C2 17.6569 3.34315 19 5 19H19C20.6569 19 22 17.6569 22 16V8C22 6.34315 20.6569 5 19 5H5C3.34315 5 2 6.34315 2 8V16ZM5 17H19C19.5523 17 20 16.5523 20 16V8C20 7.44772 19.5523 7 19 7H5C4.44772 7 4 7.44771 4 8V16C4 16.5523 4.44772 17 5 17Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgToolbox (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M17 5.5H20C21.1046 5.5 22 6.39543 22 7.5V19.5C22 20.6046 21.1046 21.5 20 21.5H4C2.89543 21.5 2 20.6046 2 19.5V7.5C2 6.39543 2.89543 5.5 4 5.5H7C7 3.84315 8.34315 2.5 10 2.5H14C15.6569 2.5 17 3.84315 17 5.5ZM14 4.5H10C9.44772 4.5 9 4.94772 9 5.5H15C15 4.94772 14.5523 4.5 14 4.5ZM20 7.5H4V9.5H20V7.5ZM4 19.5V11.5H7V13.5H11V11.5H13V13.5H17V11.5H20V19.5H4Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgTouchpad (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M20 21C21.6569 21 23 19.6569 23 18V6C23 4.34315 21.6569 3 20 3H4C2.34315 3 1 4.34315 1 6V18C1 19.6569 2.34315 21 4 21H20ZM4 5H20C20.5523 5 21 5.44772 21 6V14H3V6C3 5.44772 3.44772 5 4 5ZM3 16V18C3 18.5523 3.44772 19 4 19H11V16H3ZM13 19V16H21V18C21 18.5523 20.5523 19 20 19H13Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgTrack (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 15C13.6569 15 15 13.6569 15 12C15 10.3431 13.6569 9 12 9C10.3431 9 9 10.3431 9 12C9 13.6569 10.3431 15 12 15Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M12 3C12.5523 3 13 3.44772 13 4V5.07089C16.0657 5.5094 18.4906 7.93431 18.9291 11H20C20.5523 11 21 11.4477 21 12C21 12.5523 20.5523 13 20 13H18.9291C18.4906 16.0657 16.0657 18.4906 13 18.9291V20C13 20.5523 12.5523 21 12 21C11.4477 21 11 20.5523 11 20V18.9291C7.93431 18.4906 5.5094 16.0657 5.07089 13H4C3.44772 13 3 12.5523 3 12C3 11.4477 3.44772 11 4 11H5.07089C5.5094 7.93431 7.93431 5.5094 11 5.07089V4C11 3.44772 11.4477 3 12 3ZM7 12C7 9.23858 9.23858 7 12 7C14.7614 7 17 9.23858 17 12C17 14.7614 14.7614 17 12 17C9.23858 17 7 14.7614 7 12Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgTranscript (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M5 16C5 15.4477 5.44772 15 6 15H14C14.5523 15 15 15.4477 15 16C15 16.5523 14.5523 17 14 17H6C5.44772 17 5 16.5523 5 16Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M18 11C18.5523 11 19 11.4477 19 12C19 12.5523 18.5523 13 18 13H10C9.44772 13 9 12.5523 9 12C9 11.4477 9.44772 11 10 11H18Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M16 16C16 15.4477 16.4477 15 17 15H18C18.5523 15 19 15.4477 19 16C19 16.5523 18.5523 17 18 17H17C16.4477 17 16 16.5523 16 16Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M7 11C7.55228 11 8 11.4477 8 12C8 12.5523 7.55228 13 7 13H6C5.44772 13 5 12.5523 5 12C5 11.4477 5.44772 11 6 11H7Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M4 3C2.34315 3 1 4.34315 1 6V18C1 19.6569 2.34315 21 4 21H20C21.6569 21 23 19.6569 23 18V6C23 4.34315 21.6569 3 20 3H4ZM20 5H4C3.44772 5 3 5.44772 3 6V18C3 18.5523 3.44772 19 4 19H20C20.5523 19 21 18.5523 21 18V6C21 5.44771 20.5523 5 20 5Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgTrashEmpty (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M17 6V5C17 3.89543 16.1046 3 15 3H9C7.89543 3 7 3.89543 7 5V6H4C3.44772 6 3 6.44772 3 7C3 7.55228 3.44772 8 4 8H5V19C5 20.6569 6.34315 22 8 22H16C17.6569 22 19 20.6569 19 19V8H20C20.5523 8 21 7.55228 21 7C21 6.44772 20.5523 6 20 6H17ZM15 5H9V6H15V5ZM17 8H7V19C7 19.5523 7.44772 20 8 20H16C16.5523 20 17 19.5523 17 19V8Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgTrash (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M17 5V4C17 2.89543 16.1046 2 15 2H9C7.89543 2 7 2.89543 7 4V5H4C3.44772 5 3 5.44772 3 6C3 6.55228 3.44772 7 4 7H5V18C5 19.6569 6.34315 21 8 21H16C17.6569 21 19 19.6569 19 18V7H20C20.5523 7 21 6.55228 21 6C21 5.44772 20.5523 5 20 5H17ZM15 4H9V5H15V4ZM17 7H7V18C7 18.5523 7.44772 19 8 19H16C16.5523 19 17 18.5523 17 18V7Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M9 9H11V17H9V9Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M13 9H15V17H13V9Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgTree (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M11 17.9C8.71776 17.4367 7 15.419 7 13V7C7 4.23858 9.23858 2 12 2C14.7614 2 17 4.23858 17 7V13C17 15.419 15.2822 17.4367 13 17.9V21C13 21.5523 12.5523 22 12 22C11.4477 22 11 21.5523 11 21V17.9ZM12 4C13.6569 4 15 5.34315 15 7V13C15 14.3062 14.1652 15.4175 13 15.8293V11C13 10.4477 12.5523 10 12 10C11.4477 10 11 10.4477 11 11V15.8293C9.83481 15.4175 9 14.3062 9 13V7C9 5.34315 10.3431 4 12 4Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgTrees (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M12.7401 16.3185C12.035 17.1126 11.0808 17.6806 10 17.9V21C10 21.5523 9.55228 22 9 22C8.44772 22 8 21.5523 8 21V17.9C5.71776 17.4367 4 15.419 4 13V7C4 4.23858 6.23858 2 9 2C11.6087 2 13.7508 3.99781 13.9797 6.54693C14.5726 6.1993 15.2631 6 16 6C18.2091 6 20 7.79086 20 10V14C20 15.8638 18.7252 17.4299 17 17.874V21C17 21.5523 16.5523 22 16 22C15.4477 22 15 21.5523 15 21V17.874C14.0747 17.6358 13.279 17.075 12.7401 16.3185ZM12 7V13C12 14.3062 11.1652 15.4175 10 15.8293V13C10 12.4477 9.55228 12 9 12C8.44772 12 8 12.4477 8 13V15.8293C6.83481 15.4175 6 14.3062 6 13V7C6 5.34315 7.34315 4 9 4C10.6569 4 12 5.34315 12 7ZM17 15.7324V13C17 12.4477 16.5523 12 16 12C15.4477 12 15 12.4477 15 13V15.7324C14.4022 15.3866 14 14.7403 14 14V10C14 8.89543 14.8954 8 16 8C17.1046 8 18 8.89543 18 10V14C18 14.7403 17.5978 15.3866 17 15.7324Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgTrello (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M6 7C6 6.44771 6.44772 6 7 6H10C10.5523 6 11 6.44772 11 7V17C11 17.5523 10.5523 18 10 18H7C6.44772 18 6 17.5523 6 17V7Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M13 7C13 6.44772 13.4477 6 14 6H17C17.5523 6 18 6.44772 18 7V13C18 13.5523 17.5523 14 17 14H14C13.4477 14 13 13.5523 13 13V7Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M2 4C2 2.89543 2.89543 2 4 2H20C21.1046 2 22 2.89543 22 4V20C22 21.1046 21.1046 22 20 22H4C2.89543 22 2 21.1046 2 20V4ZM4 4H20V20H4V4Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgTrendingDown (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M1.85104 8.10628L0.436829 9.52049L7.5079 16.5916L13.8719 10.2276L18.1145 14.4702L16.3721 16.2126L23.0642 18.0058L21.2711 11.3136L19.5287 13.056L13.8719 7.39917L7.5079 13.7631L1.85104 8.10628Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgTrending (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M1.41421 16.4322L0 15.018L7.07107 7.94693L13.435 14.3109L17.6777 10.0682L15.9353 8.32587L22.6274 6.53271L20.8343 13.2248L19.0919 11.4825L13.435 17.1393L7.07107 10.7754L1.41421 16.4322Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgTrophy (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M13 15.9C15.2822 15.4367 17 13.419 17 11V4H7V11C7 13.419 8.71776 15.4367 11 15.9V18H9V20H15V18H13V15.9ZM9 6H15V11C15 12.6569 13.6569 14 12 14C10.3431 14 9 12.6569 9 11V6Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M18 6H20V11H18V6Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M6 6H4V11H6V6Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgTv (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M8 6.11861L9.4131 4.70551L11.5371 6.82954L14.3667 4L15.7782 5.41151L13.3137 7.87598H18C19.1046 7.87598 20 8.77141 20 9.87598V16.876C20 17.9805 19.1046 18.876 18 18.876H6C4.89543 18.876 4 17.9805 4 16.876V9.87598C4 8.77141 4.89543 7.87598 6 7.87598H9.75736L8 6.11861ZM18 9.87598H6V16.876H18V9.87598Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M8 19.876H16V20.876H8V19.876Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgTwilio (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M11 9C11 10.1046 10.1046 11 9 11C7.89543 11 7 10.1046 7 9C7 7.89543 7.89543 7 9 7C10.1046 7 11 7.89543 11 9Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M17 9C17 10.1046 16.1046 11 15 11C13.8954 11 13 10.1046 13 9C13 7.89543 13.8954 7 15 7C16.1046 7 17 7.89543 17 9Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M15 17C16.1046 17 17 16.1046 17 15C17 13.8954 16.1046 13 15 13C13.8954 13 13 13.8954 13 15C13 16.1046 13.8954 17 15 17Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M11 15C11 16.1046 10.1046 17 9 17C7.89543 17 7 16.1046 7 15C7 13.8954 7.89543 13 9 13C10.1046 13 11 13.8954 11 15Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M24 12C24 18.6274 18.6274 24 12 24C5.37258 24 0 18.6274 0 12C0 5.37258 5.37258 0 12 0C18.6274 0 24 5.37258 24 12ZM21 12C21 16.9706 16.9706 21 12 21C7.02944 21 3 16.9706 3 12C3 7.02944 7.02944 3 12 3C16.9706 3 21 7.02944 21 12Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgTwitter (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M8 3C9.10457 3 10 3.89543 10 5V8H16C17.1046 8 18 8.89543 18 10C18 11.1046 17.1046 12 16 12H10V14C10 15.6569 11.3431 17 13 17H16C17.1046 17 18 17.8954 18 19C18 20.1046 17.1046 21 16 21H13C9.13401 21 6 17.866 6 14V5C6 3.89543 6.89543 3 8 3Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgUiKit (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M14 6H10C9.44772 6 9 6.44772 9 7V17C9 17.5523 9.44772 18 10 18H14C14.5523 18 15 17.5523 15 17V7C15 6.44772 14.5523 6 14 6ZM10 4C8.34315 4 7 5.34315 7 7V17C7 18.6569 8.34315 20 10 20H14C15.6569 20 17 18.6569 17 17V7C17 5.34315 15.6569 4 14 4H10Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M6 7.45936L3.4932 7.04156C1.6646 6.73679 0 8.14692 0 10.0007V14.918C0 16.7718 1.6646 18.1819 3.4932 17.8772L6 17.4594V15.4318L3.1644 15.9044C2.55487 16.006 2 15.5359 2 14.918V10.0007C2 9.3828 2.55487 8.91276 3.1644 9.01435L6 9.48695V7.45936Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M18 7.45936L20.5068 7.04156C22.3354 6.73679 24 8.14692 24 10.0007V14.918C24 16.7718 22.3354 18.1819 20.5068 17.8772L18 17.4594V15.4318L20.8356 15.9044C21.4451 16.006 22 15.5359 22 14.918V10.0007C22 9.3828 21.4451 8.91276 20.8356 9.01435L18 9.48695V7.45936Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgUmbrella (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M4 9C4 4.58172 7.58172 1 12 1C16.4183 1 20 4.58172 20 9V11H13.0187V20.5C13.0187 21.8807 11.8994 23 10.5187 23C9.13797 23 8.01868 21.8807 8.01868 20.5V17.8571H10.0187V20.5C10.0187 20.7761 10.2425 21 10.5187 21C10.7948 21 11.0187 20.7761 11.0187 20.5V11H4V9ZM12 3C15.3137 3 18 5.68629 18 9H6C6 5.68629 8.68629 3 12 3Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgUnavailable (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M18.364 5.63604C21.8787 9.15076 21.8787 14.8492 18.364 18.364C14.8492 21.8787 9.15076 21.8787 5.63604 18.364C2.12132 14.8492 2.12132 9.15076 5.63604 5.63604C9.15076 2.12132 14.8492 2.12132 18.364 5.63604ZM16.1925 17.6067L6.39327 7.80749C4.33767 10.5493 4.55666 14.4562 7.05025 16.9497C9.54384 19.4433 13.4507 19.6623 16.1925 17.6067ZM16.9497 7.05025C19.4433 9.54384 19.6623 13.4507 17.6067 16.1925L7.80749 6.39327C10.5493 4.33767 14.4562 4.55666 16.9497 7.05025Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgUnblock (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M5.63604 18.364C9.15076 21.8787 14.8492 21.8787 18.364 18.364C21.8787 14.8492 21.8787 9.15076 18.364 5.63604C14.8492 2.12132 9.15076 2.12132 5.63604 5.63604C2.12132 9.15076 2.12132 14.8492 5.63604 18.364ZM7.80749 17.6067C10.5493 19.6623 14.4562 19.4433 16.9497 16.9497C19.4433 14.4562 19.6623 10.5493 17.6067 7.80749L14.8284 10.5858C14.4379 10.9763 13.8047 10.9763 13.4142 10.5858C13.0237 10.1953 13.0237 9.5621 13.4142 9.17157L16.1925 6.39327C13.4507 4.33767 9.54384 4.55666 7.05025 7.05025C4.55666 9.54384 4.33767 13.4507 6.39327 16.1925L9.17157 13.4142C9.5621 13.0237 10.1953 13.0237 10.5858 13.4142C10.9763 13.8047 10.9763 14.4379 10.5858 14.8284L7.80749 17.6067Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgUndo (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M5.33929 4.46777H7.33929V7.02487C8.52931 6.08978 10.0299 5.53207 11.6607 5.53207C15.5267 5.53207 18.6607 8.66608 18.6607 12.5321C18.6607 16.3981 15.5267 19.5321 11.6607 19.5321C9.51025 19.5321 7.58625 18.5623 6.30219 17.0363L7.92151 15.8515C8.83741 16.8825 10.1732 17.5321 11.6607 17.5321C14.4222 17.5321 16.6607 15.2935 16.6607 12.5321C16.6607 9.77065 14.4222 7.53207 11.6607 7.53207C10.5739 7.53207 9.56805 7.87884 8.74779 8.46777L11.3393 8.46777V10.4678H5.33929V4.46777Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgUnfold (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M2 12C2 17.5228 6.47715 22 12 22C17.5228 22 22 17.5228 22 12H2Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgUnsplash (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M15 4.5H9V8.5H15V4.5Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M4 10.5H9V14.5H15V10.5H20V19.5H4V10.5Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgUsbC (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M8 11C7.44772 11 7 11.4477 7 12C7 12.5523 7.44772 13 8 13H16C16.5523 13 17 12.5523 17 12C17 11.4477 16.5523 11 16 11H8Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M3 12C3 9.23858 5.23858 7 8 7H16C18.7614 7 21 9.23858 21 12C21 14.7614 18.7614 17 16 17H8C5.23858 17 3 14.7614 3 12ZM8 9H16C17.6569 9 19 10.3431 19 12C19 13.6569 17.6569 15 16 15H8C6.34315 15 5 13.6569 5 12C5 10.3431 6.34315 9 8 9Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgUsb (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M10 4.5H11V6.5H10V4.5Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M14 4.5H13V6.5H14V4.5Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M7 8.5V1.5H17V8.5H19V19.5C19 21.1569 17.6569 22.5 16 22.5H8C6.34315 22.5 5 21.1569 5 19.5V8.5H7ZM9 3.5H15V8.5H9V3.5ZM17 10.5H7V19.5C7 20.0523 7.44772 20.5 8 20.5H16C16.5523 20.5 17 20.0523 17 19.5V10.5Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgUserAdd (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M8 11C10.2091 11 12 9.20914 12 7C12 4.79086 10.2091 3 8 3C5.79086 3 4 4.79086 4 7C4 9.20914 5.79086 11 8 11ZM8 9C9.10457 9 10 8.10457 10 7C10 5.89543 9.10457 5 8 5C6.89543 5 6 5.89543 6 7C6 8.10457 6.89543 9 8 9Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M11 14C11.5523 14 12 14.4477 12 15V21H14V15C14 13.3431 12.6569 12 11 12H5C3.34315 12 2 13.3431 2 15V21H4V15C4 14.4477 4.44772 14 5 14H11Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M18 7H20V9H22V11H20V13H18V11H16V9H18V7Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgUserList (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M8 11C10.2091 11 12 9.20914 12 7C12 4.79086 10.2091 3 8 3C5.79086 3 4 4.79086 4 7C4 9.20914 5.79086 11 8 11ZM8 9C9.10457 9 10 8.10457 10 7C10 5.89543 9.10457 5 8 5C6.89543 5 6 5.89543 6 7C6 8.10457 6.89543 9 8 9Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M11 14C11.5523 14 12 14.4477 12 15V21H14V15C14 13.3431 12.6569 12 11 12H5C3.34315 12 2 13.3431 2 15V21H4V15C4 14.4477 4.44772 14 5 14H11Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M22 11H16V13H22V11Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M16 15H22V17H16V15Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M22 7H16V9H22V7Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgUserRemove (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M8 11C10.2091 11 12 9.20914 12 7C12 4.79086 10.2091 3 8 3C5.79086 3 4 4.79086 4 7C4 9.20914 5.79086 11 8 11ZM8 9C9.10457 9 10 8.10457 10 7C10 5.89543 9.10457 5 8 5C6.89543 5 6 5.89543 6 7C6 8.10457 6.89543 9 8 9Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M11 14C11.5523 14 12 14.4477 12 15V21H14V15C14 13.3431 12.6569 12 11 12H5C3.34315 12 2 13.3431 2 15V21H4V15C4 14.4477 4.44772 14 5 14H11Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M22 9H16V11H22V9Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgUser (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M16 7C16 9.20914 14.2091 11 12 11C9.79086 11 8 9.20914 8 7C8 4.79086 9.79086 3 12 3C14.2091 3 16 4.79086 16 7ZM14 7C14 8.10457 13.1046 9 12 9C10.8954 9 10 8.10457 10 7C10 5.89543 10.8954 5 12 5C13.1046 5 14 5.89543 14 7Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M16 15C16 14.4477 15.5523 14 15 14H9C8.44772 14 8 14.4477 8 15V21H6V15C6 13.3431 7.34315 12 9 12H15C16.6569 12 18 13.3431 18 15V21H16V15Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgUserlane (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M15 4H21V10H15V4Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M3 12C3 16.9706 7.02944 21 12 21C16.9706 21 21 16.9706 21 12H17C17 14.7614 14.7614 17 12 17C9.23858 17 7 14.7614 7 12H3Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M6 10C7.65685 10 9 8.65685 9 7C9 5.34315 7.65685 4 6 4C4.34315 4 3 5.34315 3 7C3 8.65685 4.34315 10 6 10Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgViewCols (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M2 8C2 6.34315 3.34315 5 5 5H19C20.6569 5 22 6.34315 22 8V16C22 17.6569 20.6569 19 19 19H5C3.34315 19 2 17.6569 2 16V8ZM16 7H19C19.5523 7 20 7.44771 20 8V16C20 16.5523 19.5523 17 19 17H16V7ZM14 7H10V17H14V7ZM8 17V7H5C4.44772 7 4 7.44772 4 8V16C4 16.5523 4.44772 17 5 17H8Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgViewComfortable (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M2 8C2 6.34315 3.34315 5 5 5H19C20.6569 5 22 6.34315 22 8V16C22 17.6569 20.6569 19 19 19H5C3.34315 19 2 17.6569 2 16V8ZM5 7H19C19.5523 7 20 7.44771 20 8V11H4V8C4 7.44772 4.44772 7 5 7ZM4 13V16C4 16.5523 4.44772 17 5 17H8V13H4ZM10 17H19C19.5523 17 20 16.5523 20 16V13H10V17Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgViewDay (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M2 8C2 6.34315 3.34315 5 5 5H19C20.6569 5 22 6.34315 22 8V16C22 17.6569 20.6569 19 19 19H5C3.34315 19 2 17.6569 2 16V8ZM13 7H19C19.5523 7 20 7.44771 20 8V11H13V7ZM11 7H5C4.44772 7 4 7.44772 4 8V11H11V7ZM4 13V16C4 16.5523 4.44772 17 5 17H11V13H4ZM13 17H19C19.5523 17 20 16.5523 20 16V13H13V17Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgViewGrid (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M5 5C3.34315 5 2 6.34315 2 8V16C2 17.6569 3.34315 19 5 19H19C20.6569 19 22 17.6569 22 16V8C22 6.34315 20.6569 5 19 5H5ZM8 7H5C4.44772 7 4 7.44772 4 8V9H8V7ZM10 7V9H14V7H10ZM16 7V9H20V8C20 7.44771 19.5523 7 19 7H16ZM14 11H10V13H14V11ZM16 13V11H20V13H16ZM14 15H10V17H14V15ZM16 17V15H20V16C20 16.5523 19.5523 17 19 17H16ZM8 17V15H4V16C4 16.5523 4.44772 17 5 17H8ZM8 13V11H4V13H8Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgViewList (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M5 5C3.34315 5 2 6.34315 2 8V16C2 17.6569 3.34315 19 5 19H19C20.6569 19 22 17.6569 22 16V8C22 6.34315 20.6569 5 19 5H5ZM7 7H5C4.44772 7 4 7.44772 4 8V9H7V7ZM9 7V9H20V8C20 7.44771 19.5523 7 19 7H9ZM7 11H4V13H7V11ZM9 13V11H20V13H9ZM7 15H4V16C4 16.5523 4.44772 17 5 17H7V15ZM9 17V15H20V16C20 16.5523 19.5523 17 19 17H9Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgViewMonth (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M2 8C2 6.34315 3.34315 5 5 5H19C20.6569 5 22 6.34315 22 8V16C22 17.6569 20.6569 19 19 19H5C3.34315 19 2 17.6569 2 16V8ZM17 7H19C19.5523 7 20 7.44771 20 8V9H17V7ZM15 7H13V9H15V7ZM11 7H9V9H11V7ZM7 7H5C4.44772 7 4 7.44772 4 8V9H7V7ZM4 11V13H7V11H4ZM4 15V16C4 16.5523 4.44772 17 5 17H7V15H4ZM9 17H11V15H9V17ZM13 17H15V15H13V17ZM17 17H19C19.5523 17 20 16.5523 20 16V15H17V17ZM20 13V11H17V13H20ZM11 13H9V11H11V13ZM15 13H13V11H15V13Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgViewSplit (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M2 8C2 6.34315 3.34315 5 5 5H19C20.6569 5 22 6.34315 22 8V16C22 17.6569 20.6569 19 19 19H5C3.34315 19 2 17.6569 2 16V8ZM13 7H19C19.5523 7 20 7.44771 20 8V16C20 16.5523 19.5523 17 19 17H13V7ZM11 7H5C4.44772 7 4 7.44772 4 8V16C4 16.5523 4.44772 17 5 17H11V7Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgVinyl (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M12 13C12.5523 13 13 12.5523 13 12C13 11.4477 12.5523 11 12 11C11.4477 11 11 11.4477 11 12C11 12.5523 11.4477 13 12 13Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M20 12C20 16.4183 16.4183 20 12 20C7.58172 20 4 16.4183 4 12C4 7.58172 7.58172 4 12 4C16.4183 4 20 7.58172 20 12ZM16 12C16 14.2091 14.2091 16 12 16C9.79086 16 8 14.2091 8 12C8 9.79086 9.79086 8 12 8C14.2091 8 16 9.79086 16 12Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgVoicemailO (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M11 12C11 12.3506 10.9398 12.6872 10.8293 13H13.1707C13.0602 12.6872 13 12.3506 13 12C13 10.3431 14.3431 9 16 9C17.6569 9 19 10.3431 19 12C19 13.6569 17.6569 15 16 15H8C6.34315 15 5 13.6569 5 12C5 10.3431 6.34315 9 8 9C9.65685 9 11 10.3431 11 12ZM9 12C9 12.5523 8.55228 13 8 13C7.44772 13 7 12.5523 7 12C7 11.4477 7.44772 11 8 11C8.55228 11 9 11.4477 9 12ZM17 12C17 12.5523 16.5523 13 16 13C15.4477 13 15 12.5523 15 12C15 11.4477 15.4477 11 16 11C16.5523 11 17 11.4477 17 12Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M23 12C23 18.0751 18.0751 23 12 23C5.92487 23 1 18.0751 1 12C1 5.92487 5.92487 1 12 1C18.0751 1 23 5.92487 23 12ZM21 12C21 16.9706 16.9706 21 12 21C7.02944 21 3 16.9706 3 12C3 7.02944 7.02944 3 12 3C16.9706 3 21 7.02944 21 12Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgVoicemailR (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M11.5 12C11.5 12.3506 11.4398 12.6872 11.3293 13H13.6707C13.5602 12.6872 13.5 12.3506 13.5 12C13.5 10.3431 14.8431 9 16.5 9C18.1569 9 19.5 10.3431 19.5 12C19.5 13.6569 18.1569 15 16.5 15H8.5C6.84315 15 5.5 13.6569 5.5 12C5.5 10.3431 6.84315 9 8.5 9C10.1569 9 11.5 10.3431 11.5 12ZM9.5 12C9.5 12.5523 9.05228 13 8.5 13C7.94772 13 7.5 12.5523 7.5 12C7.5 11.4477 7.94772 11 8.5 11C9.05228 11 9.5 11.4477 9.5 12ZM17.5 12C17.5 12.5523 17.0523 13 16.5 13C15.9477 13 15.5 12.5523 15.5 12C15.5 11.4477 15.9477 11 16.5 11C17.0523 11 17.5 11.4477 17.5 12Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M1.5 8C1.5 6.34315 2.84315 5 4.5 5H19.5C21.1569 5 22.5 6.34315 22.5 8V16C22.5 17.6569 21.1569 19 19.5 19H4.5C2.84315 19 1.5 17.6569 1.5 16V8ZM4.5 7H19.5C20.0523 7 20.5 7.44772 20.5 8V16C20.5 16.5523 20.0523 17 19.5 17H4.5C3.94772 17 3.5 16.5523 3.5 16V8C3.5 7.44772 3.94772 7 4.5 7Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgVoicemail (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M10.0004 15C10.6281 14.1643 11 13.1256 11 12C11 9.23858 8.76142 7 6 7C3.23858 7 1 9.23858 1 12C1 14.7614 3.23858 17 6 17H18C20.7614 17 23 14.7614 23 12C23 9.23858 20.7614 7 18 7C15.2386 7 13 9.23858 13 12C13 13.1256 13.3719 14.1643 13.9996 15H10.0004ZM6 15C7.65685 15 9 13.6569 9 12C9 10.3431 7.65685 9 6 9C4.34315 9 3 10.3431 3 12C3 13.6569 4.34315 15 6 15ZM18 15C19.6569 15 21 13.6569 21 12C21 10.3431 19.6569 9 18 9C16.3431 9 15 10.3431 15 12C15 13.6569 16.3431 15 18 15Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgVolume (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M24 12C24 16.4183 20.4183 20 16 20V18C19.3137 18 22 15.3137 22 12C22 8.68629 19.3137 6 16 6V4C20.4183 4 24 7.58172 24 12Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M20 12C20 14.2091 18.2091 16 16 16V14C17.1046 14 18 13.1046 18 12C18 10.8954 17.1046 10 16 10V8C18.2091 8 20 9.79086 20 12Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M9 16L15 20V4L9 8H5C2.79086 8 1 9.79086 1 12C1 14.2091 2.79086 16 5 16H9ZM5 10H9L13 7.5V16.5L9 14H5C3.89543 14 3 13.1046 3 12C3 10.8954 3.89543 10 5 10Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgWebcam (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M13 10C13 10.5523 12.5523 11 12 11C11.4477 11 11 10.5523 11 10C11 9.44772 11.4477 9 12 9C12.5523 9 13 9.44772 13 10Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M13 14.9C15.2822 14.4367 17 12.419 17 10C17 7.23858 14.7614 5 12 5C9.23858 5 7 7.23858 7 10C7 12.419 8.71776 14.4367 11 14.9V17H7V19H17V17H13V14.9ZM12 13C13.6569 13 15 11.6569 15 10C15 8.34315 13.6569 7 12 7C10.3431 7 9 8.34315 9 10C9 11.6569 10.3431 13 12 13Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgWebsite (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M14 7C13.4477 7 13 7.44772 13 8V16C13 16.5523 13.4477 17 14 17H18C18.5523 17 19 16.5523 19 16V8C19 7.44772 18.5523 7 18 7H14ZM17 9H15V15H17V9Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M6 7C5.44772 7 5 7.44772 5 8C5 8.55228 5.44772 9 6 9H10C10.5523 9 11 8.55228 11 8C11 7.44772 10.5523 7 10 7H6Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M6 11C5.44772 11 5 11.4477 5 12C5 12.5523 5.44772 13 6 13H10C10.5523 13 11 12.5523 11 12C11 11.4477 10.5523 11 10 11H6Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M5 16C5 15.4477 5.44772 15 6 15H10C10.5523 15 11 15.4477 11 16C11 16.5523 10.5523 17 10 17H6C5.44772 17 5 16.5523 5 16Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M4 3C2.34315 3 1 4.34315 1 6V18C1 19.6569 2.34315 21 4 21H20C21.6569 21 23 19.6569 23 18V6C23 4.34315 21.6569 3 20 3H4ZM20 5H4C3.44772 5 3 5.44772 3 6V18C3 18.5523 3.44772 19 4 19H20C20.5523 19 21 18.5523 21 18V6C21 5.44772 20.5523 5 20 5Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgWindows (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M3 5.5485L10.1954 4.58174V11.6106L3.00672 11.6651L3 5.5485ZM10.1954 12.3909V19.4957L3.00571 18.5105L3.0053 12.3909H10.1954ZM11.1134 4.45599L20.9977 3V11.5334L11.1134 11.6106V4.45599ZM21 12.505L20.9977 21L11.1134 19.6466V12.505H21Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgWorkAlt (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M17 7C17 5.34315 15.6569 4 14 4H10C8.34315 4 7 5.34315 7 7H6C4.34315 7 3 8.34315 3 10V18C3 19.6569 4.34315 21 6 21H18C19.6569 21 21 19.6569 21 18V10C21 8.34315 19.6569 7 18 7H17ZM14 6H10C9.44772 6 9 6.44772 9 7H15C15 6.44772 14.5523 6 14 6ZM6 9H18C18.5523 9 19 9.44772 19 10V18C19 18.5523 18.5523 19 18 19H6C5.44772 19 5 18.5523 5 18V10C5 9.44772 5.44772 9 6 9Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgYinyang (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M14 16C14 17.1046 13.1046 18 12 18C10.8954 18 10 17.1046 10 16C10 14.8954 10.8954 14 12 14C13.1046 14 14 14.8954 14 16Z\",\"fill\":\"currentColor\"}},{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M22 12C22 17.5228 17.5228 22 12 22C6.47715 22 2 17.5228 2 12C2 6.47715 6.47715 2 12 2C17.5228 2 22 6.47715 22 12ZM12 12C9.79086 12 8 10.2091 8 8C8 5.79086 9.79086 4 12 4C7.58172 4 4 7.58172 4 12C4 16.4183 7.58172 20 12 20C14.2091 20 16 18.2091 16 16C16 13.7909 14.2091 12 12 12ZM14 8C14 9.10457 13.1046 10 12 10C10.8954 10 10 9.10457 10 8C10 6.89543 10.8954 6 12 6C13.1046 6 14 6.89543 14 8Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgYoutube (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M5 7H19C19.5523 7 20 7.44771 20 8V16C20 16.5523 19.5523 17 19 17H5C4.44772 17 4 16.5523 4 16V8C4 7.44772 4.44772 7 5 7ZM2 8C2 6.34315 3.34315 5 5 5H19C20.6569 5 22 6.34315 22 8V16C22 17.6569 20.6569 19 19 19H5C3.34315 19 2 17.6569 2 16V8ZM10 9L14 12L10 15V9Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgZeit (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M17.9923 17.0225L11.9806 6.97729L6.00775 17.0225H17.9923Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgZoomIn (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M15.3431 15.2426C17.6863 12.8995 17.6863 9.1005 15.3431 6.75736C13 4.41421 9.20101 4.41421 6.85786 6.75736C4.51472 9.1005 4.51472 12.8995 6.85786 15.2426C9.20101 17.5858 13 17.5858 15.3431 15.2426ZM16.7574 5.34315C19.6425 8.22833 19.8633 12.769 17.4195 15.9075C17.4348 15.921 17.4498 15.9351 17.4645 15.9497L21.7071 20.1924C22.0976 20.5829 22.0976 21.2161 21.7071 21.6066C21.3166 21.9971 20.6834 21.9971 20.2929 21.6066L16.0503 17.364C16.0356 17.3493 16.0215 17.3343 16.008 17.319C12.8695 19.7628 8.32883 19.542 5.44365 16.6569C2.31946 13.5327 2.31946 8.46734 5.44365 5.34315C8.56785 2.21895 13.6332 2.21895 16.7574 5.34315ZM10.1005 7H12.1005V10H15.1005V12H12.1005V15H10.1005V12H7.10052V10H10.1005V7Z\",\"fill\":\"currentColor\"}}]})(props);\n};\nexport function CgZoomOut (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\",\"fill\":\"none\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M15.3431 15.2426C17.6863 12.8995 17.6863 9.1005 15.3431 6.75736C13 4.41421 9.20101 4.41421 6.85786 6.75736C4.51472 9.1005 4.51472 12.8995 6.85786 15.2426C9.20101 17.5858 13 17.5858 15.3431 15.2426ZM16.7574 5.34315C19.6425 8.22833 19.8633 12.769 17.4195 15.9075C17.4348 15.921 17.4498 15.9351 17.4645 15.9497L21.7071 20.1924C22.0976 20.5829 22.0976 21.2161 21.7071 21.6066C21.3166 21.9971 20.6834 21.9971 20.2929 21.6066L16.0503 17.364C16.0356 17.3493 16.0215 17.3343 16.008 17.319C12.8695 19.7628 8.32883 19.542 5.44365 16.6569C2.31946 13.5327 2.31946 8.46734 5.44365 5.34315C8.56785 2.21895 13.6332 2.21895 16.7574 5.34315ZM7.10052 10V12H15.1005V10L7.10052 10Z\",\"fill\":\"currentColor\"}}]})(props);\n};\n","import {IconButton} from './IconButton'\nimport {CgDarkMode} from 'react-icons/cg'\nimport {h} from 'preact'\n\nexport function ThemeToggle ({\n  dark = false,\n  onChange = () => {}\n}: {\n  dark?: boolean\n  onChange?: (dark: boolean) => void\n}) {\n  return (\n    <IconButton\n      onAction={() => onChange(!dark)}\n      icon={<CgDarkMode/>}\n      label={dark\n        ? 'Use light theme'\n        : 'Use dark theme'}\n    />\n  )\n}\n","import {ThemeToggle} from './ThemeToggle'\nimport {h, VNode} from 'preact'\nimport {useEffect, useState} from 'preact/hooks'\nimport {Theming} from './Theming'\n\nconst isNarrow = () => {\n  return innerWidth < 768\n}\n\nexport function Layout (props: {\n  header: VNode\n  aside: VNode\n  main: VNode\n}) {\n  const [narrow, setNarrow] = useState(isNarrow())\n\n  useEffect(() => {\n    const handler = () => setNarrow(isNarrow())\n    window.addEventListener('resize', handler)\n    return () => {\n      window.removeEventListener('resize', handler)\n    }\n  }, [])\n\n  return (\n    <Theming\n      dark={true}\n      render={({theme, dark, setDark}) => (\n        <article style={narrow ? {\n          display: 'flex',\n          flexDirection: 'column-reverse'\n        } : {\n          position: 'absolute',\n          top: 0,\n          left: 0,\n          right: 0,\n          bottom: 0,\n          display: 'flex'\n        }}>\n          <aside style={{\n            width: narrow ? '100%' : '320px',\n            display: 'flex',\n            flexDirection: 'column',\n            borderRight: narrow ? '' : '1px solid ' + theme.divider\n          }}>\n            <header style={{\n              display: 'flex',\n              alignItems: 'center',\n              justifyContent: 'space-between',\n              flexDirection: 'row',\n              borderBottom: '1px solid ' + theme.divider\n            }}>\n              {props.header}\n              <ThemeToggle\n                dark={dark}\n                onChange={setDark}\n              />\n            </header>\n            <div style={{\n              display: 'flex',\n              flexDirection: 'column',\n              overflow: 'auto'\n            }}>\n              {props.aside}\n            </div>\n          </aside>\n          <main style={narrow ? {\n            width: '100%',\n            height: 'calc(100vh - 64px)',\n            position: 'relative',\n            overflow: 'hidden',\n            borderBottom: '1px solid ' + theme.divider\n          } : {\n            display: 'flex',\n            flex: 1,\n            position: 'relative'\n          }}>\n            {props.main}\n          </main>\n        </article>\n      )}\n    />\n  )\n}","import {Inputs, useEffect, useRef, useState} from 'preact/hooks'\nimport {Note} from '../utils'\nimport {Loader, Player} from '@dipl/dom-play'\n\nexport function usePlayer (loader: Loader, notes: Note[], inputs?: Inputs) {\n  const [ready, setReady] = useState(false)\n  const playerRef = useRef<Player | undefined>()\n\n  useEffect(() => {\n    setReady(false)\n\n    Player(notes, loader)\n      .then(player => {\n        playerRef.current = player\n        setReady(true)\n      })\n      .catch(error => {\n        alert('Player failed to load. Check browser console for error messages.')\n        console.error(error)\n      })\n\n    return () => {\n      if (!playerRef.current) return\n      playerRef.current.stop()\n    }\n  }, inputs)\n\n  return {\n    ready,\n    loader,\n    player: playerRef.current\n  }\n}\n","import * as React from 'preact'\nimport {Fragment, h, VNode} from 'preact'\nimport {useMemo, useRef, useState} from 'preact/hooks'\nimport {Loader} from '@dipl/dom-play'\nimport {LineView} from './LineView'\nimport {NoteView} from './NoteView'\nimport {Crosshair} from './Crosshair'\nimport {Downloader} from './Downloader'\nimport {Cursor} from './Cursor'\nimport {Player} from './Player'\nimport {Layout} from './Layout'\nimport {usePlayer} from '../hooks/usePlayer'\nimport {useEvent} from '../hooks/useEvent'\nimport {\n  Box,\n  boxToUnit,\n  Geometry,\n  getFreqValues,\n  getIdealBox,\n  getTimeValues,\n  Note,\n  Pair,\n  unitToBox\n} from '../utils'\n\nexport type VisProps<Y extends Note, X> = {\n  axiom: X\n  notes: (x: X) => Y[]\n  lines: (ys: Y[]) => (x: X) => Geometry[]\n  bound: (ys: Y[]) => (x: X) => Geometry[]\n  input: (axiom: X, setAxiom: (axiom: Partial<X>) => void) => VNode\n}\n\nexport const Vis = <Y extends Note, X> (props: VisProps<Y, X>) => {\n\n  const [loader] = useState(() => Loader())\n  const [axiom, setAxiom] = useState<X>(props.axiom)\n\n  const data = useMemo(() => {\n    const notes: Y[] = props.notes(axiom)\n    const bound: Box = getIdealBox(props.bound(notes)(axiom))\n    const lines = props.lines(notes)(axiom)\n    return {\n      notes,\n      scale: boxToUnit(bound),\n      unscale: unitToBox(bound),\n      ticks: [\n        getTimeValues(lines),\n        getFreqValues(lines)\n      ] as Pair<number[]>\n    }\n  }, [axiom])\n\n  const input = (props.input || (() => <Fragment/>))(\n    axiom,\n    part => setAxiom({...axiom, ...part})\n  )\n\n  const playerState = usePlayer(loader, data.notes, [axiom])\n  const visRef = useRef<HTMLElement>()\n\n  // Focus play button when clicking visualization.\n  // Allows controlling play/stop with space bar.\n  // FIXME: do not use ID but refs\n  const [playButtonId] = useState('play-' + String(Math.random()).substr(2))\n  useEvent(visRef, 'click', () => {\n    const playButton = document.getElementById(playButtonId)\n    if (!playButton) return\n    playButton.focus()\n  })\n\n  return (\n    <Layout\n      header={\n        <div style={{\n          display: 'flex'\n        }}>\n          <Player\n            id={playButtonId}\n            loaded={playerState.ready}\n            onPlay={() => playerState.player?.play()}\n            onStop={() => playerState.player?.stop()}\n          />\n          <Downloader {...{\n            loaded: playerState.ready,\n            loader: playerState.loader,\n            notes: data.notes,\n            getFileName: () => 'my-song.mp3'\n          }}/>\n        </div>\n      }\n      aside={input}\n      main={\n        <section\n          ref={visRef as any}\n          style={{\n            position: 'absolute',\n            top: 0,\n            left: 0,\n            bottom: 0,\n            right: 0,\n            overflow: 'hidden'\n          }}>\n          {data.ticks[0].map(value => (\n            <LineView {...{\n              value,\n              scale: data.scale,\n              axis: 0\n            }}/>\n          ))}\n          {data.ticks[1].map(value => (\n            <LineView {...{\n              value,\n              scale: data.scale,\n              axis: 1\n            }}/>\n          ))}\n          {data.notes.map(note => (\n            <NoteView\n              note={note}\n              scale={data.scale}\n            />\n          ))}\n          <Cursor\n            scale={data.scale}\n            notes={data.notes}\n            getTime={() => playerState.player?.getState().time}\n          />\n          <Crosshair\n            element={visRef}\n            ticks={data.ticks}\n            scale={data.scale}\n            unscale={data.unscale}\n            onSelect={([time]) => playerState.player?.jump(time)}\n          />\n        </section>\n      }\n    />\n  )\n}\n","import {Vis} from './components/Vis'\nimport {Geometry, Note} from './utils'\nimport {Fragment, h, VNode} from 'preact'\nimport {Exp, seq, Seq} from '@dipl/lib-core'\n\nexport function vis<Y extends Note, X> ({\n  axiom,\n  notes = [],\n  lines = ys => ys,\n  bound = ys => ys,\n  input = () => <Fragment/>\n}: {\n  axiom: X\n  notes?: Exp<Seq<Y>, X>\n  lines?: (ys: Y[]) => Exp<Seq<Geometry>, X>\n  bound?: (ys: Y[]) => Exp<Seq<Geometry>, X>\n  input?: (axiom: X, setAxiom: (axiom: X) => void) => VNode\n}) {\n  return <Vis {...{\n    axiom,\n    input,\n    notes: seq(notes),\n    lines: (ys: Y[]) => seq(lines(ys)),\n    bound: (ys: Y[]) => seq(bound(ys))\n  }}/>\n}\n","export * from './src/input'\nexport * from './src/vis'","export type Props = Readonly<{\n  index: number\n  min: number\n  max: number\n  alternate: boolean\n  inclusive: boolean\n  reverse: boolean\n}>\n\nconst mod = (n: number, m: number): number => {\n  return ((n % m) + m) % m\n}\n\nexport default function osc ({\n  index = 0,\n  min = 0,\n  max = 0,\n  alternate = false,\n  inclusive = false,\n  reverse = false\n}: Partial<Props>) {\n  const diff = max - min\n  const last = inclusive ? 1 : 0\n  const period = Math.abs(diff) + last\n  const periodIndex = Math.floor(index / period)\n  const evenPeriod = mod(periodIndex, 2) === 0\n  const forward = (!alternate || evenPeriod) !== reverse\n  const periodSign = forward ? 1 : -1\n  const start = forward ? min : max\n  const sign = Math.sign(diff) * periodSign\n  return start + sign * mod(index, period)\n}\n","import {binary, Exp, seq, Seq, ternary, unary, val} from '@dipl/lib-core'\nimport {modulo, quotient} from '@dipl/utils-modulo'\n\nconst reduce = <T> (f: (a: T, b: T) => T, n0: T) => {\n  return <X> (...ns: Exp<Seq<T>, X>[]) => (\n    (x: X): T => val(seq(...ns), x).reduce(f, n0)\n  )\n}\n\nexport const\n\n  // basic\n  neg = unary((n: number) => -n),\n  inc = unary((n: number) => n + 1),\n  dec = unary((n: number) => n - 1),\n  sum = reduce((a, b) => a + b, 0),\n  prod = reduce((a, b) => a * b, 1),\n  frac = binary((a: number, b: number) => a / b),\n  diff = binary((a: number, b: number) => a - b),\n\n  // interval\n  linear = ternary((t: number, a: number, b: number) => a + t * (b - a)),\n  clamp = ternary((t: number, a: number, b: number) => Math.min(b, Math.max(a, t))),\n\n  // modulo\n  mod = binary(modulo),\n  quot = binary(quotient),\n\n  // magnitude\n  sign = unary(Math.sign),\n  abs = unary(Math.abs),\n  floor = unary(Math.floor),\n  ceil = unary(Math.ceil),\n  round = unary(Math.round),\n\n  // exponential\n  exp = unary(Math.exp),\n  log = unary(Math.log),\n  log2 = unary(Math.log2),\n  sqrt = unary(Math.sqrt),\n  pow = binary(Math.pow),\n\n  // trigonometry\n  sin = unary(Math.sin),\n  cos = unary(Math.cos),\n  tan = unary(Math.tan),\n\n  // comparison\n  eq = binary(<T> (a: T, b: T) => a == b),\n  max = reduce((a, b) => Math.max(a, b), -Infinity),\n  min = reduce((a, b) => Math.min(a, b), Infinity),\n  lt = binary((a: number, b: number) => a < b),\n  lte = binary((a: number, b: number) => a <= b),\n  gte = binary((a: number, b: number) => a >= b),\n  gt = binary((a: number, b: number) => a > b),\n\n  // booleans\n  not = unary((a: boolean) => !a),\n  and = reduce<boolean>((a, b) => a && b, true),\n  or = reduce<boolean>((a, b) => a || b, false)\n","import {decompose, modulo} from '@dipl/utils-modulo'\n\nconst modePattern = (mode: number) => {\n  const major = [2, 2, 1, 2, 2, 2, 1]\n  const rotate = modulo(mode, 7)\n  return [\n    ...major.slice(rotate),\n    ...major.slice(0, rotate)\n  ]\n}\n\nexport const chromatic = (mode: number) => {\n  const pattern = modePattern(mode)\n    .reduce((a, x, i) => [...a, a[i] + x], [0])\n\n  return (value: number) => {\n    const [degree, alter] = decompose(value, 1)\n    const [octaves, index] = decompose(degree, 7)\n    return pattern[index] + 12 * octaves + alter * 2\n  }\n}\n\nexport const diatonic = (mode: number) => {\n  const pattern = modePattern(mode)\n    .reduce((a: number[], x, i) => {\n      if (x === 1) {\n        return [...a, i]\n      }\n      /* istanbul ignore next */\n      if (x === 2) {\n        return [...a, i, i + 0.5]\n      }\n      /* istanbul ignore next */\n      throw new Error('unexpected number in diatonic pattern')\n    }, [])\n\n  return (x: number) => {\n    const [octaves, index] = decompose(x, 12)\n    return pattern[index] + 7 * octaves\n  }\n}\n","// noinspection SpellCheckingInspection\nexport default [\n  'percussion',\n  'acoustic_grand_piano',\n  'bright_acoustic_piano',\n  'electric_grand_piano',\n  'honkytonk_piano',\n  'electric_piano_1',\n  'electric_piano_2',\n  'harpsichord',\n  'clavinet',\n  'celesta',\n  'glockenspiel',\n  'music_box',\n  'vibraphone',\n  'marimba',\n  'xylophone',\n  'tubular_bells',\n  'dulcimer',\n  'drawbar_organ',\n  'percussive_organ',\n  'rock_organ',\n  'church_organ',\n  'reed_organ',\n  'accordion',\n  'harmonica',\n  'tango_accordion',\n  'acoustic_guitar_nylon',\n  'acoustic_guitar_steel',\n  'electric_guitar_jazz',\n  'electric_guitar_clean',\n  'electric_guitar_muted',\n  'overdriven_guitar',\n  'distortion_guitar',\n  'guitar_harmonics',\n  'acoustic_bass',\n  'electric_bass_finger',\n  'electric_bass_pick',\n  'fretless_bass',\n  'slap_bass_1',\n  'slap_bass_2',\n  'synth_bass_1',\n  'synth_bass_2',\n  'violin',\n  'viola',\n  'cello',\n  'contrabass',\n  'tremolo_strings',\n  'pizzicato_strings',\n  'orchestral_harp',\n  'timpani',\n  'string_ensemble_1',\n  'string_ensemble_2',\n  'synth_strings_1',\n  'synth_strings_2',\n  'choir_aahs',\n  'voice_oohs',\n  'synth_choir',\n  'orchestra_hit',\n  'trumpet',\n  'trombone',\n  'tuba',\n  'muted_trumpet',\n  'french_horn',\n  'brass_section',\n  'synth_brass_1',\n  'synth_brass_2',\n  'soprano_sax',\n  'alto_sax',\n  'tenor_sax',\n  'baritone_sax',\n  'oboe',\n  'english_horn',\n  'bassoon',\n  'clarinet',\n  'piccolo',\n  'flute',\n  'recorder',\n  'pan_flute',\n  'blown_bottle',\n  'shakuhachi',\n  'whistle',\n  'ocarina',\n  'lead_1_square',\n  'lead_2_sawtooth',\n  'lead_3_calliope',\n  'lead_4_chiff',\n  'lead_5_charang',\n  'lead_6_voice',\n  'lead_7_fifths',\n  'lead_8_bass__lead',\n  'pad_1_new_age',\n  'pad_2_warm',\n  'pad_3_polysynth',\n  'pad_4_choir',\n  'pad_5_bowed',\n  'pad_6_metallic',\n  'pad_7_halo',\n  'pad_8_sweep',\n  'fx_1_rain',\n  'fx_2_soundtrack',\n  'fx_3_crystal',\n  'fx_4_atmosphere',\n  'fx_5_brightness',\n  'fx_6_goblins',\n  'fx_7_echoes',\n  'fx_8_scifi',\n  'sitar',\n  'banjo',\n  'shamisen',\n  'koto',\n  'kalimba',\n  'bagpipe',\n  'fiddle',\n  'shanai',\n  'tinkle_bell',\n  'agogo',\n  'steel_drums',\n  'woodblock',\n  'taiko_drum',\n  'melodic_tom',\n  'synth_drum',\n  'reverse_cymbal',\n  'guitar_fret_noise',\n  'breath_noise',\n  'seashore',\n  'bird_tweet',\n  'telephone_ring',\n  'helicopter',\n  'applause',\n  'gunshot'\n]\n","// noinspection SpellCheckingInspection\nexport default [\n  'Percussion',\n  'Acoustic Grand Piano',\n  'Bright Acoustic Piano',\n  'Electric Grand Piano',\n  'Honky-tonk Piano',\n  'Electric Piano 1',\n  'Electric Piano 2',\n  'Harpsichord',\n  'Clavi',\n  'Celesta',\n  'Glockenspiel',\n  'Music Box',\n  'Vibraphone',\n  'Marimba',\n  'Xylophone',\n  'Tubular Bells',\n  'Dulcimer',\n  'Drawbar Organ',\n  'Percussive Organ',\n  'Rock Organ',\n  'Church Organ',\n  'Reed Organ',\n  'Accordion',\n  'Harmonica',\n  'Tango Accordion',\n  'Acoustic Guitar (nylon)',\n  'Acoustic Guitar (steel)',\n  'Electric Guitar (jazz)',\n  'Electric Guitar (clean)',\n  'Electric Guitar (muted)',\n  'Overdriven Guitar',\n  'Distortion Guitar',\n  'Guitar harmonics',\n  'Acoustic Bass',\n  'Electric Bass (finger)',\n  'Electric Bass (pick)',\n  'Fretless Bass',\n  'Slap Bass 1',\n  'Slap Bass 2',\n  'Synth Bass 1',\n  'Synth Bass 2',\n  'Violin',\n  'Viola',\n  'Cello',\n  'Contrabass',\n  'Tremolo Strings',\n  'Pizzicato Strings',\n  'Orchestral Harp',\n  'Timpani',\n  'String Ensemble 1',\n  'String Ensemble 2',\n  'SynthStrings 1',\n  'SynthStrings 2',\n  'Choir Aahs',\n  'Voice Oohs',\n  'Synth Voice',\n  'Orchestra Hit',\n  'Trumpet',\n  'Trombone',\n  'Tuba',\n  'Muted Trumpet',\n  'French Horn',\n  'Brass Section',\n  'SynthBrass 1',\n  'SynthBrass 2',\n  'Soprano Sax',\n  'Alto Sax',\n  'Tenor Sax',\n  'Baritone Sax',\n  'Oboe',\n  'English Horn',\n  'Bassoon',\n  'Clarinet',\n  'Piccolo',\n  'Flute',\n  'Recorder',\n  'Pan Flute',\n  'Blown Bottle',\n  'Shakuhachi',\n  'Whistle',\n  'Ocarina',\n  'Lead 1 (square)',\n  'Lead 2 (sawtooth)',\n  'Lead 3 (calliope)',\n  'Lead 4 (chiff)',\n  'Lead 5 (charang)',\n  'Lead 6 (voice)',\n  'Lead 7 (fifths)',\n  'Lead 8 (bass + lead)',\n  'Pad 1 (new age)',\n  'Pad 2 (warm)',\n  'Pad 3 (polysynth)',\n  'Pad 4 (choir)',\n  'Pad 5 (bowed)',\n  'Pad 6 (metallic)',\n  'Pad 7 (halo)',\n  'Pad 8 (sweep)',\n  'FX 1 (rain)',\n  'FX 2 (soundtrack)',\n  'FX 3 (crystal)',\n  'FX 4 (atmosphere)',\n  'FX 5 (brightness)',\n  'FX 6 (goblins)',\n  'FX 7 (echoes)',\n  'FX 8 (sci-fi)',\n  'Sitar',\n  'Banjo',\n  'Shamisen',\n  'Koto',\n  'Kalimba',\n  'Bag pipe',\n  'Fiddle',\n  'Shanai',\n  'Tinkle Bell',\n  'Agogo',\n  'Steel Drums',\n  'Woodblock',\n  'Taiko Drum',\n  'Melodic Tom',\n  'Synth Drum',\n  'Reverse Cymbal',\n  'Guitar Fret Noise',\n  'Breath Noise',\n  'Seashore',\n  'Bird Tweet',\n  'Telephone Ring',\n  'Helicopter',\n  'Applause',\n  'Gunshot'\n]\n","// noinspection SpellCheckingInspection\nexport default [\n  ...new Array(27).fill(0)\n    .map((_, i) => `[invalid MIDI Percussion number ${i}]`),\n  'High Q', // GM2\n  'Slap', // GM2\n  'Scratch Push', // GM2\n  'Scratch Pull', // GM2\n  'Sticks', // GM2\n  'Square Click', // GM2\n  'Metronome Click', // GM2\n  'Metronome Bell', // GM2\n  'Acoustic Bass Drum',\n  'Bass Drum 1',\n  'Side Stick',\n  'Acoustic Snare',\n  'Hand Clap',\n  'Electric Snare',\n  'Low Floor Tom',\n  'Closed Hi Hat',\n  'High Floor Tom',\n  'Pedal Hi-Hat',\n  'Low Tom',\n  'Open Hi-Hat',\n  'Low-Mid Tom',\n  'Hi-Mid Tom',\n  'Crash Cymbal 1',\n  'High Tom',\n  'Ride Cymbal 1',\n  'Chinese Cymbal',\n  'Ride Bell',\n  'Tambourine',\n  'Splash Cymbal',\n  'Cowbell',\n  'Crash Cymbal 2',\n  'Vibraslap',\n  'Ride Cymbal 2',\n  'Hi Bongo',\n  'Low Bongo',\n  'Mute Hi Conga',\n  'Open Hi Conga',\n  'Low Conga',\n  'High Timbale',\n  'Low Timbale',\n  'High Agogo',\n  'Low Agogo',\n  'Cabasa',\n  'Maracas',\n  'Short Whistle',\n  'Long Whistle',\n  'Short Guiro',\n  'Long Guiro',\n  'Claves',\n  'Hi Wood Block',\n  'Low Wood Block',\n  'Mute Cuica',\n  'Open Cuica',\n  'Mute Triangle',\n  'Open Triangle',\n  'Shaker', // GM2\n  'Jingle Bell', // GM2\n  'Belltree', // GM2\n  'Castanets', // GM2\n  'Mute Surdo', // GM2\n  'Open Surdo' // GM2\n]\n","// noinspection JSUnusedGlobalSymbols\nexport const\n  bb = -2,\n  b = -1,\n  flat = -1,\n  nat = 0,\n  natural = 0,\n  x = 1,\n  sharp = 1,\n  xx = 2\n","// noinspection JSUnusedGlobalSymbols\nexport const\n  P1 = 0,\n  m2 = 1,\n  M2 = 2,\n  m3 = 3,\n  M3 = 4,\n  P4 = 5,\n  TT = 6,\n  P5 = 7,\n  m6 = 8,\n  M6 = 9,\n  m7 = 10,\n  M7 = 11,\n  P8 = 12,\n  m9 = P8 + m2,\n  M9 = P8 + M2,\n  m10 = P8 + m3,\n  M10 = P8 + M3,\n  P11 = P8 + P4,\n  TTT = P8 + TT,\n  P12 = P8 + P5,\n  m13 = P8 + m6,\n  M13 = P8 + M6,\n  m14 = P8 + m7,\n  M14 = P8 + M7,\n  P16 = P8 + P8\n","import {M3, m3, M7, m7, m9, M9, P5} from './interval'\n\n// noinspection JSUnusedGlobalSymbols\nexport const\n  dim = [0, m3, P5 - 1],\n  min = [0, m3, P5],\n  maj = [0, M3, P5],\n  aug = [0, M3, P5 + 1],\n  dim7 = [...dim, m7],\n  min7 = [...min, m7],\n  dom7 = [...maj, m7],\n  aug7 = [...aug, m7],\n  dimMaj7 = [...dim, M7],\n  minMaj7 = [...min, M7],\n  maj7 = [...maj, M7],\n  augMaj7 = [...aug, M7],\n  dom9 = [...dom7, M9],\n  dom7b9 = [...dom7, m9],\n  dim7b9 = [...dim7, m9],\n  dim9 = [...dim7, M9],\n  min9 = [...min7, M9],\n  minMaj9 = [...minMaj7, M9],\n  maj9 = [...maj7, M9],\n  aug9 = [...aug7, M9]\n","// noinspection JSUnusedGlobalSymbols\nexport const\n  Cbb = 10,\n  Cb = 11,\n  C = 0,\n  Cx = 1,\n  Cxx = 2,\n\n  Dbb = 0,\n  Db = 1,\n  D = 2,\n  Dx = 3,\n  Dxx = 4,\n\n  Ebb = 2,\n  Eb = 3,\n  E = 4,\n  Ex = 5,\n  Exx = 6,\n\n  Fbb = 3,\n  Fb = 4,\n  F = 5,\n  Fx = 6,\n  Fxx = 7,\n\n  Gbb = 5,\n  Gb = 6,\n  G = 7,\n  Gx = 8,\n  Gxx = 9,\n\n  Abb = 7,\n  Ab = 8,\n  A = 9,\n  Ax = 10,\n  Axx = 11,\n\n  Bbb = 9,\n  Bb = 10,\n  B = 11,\n  Bx = 0,\n  Bxx = 1\n","// noinspection JSUnusedGlobalSymbols,SpellCheckingInspection\nexport const\n  fluid = 'FluidR3_GM',\n  fatBoy = 'FatBoy',\n  musyngKite = 'MusyngKite'\n","// zero-based\nconst f = (n: number) => n - 1\n\n// noinspection JSUnusedGlobalSymbols,SpellCheckingInspection\nexport const\n  tonic = f(1),\n  supertonic = f(2),\n  mediant = f(3),\n  subdominant = f(4),\n  dominant = f(5),\n  submediant = f(6),\n  leading = f(7)\n","// for list of MIDI Level 1 sounds see:\n// see: https://www.midi.org/specifications-old/item/gm-level-1-sound-set\n\n// noinspection JSUnusedGlobalSymbols,SpellCheckingInspection\nexport const\n  percussion = 0,\n  acousticGrandPiano = 1,\n  brightAcousticPiano = 2,\n  electricGrandPiano = 3,\n  honkytonkPiano = 4,\n  electricPiano1 = 5,\n  electricPiano2 = 6,\n  harpsichord = 7,\n  clavinet = 8,\n  celesta = 9,\n  glockenspiel = 10,\n  musicBox = 11,\n  vibraphone = 12,\n  marimba = 13,\n  xylophone = 14,\n  tubularBells = 15,\n  dulcimer = 16,\n  drawbarOrgan = 17,\n  percussiveOrgan = 18,\n  rockOrgan = 19,\n  churchOrgan = 20,\n  reedOrgan = 21,\n  accordion = 22,\n  harmonica = 23,\n  tangoAccordion = 24,\n  acousticGuitarNylon = 25,\n  acousticGuitarSteel = 26,\n  electricGuitarJazz = 27,\n  electricGuitarClean = 28,\n  electricGuitarMuted = 29,\n  overdrivenGuitar = 30,\n  distortionGuitar = 31,\n  guitarHarmonics = 32,\n  acousticBass = 33,\n  electricBassFinger = 34,\n  electricBassPick = 35,\n  fretlessBass = 36,\n  slapBass1 = 37,\n  slapBass2 = 38,\n  synthBass1 = 39,\n  synthBass2 = 40,\n  violin = 41,\n  viola = 42,\n  cello = 43,\n  contrabass = 44,\n  tremoloStrings = 45,\n  pizzicatoStrings = 46,\n  orchestralHarp = 47,\n  timpani = 48,\n  stringEnsemble1 = 49,\n  stringEnsemble2 = 50,\n  synthStrings1 = 51,\n  synthStrings2 = 52,\n  choirAahs = 53,\n  voiceOohs = 54,\n  synthVoice = 55,\n  orchestraHit = 56,\n  trumpet = 57,\n  trombone = 58,\n  tuba = 59,\n  mutedTrumpet = 60,\n  frenchHorn = 61,\n  brassSection = 62,\n  synthBrass1 = 63,\n  synthBrass2 = 64,\n  sopranoSax = 65,\n  altoSax = 66,\n  tenorSax = 67,\n  baritoneSax = 68,\n  oboe = 69,\n  englishHorn = 70,\n  bassoon = 71,\n  clarinet = 72,\n  piccolo = 73,\n  flute = 74,\n  recorder = 75,\n  panFlute = 76,\n  blownBottle = 77,\n  shakuhachi = 78,\n  whistle = 79,\n  ocarina = 80,\n  lead1Square = 81,\n  lead2Sawtooth = 82,\n  lead3Calliope = 83,\n  lead4Chiff = 84,\n  lead5Charang = 85,\n  lead6Voice = 86,\n  lead7Fifths = 87,\n  lead8Bass = 88,\n  pad1NewAge = 89,\n  pad2Warm = 90,\n  pad3Polysynth = 91,\n  pad4Choir = 92,\n  pad5Bowed = 93,\n  pad6Metallic = 94,\n  pad7Halo = 95,\n  pad8Sweep = 96,\n  fx1Rain = 97,\n  fx2Soundtrack = 98,\n  fx3Crystal = 99,\n  fx4Atmosphere = 100,\n  fx5Brightness = 101,\n  fx6Goblins = 102,\n  fx7Echoes = 103,\n  fx8SciFi = 104,\n  sitar = 105,\n  banjo = 106,\n  shamisen = 107,\n  koto = 108,\n  kalimba = 109,\n  bagPipe = 110,\n  fiddle = 111,\n  shanai = 112,\n  tinkleBell = 113,\n  agogo = 114,\n  steelDrums = 115,\n  woodblock = 116,\n  taikoDrum = 117,\n  melodicTom = 118,\n  synthDrum = 119,\n  reverseCymbal = 120,\n  guitarFretNoise = 121,\n  breathNoise = 122,\n  seashore = 123,\n  birdTweet = 124,\n  telephoneRing = 125,\n  helicopter = 126,\n  applause = 127,\n  gunshot = 128","const range = (a: number, b: number) => {\n  return new Array(b - a + 1).fill(0).map((_, i) => a + i)\n}\n\n// see: https://www.midi.org/specifications-old/item/gm-level-1-sound-set\n// noinspection JSUnusedGlobalSymbols\nexport const\n  piano = range(1, 8),\n  chromaticPercussion = range(9, 16),\n  organ = range(17, 24),\n  guitar = range(25, 32),\n  bass = range(33, 40),\n  strings = range(41, 56),\n  brass = range(57, 64),\n  reed = range(65, 72),\n  // NOTE: 'pipe' collides with 'pipe' function of core lib.\n  pipes = range(73, 80),\n  synthLead = range(81, 88),\n  synthPad = range(89, 96),\n  synthFx = range(97, 104),\n  ethnic = range(105, 112),\n  percussive = range(113, 120),\n  soundEffects = range(121, 128)\n","const _meter = (beats: number, beatType: number) => ({\n  beats,\n  beatType\n})\n\n// noinspection JSUnusedGlobalSymbols\nexport const\n  twoHalf = _meter(2, 2),\n  twoQuarter = _meter(2, 4),\n  threeQuarter = _meter(3, 4),\n  threeEighth = _meter(3, 8),\n  fourQuarter = _meter(4, 4),\n  fiveQuarter = _meter(5, 4),\n  sevenQuarter = _meter(5, 4),\n  sixEighth = _meter(6, 8),\n  nineEighth = _meter(9, 8),\n  twelveEighth = _meter(12, 8),\n  commonTime = fourQuarter,\n  allaBreve = twoHalf,\n  cutTime = twoHalf\n","// zero-based\nconst f = (n: number) => n - 1\n\n// noinspection JSUnusedGlobalSymbols,SpellCheckingInspection\nexport const\n  ionian = f(1),\n  dorian = f(2),\n  phrygian = f(3),\n  lydian = f(4),\n  mixolydian = f(5),\n  aeolian = f(6),\n  locrian = f(7),\n\n  major = ionian,\n  minor = aeolian","// noinspection JSUnusedGlobalSymbols\nexport const\n  subContra = 0,\n  contra = 1,\n  great = 2,\n  small = 3,\n  secondSmall = 4,\n  thirdSmall = 5,\n  fourthSmall = 6,\n  fifthSmall = 7,\n  sixthSmall = 8,\n\n  oneLine = 4,\n  twoLine = 5,\n  threeLine = 6,\n  fourLine = 7,\n  fiveLine = 8,\n\n  triplePedal = 0,\n  doublePedal = 1,\n  pedal = 2,\n  // NOTE: This conflicts with the MIDI 'bass' instrument name.\n  //bass = 3,\n  middle = 4,\n  treble = 5,\n  // NOTE: As a top-level export this conflicts with the window.top property.\n  // It is really non-essential, so we disable it.\n  //top = 6,\n  high = 6,\n  doubleTop = 7,\n  doubleHigh = 7,\n  tripleTop = 8,\n  tripleHigh = 8\n","// zero-based\nconst f = (n: number) => n - 1\n\n// noinspection JSUnusedGlobalSymbols\nexport const\n  first = f(1),\n  //second = f(2),\n  third = f(3),\n  fourth = f(4),\n  fifth = f(5),\n  sixth = f(6),\n  seventh = f(7),\n  //eighth = f(8),\n  ninth = f(9),\n  tenth = f(10),\n  eleventh = f(11),\n  twelfth = f(12),\n  thirteenth = f(13)\n","// noinspection JSUnusedGlobalSymbols,SpellCheckingInspection\nexport const\n  highQ = 27, // GM2\n  slap = 28, // GM2\n  scratchPush = 29, // GM2\n  scratchPull = 30, // GM2\n  sticks = 31, // GM2\n  squareClick = 32, // GM2\n  metronomeClick = 33, // GM2\n  metronomeBell = 34, // GM2\n  bassDrum2 = 35,\n  bassDrum1 = 36,\n  sideStick = 37,\n  snareDrum1 = 38,\n  handClap = 39,\n  snareDrum2 = 40,\n  lowTom2 = 41,\n  closedHiHat = 42,\n  lowTom1 = 43,\n  pedalHiHat = 44,\n  midTom2 = 45,\n  openHiHat = 46,\n  midTom1 = 47,\n  highTom2 = 48,\n  crashCymbal1 = 49,\n  highTom1 = 50,\n  rideCymbal1 = 51,\n  chineseCymbal = 52,\n  rideBell = 53,\n  tambourine = 54,\n  splashCymbal = 55,\n  cowbell = 56,\n  crashCymbal2 = 57,\n  vibraSlap = 58,\n  rideCymbal2 = 59,\n  highBongo = 60,\n  lowBongo = 61,\n  muteHighConga = 62,\n  openHighConga = 63,\n  lowConga = 64,\n  highTimbale = 65,\n  lowTimbale = 66,\n  highAgogo = 67,\n  lowAgogo = 68,\n  cabasa = 69,\n  maracas = 70,\n  shortWhistle = 71,\n  longWhistle = 72,\n  shortGuiro = 73,\n  longGuiro = 74,\n  claves = 75,\n  highWoodBlock = 76,\n  lowWoodBlock = 77,\n  muteCuica = 78,\n  openCuica = 79,\n  muteTriangle = 80,\n  openTriangle = 81,\n  shaker = 82, // GM2\n  jingleBell = 83, // GM2\n  belltree = 84, // GM2\n  castanets = 85, // GM2\n  muteSurdo = 86, // GM2\n  openSurdo = 87 // GM2\n","// calculate MIDI number\n\nconst [C, D, E, F, G, A, B] = [0, 2, 4, 5, 7, 9, 11]\nconst [b, x] = [-1, 1]\nconst f = (letter: number, alter: number, octave: number): number => {\n  return letter + alter + 12 * (octave + 1)\n}\n\n// noinspection JSUnusedGlobalSymbols\nexport const\n  A0 = f(A, 0, 0), Ax0 = f(A, x, 0),\n  A1 = f(A, 0, 1), Ab1 = f(A, b, 1), Ax1 = f(A, x, 1),\n  A2 = f(A, 0, 2), Ab2 = f(A, b, 2), Ax2 = f(A, x, 2),\n  A3 = f(A, 0, 3), Ab3 = f(A, b, 3), Ax3 = f(A, x, 3),\n  A4 = f(A, 0, 4), Ab4 = f(A, b, 4), Ax4 = f(A, x, 4),\n  A5 = f(A, 0, 5), Ab5 = f(A, b, 5), Ax5 = f(A, x, 5),\n  A6 = f(A, 0, 6), Ab6 = f(A, b, 6), Ax6 = f(A, x, 6),\n  A7 = f(A, 0, 7), Ab7 = f(A, b, 7), Ax7 = f(A, x, 7),\n\n  B0 = f(B, 0, 0), Bb0 = f(B, b, 0), Bx0 = f(B, x, 0),\n  B1 = f(B, 0, 1), Bb1 = f(B, b, 1), Bx1 = f(B, x, 1),\n  B2 = f(B, 0, 2), Bb2 = f(B, b, 2), Bx2 = f(B, x, 2),\n  B3 = f(B, 0, 3), Bb3 = f(B, b, 3), Bx3 = f(B, x, 3),\n  B4 = f(B, 0, 4), Bb4 = f(B, b, 4), Bx4 = f(B, x, 4),\n  B5 = f(B, 0, 5), Bb5 = f(B, b, 5), Bx5 = f(B, x, 5),\n  B6 = f(B, 0, 6), Bb6 = f(B, b, 6), Bx6 = f(B, x, 6),\n  B7 = f(B, 0, 7), Bb7 = f(B, b, 7), Bx7 = f(B, x, 7),\n\n  C1 = f(C, 0, 1), Cb1 = f(C, b, 1), Cx1 = f(C, x, 1),\n  C2 = f(C, 0, 2), Cb2 = f(C, b, 2), Cx2 = f(C, x, 2),\n  C3 = f(C, 0, 3), Cb3 = f(C, b, 3), Cx3 = f(C, x, 3),\n  C4 = f(C, 0, 4), Cb4 = f(C, b, 4), Cx4 = f(C, x, 4),\n  C5 = f(C, 0, 5), Cb5 = f(C, b, 5), Cx5 = f(C, x, 5),\n  C6 = f(C, 0, 6), Cb6 = f(C, b, 6), Cx6 = f(C, x, 6),\n  C7 = f(C, 0, 7), Cb7 = f(C, b, 7), Cx7 = f(C, x, 7),\n  C8 = f(C, 0, 8), Cb8 = f(C, b, 8), // C8 is highest,\n\n  D1 = f(D, 0, 1), Db1 = f(D, b, 1), Dx1 = f(D, x, 1),\n  D2 = f(D, 0, 2), Db2 = f(D, b, 2), Dx2 = f(D, x, 2),\n  D3 = f(D, 0, 3), Db3 = f(D, b, 3), Dx3 = f(D, x, 3),\n  D4 = f(D, 0, 4), Db4 = f(D, b, 4), Dx4 = f(D, x, 4),\n  D5 = f(D, 0, 5), Db5 = f(D, b, 5), Dx5 = f(D, x, 5),\n  D6 = f(D, 0, 6), Db6 = f(D, b, 6), Dx6 = f(D, x, 6),\n  D7 = f(D, 0, 7), Db7 = f(D, b, 7), Dx7 = f(D, x, 7),\n\n  E1 = f(E, 0, 1), Eb1 = f(E, b, 1), Ex1 = f(E, x, 1),\n  E2 = f(E, 0, 2), Eb2 = f(E, b, 2), Ex2 = f(E, x, 2),\n  E3 = f(E, 0, 3), Eb3 = f(E, b, 3), Ex3 = f(E, x, 3),\n  E4 = f(E, 0, 4), Eb4 = f(E, b, 4), Ex4 = f(E, x, 4),\n  E5 = f(E, 0, 5), Eb5 = f(E, b, 5), Ex5 = f(E, x, 5),\n  E6 = f(E, 0, 6), Eb6 = f(E, b, 6), Ex6 = f(E, x, 6),\n  E7 = f(E, 0, 7), Eb7 = f(E, b, 7), Ex7 = f(E, x, 7),\n\n  F1 = f(F, 0, 1), Fb1 = f(F, b, 1), Fx1 = f(F, x, 1),\n  F2 = f(F, 0, 2), Fb2 = f(F, b, 2), Fx2 = f(F, x, 2),\n  F3 = f(F, 0, 3), Fb3 = f(F, b, 3), Fx3 = f(F, x, 3),\n  F4 = f(F, 0, 4), Fb4 = f(F, b, 4), Fx4 = f(F, x, 4),\n  F5 = f(F, 0, 5), Fb5 = f(F, b, 5), Fx5 = f(F, x, 5),\n  F6 = f(F, 0, 6), Fb6 = f(F, b, 6), Fx6 = f(F, x, 6),\n  F7 = f(F, 0, 7), Fb7 = f(F, b, 7), Fx7 = f(F, x, 7),\n\n  G1 = f(G, 0, 1), Gb1 = f(G, b, 1), Gx1 = f(G, x, 1),\n  G2 = f(G, 0, 2), Gb2 = f(G, b, 2), Gx2 = f(G, x, 2),\n  G3 = f(G, 0, 3), Gb3 = f(G, b, 3), Gx3 = f(G, x, 3),\n  G4 = f(G, 0, 4), Gb4 = f(G, b, 4), Gx4 = f(G, x, 4),\n  G5 = f(G, 0, 5), Gb5 = f(G, b, 5), Gx5 = f(G, x, 5),\n  G6 = f(G, 0, 6), Gb6 = f(G, b, 6), Gx6 = f(G, x, 6),\n  G7 = f(G, 0, 7), Gb7 = f(G, b, 7), Gx7 = f(G, x, 7)\n","// zero-based\nconst f = (n: number) => n - 1\n\n// noinspection JSUnusedGlobalSymbols\nexport const\n  I = f(1),\n  II = f(2),\n  III = f(3),\n  IV = f(4),\n  V = f(5),\n  VI = f(6),\n  VII = f(7),\n  VIII = f(8),\n  IX = f(9),\n  X = f(10),\n  XI = f(11),\n  XII = f(12),\n  XIII = f(13),\n  XIV = f(14),\n  XV = f(15),\n  XVI = f(16),\n  XVII = f(17),\n  XVIII = f(18),\n  XIX = f(19),\n  XX = f(20),\n  XXI = f(21),\n  XXII = f(22),\n  XXIII = f(23),\n  XXIV = f(24)\n","// average\nconst f = (a: number, b: number) => (a + b) / 2\n\n// source: https://en.wikipedia.org/wiki/Tempo\n// noinspection JSUnusedGlobalSymbols,SpellCheckingInspection\nexport const\n  larghissimo = f(24, 24),\n  grave = f(25, 45),\n  largo = f(40, 60),\n  lento = f(45, 60),\n  larghetto = f(60, 66),\n  adagio = f(66, 76),\n  adagietto = f(72, 76),\n  andante = f(76, 108),\n  andantino = f(80, 108),\n  marciaModerato = f(83, 85),\n  andanteModerato = f(92, 112),\n  moderato = f(108, 120),\n  allegretto = f(112, 120),\n  allegroModerato = f(116, 120),\n  allegro = f(120, 156),\n  vivace = f(156, 176),\n  vivacissimo = f(172, 176),\n  allegrissimo = f(172, 176),\n  presto = f(168, 200),\n  prestissimo = f(200, 200)\n","import _GleitzFonts from './src/gleitz-fonts'\nimport _InstrumentNames from './src/instrument-names'\nimport _PercussionNames from './src/percussion-names'\n\nexport * from './src/accidental'\nexport * from './src/chord'\nexport * from './src/chroma'\nexport * from './src/gleitz-pack'\nexport * from './src/harmony'\nexport * from './src/instrument'\nexport * from './src/instrument-family'\nexport * from './src/interval'\nexport * from './src/meter'\nexport * from './src/mode'\nexport * from './src/octave'\nexport * from './src/ordinal'\nexport * from './src/percussion'\nexport * from './src/pitch'\nexport * from './src/roman'\nexport * from './src/tempo'\n\nexport * as Accidental from './src/accidental'\nexport * as Chord from './src/chord'\nexport * as Chroma from './src/chroma'\nexport * as GleitzPack from './src/gleitz-pack'\nexport * as Harmony from './src/harmony'\nexport * as Instrument from './src/instrument'\nexport * as InstrumentFamily from './src/instrument-family'\nexport * as Interval from './src/interval'\nexport * as Meter from './src/meter'\nexport * as Mode from './src/mode'\nexport * as Octave from './src/octave'\nexport * as Ordinal from './src/ordinal'\nexport * as Percussion from './src/percussion'\nexport * as Pitch from './src/pitch'\nexport * as Roman from './src/roman'\nexport * as Tempo from './src/tempo'\n\nexport const GleitzFonts = _GleitzFonts\nexport const InstrumentNames = _InstrumentNames\nexport const PercussionNames = _PercussionNames\n","import {\n  binary,\n  Exp,\n  Fun,\n  obj,\n  Obj,\n  seq,\n  Seq,\n  set,\n  setx,\n  unary,\n  use,\n  val\n} from '@dipl/lib-core'\nimport oscImpl from '@dipl/utils-osc'\nimport {clamp, prod} from '@dipl/lib-math'\nimport {chromatic} from '@dipl/utils-diatonic'\nimport {hertzFromMidiPitch, midiPitchFromHertz} from '@dipl/utils-pitch'\nimport {\n  acousticGrandPiano,\n  fatBoy,\n  fluid,\n  GleitzFonts,\n  InstrumentNames,\n  musyngKite,\n  PercussionNames\n} from '@dipl/lib-constants'\n\ntype SplitPart<X> = Partial<X> & {\n  flex?: number\n  size?: number\n}\n\ntype GleitzPack = typeof fluid | typeof fatBoy | typeof musyngKite\n\ntype Gain = {gain: number}\n\ntype Time = {time: number}\n\ntype Span = {span: number}\n\ntype Tempo = {tempo: number}\n\ntype Beats = {beats: number}\n\ntype BeatType = {beatType: number}\n\ntype TimeSpan = Time & Span\n\ntype Metric = Tempo & Beats & BeatType\n\ntype Adsr = {\n  attack: number\n  decay: number\n  sustain: number\n  release: number\n}\n\ntype Diatonic = {\n  key: number\n  octave: number\n  alter: number\n  mode: number\n  harmony: number\n  degree: number\n}\n\nexport type Entity = TimeSpan & Metric & Diatonic & Adsr & {\n  rng: () => number\n  index: number\n  count: number\n  play: string\n  freq: number\n  detune: number\n  gain: number\n  color: any\n  chord: number\n}\n\nexport function align<X extends TimeSpan> (xs: Exp<X[], X>): Fun<X[], X> {\n  return use(xs, xs => x => {\n    const min = Math.min(...xs.map(xi => xi.time))\n    const offset = x.time - min\n    return xs.map(xi => ({...xi, time: xi.time + offset}))\n  })\n}\n\nexport function overlaps<Y, X extends TimeSpan> (a: Exp<TimeSpan, X>): Fun<boolean, X> {\n  return use(a, a => b => {\n    const [a0, a1] = [a.time, a.time + a.span].sort((a, b) => a - b)\n    const [b0, b1] = [b.time, b.time + b.span].sort((a, b) => a - b)\n    return !(b1 <= a0 || a1 <= b0)\n  })\n}\n\nexport function repeat<X extends TimeSpan> (props: Exp<Obj<{\n  size: number\n  flex?: number\n  cover?: boolean\n}, X>, X>): Fun<X[], X> {\n  return use(\n    obj(props),\n    ({size, flex = 0, cover = false}) => x => {\n      const scope: [number, number] = [x.time, x.time + x.span]\n      if (size === 0) return []\n\n      const round = cover ? Math.ceil : Math.floor\n      const count = round(x.span / size) // remaining space not included\n      const partSpan = flex ? x.span / count : size // includes remaining space\n\n      let offset = scope[0]\n      return Array(count).fill(0).map(() => {\n        const result: X & TimeSpan = val(set({time: offset, span: partSpan}), x)\n        offset += partSpan\n        return result\n      })\n    }\n  )\n}\n\nexport function split<X extends TimeSpan> (...parts: Exp<Seq<SplitPart<X>>, X>[]): Fun<X[], X> {\n  function sum (nums: number[]): number {\n    return nums.reduce((a, x) => a + x, 0)\n  }\n\n  return use(seq(...parts), parts => x => {\n    const sized = parts.map(({size, flex}) => ({\n      size: size || 0,\n      flex: flex || (size == null ? 1 : 0)\n    }))\n\n    const size: number = sum(sized.map(({size}) => size))\n    const flex: number = sum(sized.map(({flex}) => flex))\n    const remaining = Math.max(0, x.span - size)\n    const flexUnit = flex !== 0 ? (remaining / flex) : 0\n    const spans = sized.map(({size, flex}) => size + flex * flexUnit)\n\n    let offset = x.time\n    return spans.map((partSpan, i) => {\n      const {size, flex, ...rest} = parts[i]\n      const result: X & TimeSpan = {\n        ...x,\n        ...rest,\n        time: offset,\n        span: partSpan\n      }\n      offset += partSpan\n      return result\n    })\n  })\n}\n\nexport function translate<X extends Time> (offset: Exp<number, X>): Fun<X, X> {\n  return setx<{time: number}, X>({\n    time: x => x.time + val(offset, x)\n  })\n}\n\nexport function trim<X extends TimeSpan> (xs: Exp<Seq<X>, X>): Fun<X[], X> {\n  const clamp = (t: number, a: number, b: number) => (\n    Math.max(a, Math.min(b, t))\n  )\n  return use(seq(xs), xs => x => {\n    return xs.map(xi => {\n      const time = clamp(xi.time, x.time, x.time + x.span)\n      const stop = clamp(xi.time + xi.span, x.time, x.time + x.span)\n      const span = stop - time\n      return ({...xi, time, span})\n    }).filter(xi => xi.span > 0)\n  })\n}\n\nexport function osc<X> (props: Exp<Obj<Partial<{\n  index: number\n  min: number\n  max: number\n  reverse: boolean\n  alternate: boolean\n  inclusive: boolean\n}>, X>, X>): Fun<number, X> {\n  return use(obj(props), oscImpl)\n}\n\nexport function gain<X extends Gain> (n: Exp<number, X>): Fun<X, X> {\n  return setx({gain: prod(x => x.gain, n)})\n}\n\nexport function diatonic<X> (props: Exp<Obj<Partial<Diatonic>, X>, X>): Fun<number, X> {\n  return use(obj(props), props => x => {\n    const {\n      key = 0,\n      octave = 4,\n      mode = 0,\n      degree = 0,\n      harmony = 0,\n      alter = 0\n    } = props\n    const chromaticOffset = key + (1 + octave) * 12 + alter\n    const diatonicOffset = degree + harmony\n    const modeScale = chromatic(mode)\n    return chromaticOffset + modeScale(diatonicOffset)\n  })\n}\n\nexport function limit<X> (props: Exp<Obj<{\n  index: number\n  min: number\n  max?: number\n  period: number\n}, X>, X>): Fun<number, X> {\n  return use(\n    obj(props),\n    ({index, min, max, period}) => {\n      if (max == null) max = min\n      if (min > max) throw new Error('Limit: min must be less then max')\n      while (index < min) {\n        if (index + period > max) break\n        index += period\n      }\n      while (index > max) {\n        if (index + period < min) break\n        index -= period\n      }\n      return index\n    }\n  )\n}\n\nexport function limit12<X> (index: Exp<number, X>, min: Exp<number, X>, max?: Exp<number, X>): Fun<number, X> {\n  return limit({\n    period: 12,\n    index,\n    min,\n    max\n  })\n}\n\nexport const hertz = unary(hertzFromMidiPitch)\n\nexport const midi = unary(midiPitchFromHertz)\n\nexport const gleitz = binary((pack: GleitzPack, font: number) => {\n  const CDN = 'https://raw.githubusercontent.com/gleitz/midi-js-soundfonts/gh-pages'\n  return `${CDN}/${pack}/${GleitzFonts[font]}-ogg.js`\n})\n\nexport const EntityDefaults: Entity = {\n  rng: Math.random,\n  color: '',\n  index: 0,\n  count: 1,\n  play: gleitz('FluidR3_GM', acousticGrandPiano)(0),\n  freq: 69,\n  detune: 0,\n  gain: 1,\n  chord: 3,\n  time: 0,\n  span: 1,\n  degree: 0,\n  harmony: 0,\n  mode: 0,\n  key: 0,\n  alter: 0,\n  octave: 4,\n  attack: 0,\n  decay: 0,\n  sustain: 1,\n  release: 1,\n  tempo: 120,\n  beats: 4,\n  beatType: 4\n}\n\nconst units = <X> (f: Exp<number, X>) => {\n  return <X> (n: Exp<number, X>) => (\n    (x: X) => val(n, x) * val(f, x as any)\n  )\n}\n\nexport const\n  second = 1,\n  minute = 60 * second,\n  hour = 60 * minute,\n  beat = (x: Tempo) => minute / x.tempo,\n  measure = (x: Tempo & Beats) => x.beats * beat(x),\n  whole = (x: Metric) => x.beatType * beat(x),\n  half = (x: Metric) => whole(x) / 2,\n  quarter = (x: Metric) => whole(x) / 4,\n  eighth = (x: Metric) => whole(x) / 8,\n  sixteenth = (x: Metric) => whole(x) / 16\n\nexport const\n  seconds = units(second),\n  minutes = units(minute),\n  hours = units(hour),\n  beats = units(beat),\n  measures = units(measure),\n  wholes = units(whole),\n  halves = units(half),\n  quarters = units(quarter),\n  eighths = units(eighth),\n  sixteenths = units(sixteenth),\n  rel = units((x: Span) => x.span),\n  percent = units((x: Span) => x.span / 100)\n","'use strict';\r\n\r\nvar width = 256;// each RC4 output is 0 <= x < 256\r\nvar chunks = 6;// at least six RC4 outputs for each double\r\nvar digits = 52;// there are 52 significant digits in a double\r\nvar pool = [];// pool: entropy pool starts empty\r\nvar GLOBAL = typeof global === 'undefined' ? window : global;\r\n\r\n//\r\n// The following constants are related to IEEE 754 limits.\r\n//\r\nvar startdenom = Math.pow(width, chunks),\r\n    significance = Math.pow(2, digits),\r\n    overflow = significance * 2,\r\n    mask = width - 1;\r\n\r\n\r\nvar oldRandom = Math.random;\r\n\r\n//\r\n// seedrandom()\r\n// This is the seedrandom function described above.\r\n//\r\nmodule.exports = function(seed, options) {\r\n  if (options && options.global === true) {\r\n    options.global = false;\r\n    Math.random = module.exports(seed, options);\r\n    options.global = true;\r\n    return Math.random;\r\n  }\r\n  var use_entropy = (options && options.entropy) || false;\r\n  var key = [];\r\n\r\n  // Flatten the seed string or build one from local entropy if needed.\r\n  var shortseed = mixkey(flatten(\r\n    use_entropy ? [seed, tostring(pool)] :\r\n    0 in arguments ? seed : autoseed(), 3), key);\r\n\r\n  // Use the seed to initialize an ARC4 generator.\r\n  var arc4 = new ARC4(key);\r\n\r\n  // Mix the randomness into accumulated entropy.\r\n  mixkey(tostring(arc4.S), pool);\r\n\r\n  // Override Math.random\r\n\r\n  // This function returns a random double in [0, 1) that contains\r\n  // randomness in every bit of the mantissa of the IEEE 754 value.\r\n\r\n  return function() {         // Closure to return a random double:\r\n    var n = arc4.g(chunks),             // Start with a numerator n < 2 ^ 48\r\n        d = startdenom,                 //   and denominator d = 2 ^ 48.\r\n        x = 0;                          //   and no 'extra last byte'.\r\n    while (n < significance) {          // Fill up all significant digits by\r\n      n = (n + x) * width;              //   shifting numerator and\r\n      d *= width;                       //   denominator and generating a\r\n      x = arc4.g(1);                    //   new least-significant-byte.\r\n    }\r\n    while (n >= overflow) {             // To avoid rounding up, before adding\r\n      n /= 2;                           //   last byte, shift everything\r\n      d /= 2;                           //   right using integer Math until\r\n      x >>>= 1;                         //   we have exactly the desired bits.\r\n    }\r\n    return (n + x) / d;                 // Form the number within [0, 1).\r\n  };\r\n};\r\n\r\nmodule.exports.resetGlobal = function () {\r\n  Math.random = oldRandom;\r\n};\r\n\r\n//\r\n// ARC4\r\n//\r\n// An ARC4 implementation.  The constructor takes a key in the form of\r\n// an array of at most (width) integers that should be 0 <= x < (width).\r\n//\r\n// The g(count) method returns a pseudorandom integer that concatenates\r\n// the next (count) outputs from ARC4.  Its return value is a number x\r\n// that is in the range 0 <= x < (width ^ count).\r\n//\r\n/** @constructor */\r\nfunction ARC4(key) {\r\n  var t, keylen = key.length,\r\n      me = this, i = 0, j = me.i = me.j = 0, s = me.S = [];\r\n\r\n  // The empty key [] is treated as [0].\r\n  if (!keylen) { key = [keylen++]; }\r\n\r\n  // Set up S using the standard key scheduling algorithm.\r\n  while (i < width) {\r\n    s[i] = i++;\r\n  }\r\n  for (i = 0; i < width; i++) {\r\n    s[i] = s[j = mask & (j + key[i % keylen] + (t = s[i]))];\r\n    s[j] = t;\r\n  }\r\n\r\n  // The \"g\" method returns the next (count) outputs as one number.\r\n  (me.g = function(count) {\r\n    // Using instance members instead of closure state nearly doubles speed.\r\n    var t, r = 0,\r\n        i = me.i, j = me.j, s = me.S;\r\n    while (count--) {\r\n      t = s[i = mask & (i + 1)];\r\n      r = r * width + s[mask & ((s[i] = s[j = mask & (j + t)]) + (s[j] = t))];\r\n    }\r\n    me.i = i; me.j = j;\r\n    return r;\r\n    // For robust unpredictability discard an initial batch of values.\r\n    // See http://www.rsa.com/rsalabs/node.asp?id=2009\r\n  })(width);\r\n}\r\n\r\n//\r\n// flatten()\r\n// Converts an object tree to nested arrays of strings.\r\n//\r\nfunction flatten(obj, depth) {\r\n  var result = [], typ = (typeof obj)[0], prop;\r\n  if (depth && typ == 'o') {\r\n    for (prop in obj) {\r\n      try { result.push(flatten(obj[prop], depth - 1)); } catch (e) {}\r\n    }\r\n  }\r\n  return (result.length ? result : typ == 's' ? obj : obj + '\\0');\r\n}\r\n\r\n//\r\n// mixkey()\r\n// Mixes a string seed into a key that is an array of integers, and\r\n// returns a shortened string seed that is equivalent to the result key.\r\n//\r\nfunction mixkey(seed, key) {\r\n  var stringseed = seed + '', smear, j = 0;\r\n  while (j < stringseed.length) {\r\n    key[mask & j] =\r\n      mask & ((smear ^= key[mask & j] * 19) + stringseed.charCodeAt(j++));\r\n  }\r\n  return tostring(key);\r\n}\r\n\r\n//\r\n// autoseed()\r\n// Returns an object for autoseeding, using window.crypto if available.\r\n//\r\n/** @param {Uint8Array=} seed */\r\nfunction autoseed(seed) {\r\n  try {\r\n    GLOBAL.crypto.getRandomValues(seed = new Uint8Array(width));\r\n    return tostring(seed);\r\n  } catch (e) {\r\n    return [+new Date, GLOBAL, GLOBAL.navigator && GLOBAL.navigator.plugins,\r\n            GLOBAL.screen, tostring(pool)];\r\n  }\r\n}\r\n\r\n//\r\n// tostring()\r\n// Converts an array of charcodes to a string\r\n//\r\nfunction tostring(a) {\r\n  return String.fromCharCode.apply(0, a);\r\n}\r\n\r\n//\r\n// When seedrandom.js is loaded, we immediately mix a few bits\r\n// from the built-in RNG into the entropy pool.  Because we do\r\n// not want to intefere with determinstic PRNG state later,\r\n// seedrandom will not call Math.random on its own again after\r\n// initialization.\r\n//\r\nmixkey(Math.random(), pool);\r\n","const last = <T>(array: T[]): T => array[array.length - 1]\n\nexport type Result<X> = null | ((rand: number) => X)\n\nexport default function weighted <X> (\n  values: X[],\n  getWeight: (x: X) => number\n): Result<X> {\n\n  // candidate must have valid weight\n  const candidates = values\n    .map(value => {\n      const weight = getWeight(value)\n      if (weight < 0) throw new Error('weight must not be negative')\n      if (isNaN(weight)) throw new Error('weight must be a number')\n      if (weight === Infinity) throw new Error('weight must not be Infinity')\n      return {value, weight}\n    })\n    .filter(({weight}) => weight > 0)\n\n  // must find at least one candidate\n  if (!candidates.length) return null\n\n  // cumulative weight sums\n  const sums = candidates\n    .reduce((a, {weight}) => [...a, last(a) + weight], [0])\n\n  // pick weighted\n  return (rand: number) => {\n    if (rand < 0) throw new Error('random number must not be negative')\n    if (rand >= 1) throw new Error('random number must be less than 1')\n    const t = last(sums) * rand\n    const i = sums.slice(1).findIndex(x => t < x)\n    return candidates[i].value\n  }\n}\n","import SeedRandom from 'seed-random'\nimport {Exp, fail, Fun, Opt, Res, res, seq, set, use, val} from '@dipl/lib-core'\nimport {floor, gte, linear} from '@dipl/lib-math'\nimport weighted from '@dipl/utils-weighted'\n\nexport type Seed = string | number\n\nexport type Rng = {rng: () => number}\n\nexport function choice<Y, X extends Rng> (...fs: Exp<Y, X>[]): Fun<Y, X> {\n  return x => {\n    const ys = fs.map(f => val(f, x))\n    const candidates = weighted(ys, () => 1)\n    if (!candidates) {\n      throw new Error('choice: no candidates')\n    }\n    return candidates(val(rand, x))\n  }\n}\n\nexport function pick<Y, X extends Rng> (...fs: Opt<Y, X>[]): Fun<Res<Y>, X> {\n  return x => {\n    const rs = fs.map(f => res(f, x))\n    const candidates = weighted(rs, r => r.weight)\n    if (candidates == null) {\n      return fail(`pick: no options to pick from`)\n    }\n    return candidates(val(rand, x))\n  }\n}\n\nexport function pr<X extends Rng> (p: Exp<number, X>): Fun<boolean, X> {\n  return gte(p, rand)\n}\n\nexport function rand<X extends Rng> (x: X): number {\n  return x.rng()\n}\n\nexport function rng<X> (...seeds: Exp<Seed, X>[]): Fun<() => number, X> {\n  // NOTE: do not use 'use' here, as we want to return a function.\n  // 'use' uses val internally and will evaluate the function!\n  return x => {\n    const s = val(seq(...seeds), x)\n    return SeedRandom(s.join(' '))\n  }\n}\n\nexport function seed<X extends Rng> (...seeds: Exp<Seed, X>[]): Fun<X, X> {\n  return set(x => ({\n    rng: rng(...seeds)(x)\n  }))\n}\n\nexport function uniform<X extends Rng> (min: Exp<number, X>, max: Exp<number, X>): Fun<number, X> {\n  return linear((x: X) => x.rng(), min, max)\n}\n\nexport function uniformInt<X extends Rng> (min: Exp<number, X>, max: Exp<number, X>): Fun<number, X> {\n  return floor(uniform(min, max))\n}\n\nexport function normal<X extends Rng> (mean: Exp<number, X> = 0, sd: Exp<number, X> = 1): Fun<number, X> {\n  return x => {\n    const u = val(rand, x)\n    const v = val(rand, x)\n    const y = Math.sqrt(-2 * Math.log(1 - u)) * Math.cos(2 * Math.PI * v)\n    return val(sd, x) * y + val(mean, x)\n  }\n}\n","export const font = 'https://gist.githubusercontent.com/eibens/7dab1de1b71c66bcb159f01ee249df45/raw/48ec8c47fac72d5d5fba6aa1d935f1f88fbe9687/dnb-drums.json'\n\n// noinspection SpellCheckingInspection\nconst sounds = {\n  foleyBasicKick: 0,\n  foleyBellKick: 1,\n  foleyBellShot: 2,\n  foleyBitLaser: 3,\n  foleyChime: 4,\n  foleyChina: 5,\n  foleyClap: 6,\n  foleyClickTrack: 7,\n  foleyCrash: 8,\n  foleyCrunchy: 9,\n  foleyGlitchOut: 10,\n  foleyHat: 11,\n  foleyHiHat: 12,\n  foleyShaker: 13,\n  foleySnare: 14,\n  foleySnare_26: 15,\n  mainroomArpFX: 16,\n  mainroomBongoPerc: 17,\n  mainroomClap: 18,\n  mainroomCrash: 19,\n  mainroomHat1: 20,\n  mainroomHat2: 21,\n  mainroomKick1: 22,\n  mainroomKick2: 23,\n  mainroomLazer: 24,\n  mainroomPerc1: 25,\n  mainroomPerc2: 26,\n  mainroomReverbBoom: 27,\n  mainroomRide1: 28,\n  mainroomRide2: 29,\n  mainroomSnare: 30,\n  mainroomSnare1: 31,\n  minimalBellRide: 32,\n  minimalClap: 33,\n  minimalFx1: 34,\n  minimalFx3: 35,\n  minimalFX2: 36,\n  minimalHat1: 37,\n  minimalHat2: 38,\n  minimalKick1: 39,\n  minimalKick2: 40,\n  minimalPerc1: 41,\n  minimalPerc2: 42,\n  minimalPerc3: 43,\n  minimalPerc4: 44,\n  minimalSnare1: 45,\n  minimalSnare2: 46,\n  minimalSplashRide: 47,\n  neuroAlienBeastHiy: 48,\n  neuroAnalogueNoise: 49,\n  neuroChina: 50,\n  neuroClap: 51,\n  neuroCrash: 52,\n  neuroHat1: 53,\n  neuroHat2: 54,\n  neuroKick1: 55,\n  neuroKick2: 56,\n  neuroRimshot: 57,\n  neuroRiser: 58,\n  neuroSnare1: 59,\n  neuroSnare2: 60,\n  neuroTom1: 61,\n  neuroTom2: 62,\n  neuroTom3: 63,\n  neuroVocal: 64\n}\n\n// NOTE: These are sounds that have pitch or sound strange.\nconst eccentric = [\n  sounds.foleyBasicKick,\n  sounds.foleyBellShot,\n  sounds.foleyBitLaser,\n  sounds.foleyHat,\n  sounds.foleyChime,\n  sounds.foleyClap,\n  sounds.foleyCrunchy,\n  sounds.foleyGlitchOut,\n  sounds.foleyShaker,\n  sounds.foleyClickTrack,\n  sounds.mainroomArpFX,\n  sounds.mainroomPerc1,\n  sounds.mainroomPerc2,\n  sounds.mainroomLazer,\n  sounds.minimalHat2,\n  sounds.minimalFx1,\n  sounds.minimalFX2,\n  sounds.minimalFx3,\n  sounds.mainroomReverbBoom,\n  sounds.minimalPerc1,\n  sounds.minimalPerc2,\n  sounds.minimalPerc3,\n  sounds.minimalPerc4,\n  sounds.neuroAlienBeastHiy,\n  sounds.neuroAnalogueNoise,\n  sounds.foleySnare,\n  sounds.neuroChina,\n  sounds.neuroCrash,\n  sounds.neuroRiser,\n  sounds.neuroVocal\n]\n\n// NOTE: exclude eccentric\nexport const effects = Object.values(sounds)\n  .filter(x => eccentric.indexOf(x) < 0)\n\nexport const hats = [\n  sounds.foleyHat,\n  sounds.foleyHiHat,\n  sounds.mainroomHat1,\n  sounds.mainroomHat2,\n  sounds.minimalHat1\n]\n\nexport const snares = [\n  sounds.foleySnare_26,\n  sounds.mainroomSnare,\n  sounds.mainroomSnare1,\n  sounds.minimalSnare1,\n  sounds.minimalSnare2\n]\n\nexport const kicks = [\n  sounds.foleyBellKick,\n  sounds.mainroomKick1,\n  sounds.mainroomKick2,\n  sounds.minimalKick1,\n  sounds.minimalKick2\n]\n","import {\n  diatonic,\n  eighth,\n  Entity,\n  gleitz,\n  half,\n  measure,\n  measures,\n  overlaps,\n  quarter,\n  rel,\n  repeat,\n  split,\n  translate,\n  trim,\n  whole\n} from '@dipl/lib-music'\nimport {\n  clone,\n  Exp,\n  filter,\n  first,\n  fork,\n  Fun,\n  indexed,\n  map,\n  noop,\n  pipe,\n  pipeDeep,\n  range,\n  Seq,\n  set,\n  setx,\n  use,\n  val,\n  when\n} from '@dipl/lib-core'\nimport {choice, pr, rand, seed, uniform} from '@dipl/lib-rng'\nimport {frac, lte, pow, round} from '@dipl/lib-math'\nimport {\n  acousticGrandPiano,\n  contrabass,\n  I,\n  II,\n  III,\n  IV,\n  major,\n  minor,\n  musyngKite,\n  piccolo,\n  V,\n  VI,\n  VII,\n  VIII,\n  violin\n} from '@dipl/lib-constants'\nimport * as drums from '@dipl/demo-alpha/src/drums'\n\nexport type MyEntity = Entity & {\n  piece: number\n  depth: number\n  monotony: number\n  diversity: number\n  layer: number\n  label: number\n  labels: number[]\n  chord: number\n  role: 'bass' | 'lead' | 'pad' | 'drum'\n  chords: MyEntity[]\n  drums: number\n}\n\nfunction Cut<X extends Entity> (size: Exp<number, X>): Fun<X[], X> {\n  return trim(choice(\n    split<X>(setx({size}), noop),\n    split<X>(noop, setx({size}))\n  ))\n}\n\nfunction Rep<X extends Entity> (size: Exp<number, X>): Fun<X[], X> {\n  return trim(indexed(repeat<X>({\n    size,\n    cover: true\n  }), i => set({index: i})))\n}\n\nfunction Deg1<X extends Entity> (): Fun<X, X> {\n  return setx({degree: choice(I, III, V, VIII)})\n}\n\nfunction Deg2<X extends Entity> (): Fun<X, X> {\n  return setx({degree: choice(II, IV, VI, VII)})\n}\n\nfunction Pr<X extends Entity> (p: Exp<number, X>, f: Exp<Seq<X>, X>): Fun<X[], X> {\n  return when(pr(p), f)\n}\n\nfunction Bass<X extends Entity> (): Fun<X[], X> {\n  return pipe(\n    Rep(choice<number, X>(half, quarter)),\n    when(x => x.index > 0, Deg1()),\n    setx({octave: choice(1, 2)}),\n    setx({freq: diatonic})\n  )\n}\n\nfunction Pad<X extends MyEntity> (): Fun<X[], X> {\n  return pipe(\n    setx({octave: choice(3, 4)}),\n    Pr(0.5, Cut(choice<number, X>(half, quarter, eighth))),\n    range(x => x.chord || 3, i => set({degree: i * 2})),\n    Pr(0.5, Cut(choice<number, X>(half, quarter, eighth))),\n    setx({freq: diatonic})\n  )\n}\n\nfunction Lead<X extends MyEntity> (): Fun<X[], X> {\n  return pipe(\n    Pr(0.5, Cut(choice<number, X>(half, quarter, eighth))),\n    Pr(0.5, Cut(choice<number, X>(half, quarter, eighth))),\n    Deg1(),\n    Pr(0.5, Rep(choice<number, X>(half, quarter, eighth))),\n    Pr(0.5, Deg1()),\n    Pr(0.25, Deg2()),\n    setx({freq: diatonic})\n  )\n}\n\nfunction Drum<X extends Entity> (): Fun<X[], X> {\n  return pipe<X>(\n    Rep(choice<number, X>(measure, half, quarter, eighth)),\n    setx({gain: x => x.gain * x.span / val(whole, x)}),\n    x => when(x.index % 2 === 1, setx({gain: x.gain / 2})),\n    x => when(lte(x.span, quarter), translate<X>(choice(0, rel(1 / 2))))\n  )\n}\n\nfunction Motif<X extends MyEntity> (): Fun<X[], X> {\n  return trim((x: X) => ({\n    lead: Lead<X>(),\n    pad: Pad<X>(),\n    bass: Bass<X>(),\n    drum: Drum<X>()\n  }[x.role]))\n}\n\nfunction Sync<X extends Entity> (p: Exp<number, X>, f: Exp<X[], X>): Fun<X[], X> {\n  return use(rand, sync => pipe<X>(\n    f,\n    use(p, p => seed<X>(p < sync ? rand : sync))\n  ))\n}\n\nfunction Layout<X extends MyEntity> (f: Exp<X[], X>): Fun<X[], X> {\n  return pipeDeep(\n    x => x.depth,\n    Sync(x => x.monotony, split(clone(2))),\n    f\n  )\n}\n\nfunction Layer<X extends MyEntity> (): Fun<X[], X> {\n  return pipe(\n    seed(x => x.piece),\n    Layout(when(pr(x => x.diversity), seed<X>(rand, x => x.layer)))\n  )\n}\n\nfunction Label<X extends MyEntity> (): Fun<X[], X> {\n  return pipe(\n    x => setx({label: choice(...x.labels)}),\n    x => when<X>(x.label === 0, []),\n    x => seed(x.piece, x.label, x.layer)\n  )\n}\n\nfunction Chords<X extends Entity> (): Fun<X[], X> {\n  return pipe(\n    setx({mode: choice(major, minor)}),\n    set({chord: 3}),\n    map([I, IV, V, VI], harmony => set({harmony})),\n    when(x => x.harmony === V, set({chord: 4}))\n  )\n}\n\nfunction Progression<X extends MyEntity> (f: Exp<X[], X>): Fun<X[], X> {\n  return pipe<X>(\n    setx({chords: Chords}),\n    f,\n    x => ChordAppend(choice(...x.chords))\n  )\n}\n\nfunction ChordAppend<X extends Entity> (c: Exp<X, X>): Fun<X, X> {\n  return use(c, ({harmony, key, mode, chord}) => set(\n    {harmony, key, mode, chord}\n  ))\n}\n\nfunction Chord<X extends MyEntity> (): Fun<X, X> {\n  return ChordAppend<X>(\n    first(filter<MyEntity, X>(x => x.chords, overlaps), noop())\n  )\n}\n\nfunction Voices<X extends MyEntity> (): Fun<X[], X> {\n  const Play = (n: number) => gleitz(musyngKite, n)\n  return fork(\n    setx({\n      role: 'pad',\n      play: Play(acousticGrandPiano),\n      labels: [1, 2],\n      color: 2,\n      layer: rand\n    }),\n    setx({\n      role: 'lead',\n      play: Play(violin),\n      labels: [1, 0, 3],\n      color: 0,\n      layer: 1\n    }),\n    setx({\n      role: 'lead',\n      play: Play(piccolo),\n      labels: [0, 2, 3],\n      color: 1,\n      layer: 1\n    }),\n    setx({\n      role: 'bass',\n      play: Play(contrabass),\n      labels: [1, 2],\n      color: 3,\n      layer: rand\n    }),\n    pipe(\n      clone(x => x.drums),\n      seed<X>(rand),\n      setx({\n        role: 'drum',\n        play: drums.font,\n        freq: choice(...drums.hats, ...drums.snares, ...drums.snares),\n        labels: [1, 2],\n        gain: 1 / 2,\n        color: 4,\n        layer: rand\n      })\n    )\n  )\n}\n\nexport function Globals<X extends MyEntity> (): Fun<X, X> {\n  return setx({\n    piece: round(uniform(0, 10000)),\n    key: round(uniform(0, 12)),\n    tempo: round(uniform(80, 140)),\n    beats: choice(2, 3, 4, 6),\n    beatType: choice(4, 8),\n    monotony: frac(round(uniform(25, 75)), 100),\n    diversity: frac(round(uniform(0, 50)), 100),\n    depth: choice(2, 3, 4)\n  })\n}\n\nexport function Init<X extends MyEntity> (f: Fun<X[], X>): Fun<X[], X> {\n  return pipe(\n    x => seed(x.piece),\n    setx({span: measures(pow(2, x => x.depth))}),\n    f\n  )\n}\n\nexport function Piece<X extends MyEntity> (): Fun<X[], X> {\n  return Init(pipe<X>(\n    setx({chords: Progression(Layer)}),\n    Voices,\n    Layer,\n    Label,\n    Chord,\n    Motif\n  ))\n}\n","import {render} from 'preact'\nimport {\n  fieldset,\n  inputs,\n  label,\n  number,\n  presets,\n  propKey, toggle,\n  vis\n} from '@dipl/dom-vis'\nimport {EntityDefaults, measure, repeat} from '@dipl/lib-music'\nimport {fork, Fun, map, set} from '@dipl/lib-core'\nimport {Globals, Init, MyEntity, Piece} from './grammar'\n\nconst entity: MyEntity = {\n  ...EntityDefaults,\n  piece: Math.round(Math.random() * 10000),\n  depth: 4,\n  monotony: 0.5,\n  diversity: 0.5,\n  layer: 0,\n  label: 0,\n  labels: [1],\n  chord: 3,\n  role: 'drum',\n  chords: [],\n  drums: 0,\n  release: 0.1\n}\n\nconst input = inputs<MyEntity>(\n  fieldset('Controls', inputs(\n    presets({random: Globals()}),\n    propKey(label, 'piece', number(0, 10000, 1)),\n    propKey(label, 'key', number(0, 12)),\n    propKey(label, 'tempo', number(80, 140)),\n    propKey(label, 'beats', number(2, 6)),\n    propKey(label, 'beatType', number(2, 8)),\n    propKey(label, 'monotony', number(0, 1, 0.01)),\n    propKey(label, 'diversity', number(0, 1, 0.01)),\n    propKey(label, 'depth', number(0, 5)),\n    propKey(label, 'drums', number(0, 6))\n  ))\n)\n\nfunction Lines<X extends MyEntity> (notes: X[]): Fun<X[], X> {\n  return Init(\n    fork(\n      repeat<X>({size: measure}),\n      map(notes, x => set({freq: x.freq}))\n    )\n  )\n}\n\nrender(\n  vis({\n    input,\n    axiom: entity,\n    notes: Piece,\n    lines: Lines\n  }),\n  document.body\n)\n"]}